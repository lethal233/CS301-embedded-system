
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080084e4  080084e4  000184e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008590  08008590  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08008590  08008590  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008590  08008590  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008594  08008594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001020  2000001c  080085b4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  080085b4  0002103c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb66  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002760  00000000  00000000  0002fbab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  000331f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178e3  00000000  00000000  00033fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c04e  00000000  00000000  0004b88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008546e  00000000  00000000  000578d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcd47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  000dcdc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000001c 	.word	0x2000001c
 800020c:	00000000 	.word	0x00000000
 8000210:	080084cc 	.word	0x080084cc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000020 	.word	0x20000020
 800022c:	080084cc 	.word	0x080084cc

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <vApplicationGetIdleTaskMemory+0x28>)
 8000a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	2000003c 	.word	0x2000003c
 8000a38:	20000090 	.word	0x20000090

08000a3c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b096      	sub	sp, #88	; 0x58
 8000a40:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_LED0 */
  osThreadDef(Task_LED0, Func_LED0, osPriorityNormal, 0, 128);
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_FREERTOS_Init+0x7c>)
 8000a44:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000a48:	461d      	mov	r5, r3
 8000a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_LED0Handle = osThreadCreate(osThread(Task_LED0), NULL);
 8000a56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 fb69 	bl	8007134 <osThreadCreate>
 8000a62:	4602      	mov	r2, r0
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_FREERTOS_Init+0x80>)
 8000a66:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_LED1 */
  osThreadDef(Task_LED1, Func_LED1, osPriorityLow, 0, 128);
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_FREERTOS_Init+0x84>)
 8000a6a:	f107 0420 	add.w	r4, r7, #32
 8000a6e:	461d      	mov	r5, r3
 8000a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_LED1Handle = osThreadCreate(osThread(Task_LED1), NULL);
 8000a7c:	f107 0320 	add.w	r3, r7, #32
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f006 fb56 	bl	8007134 <osThreadCreate>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_FREERTOS_Init+0x88>)
 8000a8c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_LCD */
  osThreadDef(Task_LCD, Func_LCD, osPriorityIdle, 0, 128);
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_FREERTOS_Init+0x8c>)
 8000a90:	1d3c      	adds	r4, r7, #4
 8000a92:	461d      	mov	r5, r3
 8000a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_LCDHandle = osThreadCreate(osThread(Task_LCD), NULL);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f006 fb45 	bl	8007134 <osThreadCreate>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_FREERTOS_Init+0x90>)
 8000aae:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000ab0:	bf00      	nop
 8000ab2:	3758      	adds	r7, #88	; 0x58
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab8:	080084f0 	.word	0x080084f0
 8000abc:	20000fe0 	.word	0x20000fe0
 8000ac0:	08008518 	.word	0x08008518
 8000ac4:	20000fe4 	.word	0x20000fe4
 8000ac8:	08008540 	.word	0x08008540
 8000acc:	20000fdc 	.word	0x20000fdc

08000ad0 <Func_LED0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Func_LED0 */
void Func_LED0(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Func_LED0 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <Func_LED0+0x1c>)
 8000ade:	f005 fcab 	bl	8006438 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae6:	f006 fb71 	bl	80071cc <osDelay>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000aea:	e7f5      	b.n	8000ad8 <Func_LED0+0x8>
 8000aec:	40010800 	.word	0x40010800

08000af0 <Func_LED1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Func_LED1 */
void Func_LED1(void const * argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Func_LED1 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000af8:	2104      	movs	r1, #4
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <Func_LED1+0x1c>)
 8000afc:	f005 fc9c 	bl	8006438 <HAL_GPIO_TogglePin>
	  osDelay(400);
 8000b00:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b04:	f006 fb62 	bl	80071cc <osDelay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b08:	e7f6      	b.n	8000af8 <Func_LED1+0x8>
 8000b0a:	bf00      	nop
 8000b0c:	40011400 	.word	0x40011400

08000b10 <Func_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Func_LCD */
void Func_LCD(void const * argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Func_LCD */
  /* Infinite loop */
  for(;;)
  {
	  LCD_Clear(colors[cnt]);
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <Func_LCD+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <Func_LCD+0x44>)
 8000b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f004 fffe 	bl	8005b24 <LCD_Clear>
	  cnt = (cnt+1)%5;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <Func_LCD+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1c59      	adds	r1, r3, #1
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <Func_LCD+0x48>)
 8000b30:	fb83 2301 	smull	r2, r3, r3, r1
 8000b34:	105a      	asrs	r2, r3, #1
 8000b36:	17cb      	asrs	r3, r1, #31
 8000b38:	1ad2      	subs	r2, r2, r3
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	1aca      	subs	r2, r1, r3
 8000b42:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <Func_LCD+0x40>)
 8000b44:	601a      	str	r2, [r3, #0]
	  osDelay(600);
 8000b46:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000b4a:	f006 fb3f 	bl	80071cc <osDelay>
	  LCD_Clear(colors[cnt]);
 8000b4e:	e7e3      	b.n	8000b18 <Func_LCD+0x8>
 8000b50:	20000038 	.word	0x20000038
 8000b54:	20000000 	.word	0x20000000
 8000b58:	66666667 	.word	0x66666667

08000b5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_GPIO_Init+0x9c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <MX_GPIO_Init+0x9c>)
 8000b76:	f043 0320 	orr.w	r3, r3, #32
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_GPIO_Init+0x9c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0320 	and.w	r3, r3, #32
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_GPIO_Init+0x9c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a1a      	ldr	r2, [pc, #104]	; (8000bf8 <MX_GPIO_Init+0x9c>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_GPIO_Init+0x9c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	4815      	ldr	r0, [pc, #84]	; (8000bfc <MX_GPIO_Init+0xa0>)
 8000ba8:	f005 fc2e 	bl	8006408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4813      	ldr	r0, [pc, #76]	; (8000c00 <MX_GPIO_Init+0xa4>)
 8000bb2:	f005 fc29 	bl	8006408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480b      	ldr	r0, [pc, #44]	; (8000bfc <MX_GPIO_Init+0xa0>)
 8000bd0:	f005 fab0 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2302      	movs	r3, #2
 8000be2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4619      	mov	r1, r3
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_GPIO_Init+0xa4>)
 8000bec:	f005 faa2 	bl	8006134 <HAL_GPIO_Init>

}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	40011400 	.word	0x40011400

08000c04 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <LCD_WR_REG+0x40>)
 8000c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c14:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <LCD_WR_REG+0x40>)
 8000c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LCD_WR_REG+0x44>)
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <LCD_WR_REG+0x40>)
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <LCD_WR_REG+0x40>)
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <LCD_WR_REG+0x40>)
 8000c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c36:	611a      	str	r2, [r3, #16]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40011000 	.word	0x40011000
 8000c48:	40010c00 	.word	0x40010c00

08000c4c <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <LCD_WR_DATAX+0x40>)
 8000c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5c:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <LCD_WR_DATAX+0x40>)
 8000c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c64:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LCD_WR_DATAX+0x44>)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <LCD_WR_DATAX+0x40>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <LCD_WR_DATAX+0x40>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <LCD_WR_DATAX+0x40>)
 8000c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7e:	611a      	str	r2, [r3, #16]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40010c00 	.word	0x40010c00

08000c94 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <LCD_RD_DATA+0x7c>)
 8000c9c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ca0:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <LCD_RD_DATA+0x7c>)
 8000ca4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ca8:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <LCD_RD_DATA+0x7c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <LCD_RD_DATA+0x80>)
 8000cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb6:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <LCD_RD_DATA+0x80>)
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <LCD_RD_DATA+0x80>)
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <LCD_RD_DATA+0x84>)
 8000cc8:	889b      	ldrh	r3, [r3, #4]
 8000cca:	f648 1289 	movw	r2, #35209	; 0x8989
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d102      	bne.n	8000cd8 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f005 f92c 	bl	8005f30 <HAL_Delay>
	t = DATAIN
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <LCD_RD_DATA+0x7c>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <LCD_RD_DATA+0x80>)
 8000ce0:	2240      	movs	r2, #64	; 0x40
 8000ce2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <LCD_RD_DATA+0x80>)
 8000ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cea:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <LCD_RD_DATA+0x7c>)
 8000cee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000cf2:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <LCD_RD_DATA+0x7c>)
 8000cf6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000cfa:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <LCD_RD_DATA+0x7c>)
 8000cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d02:	60da      	str	r2, [r3, #12]
	return t;
 8000d04:	88fb      	ldrh	r3, [r7, #6]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40011000 	.word	0x40011000
 8000d18:	20000fe8 	.word	0x20000fe8

08000d1c <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	460a      	mov	r2, r1
 8000d26:	80fb      	strh	r3, [r7, #6]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff68 	bl	8000c04 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <LCD_WriteReg+0x4c>)
 8000d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <LCD_WriteReg+0x4c>)
 8000d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d42:	615a      	str	r2, [r3, #20]
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <LCD_WriteReg+0x50>)
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	60d3      	str	r3, [r2, #12]
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <LCD_WriteReg+0x4c>)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <LCD_WriteReg+0x4c>)
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <LCD_WriteReg+0x4c>)
 8000d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5c:	611a      	str	r2, [r3, #16]
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40010c00 	.word	0x40010c00

08000d70 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff41 	bl	8000c04 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000d82:	f7ff ff87 	bl	8000c94 <LCD_RD_DATA>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <LCD_WriteRAM_Prepare+0x14>)
 8000d96:	891b      	ldrh	r3, [r3, #8]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff33 	bl	8000c04 <LCD_WR_REG>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000fe8 	.word	0x20000fe8

08000da8 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	460a      	mov	r2, r1
 8000db2:	80fb      	strh	r3, [r7, #6]
 8000db4:	4613      	mov	r3, r2
 8000db6:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000db8:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <LCD_SetCursor+0x1e0>)
 8000dba:	889b      	ldrh	r3, [r3, #4]
 8000dbc:	f249 3241 	movw	r2, #37697	; 0x9341
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d005      	beq.n	8000dd0 <LCD_SetCursor+0x28>
 8000dc4:	4b70      	ldr	r3, [pc, #448]	; (8000f88 <LCD_SetCursor+0x1e0>)
 8000dc6:	889b      	ldrh	r3, [r3, #4]
 8000dc8:	f245 3210 	movw	r2, #21264	; 0x5310
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d164      	bne.n	8000e9a <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000dd0:	4b6d      	ldr	r3, [pc, #436]	; (8000f88 <LCD_SetCursor+0x1e0>)
 8000dd2:	895b      	ldrh	r3, [r3, #10]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff15 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000dda:	4b6c      	ldr	r3, [pc, #432]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	4b6a      	ldr	r3, [pc, #424]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <LCD_SetCursor+0x1e8>)
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	4b65      	ldr	r3, [pc, #404]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	4b64      	ldr	r3, [pc, #400]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	4b62      	ldr	r3, [pc, #392]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e06:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000e08:	4b60      	ldr	r3, [pc, #384]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	4b5e      	ldr	r3, [pc, #376]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	4a5d      	ldr	r2, [pc, #372]	; (8000f90 <LCD_SetCursor+0x1e8>)
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	60d3      	str	r3, [r2, #12]
 8000e20:	4b5a      	ldr	r3, [pc, #360]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <LCD_SetCursor+0x1e0>)
 8000e36:	899b      	ldrh	r3, [r3, #12]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fee3 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000e3e:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b4e      	ldr	r3, [pc, #312]	; (8000f90 <LCD_SetCursor+0x1e8>)
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000e6c:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	88bb      	ldrh	r3, [r7, #4]
 8000e7e:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <LCD_SetCursor+0x1e8>)
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	60d3      	str	r3, [r2, #12]
 8000e84:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	611a      	str	r2, [r3, #16]
 8000e90:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e96:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000e98:	e248      	b.n	800132c <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <LCD_SetCursor+0x1e0>)
 8000e9c:	889b      	ldrh	r3, [r3, #4]
 8000e9e:	f646 0204 	movw	r2, #26628	; 0x6804
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d176      	bne.n	8000f94 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000ea6:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <LCD_SetCursor+0x1e0>)
 8000ea8:	799b      	ldrb	r3, [r3, #6]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d106      	bne.n	8000ebc <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000eae:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <LCD_SetCursor+0x1e0>)
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <LCD_SetCursor+0x1e0>)
 8000ebe:	895b      	ldrh	r3, [r3, #10]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe9f 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <LCD_SetCursor+0x1e8>)
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <LCD_SetCursor+0x1e8>)
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	60d3      	str	r3, [r2, #12]
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <LCD_SetCursor+0x1e0>)
 8000f22:	899b      	ldrh	r3, [r3, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fe6d 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <LCD_SetCursor+0x1e8>)
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <LCD_SetCursor+0x1e8>)
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	60d3      	str	r3, [r2, #12]
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <LCD_SetCursor+0x1e4>)
 8000f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f82:	611a      	str	r2, [r3, #16]
}
 8000f84:	e1d2      	b.n	800132c <LCD_SetCursor+0x584>
 8000f86:	bf00      	nop
 8000f88:	20000fe8 	.word	0x20000fe8
 8000f8c:	40011000 	.word	0x40011000
 8000f90:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000f94:	4b99      	ldr	r3, [pc, #612]	; (80011fc <LCD_SetCursor+0x454>)
 8000f96:	889b      	ldrh	r3, [r3, #4]
 8000f98:	f641 1263 	movw	r2, #6499	; 0x1963
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	f040 8133 	bne.w	8001208 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000fa2:	4b96      	ldr	r3, [pc, #600]	; (80011fc <LCD_SetCursor+0x454>)
 8000fa4:	799b      	ldrb	r3, [r3, #6]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d163      	bne.n	8001072 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000faa:	4b94      	ldr	r3, [pc, #592]	; (80011fc <LCD_SetCursor+0x454>)
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000fb8:	4b90      	ldr	r3, [pc, #576]	; (80011fc <LCD_SetCursor+0x454>)
 8000fba:	895b      	ldrh	r3, [r3, #10]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe21 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000fc2:	4b8f      	ldr	r3, [pc, #572]	; (8001200 <LCD_SetCursor+0x458>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	4b8d      	ldr	r3, [pc, #564]	; (8001200 <LCD_SetCursor+0x458>)
 8000fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	4b8c      	ldr	r3, [pc, #560]	; (8001204 <LCD_SetCursor+0x45c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	4b89      	ldr	r3, [pc, #548]	; (8001200 <LCD_SetCursor+0x458>)
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	4b88      	ldr	r3, [pc, #544]	; (8001200 <LCD_SetCursor+0x458>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	4b86      	ldr	r3, [pc, #536]	; (8001200 <LCD_SetCursor+0x458>)
 8000fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fea:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000fec:	4b84      	ldr	r3, [pc, #528]	; (8001200 <LCD_SetCursor+0x458>)
 8000fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	4b82      	ldr	r3, [pc, #520]	; (8001200 <LCD_SetCursor+0x458>)
 8000ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	4b81      	ldr	r3, [pc, #516]	; (8001204 <LCD_SetCursor+0x45c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	4b7f      	ldr	r3, [pc, #508]	; (8001200 <LCD_SetCursor+0x458>)
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	4b7d      	ldr	r3, [pc, #500]	; (8001200 <LCD_SetCursor+0x458>)
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	4b7c      	ldr	r3, [pc, #496]	; (8001200 <LCD_SetCursor+0x458>)
 8001010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001014:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8001016:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <LCD_SetCursor+0x458>)
 8001018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	4b78      	ldr	r3, [pc, #480]	; (8001200 <LCD_SetCursor+0x458>)
 8001020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b75      	ldr	r3, [pc, #468]	; (8001204 <LCD_SetCursor+0x45c>)
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	4b73      	ldr	r3, [pc, #460]	; (8001200 <LCD_SetCursor+0x458>)
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	615a      	str	r2, [r3, #20]
 8001036:	4b72      	ldr	r3, [pc, #456]	; (8001200 <LCD_SetCursor+0x458>)
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	4b70      	ldr	r3, [pc, #448]	; (8001200 <LCD_SetCursor+0x458>)
 800103e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001042:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001044:	4b6e      	ldr	r3, [pc, #440]	; (8001200 <LCD_SetCursor+0x458>)
 8001046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	4b6c      	ldr	r3, [pc, #432]	; (8001200 <LCD_SetCursor+0x458>)
 800104e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4a6b      	ldr	r2, [pc, #428]	; (8001204 <LCD_SetCursor+0x45c>)
 8001058:	b2db      	uxtb	r3, r3
 800105a:	60d3      	str	r3, [r2, #12]
 800105c:	4b68      	ldr	r3, [pc, #416]	; (8001200 <LCD_SetCursor+0x458>)
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	4b67      	ldr	r3, [pc, #412]	; (8001200 <LCD_SetCursor+0x458>)
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	4b65      	ldr	r3, [pc, #404]	; (8001200 <LCD_SetCursor+0x458>)
 800106a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	e061      	b.n	8001136 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8001072:	4b62      	ldr	r3, [pc, #392]	; (80011fc <LCD_SetCursor+0x454>)
 8001074:	895b      	ldrh	r3, [r3, #10]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fdc4 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 800107c:	4b60      	ldr	r3, [pc, #384]	; (8001200 <LCD_SetCursor+0x458>)
 800107e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	4b5e      	ldr	r3, [pc, #376]	; (8001200 <LCD_SetCursor+0x458>)
 8001086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108a:	615a      	str	r2, [r3, #20]
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b5c      	ldr	r3, [pc, #368]	; (8001204 <LCD_SetCursor+0x45c>)
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	4b5a      	ldr	r3, [pc, #360]	; (8001200 <LCD_SetCursor+0x458>)
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	4b58      	ldr	r3, [pc, #352]	; (8001200 <LCD_SetCursor+0x458>)
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	611a      	str	r2, [r3, #16]
 80010a2:	4b57      	ldr	r3, [pc, #348]	; (8001200 <LCD_SetCursor+0x458>)
 80010a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80010aa:	4b55      	ldr	r3, [pc, #340]	; (8001200 <LCD_SetCursor+0x458>)
 80010ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <LCD_SetCursor+0x458>)
 80010b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b8:	615a      	str	r2, [r3, #20]
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	4a51      	ldr	r2, [pc, #324]	; (8001204 <LCD_SetCursor+0x45c>)
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	60d3      	str	r3, [r2, #12]
 80010c2:	4b4f      	ldr	r3, [pc, #316]	; (8001200 <LCD_SetCursor+0x458>)
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <LCD_SetCursor+0x458>)
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <LCD_SetCursor+0x458>)
 80010d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80010d6:	4b4a      	ldr	r3, [pc, #296]	; (8001200 <LCD_SetCursor+0x458>)
 80010d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	4b48      	ldr	r3, [pc, #288]	; (8001200 <LCD_SetCursor+0x458>)
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	4b45      	ldr	r3, [pc, #276]	; (80011fc <LCD_SetCursor+0x454>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	121a      	asrs	r2, r3, #8
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <LCD_SetCursor+0x45c>)
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	4b43      	ldr	r3, [pc, #268]	; (8001200 <LCD_SetCursor+0x458>)
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	615a      	str	r2, [r3, #20]
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <LCD_SetCursor+0x458>)
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	4b40      	ldr	r3, [pc, #256]	; (8001200 <LCD_SetCursor+0x458>)
 8001100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001104:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001106:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <LCD_SetCursor+0x458>)
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <LCD_SetCursor+0x458>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	4b39      	ldr	r3, [pc, #228]	; (80011fc <LCD_SetCursor+0x454>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	3b01      	subs	r3, #1
 800111c:	4a39      	ldr	r2, [pc, #228]	; (8001204 <LCD_SetCursor+0x45c>)
 800111e:	b2db      	uxtb	r3, r3
 8001120:	60d3      	str	r3, [r2, #12]
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <LCD_SetCursor+0x458>)
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	4b35      	ldr	r3, [pc, #212]	; (8001200 <LCD_SetCursor+0x458>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	4b34      	ldr	r3, [pc, #208]	; (8001200 <LCD_SetCursor+0x458>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <LCD_SetCursor+0x454>)
 8001138:	899b      	ldrh	r3, [r3, #12]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fd62 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <LCD_SetCursor+0x458>)
 8001142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <LCD_SetCursor+0x458>)
 800114a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	88bb      	ldrh	r3, [r7, #4]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <LCD_SetCursor+0x45c>)
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <LCD_SetCursor+0x458>)
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	615a      	str	r2, [r3, #20]
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <LCD_SetCursor+0x458>)
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <LCD_SetCursor+0x458>)
 8001168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <LCD_SetCursor+0x458>)
 8001170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <LCD_SetCursor+0x458>)
 8001178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	4a20      	ldr	r2, [pc, #128]	; (8001204 <LCD_SetCursor+0x45c>)
 8001182:	b2db      	uxtb	r3, r3
 8001184:	60d3      	str	r3, [r2, #12]
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <LCD_SetCursor+0x458>)
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <LCD_SetCursor+0x458>)
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <LCD_SetCursor+0x458>)
 8001194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001198:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <LCD_SetCursor+0x458>)
 800119c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <LCD_SetCursor+0x458>)
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <LCD_SetCursor+0x454>)
 80011ac:	885b      	ldrh	r3, [r3, #2]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	121a      	asrs	r2, r3, #8
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <LCD_SetCursor+0x45c>)
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <LCD_SetCursor+0x458>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <LCD_SetCursor+0x458>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <LCD_SetCursor+0x458>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <LCD_SetCursor+0x458>)
 80011cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <LCD_SetCursor+0x458>)
 80011d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <LCD_SetCursor+0x454>)
 80011dc:	885b      	ldrh	r3, [r3, #2]
 80011de:	3b01      	subs	r3, #1
 80011e0:	4a08      	ldr	r2, [pc, #32]	; (8001204 <LCD_SetCursor+0x45c>)
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	60d3      	str	r3, [r2, #12]
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <LCD_SetCursor+0x458>)
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <LCD_SetCursor+0x458>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <LCD_SetCursor+0x458>)
 80011f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f8:	611a      	str	r2, [r3, #16]
}
 80011fa:	e097      	b.n	800132c <LCD_SetCursor+0x584>
 80011fc:	20000fe8 	.word	0x20000fe8
 8001200:	40011000 	.word	0x40011000
 8001204:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <LCD_SetCursor+0x58c>)
 800120a:	889b      	ldrh	r3, [r3, #4]
 800120c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001210:	4293      	cmp	r3, r2
 8001212:	d172      	bne.n	80012fa <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001214:	4b47      	ldr	r3, [pc, #284]	; (8001334 <LCD_SetCursor+0x58c>)
 8001216:	895b      	ldrh	r3, [r3, #10]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fcf3 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <LCD_SetCursor+0x590>)
 8001220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	4b44      	ldr	r3, [pc, #272]	; (8001338 <LCD_SetCursor+0x590>)
 8001228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122c:	615a      	str	r2, [r3, #20]
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b41      	ldr	r3, [pc, #260]	; (800133c <LCD_SetCursor+0x594>)
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <LCD_SetCursor+0x590>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <LCD_SetCursor+0x590>)
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <LCD_SetCursor+0x590>)
 8001246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <LCD_SetCursor+0x58c>)
 800124e:	895b      	ldrh	r3, [r3, #10]
 8001250:	3301      	adds	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fcd5 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 800125a:	4b37      	ldr	r3, [pc, #220]	; (8001338 <LCD_SetCursor+0x590>)
 800125c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <LCD_SetCursor+0x590>)
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4a33      	ldr	r2, [pc, #204]	; (800133c <LCD_SetCursor+0x594>)
 800126e:	b2db      	uxtb	r3, r3
 8001270:	60d3      	str	r3, [r2, #12]
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <LCD_SetCursor+0x590>)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <LCD_SetCursor+0x590>)
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <LCD_SetCursor+0x590>)
 8001280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001284:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <LCD_SetCursor+0x58c>)
 8001288:	899b      	ldrh	r3, [r3, #12]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fcba 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <LCD_SetCursor+0x590>)
 8001292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <LCD_SetCursor+0x590>)
 800129a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <LCD_SetCursor+0x594>)
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <LCD_SetCursor+0x590>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <LCD_SetCursor+0x590>)
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <LCD_SetCursor+0x590>)
 80012b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012bc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <LCD_SetCursor+0x58c>)
 80012c0:	899b      	ldrh	r3, [r3, #12]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fc9c 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <LCD_SetCursor+0x590>)
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <LCD_SetCursor+0x590>)
 80012d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <LCD_SetCursor+0x594>)
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	60d3      	str	r3, [r2, #12]
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <LCD_SetCursor+0x590>)
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <LCD_SetCursor+0x590>)
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <LCD_SetCursor+0x590>)
 80012f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f6:	611a      	str	r2, [r3, #16]
}
 80012f8:	e018      	b.n	800132c <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <LCD_SetCursor+0x58c>)
 80012fc:	799b      	ldrb	r3, [r3, #6]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <LCD_SetCursor+0x58c>)
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b29b      	uxth	r3, r3
 800130c:	3b01      	subs	r3, #1
 800130e:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <LCD_SetCursor+0x58c>)
 8001312:	895b      	ldrh	r3, [r3, #10]
 8001314:	88fa      	ldrh	r2, [r7, #6]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcff 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <LCD_SetCursor+0x58c>)
 8001320:	899b      	ldrh	r3, [r3, #12]
 8001322:	88ba      	ldrh	r2, [r7, #4]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fcf8 	bl	8000d1c <LCD_WriteReg>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000fe8 	.word	0x20000fe8
 8001338:	40011000 	.word	0x40011000
 800133c:	40010c00 	.word	0x40010c00

08001340 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8001352:	4b78      	ldr	r3, [pc, #480]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 8001354:	799b      	ldrb	r3, [r3, #6]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10b      	bne.n	8001372 <LCD_Scan_Dir+0x32>
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 800135c:	889b      	ldrh	r3, [r3, #4]
 800135e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001362:	4293      	cmp	r3, r2
 8001364:	d005      	beq.n	8001372 <LCD_Scan_Dir+0x32>
 8001366:	4b73      	ldr	r3, [pc, #460]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 8001368:	889b      	ldrh	r3, [r3, #4]
 800136a:	f641 1263 	movw	r2, #6499	; 0x1963
 800136e:	4293      	cmp	r3, r2
 8001370:	d109      	bne.n	8001386 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001372:	4b70      	ldr	r3, [pc, #448]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 8001374:	799b      	ldrb	r3, [r3, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d134      	bne.n	80013e4 <LCD_Scan_Dir+0xa4>
 800137a:	4b6e      	ldr	r3, [pc, #440]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 800137c:	889b      	ldrh	r3, [r3, #4]
 800137e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001382:	4293      	cmp	r3, r2
 8001384:	d12e      	bne.n	80013e4 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b07      	cmp	r3, #7
 800138a:	d82b      	bhi.n	80013e4 <LCD_Scan_Dir+0xa4>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <LCD_Scan_Dir+0x54>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013b5 	.word	0x080013b5
 8001398:	080013bb 	.word	0x080013bb
 800139c:	080013c1 	.word	0x080013c1
 80013a0:	080013c7 	.word	0x080013c7
 80013a4:	080013cd 	.word	0x080013cd
 80013a8:	080013d3 	.word	0x080013d3
 80013ac:	080013d9 	.word	0x080013d9
 80013b0:	080013df 	.word	0x080013df
		{
		case 0:
			dir = 6;
 80013b4:	2306      	movs	r3, #6
 80013b6:	71fb      	strb	r3, [r7, #7]
			break;
 80013b8:	e014      	b.n	80013e4 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80013ba:	2307      	movs	r3, #7
 80013bc:	71fb      	strb	r3, [r7, #7]
			break;
 80013be:	e011      	b.n	80013e4 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80013c0:	2304      	movs	r3, #4
 80013c2:	71fb      	strb	r3, [r7, #7]
			break;
 80013c4:	e00e      	b.n	80013e4 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80013c6:	2305      	movs	r3, #5
 80013c8:	71fb      	strb	r3, [r7, #7]
			break;
 80013ca:	e00b      	b.n	80013e4 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	71fb      	strb	r3, [r7, #7]
			break;
 80013d0:	e008      	b.n	80013e4 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	71fb      	strb	r3, [r7, #7]
			break;
 80013d6:	e005      	b.n	80013e4 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80013d8:	2303      	movs	r3, #3
 80013da:	71fb      	strb	r3, [r7, #7]
			break;
 80013dc:	e002      	b.n	80013e4 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	71fb      	strb	r3, [r7, #7]
			break;
 80013e2:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 80013e6:	889b      	ldrh	r3, [r3, #4]
 80013e8:	f249 3241 	movw	r2, #37697	; 0x9341
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d018      	beq.n	8001422 <LCD_Scan_Dir+0xe2>
 80013f0:	4b50      	ldr	r3, [pc, #320]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 80013f2:	889b      	ldrh	r3, [r3, #4]
 80013f4:	f646 0204 	movw	r2, #26628	; 0x6804
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d012      	beq.n	8001422 <LCD_Scan_Dir+0xe2>
 80013fc:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	f245 3210 	movw	r2, #21264	; 0x5310
 8001404:	4293      	cmp	r3, r2
 8001406:	d00c      	beq.n	8001422 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001408:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 800140a:	889b      	ldrh	r3, [r3, #4]
 800140c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001410:	4293      	cmp	r3, r2
 8001412:	d006      	beq.n	8001422 <LCD_Scan_Dir+0xe2>
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 8001416:	889b      	ldrh	r3, [r3, #4]
 8001418:	f641 1263 	movw	r2, #6499	; 0x1963
 800141c:	4293      	cmp	r3, r2
 800141e:	f040 8250 	bne.w	80018c2 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b07      	cmp	r3, #7
 8001426:	d836      	bhi.n	8001496 <LCD_Scan_Dir+0x156>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <LCD_Scan_Dir+0xf0>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001497 	.word	0x08001497
 8001434:	08001451 	.word	0x08001451
 8001438:	0800145b 	.word	0x0800145b
 800143c:	08001465 	.word	0x08001465
 8001440:	0800146f 	.word	0x0800146f
 8001444:	08001479 	.word	0x08001479
 8001448:	08001483 	.word	0x08001483
 800144c:	0800148d 	.word	0x0800148d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001456:	81fb      	strh	r3, [r7, #14]
			break;
 8001458:	e01d      	b.n	8001496 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001460:	81fb      	strh	r3, [r7, #14]
			break;
 8001462:	e018      	b.n	8001496 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800146a:	81fb      	strh	r3, [r7, #14]
			break;
 800146c:	e013      	b.n	8001496 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	81fb      	strh	r3, [r7, #14]
			break;
 8001476:	e00e      	b.n	8001496 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800147e:	81fb      	strh	r3, [r7, #14]
			break;
 8001480:	e009      	b.n	8001496 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001488:	81fb      	strh	r3, [r7, #14]
			break;
 800148a:	e004      	b.n	8001496 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001492:	81fb      	strh	r3, [r7, #14]
			break;
 8001494:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	f245 5210 	movw	r2, #21776	; 0x5510
 800149e:	4293      	cmp	r3, r2
 80014a0:	d103      	bne.n	80014aa <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80014a2:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80014a6:	81bb      	strh	r3, [r7, #12]
 80014a8:	e001      	b.n	80014ae <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80014aa:	2336      	movs	r3, #54	; 0x36
 80014ac:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 80014b0:	889b      	ldrh	r3, [r3, #4]
 80014b2:	f245 3210 	movw	r2, #21264	; 0x5310
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00f      	beq.n	80014da <LCD_Scan_Dir+0x19a>
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	f245 5210 	movw	r2, #21776	; 0x5510
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d009      	beq.n	80014da <LCD_Scan_Dir+0x19a>
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 80014c8:	889b      	ldrh	r3, [r3, #4]
 80014ca:	f641 1263 	movw	r2, #6499	; 0x1963
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d003      	beq.n	80014da <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80014d2:	89fb      	ldrh	r3, [r7, #14]
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 80014dc:	889b      	ldrh	r3, [r3, #4]
 80014de:	f646 0204 	movw	r2, #26628	; 0x6804
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d103      	bne.n	80014ee <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80014e6:	89fb      	ldrh	r3, [r7, #14]
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80014ee:	89fa      	ldrh	r2, [r7, #14]
 80014f0:	89bb      	ldrh	r3, [r7, #12]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fc11 	bl	8000d1c <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 80014fc:	889b      	ldrh	r3, [r3, #4]
 80014fe:	f641 1263 	movw	r2, #6499	; 0x1963
 8001502:	4293      	cmp	r3, r2
 8001504:	d028      	beq.n	8001558 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 8001512:	881a      	ldrh	r2, [r3, #0]
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 8001516:	885b      	ldrh	r3, [r3, #2]
 8001518:	429a      	cmp	r2, r3
 800151a:	d21d      	bcs.n	8001558 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 8001524:	885a      	ldrh	r2, [r3, #2]
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 8001528:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800152a:	4a02      	ldr	r2, [pc, #8]	; (8001534 <LCD_Scan_Dir+0x1f4>)
 800152c:	897b      	ldrh	r3, [r7, #10]
 800152e:	8053      	strh	r3, [r2, #2]
 8001530:	e012      	b.n	8001558 <LCD_Scan_Dir+0x218>
 8001532:	bf00      	nop
 8001534:	20000fe8 	.word	0x20000fe8
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001538:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 800153a:	881a      	ldrh	r2, [r3, #0]
 800153c:	4b7e      	ldr	r3, [pc, #504]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 800153e:	885b      	ldrh	r3, [r3, #2]
 8001540:	429a      	cmp	r2, r3
 8001542:	d909      	bls.n	8001558 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001544:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800154a:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 800154c:	885a      	ldrh	r2, [r3, #2]
 800154e:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 8001550:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001552:	4a79      	ldr	r2, [pc, #484]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001558:	4b77      	ldr	r3, [pc, #476]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001560:	4293      	cmp	r3, r2
 8001562:	f040 80ef 	bne.w	8001744 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001566:	4b74      	ldr	r3, [pc, #464]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 8001568:	895b      	ldrh	r3, [r3, #10]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fb4a 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001570:	4b72      	ldr	r3, [pc, #456]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	4b70      	ldr	r3, [pc, #448]	; (800173c <LCD_Scan_Dir+0x3fc>)
 800157a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <LCD_Scan_Dir+0x400>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	4b6d      	ldr	r3, [pc, #436]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	615a      	str	r2, [r3, #20]
 800158c:	4b6b      	ldr	r3, [pc, #428]	; (800173c <LCD_Scan_Dir+0x3fc>)
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	4b6a      	ldr	r3, [pc, #424]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001598:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 800159a:	4b67      	ldr	r3, [pc, #412]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 800159c:	895b      	ldrh	r3, [r3, #10]
 800159e:	3301      	adds	r3, #1
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fb2e 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015a8:	4b64      	ldr	r3, [pc, #400]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80015aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	4b62      	ldr	r3, [pc, #392]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80015b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	4b61      	ldr	r3, [pc, #388]	; (8001740 <LCD_Scan_Dir+0x400>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	4b5f      	ldr	r3, [pc, #380]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	4b5d      	ldr	r3, [pc, #372]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	4b5c      	ldr	r3, [pc, #368]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80015cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80015d2:	4b59      	ldr	r3, [pc, #356]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 80015d4:	895b      	ldrh	r3, [r3, #10]
 80015d6:	3302      	adds	r3, #2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb12 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80015e0:	4b56      	ldr	r3, [pc, #344]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80015e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	4b54      	ldr	r3, [pc, #336]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80015ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	4b51      	ldr	r3, [pc, #324]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	121a      	asrs	r2, r3, #8
 80015f8:	4b51      	ldr	r3, [pc, #324]	; (8001740 <LCD_Scan_Dir+0x400>)
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	4b4f      	ldr	r3, [pc, #316]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	615a      	str	r2, [r3, #20]
 8001602:	4b4e      	ldr	r3, [pc, #312]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	4b4c      	ldr	r3, [pc, #304]	; (800173c <LCD_Scan_Dir+0x3fc>)
 800160a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001610:	4b49      	ldr	r3, [pc, #292]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 8001612:	895b      	ldrh	r3, [r3, #10]
 8001614:	3303      	adds	r3, #3
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff faf3 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800161e:	4b47      	ldr	r3, [pc, #284]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	4b45      	ldr	r3, [pc, #276]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	3b01      	subs	r3, #1
 8001634:	4a42      	ldr	r2, [pc, #264]	; (8001740 <LCD_Scan_Dir+0x400>)
 8001636:	b2db      	uxtb	r3, r3
 8001638:	60d3      	str	r3, [r2, #12]
 800163a:	4b40      	ldr	r3, [pc, #256]	; (800173c <LCD_Scan_Dir+0x3fc>)
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	4b3e      	ldr	r3, [pc, #248]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	611a      	str	r2, [r3, #16]
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800164e:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 8001650:	899b      	ldrh	r3, [r3, #12]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fad6 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001658:	4b38      	ldr	r3, [pc, #224]	; (800173c <LCD_Scan_Dir+0x3fc>)
 800165a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	615a      	str	r2, [r3, #20]
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <LCD_Scan_Dir+0x400>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	4b30      	ldr	r3, [pc, #192]	; (800173c <LCD_Scan_Dir+0x3fc>)
 800167c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001680:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8001682:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 8001684:	899b      	ldrh	r3, [r3, #12]
 8001686:	3301      	adds	r3, #1
 8001688:	b29b      	uxth	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff faba 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <LCD_Scan_Dir+0x3fc>)
 800169a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <LCD_Scan_Dir+0x400>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	4b25      	ldr	r3, [pc, #148]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	611a      	str	r2, [r3, #16]
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80016b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 80016bc:	899b      	ldrh	r3, [r3, #12]
 80016be:	3302      	adds	r3, #2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fa9e 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80016ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80016d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d6:	615a      	str	r2, [r3, #20]
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 80016da:	885b      	ldrh	r3, [r3, #2]
 80016dc:	3b01      	subs	r3, #1
 80016de:	121a      	asrs	r2, r3, #8
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <LCD_Scan_Dir+0x400>)
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <LCD_Scan_Dir+0x3fc>)
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 80016fa:	899b      	ldrh	r3, [r3, #12]
 80016fc:	3303      	adds	r3, #3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fa7f 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001714:	615a      	str	r2, [r3, #20]
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <LCD_Scan_Dir+0x3f8>)
 8001718:	885b      	ldrh	r3, [r3, #2]
 800171a:	3b01      	subs	r3, #1
 800171c:	4a08      	ldr	r2, [pc, #32]	; (8001740 <LCD_Scan_Dir+0x400>)
 800171e:	b2db      	uxtb	r3, r3
 8001720:	60d3      	str	r3, [r2, #12]
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <LCD_Scan_Dir+0x3fc>)
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	4b03      	ldr	r3, [pc, #12]	; (800173c <LCD_Scan_Dir+0x3fc>)
 8001730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001734:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001736:	e10a      	b.n	800194e <LCD_Scan_Dir+0x60e>
 8001738:	20000fe8 	.word	0x20000fe8
 800173c:	40011000 	.word	0x40011000
 8001740:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001744:	4b84      	ldr	r3, [pc, #528]	; (8001958 <LCD_Scan_Dir+0x618>)
 8001746:	895b      	ldrh	r3, [r3, #10]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fa5b 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800174e:	4b83      	ldr	r3, [pc, #524]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	4b81      	ldr	r3, [pc, #516]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	4b80      	ldr	r3, [pc, #512]	; (8001960 <LCD_Scan_Dir+0x620>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	4b7d      	ldr	r3, [pc, #500]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	615a      	str	r2, [r3, #20]
 800176a:	4b7c      	ldr	r3, [pc, #496]	; (800195c <LCD_Scan_Dir+0x61c>)
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	4b7a      	ldr	r3, [pc, #488]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001776:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001778:	4b78      	ldr	r3, [pc, #480]	; (800195c <LCD_Scan_Dir+0x61c>)
 800177a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	4b76      	ldr	r3, [pc, #472]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	4b75      	ldr	r3, [pc, #468]	; (8001960 <LCD_Scan_Dir+0x620>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	4b71      	ldr	r3, [pc, #452]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	4b70      	ldr	r3, [pc, #448]	; (800195c <LCD_Scan_Dir+0x61c>)
 800179c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80017a2:	4b6e      	ldr	r3, [pc, #440]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	4b6c      	ldr	r3, [pc, #432]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	4b69      	ldr	r3, [pc, #420]	; (8001958 <LCD_Scan_Dir+0x618>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	121a      	asrs	r2, r3, #8
 80017ba:	4b69      	ldr	r3, [pc, #420]	; (8001960 <LCD_Scan_Dir+0x620>)
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	4b67      	ldr	r3, [pc, #412]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	4b65      	ldr	r3, [pc, #404]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	4b64      	ldr	r3, [pc, #400]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80017d2:	4b62      	ldr	r3, [pc, #392]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	4b60      	ldr	r3, [pc, #384]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <LCD_Scan_Dir+0x618>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	4a5d      	ldr	r2, [pc, #372]	; (8001960 <LCD_Scan_Dir+0x620>)
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	60d3      	str	r3, [r2, #12]
 80017ee:	4b5b      	ldr	r3, [pc, #364]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	615a      	str	r2, [r3, #20]
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	4b58      	ldr	r3, [pc, #352]	; (800195c <LCD_Scan_Dir+0x61c>)
 80017fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001800:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001802:	4b55      	ldr	r3, [pc, #340]	; (8001958 <LCD_Scan_Dir+0x618>)
 8001804:	899b      	ldrh	r3, [r3, #12]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f9fc 	bl	8000c04 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <LCD_Scan_Dir+0x61c>)
 800180e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181a:	615a      	str	r2, [r3, #20]
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <LCD_Scan_Dir+0x620>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	4b4c      	ldr	r3, [pc, #304]	; (800195c <LCD_Scan_Dir+0x61c>)
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	611a      	str	r2, [r3, #16]
 800182e:	4b4b      	ldr	r3, [pc, #300]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001834:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001836:	4b49      	ldr	r3, [pc, #292]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	4b46      	ldr	r3, [pc, #280]	; (8001960 <LCD_Scan_Dir+0x620>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	4b43      	ldr	r3, [pc, #268]	; (800195c <LCD_Scan_Dir+0x61c>)
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	615a      	str	r2, [r3, #20]
 8001852:	4b42      	ldr	r3, [pc, #264]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	4b40      	ldr	r3, [pc, #256]	; (800195c <LCD_Scan_Dir+0x61c>)
 800185a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001860:	4b3e      	ldr	r3, [pc, #248]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	4b3c      	ldr	r3, [pc, #240]	; (800195c <LCD_Scan_Dir+0x61c>)
 800186a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	4b39      	ldr	r3, [pc, #228]	; (8001958 <LCD_Scan_Dir+0x618>)
 8001872:	885b      	ldrh	r3, [r3, #2]
 8001874:	3b01      	subs	r3, #1
 8001876:	121a      	asrs	r2, r3, #8
 8001878:	4b39      	ldr	r3, [pc, #228]	; (8001960 <LCD_Scan_Dir+0x620>)
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	4b37      	ldr	r3, [pc, #220]	; (800195c <LCD_Scan_Dir+0x61c>)
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	4b36      	ldr	r3, [pc, #216]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	4b34      	ldr	r3, [pc, #208]	; (800195c <LCD_Scan_Dir+0x61c>)
 800188a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <LCD_Scan_Dir+0x61c>)
 8001892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <LCD_Scan_Dir+0x61c>)
 800189a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189e:	615a      	str	r2, [r3, #20]
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <LCD_Scan_Dir+0x618>)
 80018a2:	885b      	ldrh	r3, [r3, #2]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a2e      	ldr	r2, [pc, #184]	; (8001960 <LCD_Scan_Dir+0x620>)
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	60d3      	str	r3, [r2, #12]
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <LCD_Scan_Dir+0x61c>)
 80018ae:	2280      	movs	r2, #128	; 0x80
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <LCD_Scan_Dir+0x61c>)
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <LCD_Scan_Dir+0x61c>)
 80018ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018be:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80018c0:	e045      	b.n	800194e <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b07      	cmp	r3, #7
 80018c6:	d836      	bhi.n	8001936 <LCD_Scan_Dir+0x5f6>
 80018c8:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <LCD_Scan_Dir+0x590>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	080018fb 	.word	0x080018fb
 80018d8:	08001905 	.word	0x08001905
 80018dc:	08001937 	.word	0x08001937
 80018e0:	0800190f 	.word	0x0800190f
 80018e4:	08001919 	.word	0x08001919
 80018e8:	08001923 	.word	0x08001923
 80018ec:	0800192d 	.word	0x0800192d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80018f0:	89fb      	ldrh	r3, [r7, #14]
 80018f2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80018f6:	81fb      	strh	r3, [r7, #14]
			break;
 80018f8:	e01d      	b.n	8001936 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	81fb      	strh	r3, [r7, #14]
			break;
 8001902:	e018      	b.n	8001936 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	f043 0320 	orr.w	r3, r3, #32
 800190a:	81fb      	strh	r3, [r7, #14]
			break;
 800190c:	e013      	b.n	8001936 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001914:	81fb      	strh	r3, [r7, #14]
			break;
 8001916:	e00e      	b.n	8001936 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001918:	89fb      	ldrh	r3, [r7, #14]
 800191a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800191e:	81fb      	strh	r3, [r7, #14]
			break;
 8001920:	e009      	b.n	8001936 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	f043 0318 	orr.w	r3, r3, #24
 8001928:	81fb      	strh	r3, [r7, #14]
			break;
 800192a:	e004      	b.n	8001936 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	81fb      	strh	r3, [r7, #14]
			break;
 8001934:	bf00      	nop
		}
		dirreg = 0X03;
 8001936:	2303      	movs	r3, #3
 8001938:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001940:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001942:	89fa      	ldrh	r2, [r7, #14]
 8001944:	89bb      	ldrh	r3, [r7, #12]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f9e7 	bl	8000d1c <LCD_WriteReg>
	}
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000fe8 	.word	0x20000fe8
 800195c:	40011000 	.word	0x40011000
 8001960:	40010c00 	.word	0x40010c00
 8001964:	00000000 	.word	0x00000000

08001968 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001972:	20be      	movs	r0, #190	; 0xbe
 8001974:	f7ff f946 	bl	8000c04 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001978:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 800197a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	4b48      	ldr	r3, [pc, #288]	; (8001aac <LCD_SSD_BackLightSet+0x144>)
 800198a:	2205      	movs	r2, #5
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	615a      	str	r2, [r3, #20]
 8001994:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	611a      	str	r2, [r3, #16]
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 800199c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 80019a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 80019ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b0:	615a      	str	r2, [r3, #20]
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd8d 	bl	80004d4 <__aeabi_i2d>
 80019ba:	a339      	add	r3, pc, #228	; (adr r3, 8001aa0 <LCD_SSD_BackLightSet+0x138>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fdf2 	bl	80005a8 <__aeabi_dmul>
 80019c4:	4603      	mov	r3, r0
 80019c6:	460c      	mov	r4, r1
 80019c8:	461a      	mov	r2, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	4c37      	ldr	r4, [pc, #220]	; (8001aac <LCD_SSD_BackLightSet+0x144>)
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7fe fffb 	bl	80009cc <__aeabi_d2uiz>
 80019d6:	4603      	mov	r3, r0
 80019d8:	60e3      	str	r3, [r4, #12]
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 80019e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ec:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 80019f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 80019f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <LCD_SSD_BackLightSet+0x144>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a16:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a26:	615a      	str	r2, [r3, #20]
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <LCD_SSD_BackLightSet+0x144>)
 8001a2a:	22ff      	movs	r2, #255	; 0xff
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <LCD_SSD_BackLightSet+0x144>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	611a      	str	r2, [r3, #16]
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7a:	615a      	str	r2, [r3, #20]
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <LCD_SSD_BackLightSet+0x144>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	615a      	str	r2, [r3, #20]
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <LCD_SSD_BackLightSet+0x140>)
 8001a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a94:	611a      	str	r2, [r3, #16]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	66666666 	.word	0x66666666
 8001aa4:	40046666 	.word	0x40046666
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	40010c00 	.word	0x40010c00

08001ab0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d177      	bne.n	8001bb0 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001ac0:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001ac8:	22f0      	movs	r2, #240	; 0xf0
 8001aca:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001acc:	4b7d      	ldr	r3, [pc, #500]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001ace:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ad2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ad4:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001ad6:	889b      	ldrh	r3, [r3, #4]
 8001ad8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00b      	beq.n	8001af8 <LCD_Display_Dir+0x48>
 8001ae0:	4b78      	ldr	r3, [pc, #480]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001ae2:	889b      	ldrh	r3, [r3, #4]
 8001ae4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d005      	beq.n	8001af8 <LCD_Display_Dir+0x48>
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001aee:	889b      	ldrh	r3, [r3, #4]
 8001af0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d11e      	bne.n	8001b36 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001af8:	4b72      	ldr	r3, [pc, #456]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001afa:	222c      	movs	r2, #44	; 0x2c
 8001afc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001afe:	4b71      	ldr	r3, [pc, #452]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b00:	222a      	movs	r2, #42	; 0x2a
 8001b02:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001b04:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b06:	222b      	movs	r2, #43	; 0x2b
 8001b08:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001b0a:	4b6e      	ldr	r3, [pc, #440]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b0c:	889b      	ldrh	r3, [r3, #4]
 8001b0e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d006      	beq.n	8001b24 <LCD_Display_Dir+0x74>
 8001b16:	4b6b      	ldr	r3, [pc, #428]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b18:	889b      	ldrh	r3, [r3, #4]
 8001b1a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	f040 80c7 	bne.w	8001cb2 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001b24:	4b67      	ldr	r3, [pc, #412]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b2a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001b2c:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b32:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001b34:	e0bd      	b.n	8001cb2 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001b36:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b38:	889b      	ldrh	r3, [r3, #4]
 8001b3a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d114      	bne.n	8001b6c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001b42:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b44:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001b48:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001b4a:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b4c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001b50:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001b52:	4b5c      	ldr	r3, [pc, #368]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b54:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001b58:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b60:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001b62:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b64:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b68:	805a      	strh	r2, [r3, #2]
 8001b6a:	e0a3      	b.n	8001cb4 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001b6c:	4b55      	ldr	r3, [pc, #340]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b6e:	889b      	ldrh	r3, [r3, #4]
 8001b70:	f641 1263 	movw	r2, #6499	; 0x1963
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d111      	bne.n	8001b9c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001b78:	4b52      	ldr	r3, [pc, #328]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b7a:	222c      	movs	r2, #44	; 0x2c
 8001b7c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001b7e:	4b51      	ldr	r3, [pc, #324]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b80:	222b      	movs	r2, #43	; 0x2b
 8001b82:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001b84:	4b4f      	ldr	r3, [pc, #316]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b86:	222a      	movs	r2, #42	; 0x2a
 8001b88:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b90:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001b92:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b98:	805a      	strh	r2, [r3, #2]
 8001b9a:	e08b      	b.n	8001cb4 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001b9c:	4b49      	ldr	r3, [pc, #292]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001b9e:	2222      	movs	r2, #34	; 0x22
 8001ba0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001ba2:	4b48      	ldr	r3, [pc, #288]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001ba8:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001baa:	2221      	movs	r2, #33	; 0x21
 8001bac:	819a      	strh	r2, [r3, #12]
 8001bae:	e081      	b.n	8001cb4 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001bb0:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001bb6:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001bb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bbc:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001bc0:	22f0      	movs	r2, #240	; 0xf0
 8001bc2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001bc6:	889b      	ldrh	r3, [r3, #4]
 8001bc8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d005      	beq.n	8001bdc <LCD_Display_Dir+0x12c>
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001bd2:	889b      	ldrh	r3, [r3, #4]
 8001bd4:	f245 3210 	movw	r2, #21264	; 0x5310
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d109      	bne.n	8001bf0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001bde:	222c      	movs	r2, #44	; 0x2c
 8001be0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001be4:	222a      	movs	r2, #42	; 0x2a
 8001be6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001bea:	222b      	movs	r2, #43	; 0x2b
 8001bec:	819a      	strh	r2, [r3, #12]
 8001bee:	e04b      	b.n	8001c88 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001bf0:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001bf2:	889b      	ldrh	r3, [r3, #4]
 8001bf4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d109      	bne.n	8001c10 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001bfc:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001bfe:	222c      	movs	r2, #44	; 0x2c
 8001c00:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001c02:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c04:	222b      	movs	r2, #43	; 0x2b
 8001c06:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c0a:	222a      	movs	r2, #42	; 0x2a
 8001c0c:	819a      	strh	r2, [r3, #12]
 8001c0e:	e03b      	b.n	8001c88 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001c10:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c12:	889b      	ldrh	r3, [r3, #4]
 8001c14:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d114      	bne.n	8001c46 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c1e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001c22:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c26:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001c2a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c2e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001c32:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c36:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001c3a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c42:	805a      	strh	r2, [r3, #2]
 8001c44:	e020      	b.n	8001c88 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c48:	889b      	ldrh	r3, [r3, #4]
 8001c4a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d111      	bne.n	8001c76 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c54:	222c      	movs	r2, #44	; 0x2c
 8001c56:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c5a:	222a      	movs	r2, #42	; 0x2a
 8001c5c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c60:	222b      	movs	r2, #43	; 0x2b
 8001c62:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c66:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001c6a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c72:	805a      	strh	r2, [r3, #2]
 8001c74:	e008      	b.n	8001c88 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c78:	2222      	movs	r2, #34	; 0x22
 8001c7a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c7e:	2221      	movs	r2, #33	; 0x21
 8001c80:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c84:	2220      	movs	r2, #32
 8001c86:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c8a:	889b      	ldrh	r3, [r3, #4]
 8001c8c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d005      	beq.n	8001ca0 <LCD_Display_Dir+0x1f0>
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001c96:	889b      	ldrh	r3, [r3, #4]
 8001c98:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d109      	bne.n	8001cb4 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001ca2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ca6:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <LCD_Display_Dir+0x214>)
 8001caa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cae:	805a      	strh	r2, [r3, #2]
 8001cb0:	e000      	b.n	8001cb4 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001cb2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fb43 	bl	8001340 <LCD_Scan_Dir>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000fe8 	.word	0x20000fe8

08001cc8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001cce:	4b90      	ldr	r3, [pc, #576]	; (8001f10 <LCD_Init+0x248>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	4a8f      	ldr	r2, [pc, #572]	; (8001f10 <LCD_Init+0x248>)
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	6193      	str	r3, [r2, #24]
 8001cda:	4b8d      	ldr	r3, [pc, #564]	; (8001f10 <LCD_Init+0x248>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001ce6:	4b8a      	ldr	r3, [pc, #552]	; (8001f10 <LCD_Init+0x248>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4a89      	ldr	r2, [pc, #548]	; (8001f10 <LCD_Init+0x248>)
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	4b87      	ldr	r3, [pc, #540]	; (8001f10 <LCD_Init+0x248>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001cfe:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001d02:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001d04:	2301      	movs	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001d08:	2301      	movs	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	4619      	mov	r1, r3
 8001d16:	487f      	ldr	r0, [pc, #508]	; (8001f14 <LCD_Init+0x24c>)
 8001d18:	f004 fa0c 	bl	8006134 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d20:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4619      	mov	r1, r3
 8001d28:	487b      	ldr	r0, [pc, #492]	; (8001f18 <LCD_Init+0x250>)
 8001d2a:	f004 fa03 	bl	8006134 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001d2e:	2032      	movs	r0, #50	; 0x32
 8001d30:	f004 f8fe 	bl	8005f30 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001d34:	2101      	movs	r1, #1
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7fe fff0 	bl	8000d1c <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001d3c:	2032      	movs	r0, #50	; 0x32
 8001d3e:	f004 f8f7 	bl	8005f30 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff f814 	bl	8000d70 <LCD_ReadReg>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <LCD_Init+0x254>)
 8001d4e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001d50:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <LCD_Init+0x254>)
 8001d52:	889b      	ldrh	r3, [r3, #4]
 8001d54:	2bfe      	cmp	r3, #254	; 0xfe
 8001d56:	d90b      	bls.n	8001d70 <LCD_Init+0xa8>
 8001d58:	4b70      	ldr	r3, [pc, #448]	; (8001f1c <LCD_Init+0x254>)
 8001d5a:	889b      	ldrh	r3, [r3, #4]
 8001d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d005      	beq.n	8001d70 <LCD_Init+0xa8>
 8001d64:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <LCD_Init+0x254>)
 8001d66:	889b      	ldrh	r3, [r3, #4]
 8001d68:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001d6c:	f040 80c8 	bne.w	8001f00 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001d70:	20d3      	movs	r0, #211	; 0xd3
 8001d72:	f7fe ff47 	bl	8000c04 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001d76:	f7fe ff8d 	bl	8000c94 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001d7a:	f7fe ff8b 	bl	8000c94 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001d7e:	f7fe ff89 	bl	8000c94 <LCD_RD_DATA>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b65      	ldr	r3, [pc, #404]	; (8001f1c <LCD_Init+0x254>)
 8001d88:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001d8a:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <LCD_Init+0x254>)
 8001d8c:	889b      	ldrh	r3, [r3, #4]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b62      	ldr	r3, [pc, #392]	; (8001f1c <LCD_Init+0x254>)
 8001d94:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001d96:	f7fe ff7d 	bl	8000c94 <LCD_RD_DATA>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <LCD_Init+0x254>)
 8001da0:	889b      	ldrh	r3, [r3, #4]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <LCD_Init+0x254>)
 8001da8:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001daa:	4b5c      	ldr	r3, [pc, #368]	; (8001f1c <LCD_Init+0x254>)
 8001dac:	889b      	ldrh	r3, [r3, #4]
 8001dae:	f249 3241 	movw	r2, #37697	; 0x9341
 8001db2:	4293      	cmp	r3, r2
 8001db4:	f000 80a4 	beq.w	8001f00 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001db8:	20bf      	movs	r0, #191	; 0xbf
 8001dba:	f7fe ff23 	bl	8000c04 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001dbe:	f7fe ff69 	bl	8000c94 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001dc2:	f7fe ff67 	bl	8000c94 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001dc6:	f7fe ff65 	bl	8000c94 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001dca:	f7fe ff63 	bl	8000c94 <LCD_RD_DATA>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b52      	ldr	r3, [pc, #328]	; (8001f1c <LCD_Init+0x254>)
 8001dd4:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001dd6:	4b51      	ldr	r3, [pc, #324]	; (8001f1c <LCD_Init+0x254>)
 8001dd8:	889b      	ldrh	r3, [r3, #4]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <LCD_Init+0x254>)
 8001de0:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001de2:	f7fe ff57 	bl	8000c94 <LCD_RD_DATA>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <LCD_Init+0x254>)
 8001dec:	889b      	ldrh	r3, [r3, #4]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <LCD_Init+0x254>)
 8001df4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <LCD_Init+0x254>)
 8001df8:	889b      	ldrh	r3, [r3, #4]
 8001dfa:	f646 0204 	movw	r2, #26628	; 0x6804
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d07e      	beq.n	8001f00 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001e02:	20d4      	movs	r0, #212	; 0xd4
 8001e04:	f7fe fefe 	bl	8000c04 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001e08:	f7fe ff44 	bl	8000c94 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001e0c:	f7fe ff42 	bl	8000c94 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001e10:	f7fe ff40 	bl	8000c94 <LCD_RD_DATA>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <LCD_Init+0x254>)
 8001e1a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <LCD_Init+0x254>)
 8001e1e:	889b      	ldrh	r3, [r3, #4]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <LCD_Init+0x254>)
 8001e26:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001e28:	f7fe ff34 	bl	8000c94 <LCD_RD_DATA>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <LCD_Init+0x254>)
 8001e32:	889b      	ldrh	r3, [r3, #4]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <LCD_Init+0x254>)
 8001e3a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001e3c:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <LCD_Init+0x254>)
 8001e3e:	889b      	ldrh	r3, [r3, #4]
 8001e40:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d05b      	beq.n	8001f00 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001e48:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001e4c:	f7fe feda 	bl	8000c04 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001e50:	f7fe ff20 	bl	8000c94 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001e54:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001e58:	f7fe fed4 	bl	8000c04 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001e5c:	f7fe ff1a 	bl	8000c94 <LCD_RD_DATA>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <LCD_Init+0x254>)
 8001e66:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <LCD_Init+0x254>)
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <LCD_Init+0x254>)
 8001e72:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001e74:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001e78:	f7fe fec4 	bl	8000c04 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8001e7c:	f7fe ff0a 	bl	8000c94 <LCD_RD_DATA>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <LCD_Init+0x254>)
 8001e86:	889b      	ldrh	r3, [r3, #4]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <LCD_Init+0x254>)
 8001e8e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8001e90:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <LCD_Init+0x254>)
 8001e92:	889b      	ldrh	r3, [r3, #4]
 8001e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e98:	d103      	bne.n	8001ea2 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <LCD_Init+0x254>)
 8001e9c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ea0:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <LCD_Init+0x254>)
 8001ea4:	889b      	ldrh	r3, [r3, #4]
 8001ea6:	f245 5210 	movw	r2, #21776	; 0x5510
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d028      	beq.n	8001f00 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8001eae:	20a1      	movs	r0, #161	; 0xa1
 8001eb0:	f7fe fea8 	bl	8000c04 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8001eb4:	f7fe feee 	bl	8000c94 <LCD_RD_DATA>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <LCD_Init+0x254>)
 8001ebe:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8001ec0:	f7fe fee8 	bl	8000c94 <LCD_RD_DATA>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <LCD_Init+0x254>)
 8001eca:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <LCD_Init+0x254>)
 8001ece:	889b      	ldrh	r3, [r3, #4]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <LCD_Init+0x254>)
 8001ed6:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8001ed8:	f7fe fedc 	bl	8000c94 <LCD_RD_DATA>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <LCD_Init+0x254>)
 8001ee2:	889b      	ldrh	r3, [r3, #4]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <LCD_Init+0x254>)
 8001eea:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <LCD_Init+0x254>)
 8001eee:	889b      	ldrh	r3, [r3, #4]
 8001ef0:	f245 7261 	movw	r2, #22369	; 0x5761
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d103      	bne.n	8001f00 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <LCD_Init+0x254>)
 8001efa:	f641 1263 	movw	r2, #6499	; 0x1963
 8001efe:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <LCD_Init+0x254>)
 8001f02:	889b      	ldrh	r3, [r3, #4]
 8001f04:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	f040 811f 	bne.w	800214c <LCD_Init+0x484>
 8001f0e:	e007      	b.n	8001f20 <LCD_Init+0x258>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40011000 	.word	0x40011000
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	20000fe8 	.word	0x20000fe8
			{
		LCD_WR_REG(0xCF);
 8001f20:	20cf      	movs	r0, #207	; 0xcf
 8001f22:	f7fe fe6f 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7fe fe90 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8001f2c:	20c1      	movs	r0, #193	; 0xc1
 8001f2e:	f7fe fe8d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8001f32:	2030      	movs	r0, #48	; 0x30
 8001f34:	f7fe fe8a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8001f38:	20ed      	movs	r0, #237	; 0xed
 8001f3a:	f7fe fe63 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8001f3e:	2064      	movs	r0, #100	; 0x64
 8001f40:	f7fe fe84 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f7fe fe81 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8001f4a:	2012      	movs	r0, #18
 8001f4c:	f7fe fe7e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8001f50:	2081      	movs	r0, #129	; 0x81
 8001f52:	f7fe fe7b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8001f56:	20e8      	movs	r0, #232	; 0xe8
 8001f58:	f7fe fe54 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8001f5c:	2085      	movs	r0, #133	; 0x85
 8001f5e:	f7fe fe75 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001f62:	2010      	movs	r0, #16
 8001f64:	f7fe fe72 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8001f68:	207a      	movs	r0, #122	; 0x7a
 8001f6a:	f7fe fe6f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8001f6e:	20cb      	movs	r0, #203	; 0xcb
 8001f70:	f7fe fe48 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8001f74:	2039      	movs	r0, #57	; 0x39
 8001f76:	f7fe fe69 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8001f7a:	202c      	movs	r0, #44	; 0x2c
 8001f7c:	f7fe fe66 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7fe fe63 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8001f86:	2034      	movs	r0, #52	; 0x34
 8001f88:	f7fe fe60 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	f7fe fe5d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8001f92:	20f7      	movs	r0, #247	; 0xf7
 8001f94:	f7fe fe36 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8001f98:	2020      	movs	r0, #32
 8001f9a:	f7fe fe57 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8001f9e:	20ea      	movs	r0, #234	; 0xea
 8001fa0:	f7fe fe30 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7fe fe51 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7fe fe4e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8001fb0:	20c0      	movs	r0, #192	; 0xc0
 8001fb2:	f7fe fe27 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8001fb6:	201b      	movs	r0, #27
 8001fb8:	f7fe fe48 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8001fbc:	20c1      	movs	r0, #193	; 0xc1
 8001fbe:	f7fe fe21 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7fe fe42 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8001fc8:	20c5      	movs	r0, #197	; 0xc5
 8001fca:	f7fe fe1b 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8001fce:	2030      	movs	r0, #48	; 0x30
 8001fd0:	f7fe fe3c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8001fd4:	2030      	movs	r0, #48	; 0x30
 8001fd6:	f7fe fe39 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8001fda:	20c7      	movs	r0, #199	; 0xc7
 8001fdc:	f7fe fe12 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8001fe0:	20b7      	movs	r0, #183	; 0xb7
 8001fe2:	f7fe fe33 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8001fe6:	2036      	movs	r0, #54	; 0x36
 8001fe8:	f7fe fe0c 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8001fec:	2048      	movs	r0, #72	; 0x48
 8001fee:	f7fe fe2d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8001ff2:	203a      	movs	r0, #58	; 0x3a
 8001ff4:	f7fe fe06 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8001ff8:	2055      	movs	r0, #85	; 0x55
 8001ffa:	f7fe fe27 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8001ffe:	20b1      	movs	r0, #177	; 0xb1
 8002000:	f7fe fe00 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002004:	2000      	movs	r0, #0
 8002006:	f7fe fe21 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 800200a:	201a      	movs	r0, #26
 800200c:	f7fe fe1e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002010:	20b6      	movs	r0, #182	; 0xb6
 8002012:	f7fe fdf7 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002016:	200a      	movs	r0, #10
 8002018:	f7fe fe18 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800201c:	20a2      	movs	r0, #162	; 0xa2
 800201e:	f7fe fe15 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8002022:	20f2      	movs	r0, #242	; 0xf2
 8002024:	f7fe fdee 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002028:	2000      	movs	r0, #0
 800202a:	f7fe fe0f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 800202e:	2026      	movs	r0, #38	; 0x26
 8002030:	f7fe fde8 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002034:	2001      	movs	r0, #1
 8002036:	f7fe fe09 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 800203a:	20e0      	movs	r0, #224	; 0xe0
 800203c:	f7fe fde2 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002040:	200f      	movs	r0, #15
 8002042:	f7fe fe03 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002046:	202a      	movs	r0, #42	; 0x2a
 8002048:	f7fe fe00 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 800204c:	2028      	movs	r0, #40	; 0x28
 800204e:	f7fe fdfd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002052:	2008      	movs	r0, #8
 8002054:	f7fe fdfa 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002058:	200e      	movs	r0, #14
 800205a:	f7fe fdf7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800205e:	2008      	movs	r0, #8
 8002060:	f7fe fdf4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002064:	2054      	movs	r0, #84	; 0x54
 8002066:	f7fe fdf1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800206a:	20a9      	movs	r0, #169	; 0xa9
 800206c:	f7fe fdee 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002070:	2043      	movs	r0, #67	; 0x43
 8002072:	f7fe fdeb 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002076:	200a      	movs	r0, #10
 8002078:	f7fe fde8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800207c:	200f      	movs	r0, #15
 800207e:	f7fe fde5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002082:	2000      	movs	r0, #0
 8002084:	f7fe fde2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002088:	2000      	movs	r0, #0
 800208a:	f7fe fddf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800208e:	2000      	movs	r0, #0
 8002090:	f7fe fddc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002094:	2000      	movs	r0, #0
 8002096:	f7fe fdd9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800209a:	20e1      	movs	r0, #225	; 0xe1
 800209c:	f7fe fdb2 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7fe fdd3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 80020a6:	2015      	movs	r0, #21
 80020a8:	f7fe fdd0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80020ac:	2017      	movs	r0, #23
 80020ae:	f7fe fdcd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 80020b2:	2007      	movs	r0, #7
 80020b4:	f7fe fdca 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80020b8:	2011      	movs	r0, #17
 80020ba:	f7fe fdc7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 80020be:	2006      	movs	r0, #6
 80020c0:	f7fe fdc4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 80020c4:	202b      	movs	r0, #43	; 0x2b
 80020c6:	f7fe fdc1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80020ca:	2056      	movs	r0, #86	; 0x56
 80020cc:	f7fe fdbe 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80020d0:	203c      	movs	r0, #60	; 0x3c
 80020d2:	f7fe fdbb 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80020d6:	2005      	movs	r0, #5
 80020d8:	f7fe fdb8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80020dc:	2010      	movs	r0, #16
 80020de:	f7fe fdb5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80020e2:	200f      	movs	r0, #15
 80020e4:	f7fe fdb2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80020e8:	203f      	movs	r0, #63	; 0x3f
 80020ea:	f7fe fdaf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80020ee:	203f      	movs	r0, #63	; 0x3f
 80020f0:	f7fe fdac 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80020f4:	200f      	movs	r0, #15
 80020f6:	f7fe fda9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80020fa:	202b      	movs	r0, #43	; 0x2b
 80020fc:	f7fe fd82 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002100:	2000      	movs	r0, #0
 8002102:	f7fe fda3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe fda0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800210c:	2001      	movs	r0, #1
 800210e:	f7fe fd9d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8002112:	203f      	movs	r0, #63	; 0x3f
 8002114:	f7fe fd9a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002118:	202a      	movs	r0, #42	; 0x2a
 800211a:	f7fe fd73 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800211e:	2000      	movs	r0, #0
 8002120:	f7fe fd94 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f7fe fd91 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800212a:	2000      	movs	r0, #0
 800212c:	f7fe fd8e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002130:	20ef      	movs	r0, #239	; 0xef
 8002132:	f7fe fd8b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8002136:	2011      	movs	r0, #17
 8002138:	f7fe fd64 	bl	8000c04 <LCD_WR_REG>
		HAL_Delay(120);
 800213c:	2078      	movs	r0, #120	; 0x78
 800213e:	f003 fef7 	bl	8005f30 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8002142:	2029      	movs	r0, #41	; 0x29
 8002144:	f7fe fd5e 	bl	8000c04 <LCD_WR_REG>
 8002148:	f003 bcd8 	b.w	8005afc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 800214c:	4b58      	ldr	r3, [pc, #352]	; (80022b0 <LCD_Init+0x5e8>)
 800214e:	889b      	ldrh	r3, [r3, #4]
 8002150:	f646 0204 	movw	r2, #26628	; 0x6804
 8002154:	4293      	cmp	r3, r2
 8002156:	f040 80ad 	bne.w	80022b4 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 800215a:	2011      	movs	r0, #17
 800215c:	f7fe fd52 	bl	8000c04 <LCD_WR_REG>
		HAL_Delay(20);
 8002160:	2014      	movs	r0, #20
 8002162:	f003 fee5 	bl	8005f30 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002166:	20d0      	movs	r0, #208	; 0xd0
 8002168:	f7fe fd4c 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800216c:	2007      	movs	r0, #7
 800216e:	f7fe fd6d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002172:	2042      	movs	r0, #66	; 0x42
 8002174:	f7fe fd6a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002178:	201d      	movs	r0, #29
 800217a:	f7fe fd67 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800217e:	20d1      	movs	r0, #209	; 0xd1
 8002180:	f7fe fd40 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002184:	2000      	movs	r0, #0
 8002186:	f7fe fd61 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800218a:	201a      	movs	r0, #26
 800218c:	f7fe fd5e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002190:	2009      	movs	r0, #9
 8002192:	f7fe fd5b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002196:	20d2      	movs	r0, #210	; 0xd2
 8002198:	f7fe fd34 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800219c:	2001      	movs	r0, #1
 800219e:	f7fe fd55 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80021a2:	2022      	movs	r0, #34	; 0x22
 80021a4:	f7fe fd52 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 80021a8:	20c0      	movs	r0, #192	; 0xc0
 80021aa:	f7fe fd2b 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 80021ae:	2010      	movs	r0, #16
 80021b0:	f7fe fd4c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 80021b4:	203b      	movs	r0, #59	; 0x3b
 80021b6:	f7fe fd49 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f7fe fd46 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80021c0:	2002      	movs	r0, #2
 80021c2:	f7fe fd43 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 80021c6:	2011      	movs	r0, #17
 80021c8:	f7fe fd40 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80021cc:	20c5      	movs	r0, #197	; 0xc5
 80021ce:	f7fe fd19 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 80021d2:	2003      	movs	r0, #3
 80021d4:	f7fe fd3a 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80021d8:	20c8      	movs	r0, #200	; 0xc8
 80021da:	f7fe fd13 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7fe fd34 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80021e4:	2025      	movs	r0, #37	; 0x25
 80021e6:	f7fe fd31 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80021ea:	2021      	movs	r0, #33	; 0x21
 80021ec:	f7fe fd2e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80021f0:	2005      	movs	r0, #5
 80021f2:	f7fe fd2b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7fe fd28 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80021fc:	200a      	movs	r0, #10
 80021fe:	f7fe fd25 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8002202:	2065      	movs	r0, #101	; 0x65
 8002204:	f7fe fd22 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002208:	2025      	movs	r0, #37	; 0x25
 800220a:	f7fe fd1f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 800220e:	2077      	movs	r0, #119	; 0x77
 8002210:	f7fe fd1c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8002214:	2050      	movs	r0, #80	; 0x50
 8002216:	f7fe fd19 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800221a:	200f      	movs	r0, #15
 800221c:	f7fe fd16 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002220:	2000      	movs	r0, #0
 8002222:	f7fe fd13 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8002226:	20f8      	movs	r0, #248	; 0xf8
 8002228:	f7fe fcec 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800222c:	2001      	movs	r0, #1
 800222e:	f7fe fd0d 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8002232:	20fe      	movs	r0, #254	; 0xfe
 8002234:	f7fe fce6 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002238:	2000      	movs	r0, #0
 800223a:	f7fe fd07 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800223e:	2002      	movs	r0, #2
 8002240:	f7fe fd04 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8002244:	2020      	movs	r0, #32
 8002246:	f7fe fcdd 	bl	8000c04 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800224a:	2036      	movs	r0, #54	; 0x36
 800224c:	f7fe fcda 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002250:	2008      	movs	r0, #8
 8002252:	f7fe fcfb 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002256:	203a      	movs	r0, #58	; 0x3a
 8002258:	f7fe fcd4 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800225c:	2055      	movs	r0, #85	; 0x55
 800225e:	f7fe fcf5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002262:	202b      	movs	r0, #43	; 0x2b
 8002264:	f7fe fcce 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002268:	2000      	movs	r0, #0
 800226a:	f7fe fcef 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800226e:	2000      	movs	r0, #0
 8002270:	f7fe fcec 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002274:	2001      	movs	r0, #1
 8002276:	f7fe fce9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800227a:	203f      	movs	r0, #63	; 0x3f
 800227c:	f7fe fce6 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002280:	202a      	movs	r0, #42	; 0x2a
 8002282:	f7fe fcbf 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002286:	2000      	movs	r0, #0
 8002288:	f7fe fce0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800228c:	2000      	movs	r0, #0
 800228e:	f7fe fcdd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002292:	2001      	movs	r0, #1
 8002294:	f7fe fcda 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002298:	20df      	movs	r0, #223	; 0xdf
 800229a:	f7fe fcd7 	bl	8000c4c <LCD_WR_DATAX>
		HAL_Delay(120);
 800229e:	2078      	movs	r0, #120	; 0x78
 80022a0:	f003 fe46 	bl	8005f30 <HAL_Delay>
		LCD_WR_REG(0X29);
 80022a4:	2029      	movs	r0, #41	; 0x29
 80022a6:	f7fe fcad 	bl	8000c04 <LCD_WR_REG>
 80022aa:	f003 bc27 	b.w	8005afc <LCD_Init+0x3e34>
 80022ae:	bf00      	nop
 80022b0:	20000fe8 	.word	0x20000fe8
	} else if (lcddev.id == 0x5310) {
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <LCD_Init+0x5fc>)
 80022b6:	889b      	ldrh	r3, [r3, #4]
 80022b8:	f245 3210 	movw	r2, #21264	; 0x5310
 80022bc:	4293      	cmp	r3, r2
 80022be:	f040 877c 	bne.w	80031ba <LCD_Init+0x14f2>
 80022c2:	e001      	b.n	80022c8 <LCD_Init+0x600>
 80022c4:	20000fe8 	.word	0x20000fe8
		LCD_WR_REG(0xED);
 80022c8:	20ed      	movs	r0, #237	; 0xed
 80022ca:	f7fe fc9b 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7fe fcbc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80022d4:	20fe      	movs	r0, #254	; 0xfe
 80022d6:	f7fe fcb9 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80022da:	20ee      	movs	r0, #238	; 0xee
 80022dc:	f7fe fc92 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80022e0:	20de      	movs	r0, #222	; 0xde
 80022e2:	f7fe fcb3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80022e6:	2021      	movs	r0, #33	; 0x21
 80022e8:	f7fe fcb0 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80022ec:	20f1      	movs	r0, #241	; 0xf1
 80022ee:	f7fe fc89 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7fe fcaa 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80022f8:	20df      	movs	r0, #223	; 0xdf
 80022fa:	f7fe fc83 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80022fe:	2010      	movs	r0, #16
 8002300:	f7fe fca4 	bl	8000c4c <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002304:	20c4      	movs	r0, #196	; 0xc4
 8002306:	f7fe fc7d 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800230a:	208f      	movs	r0, #143	; 0x8f
 800230c:	f7fe fc9e 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002310:	20c6      	movs	r0, #198	; 0xc6
 8002312:	f7fe fc77 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002316:	2000      	movs	r0, #0
 8002318:	f7fe fc98 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800231c:	20e2      	movs	r0, #226	; 0xe2
 800231e:	f7fe fc95 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002322:	20e2      	movs	r0, #226	; 0xe2
 8002324:	f7fe fc92 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002328:	20e2      	movs	r0, #226	; 0xe2
 800232a:	f7fe fc8f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800232e:	20bf      	movs	r0, #191	; 0xbf
 8002330:	f7fe fc68 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002334:	20aa      	movs	r0, #170	; 0xaa
 8002336:	f7fe fc89 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800233a:	20b0      	movs	r0, #176	; 0xb0
 800233c:	f7fe fc62 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002340:	200d      	movs	r0, #13
 8002342:	f7fe fc83 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe fc80 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800234c:	200d      	movs	r0, #13
 800234e:	f7fe fc7d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002352:	2000      	movs	r0, #0
 8002354:	f7fe fc7a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002358:	2011      	movs	r0, #17
 800235a:	f7fe fc77 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800235e:	2000      	movs	r0, #0
 8002360:	f7fe fc74 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002364:	2019      	movs	r0, #25
 8002366:	f7fe fc71 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800236a:	2000      	movs	r0, #0
 800236c:	f7fe fc6e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002370:	2021      	movs	r0, #33	; 0x21
 8002372:	f7fe fc6b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002376:	2000      	movs	r0, #0
 8002378:	f7fe fc68 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800237c:	202d      	movs	r0, #45	; 0x2d
 800237e:	f7fe fc65 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002382:	2000      	movs	r0, #0
 8002384:	f7fe fc62 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002388:	203d      	movs	r0, #61	; 0x3d
 800238a:	f7fe fc5f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800238e:	2000      	movs	r0, #0
 8002390:	f7fe fc5c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002394:	205d      	movs	r0, #93	; 0x5d
 8002396:	f7fe fc59 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800239a:	2000      	movs	r0, #0
 800239c:	f7fe fc56 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80023a0:	205d      	movs	r0, #93	; 0x5d
 80023a2:	f7fe fc53 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7fe fc50 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80023ac:	20b1      	movs	r0, #177	; 0xb1
 80023ae:	f7fe fc29 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80023b2:	2080      	movs	r0, #128	; 0x80
 80023b4:	f7fe fc4a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7fe fc47 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80023be:	208b      	movs	r0, #139	; 0x8b
 80023c0:	f7fe fc44 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7fe fc41 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80023ca:	2096      	movs	r0, #150	; 0x96
 80023cc:	f7fe fc3e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7fe fc3b 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80023d6:	20b2      	movs	r0, #178	; 0xb2
 80023d8:	f7fe fc14 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023dc:	2000      	movs	r0, #0
 80023de:	f7fe fc35 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7fe fc32 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80023e8:	2002      	movs	r0, #2
 80023ea:	f7fe fc2f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fc2c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80023f4:	2003      	movs	r0, #3
 80023f6:	f7fe fc29 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7fe fc26 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002400:	20b3      	movs	r0, #179	; 0xb3
 8002402:	f7fe fbff 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe fc20 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800240c:	2000      	movs	r0, #0
 800240e:	f7fe fc1d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002412:	2000      	movs	r0, #0
 8002414:	f7fe fc1a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002418:	2000      	movs	r0, #0
 800241a:	f7fe fc17 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800241e:	2000      	movs	r0, #0
 8002420:	f7fe fc14 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002424:	2000      	movs	r0, #0
 8002426:	f7fe fc11 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe fc0e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002430:	2000      	movs	r0, #0
 8002432:	f7fe fc0b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe fc08 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800243c:	2000      	movs	r0, #0
 800243e:	f7fe fc05 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002442:	2000      	movs	r0, #0
 8002444:	f7fe fc02 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fbff 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800244e:	2000      	movs	r0, #0
 8002450:	f7fe fbfc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002454:	2000      	movs	r0, #0
 8002456:	f7fe fbf9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800245a:	2000      	movs	r0, #0
 800245c:	f7fe fbf6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002460:	2000      	movs	r0, #0
 8002462:	f7fe fbf3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe fbf0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe fbed 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f7fe fbea 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002478:	2000      	movs	r0, #0
 800247a:	f7fe fbe7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe fbe4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002484:	2000      	movs	r0, #0
 8002486:	f7fe fbe1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe fbde 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002490:	2000      	movs	r0, #0
 8002492:	f7fe fbdb 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002496:	20b4      	movs	r0, #180	; 0xb4
 8002498:	f7fe fbb4 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800249c:	208b      	movs	r0, #139	; 0x8b
 800249e:	f7fe fbd5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7fe fbd2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80024a8:	2096      	movs	r0, #150	; 0x96
 80024aa:	f7fe fbcf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7fe fbcc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80024b4:	20a1      	movs	r0, #161	; 0xa1
 80024b6:	f7fe fbc9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe fbc6 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80024c0:	20b5      	movs	r0, #181	; 0xb5
 80024c2:	f7fe fb9f 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7fe fbc0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fbbd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80024d2:	2003      	movs	r0, #3
 80024d4:	f7fe fbba 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fbb7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80024de:	2004      	movs	r0, #4
 80024e0:	f7fe fbb4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7fe fbb1 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80024ea:	20b6      	movs	r0, #182	; 0xb6
 80024ec:	f7fe fb8a 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe fbab 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7fe fba8 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80024fc:	20b7      	movs	r0, #183	; 0xb7
 80024fe:	f7fe fb81 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002502:	2000      	movs	r0, #0
 8002504:	f7fe fba2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe fb9f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800250e:	203f      	movs	r0, #63	; 0x3f
 8002510:	f7fe fb9c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002514:	2000      	movs	r0, #0
 8002516:	f7fe fb99 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800251a:	205e      	movs	r0, #94	; 0x5e
 800251c:	f7fe fb96 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002520:	2000      	movs	r0, #0
 8002522:	f7fe fb93 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002526:	2064      	movs	r0, #100	; 0x64
 8002528:	f7fe fb90 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800252c:	2000      	movs	r0, #0
 800252e:	f7fe fb8d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002532:	208c      	movs	r0, #140	; 0x8c
 8002534:	f7fe fb8a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f7fe fb87 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800253e:	20ac      	movs	r0, #172	; 0xac
 8002540:	f7fe fb84 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002544:	2000      	movs	r0, #0
 8002546:	f7fe fb81 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800254a:	20dc      	movs	r0, #220	; 0xdc
 800254c:	f7fe fb7e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fb7b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002556:	2070      	movs	r0, #112	; 0x70
 8002558:	f7fe fb78 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe fb75 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002562:	2090      	movs	r0, #144	; 0x90
 8002564:	f7fe fb72 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002568:	2000      	movs	r0, #0
 800256a:	f7fe fb6f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800256e:	20eb      	movs	r0, #235	; 0xeb
 8002570:	f7fe fb6c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002574:	2000      	movs	r0, #0
 8002576:	f7fe fb69 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800257a:	20dc      	movs	r0, #220	; 0xdc
 800257c:	f7fe fb66 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002580:	2000      	movs	r0, #0
 8002582:	f7fe fb63 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002586:	20b8      	movs	r0, #184	; 0xb8
 8002588:	f7fe fb3c 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe fb5d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002592:	2000      	movs	r0, #0
 8002594:	f7fe fb5a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002598:	2000      	movs	r0, #0
 800259a:	f7fe fb57 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe fb54 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7fe fb51 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7fe fb4e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe fb4b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fb48 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80025bc:	20ba      	movs	r0, #186	; 0xba
 80025be:	f7fe fb21 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80025c2:	2024      	movs	r0, #36	; 0x24
 80025c4:	f7fe fb42 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe fb3f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fb3c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7fe fb39 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80025da:	20c1      	movs	r0, #193	; 0xc1
 80025dc:	f7fe fb12 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80025e0:	2020      	movs	r0, #32
 80025e2:	f7fe fb33 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe fb30 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80025ec:	2054      	movs	r0, #84	; 0x54
 80025ee:	f7fe fb2d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe fb2a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80025f8:	20ff      	movs	r0, #255	; 0xff
 80025fa:	f7fe fb27 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe fb24 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002604:	20c2      	movs	r0, #194	; 0xc2
 8002606:	f7fe fafd 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800260a:	200a      	movs	r0, #10
 800260c:	f7fe fb1e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe fb1b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002616:	2004      	movs	r0, #4
 8002618:	f7fe fb18 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f7fe fb15 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002622:	20c3      	movs	r0, #195	; 0xc3
 8002624:	f7fe faee 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002628:	203c      	movs	r0, #60	; 0x3c
 800262a:	f7fe fb0f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe fb0c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002634:	203a      	movs	r0, #58	; 0x3a
 8002636:	f7fe fb09 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe fb06 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002640:	2039      	movs	r0, #57	; 0x39
 8002642:	f7fe fb03 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe fb00 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800264c:	2037      	movs	r0, #55	; 0x37
 800264e:	f7fe fafd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f7fe fafa 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002658:	203c      	movs	r0, #60	; 0x3c
 800265a:	f7fe faf7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f7fe faf4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002664:	2036      	movs	r0, #54	; 0x36
 8002666:	f7fe faf1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800266a:	2000      	movs	r0, #0
 800266c:	f7fe faee 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002670:	2032      	movs	r0, #50	; 0x32
 8002672:	f7fe faeb 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002676:	2000      	movs	r0, #0
 8002678:	f7fe fae8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800267c:	202f      	movs	r0, #47	; 0x2f
 800267e:	f7fe fae5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe fae2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002688:	202c      	movs	r0, #44	; 0x2c
 800268a:	f7fe fadf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe fadc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002694:	2029      	movs	r0, #41	; 0x29
 8002696:	f7fe fad9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269a:	2000      	movs	r0, #0
 800269c:	f7fe fad6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80026a0:	2026      	movs	r0, #38	; 0x26
 80026a2:	f7fe fad3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe fad0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80026ac:	2024      	movs	r0, #36	; 0x24
 80026ae:	f7fe facd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7fe faca 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80026b8:	2024      	movs	r0, #36	; 0x24
 80026ba:	f7fe fac7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe fac4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80026c4:	2023      	movs	r0, #35	; 0x23
 80026c6:	f7fe fac1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7fe fabe 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80026d0:	203c      	movs	r0, #60	; 0x3c
 80026d2:	f7fe fabb 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7fe fab8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80026dc:	2036      	movs	r0, #54	; 0x36
 80026de:	f7fe fab5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe fab2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80026e8:	2032      	movs	r0, #50	; 0x32
 80026ea:	f7fe faaf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7fe faac 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80026f4:	202f      	movs	r0, #47	; 0x2f
 80026f6:	f7fe faa9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fe faa6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002700:	202c      	movs	r0, #44	; 0x2c
 8002702:	f7fe faa3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe faa0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800270c:	2029      	movs	r0, #41	; 0x29
 800270e:	f7fe fa9d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe fa9a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002718:	2026      	movs	r0, #38	; 0x26
 800271a:	f7fe fa97 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe fa94 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002724:	2024      	movs	r0, #36	; 0x24
 8002726:	f7fe fa91 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f7fe fa8e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002730:	2024      	movs	r0, #36	; 0x24
 8002732:	f7fe fa8b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe fa88 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800273c:	2023      	movs	r0, #35	; 0x23
 800273e:	f7fe fa85 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002742:	2000      	movs	r0, #0
 8002744:	f7fe fa82 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002748:	20c4      	movs	r0, #196	; 0xc4
 800274a:	f7fe fa5b 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800274e:	2062      	movs	r0, #98	; 0x62
 8002750:	f7fe fa7c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe fa79 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800275a:	2005      	movs	r0, #5
 800275c:	f7fe fa76 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe fa73 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002766:	2084      	movs	r0, #132	; 0x84
 8002768:	f7fe fa70 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe fa6d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002772:	20f0      	movs	r0, #240	; 0xf0
 8002774:	f7fe fa6a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7fe fa67 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800277e:	2018      	movs	r0, #24
 8002780:	f7fe fa64 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002784:	2000      	movs	r0, #0
 8002786:	f7fe fa61 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800278a:	20a4      	movs	r0, #164	; 0xa4
 800278c:	f7fe fa5e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe fa5b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002796:	2018      	movs	r0, #24
 8002798:	f7fe fa58 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279c:	2000      	movs	r0, #0
 800279e:	f7fe fa55 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80027a2:	2050      	movs	r0, #80	; 0x50
 80027a4:	f7fe fa52 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7fe fa4f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 80027ae:	200c      	movs	r0, #12
 80027b0:	f7fe fa4c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe fa49 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80027ba:	2017      	movs	r0, #23
 80027bc:	f7fe fa46 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7fe fa43 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80027c6:	2095      	movs	r0, #149	; 0x95
 80027c8:	f7fe fa40 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7fe fa3d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80027d2:	20f3      	movs	r0, #243	; 0xf3
 80027d4:	f7fe fa3a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7fe fa37 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80027de:	20e6      	movs	r0, #230	; 0xe6
 80027e0:	f7fe fa34 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7fe fa31 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 80027ea:	20c5      	movs	r0, #197	; 0xc5
 80027ec:	f7fe fa0a 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80027f0:	2032      	movs	r0, #50	; 0x32
 80027f2:	f7fe fa2b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f7fe fa28 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80027fc:	2044      	movs	r0, #68	; 0x44
 80027fe:	f7fe fa25 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002802:	2000      	movs	r0, #0
 8002804:	f7fe fa22 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002808:	2065      	movs	r0, #101	; 0x65
 800280a:	f7fe fa1f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe fa1c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002814:	2076      	movs	r0, #118	; 0x76
 8002816:	f7fe fa19 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe fa16 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002820:	2088      	movs	r0, #136	; 0x88
 8002822:	f7fe fa13 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe fa10 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800282c:	20c6      	movs	r0, #198	; 0xc6
 800282e:	f7fe f9e9 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002832:	2020      	movs	r0, #32
 8002834:	f7fe fa0a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002838:	2000      	movs	r0, #0
 800283a:	f7fe fa07 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800283e:	2017      	movs	r0, #23
 8002840:	f7fe fa04 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe fa01 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800284a:	2001      	movs	r0, #1
 800284c:	f7fe f9fe 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe f9fb 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002856:	20c7      	movs	r0, #199	; 0xc7
 8002858:	f7fe f9d4 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f7fe f9f5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f7fe f9f2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7fe f9ef 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe f9ec 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002874:	20c8      	movs	r0, #200	; 0xc8
 8002876:	f7fe f9c5 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe f9e6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe f9e3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe f9e0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe f9dd 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002892:	20c9      	movs	r0, #201	; 0xc9
 8002894:	f7fe f9b6 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe f9d7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe f9d4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe f9d1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fe f9ce 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7fe f9cb 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe f9c8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7fe f9c5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fe f9c2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7fe f9bf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe f9bc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe f9b9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe f9b6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe f9b3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe f9b0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fe f9ad 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fe f9aa 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 80028f8:	20e0      	movs	r0, #224	; 0xe0
 80028fa:	f7fe f983 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80028fe:	2016      	movs	r0, #22
 8002900:	f7fe f9a4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe f9a1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 800290a:	201c      	movs	r0, #28
 800290c:	f7fe f99e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002910:	2000      	movs	r0, #0
 8002912:	f7fe f99b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002916:	2021      	movs	r0, #33	; 0x21
 8002918:	f7fe f998 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe f995 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002922:	2036      	movs	r0, #54	; 0x36
 8002924:	f7fe f992 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f7fe f98f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 800292e:	2046      	movs	r0, #70	; 0x46
 8002930:	f7fe f98c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f7fe f989 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 800293a:	2052      	movs	r0, #82	; 0x52
 800293c:	f7fe f986 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f7fe f983 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002946:	2064      	movs	r0, #100	; 0x64
 8002948:	f7fe f980 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f7fe f97d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002952:	207a      	movs	r0, #122	; 0x7a
 8002954:	f7fe f97a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f7fe f977 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800295e:	208b      	movs	r0, #139	; 0x8b
 8002960:	f7fe f974 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f7fe f971 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800296a:	2099      	movs	r0, #153	; 0x99
 800296c:	f7fe f96e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002970:	2000      	movs	r0, #0
 8002972:	f7fe f96b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002976:	20a8      	movs	r0, #168	; 0xa8
 8002978:	f7fe f968 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297c:	2000      	movs	r0, #0
 800297e:	f7fe f965 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002982:	20b9      	movs	r0, #185	; 0xb9
 8002984:	f7fe f962 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f7fe f95f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800298e:	20c4      	movs	r0, #196	; 0xc4
 8002990:	f7fe f95c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f7fe f959 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 800299a:	20ca      	movs	r0, #202	; 0xca
 800299c:	f7fe f956 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe f953 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80029a6:	20d2      	movs	r0, #210	; 0xd2
 80029a8:	f7fe f950 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe f94d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 80029b2:	20d9      	movs	r0, #217	; 0xd9
 80029b4:	f7fe f94a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fe f947 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80029be:	20e0      	movs	r0, #224	; 0xe0
 80029c0:	f7fe f944 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe f941 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80029ca:	20f3      	movs	r0, #243	; 0xf3
 80029cc:	f7fe f93e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7fe f93b 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 80029d6:	20e1      	movs	r0, #225	; 0xe1
 80029d8:	f7fe f914 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80029dc:	2016      	movs	r0, #22
 80029de:	f7fe f935 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fe f932 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80029e8:	201c      	movs	r0, #28
 80029ea:	f7fe f92f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7fe f92c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 80029f4:	2022      	movs	r0, #34	; 0x22
 80029f6:	f7fe f929 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7fe f926 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002a00:	2036      	movs	r0, #54	; 0x36
 8002a02:	f7fe f923 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7fe f920 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002a0c:	2045      	movs	r0, #69	; 0x45
 8002a0e:	f7fe f91d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7fe f91a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002a18:	2052      	movs	r0, #82	; 0x52
 8002a1a:	f7fe f917 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe f914 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002a24:	2064      	movs	r0, #100	; 0x64
 8002a26:	f7fe f911 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7fe f90e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002a30:	207a      	movs	r0, #122	; 0x7a
 8002a32:	f7fe f90b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7fe f908 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002a3c:	208b      	movs	r0, #139	; 0x8b
 8002a3e:	f7fe f905 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7fe f902 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002a48:	2099      	movs	r0, #153	; 0x99
 8002a4a:	f7fe f8ff 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fe f8fc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002a54:	20a8      	movs	r0, #168	; 0xa8
 8002a56:	f7fe f8f9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fe f8f6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002a60:	20b9      	movs	r0, #185	; 0xb9
 8002a62:	f7fe f8f3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fe f8f0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002a6c:	20c4      	movs	r0, #196	; 0xc4
 8002a6e:	f7fe f8ed 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe f8ea 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002a78:	20ca      	movs	r0, #202	; 0xca
 8002a7a:	f7fe f8e7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fe f8e4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002a84:	20d2      	movs	r0, #210	; 0xd2
 8002a86:	f7fe f8e1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fe f8de 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002a90:	20d8      	movs	r0, #216	; 0xd8
 8002a92:	f7fe f8db 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe f8d8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002a9c:	20e0      	movs	r0, #224	; 0xe0
 8002a9e:	f7fe f8d5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fe f8d2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002aa8:	20f3      	movs	r0, #243	; 0xf3
 8002aaa:	f7fe f8cf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe f8cc 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002ab4:	20e2      	movs	r0, #226	; 0xe2
 8002ab6:	f7fe f8a5 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002aba:	2005      	movs	r0, #5
 8002abc:	f7fe f8c6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fe f8c3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002ac6:	200b      	movs	r0, #11
 8002ac8:	f7fe f8c0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fe f8bd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002ad2:	201b      	movs	r0, #27
 8002ad4:	f7fe f8ba 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fe f8b7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002ade:	2034      	movs	r0, #52	; 0x34
 8002ae0:	f7fe f8b4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fe f8b1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002aea:	2044      	movs	r0, #68	; 0x44
 8002aec:	f7fe f8ae 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fe f8ab 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002af6:	204f      	movs	r0, #79	; 0x4f
 8002af8:	f7fe f8a8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fe f8a5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002b02:	2061      	movs	r0, #97	; 0x61
 8002b04:	f7fe f8a2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fe f89f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002b0e:	2079      	movs	r0, #121	; 0x79
 8002b10:	f7fe f89c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7fe f899 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002b1a:	2088      	movs	r0, #136	; 0x88
 8002b1c:	f7fe f896 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fe f893 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002b26:	2097      	movs	r0, #151	; 0x97
 8002b28:	f7fe f890 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fe f88d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002b32:	20a6      	movs	r0, #166	; 0xa6
 8002b34:	f7fe f88a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fe f887 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002b3e:	20b7      	movs	r0, #183	; 0xb7
 8002b40:	f7fe f884 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe f881 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002b4a:	20c2      	movs	r0, #194	; 0xc2
 8002b4c:	f7fe f87e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7fe f87b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002b56:	20c7      	movs	r0, #199	; 0xc7
 8002b58:	f7fe f878 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7fe f875 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002b62:	20d1      	movs	r0, #209	; 0xd1
 8002b64:	f7fe f872 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fe f86f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002b6e:	20d6      	movs	r0, #214	; 0xd6
 8002b70:	f7fe f86c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fe f869 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002b7a:	20dd      	movs	r0, #221	; 0xdd
 8002b7c:	f7fe f866 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fe f863 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b86:	20f3      	movs	r0, #243	; 0xf3
 8002b88:	f7fe f860 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fe f85d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002b92:	20e3      	movs	r0, #227	; 0xe3
 8002b94:	f7fe f836 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002b98:	2005      	movs	r0, #5
 8002b9a:	f7fe f857 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fe f854 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f7fe f851 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fe f84e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002bb0:	201c      	movs	r0, #28
 8002bb2:	f7fe f84b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fe f848 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002bbc:	2033      	movs	r0, #51	; 0x33
 8002bbe:	f7fe f845 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fe f842 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002bc8:	2044      	movs	r0, #68	; 0x44
 8002bca:	f7fe f83f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fe f83c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002bd4:	2050      	movs	r0, #80	; 0x50
 8002bd6:	f7fe f839 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fe f836 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002be0:	2062      	movs	r0, #98	; 0x62
 8002be2:	f7fe f833 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7fe f830 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002bec:	2078      	movs	r0, #120	; 0x78
 8002bee:	f7fe f82d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fe f82a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002bf8:	2088      	movs	r0, #136	; 0x88
 8002bfa:	f7fe f827 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fe f824 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002c04:	2097      	movs	r0, #151	; 0x97
 8002c06:	f7fe f821 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fe f81e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002c10:	20a6      	movs	r0, #166	; 0xa6
 8002c12:	f7fe f81b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fe f818 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002c1c:	20b7      	movs	r0, #183	; 0xb7
 8002c1e:	f7fe f815 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fe f812 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002c28:	20c2      	movs	r0, #194	; 0xc2
 8002c2a:	f7fe f80f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe f80c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002c34:	20c7      	movs	r0, #199	; 0xc7
 8002c36:	f7fe f809 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7fe f806 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002c40:	20d1      	movs	r0, #209	; 0xd1
 8002c42:	f7fe f803 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7fe f800 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002c4c:	20d5      	movs	r0, #213	; 0xd5
 8002c4e:	f7fd fffd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7fd fffa 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002c58:	20dd      	movs	r0, #221	; 0xdd
 8002c5a:	f7fd fff7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fd fff4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c64:	20f3      	movs	r0, #243	; 0xf3
 8002c66:	f7fd fff1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7fd ffee 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002c70:	20e4      	movs	r0, #228	; 0xe4
 8002c72:	f7fd ffc7 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7fd ffe8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fd ffe5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7fd ffe2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fd ffdf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002c8e:	2002      	movs	r0, #2
 8002c90:	f7fd ffdc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd ffd9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002c9a:	202a      	movs	r0, #42	; 0x2a
 8002c9c:	f7fd ffd6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fd ffd3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002ca6:	203c      	movs	r0, #60	; 0x3c
 8002ca8:	f7fd ffd0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fd ffcd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002cb2:	204b      	movs	r0, #75	; 0x4b
 8002cb4:	f7fd ffca 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7fd ffc7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002cbe:	205d      	movs	r0, #93	; 0x5d
 8002cc0:	f7fd ffc4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7fd ffc1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002cca:	2074      	movs	r0, #116	; 0x74
 8002ccc:	f7fd ffbe 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7fd ffbb 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002cd6:	2084      	movs	r0, #132	; 0x84
 8002cd8:	f7fd ffb8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fd ffb5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002ce2:	2093      	movs	r0, #147	; 0x93
 8002ce4:	f7fd ffb2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd ffaf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002cee:	20a2      	movs	r0, #162	; 0xa2
 8002cf0:	f7fd ffac 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7fd ffa9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002cfa:	20b3      	movs	r0, #179	; 0xb3
 8002cfc:	f7fd ffa6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fd ffa3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002d06:	20be      	movs	r0, #190	; 0xbe
 8002d08:	f7fd ffa0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fd ff9d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002d12:	20c4      	movs	r0, #196	; 0xc4
 8002d14:	f7fd ff9a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7fd ff97 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002d1e:	20cd      	movs	r0, #205	; 0xcd
 8002d20:	f7fd ff94 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd ff91 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002d2a:	20d3      	movs	r0, #211	; 0xd3
 8002d2c:	f7fd ff8e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fd ff8b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002d36:	20dd      	movs	r0, #221	; 0xdd
 8002d38:	f7fd ff88 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fd ff85 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d42:	20f3      	movs	r0, #243	; 0xf3
 8002d44:	f7fd ff82 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd ff7f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002d4e:	20e5      	movs	r0, #229	; 0xe5
 8002d50:	f7fd ff58 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fd ff79 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7fd ff76 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd ff73 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fd ff70 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002d6c:	2002      	movs	r0, #2
 8002d6e:	f7fd ff6d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7fd ff6a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002d78:	2029      	movs	r0, #41	; 0x29
 8002d7a:	f7fd ff67 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fd ff64 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002d84:	203c      	movs	r0, #60	; 0x3c
 8002d86:	f7fd ff61 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd ff5e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002d90:	204b      	movs	r0, #75	; 0x4b
 8002d92:	f7fd ff5b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd ff58 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002d9c:	205d      	movs	r0, #93	; 0x5d
 8002d9e:	f7fd ff55 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd ff52 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002da8:	2074      	movs	r0, #116	; 0x74
 8002daa:	f7fd ff4f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd ff4c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002db4:	2084      	movs	r0, #132	; 0x84
 8002db6:	f7fd ff49 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fd ff46 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002dc0:	2093      	movs	r0, #147	; 0x93
 8002dc2:	f7fd ff43 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7fd ff40 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002dcc:	20a2      	movs	r0, #162	; 0xa2
 8002dce:	f7fd ff3d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fd ff3a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002dd8:	20b3      	movs	r0, #179	; 0xb3
 8002dda:	f7fd ff37 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fd ff34 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002de4:	20be      	movs	r0, #190	; 0xbe
 8002de6:	f7fd ff31 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fd ff2e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002df0:	20c4      	movs	r0, #196	; 0xc4
 8002df2:	f7fd ff2b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fd ff28 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002dfc:	20cd      	movs	r0, #205	; 0xcd
 8002dfe:	f7fd ff25 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7fd ff22 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002e08:	20d3      	movs	r0, #211	; 0xd3
 8002e0a:	f7fd ff1f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fd ff1c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002e14:	20dc      	movs	r0, #220	; 0xdc
 8002e16:	f7fd ff19 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fd ff16 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e20:	20f3      	movs	r0, #243	; 0xf3
 8002e22:	f7fd ff13 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7fd ff10 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002e2c:	20e6      	movs	r0, #230	; 0xe6
 8002e2e:	f7fd fee9 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002e32:	2011      	movs	r0, #17
 8002e34:	f7fd ff0a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd ff07 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002e3e:	2034      	movs	r0, #52	; 0x34
 8002e40:	f7fd ff04 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd ff01 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002e4a:	2056      	movs	r0, #86	; 0x56
 8002e4c:	f7fd fefe 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fefb 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002e56:	2076      	movs	r0, #118	; 0x76
 8002e58:	f7fd fef8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fef5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002e62:	2077      	movs	r0, #119	; 0x77
 8002e64:	f7fd fef2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd feef 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002e6e:	2066      	movs	r0, #102	; 0x66
 8002e70:	f7fd feec 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd fee9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002e7a:	2088      	movs	r0, #136	; 0x88
 8002e7c:	f7fd fee6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd fee3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e86:	2099      	movs	r0, #153	; 0x99
 8002e88:	f7fd fee0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fd fedd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002e92:	20bb      	movs	r0, #187	; 0xbb
 8002e94:	f7fd feda 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fed7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e9e:	2099      	movs	r0, #153	; 0x99
 8002ea0:	f7fd fed4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7fd fed1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002eaa:	2066      	movs	r0, #102	; 0x66
 8002eac:	f7fd fece 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fd fecb 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002eb6:	2055      	movs	r0, #85	; 0x55
 8002eb8:	f7fd fec8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fd fec5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002ec2:	2055      	movs	r0, #85	; 0x55
 8002ec4:	f7fd fec2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fd febf 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002ece:	2045      	movs	r0, #69	; 0x45
 8002ed0:	f7fd febc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7fd feb9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002eda:	2043      	movs	r0, #67	; 0x43
 8002edc:	f7fd feb6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7fd feb3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002ee6:	2044      	movs	r0, #68	; 0x44
 8002ee8:	f7fd feb0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7fd fead 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8002ef2:	20e7      	movs	r0, #231	; 0xe7
 8002ef4:	f7fd fe86 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002ef8:	2032      	movs	r0, #50	; 0x32
 8002efa:	f7fd fea7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fea4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002f04:	2055      	movs	r0, #85	; 0x55
 8002f06:	f7fd fea1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fe9e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002f10:	2076      	movs	r0, #118	; 0x76
 8002f12:	f7fd fe9b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fd fe98 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002f1c:	2066      	movs	r0, #102	; 0x66
 8002f1e:	f7fd fe95 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd fe92 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002f28:	2067      	movs	r0, #103	; 0x67
 8002f2a:	f7fd fe8f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fd fe8c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002f34:	2067      	movs	r0, #103	; 0x67
 8002f36:	f7fd fe89 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fe86 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002f40:	2087      	movs	r0, #135	; 0x87
 8002f42:	f7fd fe83 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fe80 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002f4c:	2099      	movs	r0, #153	; 0x99
 8002f4e:	f7fd fe7d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fe7a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002f58:	20bb      	movs	r0, #187	; 0xbb
 8002f5a:	f7fd fe77 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fe74 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002f64:	2099      	movs	r0, #153	; 0x99
 8002f66:	f7fd fe71 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7fd fe6e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002f70:	2077      	movs	r0, #119	; 0x77
 8002f72:	f7fd fe6b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fd fe68 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002f7c:	2044      	movs	r0, #68	; 0x44
 8002f7e:	f7fd fe65 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7fd fe62 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002f88:	2056      	movs	r0, #86	; 0x56
 8002f8a:	f7fd fe5f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7fd fe5c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002f94:	2023      	movs	r0, #35	; 0x23
 8002f96:	f7fd fe59 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7fd fe56 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002fa0:	2033      	movs	r0, #51	; 0x33
 8002fa2:	f7fd fe53 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7fd fe50 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002fac:	2045      	movs	r0, #69	; 0x45
 8002fae:	f7fd fe4d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f7fd fe4a 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8002fb8:	20e8      	movs	r0, #232	; 0xe8
 8002fba:	f7fd fe23 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f7fd fe44 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd fe41 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002fca:	2099      	movs	r0, #153	; 0x99
 8002fcc:	f7fd fe3e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fd fe3b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002fd6:	2087      	movs	r0, #135	; 0x87
 8002fd8:	f7fd fe38 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fe35 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002fe2:	2088      	movs	r0, #136	; 0x88
 8002fe4:	f7fd fe32 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fe2f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002fee:	2077      	movs	r0, #119	; 0x77
 8002ff0:	f7fd fe2c 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fd fe29 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002ffa:	2066      	movs	r0, #102	; 0x66
 8002ffc:	f7fd fe26 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd fe23 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003006:	2088      	movs	r0, #136	; 0x88
 8003008:	f7fd fe20 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fd fe1d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8003012:	20aa      	movs	r0, #170	; 0xaa
 8003014:	f7fd fe1a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fd fe17 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800301e:	20bb      	movs	r0, #187	; 0xbb
 8003020:	f7fd fe14 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fd fe11 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800302a:	2099      	movs	r0, #153	; 0x99
 800302c:	f7fd fe0e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fd fe0b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003036:	2066      	movs	r0, #102	; 0x66
 8003038:	f7fd fe08 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd fe05 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003042:	2055      	movs	r0, #85	; 0x55
 8003044:	f7fd fe02 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f7fd fdff 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800304e:	2055      	movs	r0, #85	; 0x55
 8003050:	f7fd fdfc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003054:	2000      	movs	r0, #0
 8003056:	f7fd fdf9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800305a:	2044      	movs	r0, #68	; 0x44
 800305c:	f7fd fdf6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003060:	2000      	movs	r0, #0
 8003062:	f7fd fdf3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003066:	2044      	movs	r0, #68	; 0x44
 8003068:	f7fd fdf0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306c:	2000      	movs	r0, #0
 800306e:	f7fd fded 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003072:	2055      	movs	r0, #85	; 0x55
 8003074:	f7fd fdea 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003078:	2000      	movs	r0, #0
 800307a:	f7fd fde7 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800307e:	20e9      	movs	r0, #233	; 0xe9
 8003080:	f7fd fdc0 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003084:	20aa      	movs	r0, #170	; 0xaa
 8003086:	f7fd fde1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fdde 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003090:	2000      	movs	r0, #0
 8003092:	f7fd fddb 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fdd8 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800309c:	2000      	movs	r0, #0
 800309e:	f7fd fdb1 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80030a2:	20aa      	movs	r0, #170	; 0xaa
 80030a4:	f7fd fdd2 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 80030a8:	20cf      	movs	r0, #207	; 0xcf
 80030aa:	f7fd fdab 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd fdcc 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7fd fdc9 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fdc6 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7fd fdc3 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fdc0 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7fd fdbd 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd fdba 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d8:	2000      	movs	r0, #0
 80030da:	f7fd fdb7 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd fdb4 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7fd fdb1 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fdae 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fd fdab 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd fda8 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7fd fda5 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fda2 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003108:	2000      	movs	r0, #0
 800310a:	f7fd fd9f 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fd9c 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8003114:	20f0      	movs	r0, #240	; 0xf0
 8003116:	f7fd fd75 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd fd96 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003120:	2050      	movs	r0, #80	; 0x50
 8003122:	f7fd fd93 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fd fd90 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312c:	2000      	movs	r0, #0
 800312e:	f7fd fd8d 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003132:	2000      	movs	r0, #0
 8003134:	f7fd fd8a 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003138:	20f3      	movs	r0, #243	; 0xf3
 800313a:	f7fd fd63 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800313e:	2000      	movs	r0, #0
 8003140:	f7fd fd84 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8003144:	20f9      	movs	r0, #249	; 0xf9
 8003146:	f7fd fd5d 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 800314a:	2006      	movs	r0, #6
 800314c:	f7fd fd7e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003150:	2010      	movs	r0, #16
 8003152:	f7fd fd7b 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003156:	2029      	movs	r0, #41	; 0x29
 8003158:	f7fd fd78 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fd75 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003162:	203a      	movs	r0, #58	; 0x3a
 8003164:	f7fd fd4e 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003168:	2055      	movs	r0, #85	; 0x55
 800316a:	f7fd fd6f 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800316e:	2011      	movs	r0, #17
 8003170:	f7fd fd48 	bl	8000c04 <LCD_WR_REG>
		HAL_Delay(100);
 8003174:	2064      	movs	r0, #100	; 0x64
 8003176:	f002 fedb 	bl	8005f30 <HAL_Delay>
		LCD_WR_REG(0x29);
 800317a:	2029      	movs	r0, #41	; 0x29
 800317c:	f7fd fd42 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003180:	2035      	movs	r0, #53	; 0x35
 8003182:	f7fd fd3f 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003186:	2000      	movs	r0, #0
 8003188:	f7fd fd60 	bl	8000c4c <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800318c:	2051      	movs	r0, #81	; 0x51
 800318e:	f7fd fd39 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003192:	20ff      	movs	r0, #255	; 0xff
 8003194:	f7fd fd5a 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003198:	2053      	movs	r0, #83	; 0x53
 800319a:	f7fd fd33 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800319e:	202c      	movs	r0, #44	; 0x2c
 80031a0:	f7fd fd54 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80031a4:	2055      	movs	r0, #85	; 0x55
 80031a6:	f7fd fd2d 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 80031aa:	2082      	movs	r0, #130	; 0x82
 80031ac:	f7fd fd4e 	bl	8000c4c <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 80031b0:	202c      	movs	r0, #44	; 0x2c
 80031b2:	f7fd fd27 	bl	8000c04 <LCD_WR_REG>
 80031b6:	f002 bca1 	b.w	8005afc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 80031ba:	4b04      	ldr	r3, [pc, #16]	; (80031cc <LCD_Init+0x1504>)
 80031bc:	889b      	ldrh	r3, [r3, #4]
 80031be:	f245 5210 	movw	r2, #21776	; 0x5510
 80031c2:	4293      	cmp	r3, r2
 80031c4:	f040 8782 	bne.w	80040cc <LCD_Init+0x2404>
 80031c8:	e002      	b.n	80031d0 <LCD_Init+0x1508>
 80031ca:	bf00      	nop
 80031cc:	20000fe8 	.word	0x20000fe8
		LCD_WriteReg(0xF000, 0x55);
 80031d0:	2155      	movs	r1, #85	; 0x55
 80031d2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80031d6:	f7fd fda1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80031da:	21aa      	movs	r1, #170	; 0xaa
 80031dc:	f24f 0001 	movw	r0, #61441	; 0xf001
 80031e0:	f7fd fd9c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80031e4:	2152      	movs	r1, #82	; 0x52
 80031e6:	f24f 0002 	movw	r0, #61442	; 0xf002
 80031ea:	f7fd fd97 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80031ee:	2108      	movs	r1, #8
 80031f0:	f24f 0003 	movw	r0, #61443	; 0xf003
 80031f4:	f7fd fd92 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80031f8:	2101      	movs	r1, #1
 80031fa:	f24f 0004 	movw	r0, #61444	; 0xf004
 80031fe:	f7fd fd8d 	bl	8000d1c <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8003202:	210d      	movs	r1, #13
 8003204:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003208:	f7fd fd88 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 800320c:	210d      	movs	r1, #13
 800320e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003212:	f7fd fd83 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8003216:	210d      	movs	r1, #13
 8003218:	f24b 0002 	movw	r0, #45058	; 0xb002
 800321c:	f7fd fd7e 	bl	8000d1c <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003220:	2134      	movs	r1, #52	; 0x34
 8003222:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003226:	f7fd fd79 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800322a:	2134      	movs	r1, #52	; 0x34
 800322c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003230:	f7fd fd74 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8003234:	2134      	movs	r1, #52	; 0x34
 8003236:	f24b 6002 	movw	r0, #46594	; 0xb602
 800323a:	f7fd fd6f 	bl	8000d1c <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800323e:	210d      	movs	r1, #13
 8003240:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003244:	f7fd fd6a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003248:	210d      	movs	r1, #13
 800324a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800324e:	f7fd fd65 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003252:	210d      	movs	r1, #13
 8003254:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003258:	f7fd fd60 	bl	8000d1c <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800325c:	2134      	movs	r1, #52	; 0x34
 800325e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003262:	f7fd fd5b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003266:	2134      	movs	r1, #52	; 0x34
 8003268:	f24b 7001 	movw	r0, #46849	; 0xb701
 800326c:	f7fd fd56 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003270:	2134      	movs	r1, #52	; 0x34
 8003272:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003276:	f7fd fd51 	bl	8000d1c <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800327a:	2100      	movs	r1, #0
 800327c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003280:	f7fd fd4c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003284:	2100      	movs	r1, #0
 8003286:	f24b 2001 	movw	r0, #45569	; 0xb201
 800328a:	f7fd fd47 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800328e:	2100      	movs	r1, #0
 8003290:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003294:	f7fd fd42 	bl	8000d1c <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003298:	2124      	movs	r1, #36	; 0x24
 800329a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800329e:	f7fd fd3d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80032a2:	2124      	movs	r1, #36	; 0x24
 80032a4:	f64b 0001 	movw	r0, #47105	; 0xb801
 80032a8:	f7fd fd38 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80032ac:	2124      	movs	r1, #36	; 0x24
 80032ae:	f64b 0002 	movw	r0, #47106	; 0xb802
 80032b2:	f7fd fd33 	bl	8000d1c <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80032b6:	2101      	movs	r1, #1
 80032b8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80032bc:	f7fd fd2e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80032c0:	210f      	movs	r1, #15
 80032c2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80032c6:	f7fd fd29 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80032ca:	210f      	movs	r1, #15
 80032cc:	f24b 3001 	movw	r0, #45825	; 0xb301
 80032d0:	f7fd fd24 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80032d4:	210f      	movs	r1, #15
 80032d6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80032da:	f7fd fd1f 	bl	8000d1c <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80032de:	2134      	movs	r1, #52	; 0x34
 80032e0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80032e4:	f7fd fd1a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80032e8:	2134      	movs	r1, #52	; 0x34
 80032ea:	f64b 1001 	movw	r0, #47361	; 0xb901
 80032ee:	f7fd fd15 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80032f2:	2134      	movs	r1, #52	; 0x34
 80032f4:	f64b 1002 	movw	r0, #47362	; 0xb902
 80032f8:	f7fd fd10 	bl	8000d1c <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80032fc:	2108      	movs	r1, #8
 80032fe:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003302:	f7fd fd0b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8003306:	2108      	movs	r1, #8
 8003308:	f24b 5001 	movw	r0, #46337	; 0xb501
 800330c:	f7fd fd06 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003310:	2108      	movs	r1, #8
 8003312:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003316:	f7fd fd01 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800331a:	2103      	movs	r1, #3
 800331c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003320:	f7fd fcfc 	bl	8000d1c <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8003324:	2124      	movs	r1, #36	; 0x24
 8003326:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800332a:	f7fd fcf7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800332e:	2124      	movs	r1, #36	; 0x24
 8003330:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003334:	f7fd fcf2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003338:	2124      	movs	r1, #36	; 0x24
 800333a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800333e:	f7fd fced 	bl	8000d1c <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8003342:	2100      	movs	r1, #0
 8003344:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003348:	f7fd fce8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800334c:	2178      	movs	r1, #120	; 0x78
 800334e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003352:	f7fd fce3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003356:	2100      	movs	r1, #0
 8003358:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800335c:	f7fd fcde 	bl	8000d1c <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003360:	2100      	movs	r1, #0
 8003362:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003366:	f7fd fcd9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800336a:	2178      	movs	r1, #120	; 0x78
 800336c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003370:	f7fd fcd4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003374:	2100      	movs	r1, #0
 8003376:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800337a:	f7fd fccf 	bl	8000d1c <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800337e:	2100      	movs	r1, #0
 8003380:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003384:	f7fd fcca 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003388:	2164      	movs	r1, #100	; 0x64
 800338a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800338e:	f7fd fcc5 	bl	8000d1c <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003392:	2100      	movs	r1, #0
 8003394:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003398:	f7fd fcc0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800339c:	2133      	movs	r1, #51	; 0x33
 800339e:	f24d 1001 	movw	r0, #53505	; 0xd101
 80033a2:	f7fd fcbb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80033a6:	2100      	movs	r1, #0
 80033a8:	f24d 1002 	movw	r0, #53506	; 0xd102
 80033ac:	f7fd fcb6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80033b0:	2134      	movs	r1, #52	; 0x34
 80033b2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80033b6:	f7fd fcb1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80033ba:	2100      	movs	r1, #0
 80033bc:	f24d 1004 	movw	r0, #53508	; 0xd104
 80033c0:	f7fd fcac 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80033c4:	213a      	movs	r1, #58	; 0x3a
 80033c6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80033ca:	f7fd fca7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80033ce:	2100      	movs	r1, #0
 80033d0:	f24d 1006 	movw	r0, #53510	; 0xd106
 80033d4:	f7fd fca2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80033d8:	214a      	movs	r1, #74	; 0x4a
 80033da:	f24d 1007 	movw	r0, #53511	; 0xd107
 80033de:	f7fd fc9d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80033e2:	2100      	movs	r1, #0
 80033e4:	f24d 1008 	movw	r0, #53512	; 0xd108
 80033e8:	f7fd fc98 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80033ec:	215c      	movs	r1, #92	; 0x5c
 80033ee:	f24d 1009 	movw	r0, #53513	; 0xd109
 80033f2:	f7fd fc93 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80033f6:	2100      	movs	r1, #0
 80033f8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80033fc:	f7fd fc8e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003400:	2181      	movs	r1, #129	; 0x81
 8003402:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003406:	f7fd fc89 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800340a:	2100      	movs	r1, #0
 800340c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003410:	f7fd fc84 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8003414:	21a6      	movs	r1, #166	; 0xa6
 8003416:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800341a:	f7fd fc7f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800341e:	2100      	movs	r1, #0
 8003420:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003424:	f7fd fc7a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003428:	21e5      	movs	r1, #229	; 0xe5
 800342a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800342e:	f7fd fc75 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8003432:	2101      	movs	r1, #1
 8003434:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003438:	f7fd fc70 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800343c:	2113      	movs	r1, #19
 800343e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003442:	f7fd fc6b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8003446:	2101      	movs	r1, #1
 8003448:	f24d 1012 	movw	r0, #53522	; 0xd112
 800344c:	f7fd fc66 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003450:	2154      	movs	r1, #84	; 0x54
 8003452:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003456:	f7fd fc61 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800345a:	2101      	movs	r1, #1
 800345c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003460:	f7fd fc5c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003464:	2182      	movs	r1, #130	; 0x82
 8003466:	f24d 1015 	movw	r0, #53525	; 0xd115
 800346a:	f7fd fc57 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800346e:	2101      	movs	r1, #1
 8003470:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003474:	f7fd fc52 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003478:	21ca      	movs	r1, #202	; 0xca
 800347a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800347e:	f7fd fc4d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003482:	2102      	movs	r1, #2
 8003484:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003488:	f7fd fc48 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800348c:	2100      	movs	r1, #0
 800348e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003492:	f7fd fc43 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003496:	2102      	movs	r1, #2
 8003498:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800349c:	f7fd fc3e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80034a0:	2101      	movs	r1, #1
 80034a2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80034a6:	f7fd fc39 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80034aa:	2102      	movs	r1, #2
 80034ac:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80034b0:	f7fd fc34 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80034b4:	2134      	movs	r1, #52	; 0x34
 80034b6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80034ba:	f7fd fc2f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80034be:	2102      	movs	r1, #2
 80034c0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80034c4:	f7fd fc2a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80034c8:	2167      	movs	r1, #103	; 0x67
 80034ca:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80034ce:	f7fd fc25 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80034d2:	2102      	movs	r1, #2
 80034d4:	f24d 1020 	movw	r0, #53536	; 0xd120
 80034d8:	f7fd fc20 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80034dc:	2184      	movs	r1, #132	; 0x84
 80034de:	f24d 1021 	movw	r0, #53537	; 0xd121
 80034e2:	f7fd fc1b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80034e6:	2102      	movs	r1, #2
 80034e8:	f24d 1022 	movw	r0, #53538	; 0xd122
 80034ec:	f7fd fc16 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80034f0:	21a4      	movs	r1, #164	; 0xa4
 80034f2:	f24d 1023 	movw	r0, #53539	; 0xd123
 80034f6:	f7fd fc11 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80034fa:	2102      	movs	r1, #2
 80034fc:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003500:	f7fd fc0c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003504:	21b7      	movs	r1, #183	; 0xb7
 8003506:	f24d 1025 	movw	r0, #53541	; 0xd125
 800350a:	f7fd fc07 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800350e:	2102      	movs	r1, #2
 8003510:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003514:	f7fd fc02 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003518:	21cf      	movs	r1, #207	; 0xcf
 800351a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800351e:	f7fd fbfd 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003522:	2102      	movs	r1, #2
 8003524:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003528:	f7fd fbf8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800352c:	21de      	movs	r1, #222	; 0xde
 800352e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003532:	f7fd fbf3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003536:	2102      	movs	r1, #2
 8003538:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800353c:	f7fd fbee 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003540:	21f2      	movs	r1, #242	; 0xf2
 8003542:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003546:	f7fd fbe9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800354a:	2102      	movs	r1, #2
 800354c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003550:	f7fd fbe4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003554:	21fe      	movs	r1, #254	; 0xfe
 8003556:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800355a:	f7fd fbdf 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800355e:	2103      	movs	r1, #3
 8003560:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003564:	f7fd fbda 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003568:	2110      	movs	r1, #16
 800356a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800356e:	f7fd fbd5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003572:	2103      	movs	r1, #3
 8003574:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003578:	f7fd fbd0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800357c:	2133      	movs	r1, #51	; 0x33
 800357e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003582:	f7fd fbcb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003586:	2103      	movs	r1, #3
 8003588:	f24d 1032 	movw	r0, #53554	; 0xd132
 800358c:	f7fd fbc6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003590:	216d      	movs	r1, #109	; 0x6d
 8003592:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003596:	f7fd fbc1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800359a:	2100      	movs	r1, #0
 800359c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80035a0:	f7fd fbbc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80035a4:	2133      	movs	r1, #51	; 0x33
 80035a6:	f24d 2001 	movw	r0, #53761	; 0xd201
 80035aa:	f7fd fbb7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80035ae:	2100      	movs	r1, #0
 80035b0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80035b4:	f7fd fbb2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80035b8:	2134      	movs	r1, #52	; 0x34
 80035ba:	f24d 2003 	movw	r0, #53763	; 0xd203
 80035be:	f7fd fbad 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80035c2:	2100      	movs	r1, #0
 80035c4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80035c8:	f7fd fba8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80035cc:	213a      	movs	r1, #58	; 0x3a
 80035ce:	f24d 2005 	movw	r0, #53765	; 0xd205
 80035d2:	f7fd fba3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80035d6:	2100      	movs	r1, #0
 80035d8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80035dc:	f7fd fb9e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80035e0:	214a      	movs	r1, #74	; 0x4a
 80035e2:	f24d 2007 	movw	r0, #53767	; 0xd207
 80035e6:	f7fd fb99 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80035ea:	2100      	movs	r1, #0
 80035ec:	f24d 2008 	movw	r0, #53768	; 0xd208
 80035f0:	f7fd fb94 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80035f4:	215c      	movs	r1, #92	; 0x5c
 80035f6:	f24d 2009 	movw	r0, #53769	; 0xd209
 80035fa:	f7fd fb8f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80035fe:	2100      	movs	r1, #0
 8003600:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003604:	f7fd fb8a 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003608:	2181      	movs	r1, #129	; 0x81
 800360a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800360e:	f7fd fb85 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003612:	2100      	movs	r1, #0
 8003614:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003618:	f7fd fb80 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800361c:	21a6      	movs	r1, #166	; 0xa6
 800361e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003622:	f7fd fb7b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003626:	2100      	movs	r1, #0
 8003628:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800362c:	f7fd fb76 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003630:	21e5      	movs	r1, #229	; 0xe5
 8003632:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003636:	f7fd fb71 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800363a:	2101      	movs	r1, #1
 800363c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003640:	f7fd fb6c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003644:	2113      	movs	r1, #19
 8003646:	f24d 2011 	movw	r0, #53777	; 0xd211
 800364a:	f7fd fb67 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 800364e:	2101      	movs	r1, #1
 8003650:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003654:	f7fd fb62 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003658:	2154      	movs	r1, #84	; 0x54
 800365a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800365e:	f7fd fb5d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003662:	2101      	movs	r1, #1
 8003664:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003668:	f7fd fb58 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800366c:	2182      	movs	r1, #130	; 0x82
 800366e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003672:	f7fd fb53 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003676:	2101      	movs	r1, #1
 8003678:	f24d 2016 	movw	r0, #53782	; 0xd216
 800367c:	f7fd fb4e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003680:	21ca      	movs	r1, #202	; 0xca
 8003682:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003686:	f7fd fb49 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800368a:	2102      	movs	r1, #2
 800368c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003690:	f7fd fb44 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003694:	2100      	movs	r1, #0
 8003696:	f24d 2019 	movw	r0, #53785	; 0xd219
 800369a:	f7fd fb3f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800369e:	2102      	movs	r1, #2
 80036a0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80036a4:	f7fd fb3a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 80036a8:	2101      	movs	r1, #1
 80036aa:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80036ae:	f7fd fb35 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 80036b2:	2102      	movs	r1, #2
 80036b4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80036b8:	f7fd fb30 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80036bc:	2134      	movs	r1, #52	; 0x34
 80036be:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80036c2:	f7fd fb2b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80036c6:	2102      	movs	r1, #2
 80036c8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80036cc:	f7fd fb26 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80036d0:	2167      	movs	r1, #103	; 0x67
 80036d2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80036d6:	f7fd fb21 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80036da:	2102      	movs	r1, #2
 80036dc:	f24d 2020 	movw	r0, #53792	; 0xd220
 80036e0:	f7fd fb1c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80036e4:	2184      	movs	r1, #132	; 0x84
 80036e6:	f24d 2021 	movw	r0, #53793	; 0xd221
 80036ea:	f7fd fb17 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80036ee:	2102      	movs	r1, #2
 80036f0:	f24d 2022 	movw	r0, #53794	; 0xd222
 80036f4:	f7fd fb12 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80036f8:	21a4      	movs	r1, #164	; 0xa4
 80036fa:	f24d 2023 	movw	r0, #53795	; 0xd223
 80036fe:	f7fd fb0d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003702:	2102      	movs	r1, #2
 8003704:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003708:	f7fd fb08 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 800370c:	21b7      	movs	r1, #183	; 0xb7
 800370e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003712:	f7fd fb03 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003716:	2102      	movs	r1, #2
 8003718:	f24d 2026 	movw	r0, #53798	; 0xd226
 800371c:	f7fd fafe 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003720:	21cf      	movs	r1, #207	; 0xcf
 8003722:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003726:	f7fd faf9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800372a:	2102      	movs	r1, #2
 800372c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003730:	f7fd faf4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003734:	21de      	movs	r1, #222	; 0xde
 8003736:	f24d 2029 	movw	r0, #53801	; 0xd229
 800373a:	f7fd faef 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800373e:	2102      	movs	r1, #2
 8003740:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003744:	f7fd faea 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003748:	21f2      	movs	r1, #242	; 0xf2
 800374a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800374e:	f7fd fae5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003752:	2102      	movs	r1, #2
 8003754:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003758:	f7fd fae0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 800375c:	21fe      	movs	r1, #254	; 0xfe
 800375e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003762:	f7fd fadb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003766:	2103      	movs	r1, #3
 8003768:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800376c:	f7fd fad6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003770:	2110      	movs	r1, #16
 8003772:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003776:	f7fd fad1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 800377a:	2103      	movs	r1, #3
 800377c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003780:	f7fd facc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003784:	2133      	movs	r1, #51	; 0x33
 8003786:	f24d 2031 	movw	r0, #53809	; 0xd231
 800378a:	f7fd fac7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800378e:	2103      	movs	r1, #3
 8003790:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003794:	f7fd fac2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003798:	216d      	movs	r1, #109	; 0x6d
 800379a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800379e:	f7fd fabd 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 80037a2:	2100      	movs	r1, #0
 80037a4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80037a8:	f7fd fab8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 80037ac:	2133      	movs	r1, #51	; 0x33
 80037ae:	f24d 3001 	movw	r0, #54017	; 0xd301
 80037b2:	f7fd fab3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 80037b6:	2100      	movs	r1, #0
 80037b8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80037bc:	f7fd faae 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80037c0:	2134      	movs	r1, #52	; 0x34
 80037c2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80037c6:	f7fd faa9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80037ca:	2100      	movs	r1, #0
 80037cc:	f24d 3004 	movw	r0, #54020	; 0xd304
 80037d0:	f7fd faa4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 80037d4:	213a      	movs	r1, #58	; 0x3a
 80037d6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80037da:	f7fd fa9f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 80037de:	2100      	movs	r1, #0
 80037e0:	f24d 3006 	movw	r0, #54022	; 0xd306
 80037e4:	f7fd fa9a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 80037e8:	214a      	movs	r1, #74	; 0x4a
 80037ea:	f24d 3007 	movw	r0, #54023	; 0xd307
 80037ee:	f7fd fa95 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 80037f2:	2100      	movs	r1, #0
 80037f4:	f24d 3008 	movw	r0, #54024	; 0xd308
 80037f8:	f7fd fa90 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 80037fc:	215c      	movs	r1, #92	; 0x5c
 80037fe:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003802:	f7fd fa8b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003806:	2100      	movs	r1, #0
 8003808:	f24d 300a 	movw	r0, #54026	; 0xd30a
 800380c:	f7fd fa86 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003810:	2181      	movs	r1, #129	; 0x81
 8003812:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003816:	f7fd fa81 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800381a:	2100      	movs	r1, #0
 800381c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003820:	f7fd fa7c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003824:	21a6      	movs	r1, #166	; 0xa6
 8003826:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800382a:	f7fd fa77 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 800382e:	2100      	movs	r1, #0
 8003830:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003834:	f7fd fa72 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003838:	21e5      	movs	r1, #229	; 0xe5
 800383a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800383e:	f7fd fa6d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003842:	2101      	movs	r1, #1
 8003844:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003848:	f7fd fa68 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 800384c:	2113      	movs	r1, #19
 800384e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003852:	f7fd fa63 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003856:	2101      	movs	r1, #1
 8003858:	f24d 3012 	movw	r0, #54034	; 0xd312
 800385c:	f7fd fa5e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003860:	2154      	movs	r1, #84	; 0x54
 8003862:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003866:	f7fd fa59 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 800386a:	2101      	movs	r1, #1
 800386c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003870:	f7fd fa54 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003874:	2182      	movs	r1, #130	; 0x82
 8003876:	f24d 3015 	movw	r0, #54037	; 0xd315
 800387a:	f7fd fa4f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 800387e:	2101      	movs	r1, #1
 8003880:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003884:	f7fd fa4a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003888:	21ca      	movs	r1, #202	; 0xca
 800388a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800388e:	f7fd fa45 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003892:	2102      	movs	r1, #2
 8003894:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003898:	f7fd fa40 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 800389c:	2100      	movs	r1, #0
 800389e:	f24d 3019 	movw	r0, #54041	; 0xd319
 80038a2:	f7fd fa3b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 80038a6:	2102      	movs	r1, #2
 80038a8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80038ac:	f7fd fa36 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 80038b0:	2101      	movs	r1, #1
 80038b2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80038b6:	f7fd fa31 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 80038ba:	2102      	movs	r1, #2
 80038bc:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80038c0:	f7fd fa2c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 80038c4:	2134      	movs	r1, #52	; 0x34
 80038c6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80038ca:	f7fd fa27 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 80038ce:	2102      	movs	r1, #2
 80038d0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80038d4:	f7fd fa22 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 80038d8:	2167      	movs	r1, #103	; 0x67
 80038da:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80038de:	f7fd fa1d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 80038e2:	2102      	movs	r1, #2
 80038e4:	f24d 3020 	movw	r0, #54048	; 0xd320
 80038e8:	f7fd fa18 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 80038ec:	2184      	movs	r1, #132	; 0x84
 80038ee:	f24d 3021 	movw	r0, #54049	; 0xd321
 80038f2:	f7fd fa13 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 80038f6:	2102      	movs	r1, #2
 80038f8:	f24d 3022 	movw	r0, #54050	; 0xd322
 80038fc:	f7fd fa0e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003900:	21a4      	movs	r1, #164	; 0xa4
 8003902:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003906:	f7fd fa09 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 800390a:	2102      	movs	r1, #2
 800390c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003910:	f7fd fa04 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003914:	21b7      	movs	r1, #183	; 0xb7
 8003916:	f24d 3025 	movw	r0, #54053	; 0xd325
 800391a:	f7fd f9ff 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 800391e:	2102      	movs	r1, #2
 8003920:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003924:	f7fd f9fa 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003928:	21cf      	movs	r1, #207	; 0xcf
 800392a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800392e:	f7fd f9f5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003932:	2102      	movs	r1, #2
 8003934:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003938:	f7fd f9f0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 800393c:	21de      	movs	r1, #222	; 0xde
 800393e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003942:	f7fd f9eb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003946:	2102      	movs	r1, #2
 8003948:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800394c:	f7fd f9e6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003950:	21f2      	movs	r1, #242	; 0xf2
 8003952:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003956:	f7fd f9e1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 800395a:	2102      	movs	r1, #2
 800395c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003960:	f7fd f9dc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003964:	21fe      	movs	r1, #254	; 0xfe
 8003966:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800396a:	f7fd f9d7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 800396e:	2103      	movs	r1, #3
 8003970:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003974:	f7fd f9d2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003978:	2110      	movs	r1, #16
 800397a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800397e:	f7fd f9cd 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003982:	2103      	movs	r1, #3
 8003984:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003988:	f7fd f9c8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 800398c:	2133      	movs	r1, #51	; 0x33
 800398e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003992:	f7fd f9c3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003996:	2103      	movs	r1, #3
 8003998:	f24d 3032 	movw	r0, #54066	; 0xd332
 800399c:	f7fd f9be 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 80039a0:	216d      	movs	r1, #109	; 0x6d
 80039a2:	f24d 3033 	movw	r0, #54067	; 0xd333
 80039a6:	f7fd f9b9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 80039aa:	2100      	movs	r1, #0
 80039ac:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80039b0:	f7fd f9b4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 80039b4:	2133      	movs	r1, #51	; 0x33
 80039b6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80039ba:	f7fd f9af 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 80039be:	2100      	movs	r1, #0
 80039c0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80039c4:	f7fd f9aa 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 80039c8:	2134      	movs	r1, #52	; 0x34
 80039ca:	f24d 4003 	movw	r0, #54275	; 0xd403
 80039ce:	f7fd f9a5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 80039d2:	2100      	movs	r1, #0
 80039d4:	f24d 4004 	movw	r0, #54276	; 0xd404
 80039d8:	f7fd f9a0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 80039dc:	213a      	movs	r1, #58	; 0x3a
 80039de:	f24d 4005 	movw	r0, #54277	; 0xd405
 80039e2:	f7fd f99b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 80039e6:	2100      	movs	r1, #0
 80039e8:	f24d 4006 	movw	r0, #54278	; 0xd406
 80039ec:	f7fd f996 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 80039f0:	214a      	movs	r1, #74	; 0x4a
 80039f2:	f24d 4007 	movw	r0, #54279	; 0xd407
 80039f6:	f7fd f991 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 80039fa:	2100      	movs	r1, #0
 80039fc:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003a00:	f7fd f98c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003a04:	215c      	movs	r1, #92	; 0x5c
 8003a06:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003a0a:	f7fd f987 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003a0e:	2100      	movs	r1, #0
 8003a10:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003a14:	f7fd f982 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003a18:	2181      	movs	r1, #129	; 0x81
 8003a1a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003a1e:	f7fd f97d 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003a22:	2100      	movs	r1, #0
 8003a24:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003a28:	f7fd f978 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003a2c:	21a6      	movs	r1, #166	; 0xa6
 8003a2e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003a32:	f7fd f973 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003a36:	2100      	movs	r1, #0
 8003a38:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003a3c:	f7fd f96e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003a40:	21e5      	movs	r1, #229	; 0xe5
 8003a42:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003a46:	f7fd f969 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003a50:	f7fd f964 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003a54:	2113      	movs	r1, #19
 8003a56:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003a5a:	f7fd f95f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003a5e:	2101      	movs	r1, #1
 8003a60:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003a64:	f7fd f95a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003a68:	2154      	movs	r1, #84	; 0x54
 8003a6a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003a6e:	f7fd f955 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003a72:	2101      	movs	r1, #1
 8003a74:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003a78:	f7fd f950 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003a7c:	2182      	movs	r1, #130	; 0x82
 8003a7e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003a82:	f7fd f94b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003a86:	2101      	movs	r1, #1
 8003a88:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003a8c:	f7fd f946 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003a90:	21ca      	movs	r1, #202	; 0xca
 8003a92:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003a96:	f7fd f941 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003aa0:	f7fd f93c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003aaa:	f7fd f937 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003aae:	2102      	movs	r1, #2
 8003ab0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003ab4:	f7fd f932 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003ab8:	2101      	movs	r1, #1
 8003aba:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003abe:	f7fd f92d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003ac8:	f7fd f928 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003acc:	2134      	movs	r1, #52	; 0x34
 8003ace:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003ad2:	f7fd f923 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003adc:	f7fd f91e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003ae0:	2167      	movs	r1, #103	; 0x67
 8003ae2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003ae6:	f7fd f919 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003aea:	2102      	movs	r1, #2
 8003aec:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003af0:	f7fd f914 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003af4:	2184      	movs	r1, #132	; 0x84
 8003af6:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003afa:	f7fd f90f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003afe:	2102      	movs	r1, #2
 8003b00:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003b04:	f7fd f90a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003b08:	21a4      	movs	r1, #164	; 0xa4
 8003b0a:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003b0e:	f7fd f905 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003b12:	2102      	movs	r1, #2
 8003b14:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003b18:	f7fd f900 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003b1c:	21b7      	movs	r1, #183	; 0xb7
 8003b1e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003b22:	f7fd f8fb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003b26:	2102      	movs	r1, #2
 8003b28:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003b2c:	f7fd f8f6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003b30:	21cf      	movs	r1, #207	; 0xcf
 8003b32:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003b36:	f7fd f8f1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003b40:	f7fd f8ec 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003b44:	21de      	movs	r1, #222	; 0xde
 8003b46:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003b4a:	f7fd f8e7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003b4e:	2102      	movs	r1, #2
 8003b50:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003b54:	f7fd f8e2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003b58:	21f2      	movs	r1, #242	; 0xf2
 8003b5a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003b5e:	f7fd f8dd 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003b62:	2102      	movs	r1, #2
 8003b64:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003b68:	f7fd f8d8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003b6c:	21fe      	movs	r1, #254	; 0xfe
 8003b6e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003b72:	f7fd f8d3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003b76:	2103      	movs	r1, #3
 8003b78:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003b7c:	f7fd f8ce 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003b80:	2110      	movs	r1, #16
 8003b82:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003b86:	f7fd f8c9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003b8a:	2103      	movs	r1, #3
 8003b8c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003b90:	f7fd f8c4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003b94:	2133      	movs	r1, #51	; 0x33
 8003b96:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003b9a:	f7fd f8bf 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003ba4:	f7fd f8ba 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003ba8:	216d      	movs	r1, #109	; 0x6d
 8003baa:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003bae:	f7fd f8b5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003bb8:	f7fd f8b0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003bbc:	2133      	movs	r1, #51	; 0x33
 8003bbe:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003bc2:	f7fd f8ab 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003bcc:	f7fd f8a6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003bd0:	2134      	movs	r1, #52	; 0x34
 8003bd2:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003bd6:	f7fd f8a1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003bda:	2100      	movs	r1, #0
 8003bdc:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003be0:	f7fd f89c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003be4:	213a      	movs	r1, #58	; 0x3a
 8003be6:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003bea:	f7fd f897 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003bf4:	f7fd f892 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003bf8:	214a      	movs	r1, #74	; 0x4a
 8003bfa:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003bfe:	f7fd f88d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003c02:	2100      	movs	r1, #0
 8003c04:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003c08:	f7fd f888 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003c0c:	215c      	movs	r1, #92	; 0x5c
 8003c0e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003c12:	f7fd f883 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003c16:	2100      	movs	r1, #0
 8003c18:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003c1c:	f7fd f87e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003c20:	2181      	movs	r1, #129	; 0x81
 8003c22:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003c26:	f7fd f879 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003c30:	f7fd f874 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003c34:	21a6      	movs	r1, #166	; 0xa6
 8003c36:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003c3a:	f7fd f86f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003c3e:	2100      	movs	r1, #0
 8003c40:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003c44:	f7fd f86a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003c48:	21e5      	movs	r1, #229	; 0xe5
 8003c4a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003c4e:	f7fd f865 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003c52:	2101      	movs	r1, #1
 8003c54:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003c58:	f7fd f860 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003c5c:	2113      	movs	r1, #19
 8003c5e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003c62:	f7fd f85b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003c66:	2101      	movs	r1, #1
 8003c68:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003c6c:	f7fd f856 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003c70:	2154      	movs	r1, #84	; 0x54
 8003c72:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003c76:	f7fd f851 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003c80:	f7fd f84c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003c84:	2182      	movs	r1, #130	; 0x82
 8003c86:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003c8a:	f7fd f847 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003c8e:	2101      	movs	r1, #1
 8003c90:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003c94:	f7fd f842 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003c98:	21ca      	movs	r1, #202	; 0xca
 8003c9a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003c9e:	f7fd f83d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003ca8:	f7fd f838 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003cac:	2100      	movs	r1, #0
 8003cae:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003cb2:	f7fd f833 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003cbc:	f7fd f82e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003cc6:	f7fd f829 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003cca:	2102      	movs	r1, #2
 8003ccc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003cd0:	f7fd f824 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003cd4:	2134      	movs	r1, #52	; 0x34
 8003cd6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003cda:	f7fd f81f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003cde:	2102      	movs	r1, #2
 8003ce0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003ce4:	f7fd f81a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003ce8:	2167      	movs	r1, #103	; 0x67
 8003cea:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003cee:	f7fd f815 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003cf8:	f7fd f810 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003cfc:	2184      	movs	r1, #132	; 0x84
 8003cfe:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003d02:	f7fd f80b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003d06:	2102      	movs	r1, #2
 8003d08:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003d0c:	f7fd f806 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003d10:	21a4      	movs	r1, #164	; 0xa4
 8003d12:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003d16:	f7fd f801 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003d20:	f7fc fffc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003d24:	21b7      	movs	r1, #183	; 0xb7
 8003d26:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003d2a:	f7fc fff7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003d2e:	2102      	movs	r1, #2
 8003d30:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003d34:	f7fc fff2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003d38:	21cf      	movs	r1, #207	; 0xcf
 8003d3a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003d3e:	f7fc ffed 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003d42:	2102      	movs	r1, #2
 8003d44:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003d48:	f7fc ffe8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003d4c:	21de      	movs	r1, #222	; 0xde
 8003d4e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003d52:	f7fc ffe3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003d56:	2102      	movs	r1, #2
 8003d58:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003d5c:	f7fc ffde 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003d60:	21f2      	movs	r1, #242	; 0xf2
 8003d62:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003d66:	f7fc ffd9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003d70:	f7fc ffd4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003d74:	21fe      	movs	r1, #254	; 0xfe
 8003d76:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003d7a:	f7fc ffcf 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003d7e:	2103      	movs	r1, #3
 8003d80:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003d84:	f7fc ffca 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003d88:	2110      	movs	r1, #16
 8003d8a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003d8e:	f7fc ffc5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003d92:	2103      	movs	r1, #3
 8003d94:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003d98:	f7fc ffc0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003d9c:	2133      	movs	r1, #51	; 0x33
 8003d9e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003da2:	f7fc ffbb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003da6:	2103      	movs	r1, #3
 8003da8:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003dac:	f7fc ffb6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003db0:	216d      	movs	r1, #109	; 0x6d
 8003db2:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003db6:	f7fc ffb1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003dc0:	f7fc ffac 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003dc4:	2133      	movs	r1, #51	; 0x33
 8003dc6:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003dca:	f7fc ffa7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003dd4:	f7fc ffa2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003dd8:	2134      	movs	r1, #52	; 0x34
 8003dda:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003dde:	f7fc ff9d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003de2:	2100      	movs	r1, #0
 8003de4:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003de8:	f7fc ff98 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003dec:	213a      	movs	r1, #58	; 0x3a
 8003dee:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003df2:	f7fc ff93 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003df6:	2100      	movs	r1, #0
 8003df8:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003dfc:	f7fc ff8e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003e00:	214a      	movs	r1, #74	; 0x4a
 8003e02:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003e06:	f7fc ff89 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003e10:	f7fc ff84 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003e14:	215c      	movs	r1, #92	; 0x5c
 8003e16:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003e1a:	f7fc ff7f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003e1e:	2100      	movs	r1, #0
 8003e20:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003e24:	f7fc ff7a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003e28:	2181      	movs	r1, #129	; 0x81
 8003e2a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003e2e:	f7fc ff75 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003e32:	2100      	movs	r1, #0
 8003e34:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003e38:	f7fc ff70 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003e3c:	21a6      	movs	r1, #166	; 0xa6
 8003e3e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003e42:	f7fc ff6b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003e46:	2100      	movs	r1, #0
 8003e48:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003e4c:	f7fc ff66 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003e50:	21e5      	movs	r1, #229	; 0xe5
 8003e52:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003e56:	f7fc ff61 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003e60:	f7fc ff5c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8003e64:	2113      	movs	r1, #19
 8003e66:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003e6a:	f7fc ff57 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8003e6e:	2101      	movs	r1, #1
 8003e70:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003e74:	f7fc ff52 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8003e78:	2154      	movs	r1, #84	; 0x54
 8003e7a:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003e7e:	f7fc ff4d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8003e82:	2101      	movs	r1, #1
 8003e84:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003e88:	f7fc ff48 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8003e8c:	2182      	movs	r1, #130	; 0x82
 8003e8e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003e92:	f7fc ff43 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8003e96:	2101      	movs	r1, #1
 8003e98:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003e9c:	f7fc ff3e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8003ea0:	21ca      	movs	r1, #202	; 0xca
 8003ea2:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003ea6:	f7fc ff39 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8003eaa:	2102      	movs	r1, #2
 8003eac:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003eb0:	f7fc ff34 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003eba:	f7fc ff2f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003ec4:	f7fc ff2a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8003ec8:	2101      	movs	r1, #1
 8003eca:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003ece:	f7fc ff25 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003ed8:	f7fc ff20 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8003edc:	2134      	movs	r1, #52	; 0x34
 8003ede:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003ee2:	f7fc ff1b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003eec:	f7fc ff16 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8003ef0:	2167      	movs	r1, #103	; 0x67
 8003ef2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003ef6:	f7fc ff11 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8003efa:	2102      	movs	r1, #2
 8003efc:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003f00:	f7fc ff0c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8003f04:	2184      	movs	r1, #132	; 0x84
 8003f06:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003f0a:	f7fc ff07 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8003f0e:	2102      	movs	r1, #2
 8003f10:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003f14:	f7fc ff02 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8003f18:	21a4      	movs	r1, #164	; 0xa4
 8003f1a:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003f1e:	f7fc fefd 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8003f22:	2102      	movs	r1, #2
 8003f24:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003f28:	f7fc fef8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8003f2c:	21b7      	movs	r1, #183	; 0xb7
 8003f2e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003f32:	f7fc fef3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8003f36:	2102      	movs	r1, #2
 8003f38:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003f3c:	f7fc feee 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8003f40:	21cf      	movs	r1, #207	; 0xcf
 8003f42:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003f46:	f7fc fee9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003f50:	f7fc fee4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8003f54:	21de      	movs	r1, #222	; 0xde
 8003f56:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003f5a:	f7fc fedf 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8003f5e:	2102      	movs	r1, #2
 8003f60:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003f64:	f7fc feda 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8003f68:	21f2      	movs	r1, #242	; 0xf2
 8003f6a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003f6e:	f7fc fed5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8003f72:	2102      	movs	r1, #2
 8003f74:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003f78:	f7fc fed0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8003f7c:	21fe      	movs	r1, #254	; 0xfe
 8003f7e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003f82:	f7fc fecb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8003f86:	2103      	movs	r1, #3
 8003f88:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003f8c:	f7fc fec6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8003f90:	2110      	movs	r1, #16
 8003f92:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003f96:	f7fc fec1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8003f9a:	2103      	movs	r1, #3
 8003f9c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003fa0:	f7fc febc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8003fa4:	2133      	movs	r1, #51	; 0x33
 8003fa6:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003faa:	f7fc feb7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8003fae:	2103      	movs	r1, #3
 8003fb0:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003fb4:	f7fc feb2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8003fb8:	216d      	movs	r1, #109	; 0x6d
 8003fba:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003fbe:	f7fc fead 	bl	8000d1c <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8003fc2:	2155      	movs	r1, #85	; 0x55
 8003fc4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003fc8:	f7fc fea8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003fcc:	21aa      	movs	r1, #170	; 0xaa
 8003fce:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003fd2:	f7fc fea3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003fd6:	2152      	movs	r1, #82	; 0x52
 8003fd8:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003fdc:	f7fc fe9e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003fe0:	2108      	movs	r1, #8
 8003fe2:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003fe6:	f7fc fe99 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8003fea:	2100      	movs	r1, #0
 8003fec:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003ff0:	f7fc fe94 	bl	8000d1c <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003ff4:	21cc      	movs	r1, #204	; 0xcc
 8003ff6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003ffa:	f7fc fe8f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003ffe:	2100      	movs	r1, #0
 8004000:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004004:	f7fc fe8a 	bl	8000d1c <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004008:	2105      	movs	r1, #5
 800400a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800400e:	f7fc fe85 	bl	8000d1c <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8004012:	2170      	movs	r1, #112	; 0x70
 8004014:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004018:	f7fc fe80 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 800401c:	2170      	movs	r1, #112	; 0x70
 800401e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004022:	f7fc fe7b 	bl	8000d1c <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8004026:	2101      	movs	r1, #1
 8004028:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800402c:	f7fc fe76 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004030:	2103      	movs	r1, #3
 8004032:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004036:	f7fc fe71 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 800403a:	2103      	movs	r1, #3
 800403c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004040:	f7fc fe6c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8004044:	2103      	movs	r1, #3
 8004046:	f64b 0003 	movw	r0, #47107	; 0xb803
 800404a:	f7fc fe67 	bl	8000d1c <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 800404e:	2102      	movs	r1, #2
 8004050:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004054:	f7fc fe62 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004058:	2100      	movs	r1, #0
 800405a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800405e:	f7fc fe5d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004062:	2100      	movs	r1, #0
 8004064:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004068:	f7fc fe58 	bl	8000d1c <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800406c:	21d0      	movs	r1, #208	; 0xd0
 800406e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004072:	f7fc fe53 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004076:	2102      	movs	r1, #2
 8004078:	f64c 1001 	movw	r0, #51457	; 0xc901
 800407c:	f7fc fe4e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004080:	2150      	movs	r1, #80	; 0x50
 8004082:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004086:	f7fc fe49 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800408a:	2150      	movs	r1, #80	; 0x50
 800408c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004090:	f7fc fe44 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004094:	2150      	movs	r1, #80	; 0x50
 8004096:	f64c 1004 	movw	r0, #51460	; 0xc904
 800409a:	f7fc fe3f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800409e:	2100      	movs	r1, #0
 80040a0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80040a4:	f7fc fe3a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 80040a8:	2155      	movs	r1, #85	; 0x55
 80040aa:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80040ae:	f7fc fe35 	bl	8000d1c <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 80040b2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80040b6:	f7fc fda5 	bl	8000c04 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 80040ba:	2001      	movs	r0, #1
 80040bc:	f001 ff38 	bl	8005f30 <HAL_Delay>
		LCD_WR_REG(0x2900);
 80040c0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80040c4:	f7fc fd9e 	bl	8000c04 <LCD_WR_REG>
 80040c8:	f001 bd18 	b.w	8005afc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 80040cc:	4bec      	ldr	r3, [pc, #944]	; (8004480 <LCD_Init+0x27b8>)
 80040ce:	889b      	ldrh	r3, [r3, #4]
 80040d0:	f249 3225 	movw	r2, #37669	; 0x9325
 80040d4:	4293      	cmp	r3, r2
 80040d6:	f040 80d7 	bne.w	8004288 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 80040da:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80040de:	20e5      	movs	r0, #229	; 0xe5
 80040e0:	f7fc fe1c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 80040e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040e8:	2001      	movs	r0, #1
 80040ea:	f7fc fe17 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80040ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80040f2:	2002      	movs	r0, #2
 80040f4:	f7fc fe12 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80040f8:	f241 0130 	movw	r1, #4144	; 0x1030
 80040fc:	2003      	movs	r0, #3
 80040fe:	f7fc fe0d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004102:	2100      	movs	r1, #0
 8004104:	2004      	movs	r0, #4
 8004106:	f7fc fe09 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800410a:	f240 2102 	movw	r1, #514	; 0x202
 800410e:	2008      	movs	r0, #8
 8004110:	f7fc fe04 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004114:	2100      	movs	r1, #0
 8004116:	2009      	movs	r0, #9
 8004118:	f7fc fe00 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 800411c:	2100      	movs	r1, #0
 800411e:	200a      	movs	r0, #10
 8004120:	f7fc fdfc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004124:	2100      	movs	r1, #0
 8004126:	200c      	movs	r0, #12
 8004128:	f7fc fdf8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 800412c:	2100      	movs	r1, #0
 800412e:	200d      	movs	r0, #13
 8004130:	f7fc fdf4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004134:	2100      	movs	r1, #0
 8004136:	200f      	movs	r0, #15
 8004138:	f7fc fdf0 	bl	8000d1c <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 800413c:	2100      	movs	r1, #0
 800413e:	2010      	movs	r0, #16
 8004140:	f7fc fdec 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004144:	2107      	movs	r1, #7
 8004146:	2011      	movs	r0, #17
 8004148:	f7fc fde8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800414c:	2100      	movs	r1, #0
 800414e:	2012      	movs	r0, #18
 8004150:	f7fc fde4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004154:	2100      	movs	r1, #0
 8004156:	2013      	movs	r0, #19
 8004158:	f7fc fde0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 800415c:	2100      	movs	r1, #0
 800415e:	2007      	movs	r0, #7
 8004160:	f7fc fddc 	bl	8000d1c <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004164:	f241 6190 	movw	r1, #5776	; 0x1690
 8004168:	2010      	movs	r0, #16
 800416a:	f7fc fdd7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800416e:	f240 2127 	movw	r1, #551	; 0x227
 8004172:	2011      	movs	r0, #17
 8004174:	f7fc fdd2 	bl	8000d1c <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004178:	219d      	movs	r1, #157	; 0x9d
 800417a:	2012      	movs	r0, #18
 800417c:	f7fc fdce 	bl	8000d1c <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004180:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004184:	2013      	movs	r0, #19
 8004186:	f7fc fdc9 	bl	8000d1c <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800418a:	2125      	movs	r1, #37	; 0x25
 800418c:	2029      	movs	r0, #41	; 0x29
 800418e:	f7fc fdc5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004192:	210d      	movs	r1, #13
 8004194:	202b      	movs	r0, #43	; 0x2b
 8004196:	f7fc fdc1 	bl	8000d1c <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800419a:	2107      	movs	r1, #7
 800419c:	2030      	movs	r0, #48	; 0x30
 800419e:	f7fc fdbd 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80041a2:	f240 3103 	movw	r1, #771	; 0x303
 80041a6:	2031      	movs	r0, #49	; 0x31
 80041a8:	f7fc fdb8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 80041ac:	2103      	movs	r1, #3
 80041ae:	2032      	movs	r0, #50	; 0x32
 80041b0:	f7fc fdb4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 80041b4:	f240 2106 	movw	r1, #518	; 0x206
 80041b8:	2035      	movs	r0, #53	; 0x35
 80041ba:	f7fc fdaf 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 80041be:	2108      	movs	r1, #8
 80041c0:	2036      	movs	r0, #54	; 0x36
 80041c2:	f7fc fdab 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 80041c6:	f240 4106 	movw	r1, #1030	; 0x406
 80041ca:	2037      	movs	r0, #55	; 0x37
 80041cc:	f7fc fda6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 80041d0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80041d4:	2038      	movs	r0, #56	; 0x38
 80041d6:	f7fc fda1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80041da:	2107      	movs	r1, #7
 80041dc:	2039      	movs	r0, #57	; 0x39
 80041de:	f7fc fd9d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80041e2:	f240 6102 	movw	r1, #1538	; 0x602
 80041e6:	203c      	movs	r0, #60	; 0x3c
 80041e8:	f7fc fd98 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80041ec:	2108      	movs	r1, #8
 80041ee:	203d      	movs	r0, #61	; 0x3d
 80041f0:	f7fc fd94 	bl	8000d1c <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80041f4:	2100      	movs	r1, #0
 80041f6:	2050      	movs	r0, #80	; 0x50
 80041f8:	f7fc fd90 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80041fc:	21ef      	movs	r1, #239	; 0xef
 80041fe:	2051      	movs	r0, #81	; 0x51
 8004200:	f7fc fd8c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004204:	2100      	movs	r1, #0
 8004206:	2052      	movs	r0, #82	; 0x52
 8004208:	f7fc fd88 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800420c:	f240 113f 	movw	r1, #319	; 0x13f
 8004210:	2053      	movs	r0, #83	; 0x53
 8004212:	f7fc fd83 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8004216:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800421a:	2060      	movs	r0, #96	; 0x60
 800421c:	f7fc fd7e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004220:	2101      	movs	r1, #1
 8004222:	2061      	movs	r0, #97	; 0x61
 8004224:	f7fc fd7a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004228:	2100      	movs	r1, #0
 800422a:	206a      	movs	r0, #106	; 0x6a
 800422c:	f7fc fd76 	bl	8000d1c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004230:	2100      	movs	r1, #0
 8004232:	2080      	movs	r0, #128	; 0x80
 8004234:	f7fc fd72 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004238:	2100      	movs	r1, #0
 800423a:	2081      	movs	r0, #129	; 0x81
 800423c:	f7fc fd6e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004240:	2100      	movs	r1, #0
 8004242:	2082      	movs	r0, #130	; 0x82
 8004244:	f7fc fd6a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004248:	2100      	movs	r1, #0
 800424a:	2083      	movs	r0, #131	; 0x83
 800424c:	f7fc fd66 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004250:	2100      	movs	r1, #0
 8004252:	2084      	movs	r0, #132	; 0x84
 8004254:	f7fc fd62 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004258:	2100      	movs	r1, #0
 800425a:	2085      	movs	r0, #133	; 0x85
 800425c:	f7fc fd5e 	bl	8000d1c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004260:	2110      	movs	r1, #16
 8004262:	2090      	movs	r0, #144	; 0x90
 8004264:	f7fc fd5a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004268:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800426c:	2092      	movs	r0, #146	; 0x92
 800426e:	f7fc fd55 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004272:	f240 1133 	movw	r1, #307	; 0x133
 8004276:	2007      	movs	r0, #7
 8004278:	f7fc fd50 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800427c:	2122      	movs	r1, #34	; 0x22
 800427e:	2000      	movs	r0, #0
 8004280:	f7fc fd4c 	bl	8000d1c <LCD_WriteReg>
 8004284:	f001 bc3a 	b.w	8005afc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004288:	4b7d      	ldr	r3, [pc, #500]	; (8004480 <LCD_Init+0x27b8>)
 800428a:	889b      	ldrh	r3, [r3, #4]
 800428c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004290:	4293      	cmp	r3, r2
 8004292:	f040 80f7 	bne.w	8004484 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004296:	f241 018f 	movw	r1, #4239	; 0x108f
 800429a:	20ec      	movs	r0, #236	; 0xec
 800429c:	f7fc fd3e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80042a0:	f241 2134 	movw	r1, #4660	; 0x1234
 80042a4:	20ef      	movs	r0, #239	; 0xef
 80042a6:	f7fc fd39 	bl	8000d1c <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80042aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042ae:	2001      	movs	r0, #1
 80042b0:	f7fc fd34 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80042b4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80042b8:	2002      	movs	r0, #2
 80042ba:	f7fc fd2f 	bl	8000d1c <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80042be:	f241 0130 	movw	r1, #4144	; 0x1030
 80042c2:	2003      	movs	r0, #3
 80042c4:	f7fc fd2a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80042c8:	2100      	movs	r1, #0
 80042ca:	2004      	movs	r0, #4
 80042cc:	f7fc fd26 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80042d0:	f240 2102 	movw	r1, #514	; 0x202
 80042d4:	2008      	movs	r0, #8
 80042d6:	f7fc fd21 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80042da:	2100      	movs	r1, #0
 80042dc:	2009      	movs	r0, #9
 80042de:	f7fc fd1d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80042e2:	2100      	movs	r1, #0
 80042e4:	200a      	movs	r0, #10
 80042e6:	f7fc fd19 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80042ea:	2101      	movs	r1, #1
 80042ec:	200c      	movs	r0, #12
 80042ee:	f7fc fd15 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80042f2:	2100      	movs	r1, #0
 80042f4:	200d      	movs	r0, #13
 80042f6:	f7fc fd11 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80042fa:	2100      	movs	r1, #0
 80042fc:	200f      	movs	r0, #15
 80042fe:	f7fc fd0d 	bl	8000d1c <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8004302:	2100      	movs	r1, #0
 8004304:	2010      	movs	r0, #16
 8004306:	f7fc fd09 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800430a:	2107      	movs	r1, #7
 800430c:	2011      	movs	r0, #17
 800430e:	f7fc fd05 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004312:	2100      	movs	r1, #0
 8004314:	2012      	movs	r0, #18
 8004316:	f7fc fd01 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800431a:	2100      	movs	r1, #0
 800431c:	2013      	movs	r0, #19
 800431e:	f7fc fcfd 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8004322:	2101      	movs	r1, #1
 8004324:	2007      	movs	r0, #7
 8004326:	f7fc fcf9 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 800432a:	2032      	movs	r0, #50	; 0x32
 800432c:	f001 fe00 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004330:	f241 4190 	movw	r1, #5264	; 0x1490
 8004334:	2010      	movs	r0, #16
 8004336:	f7fc fcf1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800433a:	f240 2127 	movw	r1, #551	; 0x227
 800433e:	2011      	movs	r0, #17
 8004340:	f7fc fcec 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 8004344:	2032      	movs	r0, #50	; 0x32
 8004346:	f001 fdf3 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800434a:	218a      	movs	r1, #138	; 0x8a
 800434c:	2012      	movs	r0, #18
 800434e:	f7fc fce5 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 8004352:	2032      	movs	r0, #50	; 0x32
 8004354:	f001 fdec 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004358:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800435c:	2013      	movs	r0, #19
 800435e:	f7fc fcdd 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004362:	2106      	movs	r1, #6
 8004364:	2029      	movs	r0, #41	; 0x29
 8004366:	f7fc fcd9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800436a:	210d      	movs	r1, #13
 800436c:	202b      	movs	r0, #43	; 0x2b
 800436e:	f7fc fcd5 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 8004372:	2032      	movs	r0, #50	; 0x32
 8004374:	f001 fddc 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004378:	2100      	movs	r1, #0
 800437a:	2020      	movs	r0, #32
 800437c:	f7fc fcce 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004380:	2100      	movs	r1, #0
 8004382:	2021      	movs	r0, #33	; 0x21
 8004384:	f7fc fcca 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 8004388:	2032      	movs	r0, #50	; 0x32
 800438a:	f001 fdd1 	bl	8005f30 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800438e:	2100      	movs	r1, #0
 8004390:	2030      	movs	r0, #48	; 0x30
 8004392:	f7fc fcc3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004396:	f240 6104 	movw	r1, #1540	; 0x604
 800439a:	2031      	movs	r0, #49	; 0x31
 800439c:	f7fc fcbe 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80043a0:	f240 3105 	movw	r1, #773	; 0x305
 80043a4:	2032      	movs	r0, #50	; 0x32
 80043a6:	f7fc fcb9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80043aa:	2100      	movs	r1, #0
 80043ac:	2035      	movs	r0, #53	; 0x35
 80043ae:	f7fc fcb5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80043b2:	f640 4109 	movw	r1, #3081	; 0xc09
 80043b6:	2036      	movs	r0, #54	; 0x36
 80043b8:	f7fc fcb0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80043bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80043c0:	2037      	movs	r0, #55	; 0x37
 80043c2:	f7fc fcab 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80043c6:	f240 3101 	movw	r1, #769	; 0x301
 80043ca:	2038      	movs	r0, #56	; 0x38
 80043cc:	f7fc fca6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80043d0:	f240 7107 	movw	r1, #1799	; 0x707
 80043d4:	2039      	movs	r0, #57	; 0x39
 80043d6:	f7fc fca1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80043da:	2100      	movs	r1, #0
 80043dc:	203c      	movs	r0, #60	; 0x3c
 80043de:	f7fc fc9d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80043e2:	f640 210a 	movw	r1, #2570	; 0xa0a
 80043e6:	203d      	movs	r0, #61	; 0x3d
 80043e8:	f7fc fc98 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 80043ec:	2032      	movs	r0, #50	; 0x32
 80043ee:	f001 fd9f 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80043f2:	2100      	movs	r1, #0
 80043f4:	2050      	movs	r0, #80	; 0x50
 80043f6:	f7fc fc91 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80043fa:	21ef      	movs	r1, #239	; 0xef
 80043fc:	2051      	movs	r0, #81	; 0x51
 80043fe:	f7fc fc8d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8004402:	2100      	movs	r1, #0
 8004404:	2052      	movs	r0, #82	; 0x52
 8004406:	f7fc fc89 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800440a:	f240 113f 	movw	r1, #319	; 0x13f
 800440e:	2053      	movs	r0, #83	; 0x53
 8004410:	f7fc fc84 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8004414:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004418:	2060      	movs	r0, #96	; 0x60
 800441a:	f7fc fc7f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800441e:	2101      	movs	r1, #1
 8004420:	2061      	movs	r0, #97	; 0x61
 8004422:	f7fc fc7b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004426:	2100      	movs	r1, #0
 8004428:	206a      	movs	r0, #106	; 0x6a
 800442a:	f7fc fc77 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800442e:	2100      	movs	r1, #0
 8004430:	2080      	movs	r0, #128	; 0x80
 8004432:	f7fc fc73 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004436:	2100      	movs	r1, #0
 8004438:	2081      	movs	r0, #129	; 0x81
 800443a:	f7fc fc6f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800443e:	2100      	movs	r1, #0
 8004440:	2082      	movs	r0, #130	; 0x82
 8004442:	f7fc fc6b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004446:	2100      	movs	r1, #0
 8004448:	2083      	movs	r0, #131	; 0x83
 800444a:	f7fc fc67 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800444e:	2100      	movs	r1, #0
 8004450:	2084      	movs	r0, #132	; 0x84
 8004452:	f7fc fc63 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004456:	2100      	movs	r1, #0
 8004458:	2085      	movs	r0, #133	; 0x85
 800445a:	f7fc fc5f 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800445e:	2110      	movs	r1, #16
 8004460:	2090      	movs	r0, #144	; 0x90
 8004462:	f7fc fc5b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004466:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800446a:	2092      	movs	r0, #146	; 0x92
 800446c:	f7fc fc56 	bl	8000d1c <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004470:	f240 1133 	movw	r1, #307	; 0x133
 8004474:	2007      	movs	r0, #7
 8004476:	f7fc fc51 	bl	8000d1c <LCD_WriteReg>
 800447a:	f001 bb3f 	b.w	8005afc <LCD_Init+0x3e34>
 800447e:	bf00      	nop
 8004480:	20000fe8 	.word	0x20000fe8
	} else if (lcddev.id == 0x9320) //测试OK.
 8004484:	4bce      	ldr	r3, [pc, #824]	; (80047c0 <LCD_Init+0x2af8>)
 8004486:	889b      	ldrh	r3, [r3, #4]
 8004488:	f249 3220 	movw	r2, #37664	; 0x9320
 800448c:	4293      	cmp	r3, r2
 800448e:	f040 80ad 	bne.w	80045ec <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004492:	2100      	movs	r1, #0
 8004494:	2000      	movs	r0, #0
 8004496:	f7fc fc41 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800449a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800449e:	2001      	movs	r0, #1
 80044a0:	f7fc fc3c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80044a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80044a8:	2002      	movs	r0, #2
 80044aa:	f7fc fc37 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80044ae:	f241 0130 	movw	r1, #4144	; 0x1030
 80044b2:	2003      	movs	r0, #3
 80044b4:	f7fc fc32 	bl	8000d1c <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80044b8:	2100      	movs	r1, #0
 80044ba:	2004      	movs	r0, #4
 80044bc:	f7fc fc2e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80044c0:	f240 2102 	movw	r1, #514	; 0x202
 80044c4:	2008      	movs	r0, #8
 80044c6:	f7fc fc29 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80044ca:	2100      	movs	r1, #0
 80044cc:	2009      	movs	r0, #9
 80044ce:	f7fc fc25 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80044d2:	2100      	movs	r1, #0
 80044d4:	200a      	movs	r0, #10
 80044d6:	f7fc fc21 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80044da:	2101      	movs	r1, #1
 80044dc:	200c      	movs	r0, #12
 80044de:	f7fc fc1d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80044e2:	2100      	movs	r1, #0
 80044e4:	200d      	movs	r0, #13
 80044e6:	f7fc fc19 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80044ea:	2100      	movs	r1, #0
 80044ec:	200f      	movs	r0, #15
 80044ee:	f7fc fc15 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 80044f2:	2032      	movs	r0, #50	; 0x32
 80044f4:	f001 fd1c 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80044f8:	f240 1101 	movw	r1, #257	; 0x101
 80044fc:	2007      	movs	r0, #7
 80044fe:	f7fc fc0d 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 8004502:	2032      	movs	r0, #50	; 0x32
 8004504:	f001 fd14 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004508:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800450c:	2010      	movs	r0, #16
 800450e:	f7fc fc05 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004512:	2107      	movs	r1, #7
 8004514:	2011      	movs	r0, #17
 8004516:	f7fc fc01 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800451a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800451e:	2012      	movs	r0, #18
 8004520:	f7fc fbfc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004524:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004528:	2013      	movs	r0, #19
 800452a:	f7fc fbf7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800452e:	2100      	movs	r1, #0
 8004530:	2029      	movs	r0, #41	; 0x29
 8004532:	f7fc fbf3 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004536:	f244 0110 	movw	r1, #16400	; 0x4010
 800453a:	202b      	movs	r0, #43	; 0x2b
 800453c:	f7fc fbee 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004540:	2100      	movs	r1, #0
 8004542:	2050      	movs	r0, #80	; 0x50
 8004544:	f7fc fbea 	bl	8000d1c <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004548:	21ef      	movs	r1, #239	; 0xef
 800454a:	2051      	movs	r0, #81	; 0x51
 800454c:	f7fc fbe6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004550:	2100      	movs	r1, #0
 8004552:	2052      	movs	r0, #82	; 0x52
 8004554:	f7fc fbe2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004558:	f240 113f 	movw	r1, #319	; 0x13f
 800455c:	2053      	movs	r0, #83	; 0x53
 800455e:	f7fc fbdd 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004562:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004566:	2060      	movs	r0, #96	; 0x60
 8004568:	f7fc fbd8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800456c:	2101      	movs	r1, #1
 800456e:	2061      	movs	r0, #97	; 0x61
 8004570:	f7fc fbd4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004574:	2100      	movs	r1, #0
 8004576:	206a      	movs	r0, #106	; 0x6a
 8004578:	f7fc fbd0 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800457c:	2100      	movs	r1, #0
 800457e:	2080      	movs	r0, #128	; 0x80
 8004580:	f7fc fbcc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004584:	2100      	movs	r1, #0
 8004586:	2081      	movs	r0, #129	; 0x81
 8004588:	f7fc fbc8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800458c:	2100      	movs	r1, #0
 800458e:	2082      	movs	r0, #130	; 0x82
 8004590:	f7fc fbc4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004594:	2100      	movs	r1, #0
 8004596:	2083      	movs	r0, #131	; 0x83
 8004598:	f7fc fbc0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800459c:	2100      	movs	r1, #0
 800459e:	2084      	movs	r0, #132	; 0x84
 80045a0:	f7fc fbbc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80045a4:	2100      	movs	r1, #0
 80045a6:	2085      	movs	r0, #133	; 0x85
 80045a8:	f7fc fbb8 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80045ac:	2110      	movs	r1, #16
 80045ae:	2090      	movs	r0, #144	; 0x90
 80045b0:	f7fc fbb4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80045b4:	2100      	movs	r1, #0
 80045b6:	2092      	movs	r0, #146	; 0x92
 80045b8:	f7fc fbb0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80045bc:	2101      	movs	r1, #1
 80045be:	2093      	movs	r0, #147	; 0x93
 80045c0:	f7fc fbac 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80045c4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80045c8:	2095      	movs	r0, #149	; 0x95
 80045ca:	f7fc fba7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80045ce:	2100      	movs	r1, #0
 80045d0:	2097      	movs	r0, #151	; 0x97
 80045d2:	f7fc fba3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80045d6:	2100      	movs	r1, #0
 80045d8:	2098      	movs	r0, #152	; 0x98
 80045da:	f7fc fb9f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80045de:	f240 1173 	movw	r1, #371	; 0x173
 80045e2:	2007      	movs	r0, #7
 80045e4:	f7fc fb9a 	bl	8000d1c <LCD_WriteReg>
 80045e8:	f001 ba88 	b.w	8005afc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80045ec:	4b74      	ldr	r3, [pc, #464]	; (80047c0 <LCD_Init+0x2af8>)
 80045ee:	889b      	ldrh	r3, [r3, #4]
 80045f0:	f249 3231 	movw	r2, #37681	; 0x9331
 80045f4:	4293      	cmp	r3, r2
 80045f6:	f040 80e5 	bne.w	80047c4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80045fa:	f241 0114 	movw	r1, #4116	; 0x1014
 80045fe:	20e7      	movs	r0, #231	; 0xe7
 8004600:	f7fc fb8c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004608:	2001      	movs	r0, #1
 800460a:	f7fc fb87 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800460e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004612:	2002      	movs	r0, #2
 8004614:	f7fc fb82 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004618:	f241 0138 	movw	r1, #4152	; 0x1038
 800461c:	2003      	movs	r0, #3
 800461e:	f7fc fb7d 	bl	8000d1c <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004622:	f240 2102 	movw	r1, #514	; 0x202
 8004626:	2008      	movs	r0, #8
 8004628:	f7fc fb78 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800462c:	2100      	movs	r1, #0
 800462e:	2009      	movs	r0, #9
 8004630:	f7fc fb74 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004634:	2100      	movs	r1, #0
 8004636:	200a      	movs	r0, #10
 8004638:	f7fc fb70 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800463c:	2100      	movs	r1, #0
 800463e:	200c      	movs	r0, #12
 8004640:	f7fc fb6c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004644:	2100      	movs	r1, #0
 8004646:	200d      	movs	r0, #13
 8004648:	f7fc fb68 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800464c:	2100      	movs	r1, #0
 800464e:	200f      	movs	r0, #15
 8004650:	f7fc fb64 	bl	8000d1c <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004654:	2100      	movs	r1, #0
 8004656:	2010      	movs	r0, #16
 8004658:	f7fc fb60 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800465c:	2107      	movs	r1, #7
 800465e:	2011      	movs	r0, #17
 8004660:	f7fc fb5c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004664:	2100      	movs	r1, #0
 8004666:	2012      	movs	r0, #18
 8004668:	f7fc fb58 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800466c:	2100      	movs	r1, #0
 800466e:	2013      	movs	r0, #19
 8004670:	f7fc fb54 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004674:	20c8      	movs	r0, #200	; 0xc8
 8004676:	f001 fc5b 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800467a:	f241 6190 	movw	r1, #5776	; 0x1690
 800467e:	2010      	movs	r0, #16
 8004680:	f7fc fb4c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004684:	f240 2127 	movw	r1, #551	; 0x227
 8004688:	2011      	movs	r0, #17
 800468a:	f7fc fb47 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800468e:	2032      	movs	r0, #50	; 0x32
 8004690:	f001 fc4e 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004694:	210c      	movs	r1, #12
 8004696:	2012      	movs	r0, #18
 8004698:	f7fc fb40 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800469c:	2032      	movs	r0, #50	; 0x32
 800469e:	f001 fc47 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80046a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046a6:	2013      	movs	r0, #19
 80046a8:	f7fc fb38 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80046ac:	2111      	movs	r1, #17
 80046ae:	2029      	movs	r0, #41	; 0x29
 80046b0:	f7fc fb34 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80046b4:	210b      	movs	r1, #11
 80046b6:	202b      	movs	r0, #43	; 0x2b
 80046b8:	f7fc fb30 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80046bc:	2032      	movs	r0, #50	; 0x32
 80046be:	f001 fc37 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80046c2:	2100      	movs	r1, #0
 80046c4:	2020      	movs	r0, #32
 80046c6:	f7fc fb29 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80046ca:	f240 113f 	movw	r1, #319	; 0x13f
 80046ce:	2021      	movs	r0, #33	; 0x21
 80046d0:	f7fc fb24 	bl	8000d1c <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80046d4:	2100      	movs	r1, #0
 80046d6:	2030      	movs	r0, #48	; 0x30
 80046d8:	f7fc fb20 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80046dc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80046e0:	2031      	movs	r0, #49	; 0x31
 80046e2:	f7fc fb1b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80046e6:	2100      	movs	r1, #0
 80046e8:	2032      	movs	r0, #50	; 0x32
 80046ea:	f7fc fb17 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80046ee:	f44f 7101 	mov.w	r1, #516	; 0x204
 80046f2:	2035      	movs	r0, #53	; 0x35
 80046f4:	f7fc fb12 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80046f8:	f241 610a 	movw	r1, #5642	; 0x160a
 80046fc:	2036      	movs	r0, #54	; 0x36
 80046fe:	f7fc fb0d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004702:	f240 7107 	movw	r1, #1799	; 0x707
 8004706:	2037      	movs	r0, #55	; 0x37
 8004708:	f7fc fb08 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800470c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004710:	2038      	movs	r0, #56	; 0x38
 8004712:	f7fc fb03 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004716:	f240 7107 	movw	r1, #1799	; 0x707
 800471a:	2039      	movs	r0, #57	; 0x39
 800471c:	f7fc fafe 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004720:	f240 4102 	movw	r1, #1026	; 0x402
 8004724:	203c      	movs	r0, #60	; 0x3c
 8004726:	f7fc faf9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800472a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800472e:	203d      	movs	r0, #61	; 0x3d
 8004730:	f7fc faf4 	bl	8000d1c <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004734:	2100      	movs	r1, #0
 8004736:	2050      	movs	r0, #80	; 0x50
 8004738:	f7fc faf0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800473c:	21ef      	movs	r1, #239	; 0xef
 800473e:	2051      	movs	r0, #81	; 0x51
 8004740:	f7fc faec 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004744:	2100      	movs	r1, #0
 8004746:	2052      	movs	r0, #82	; 0x52
 8004748:	f7fc fae8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800474c:	f240 113f 	movw	r1, #319	; 0x13f
 8004750:	2053      	movs	r0, #83	; 0x53
 8004752:	f7fc fae3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004756:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800475a:	2060      	movs	r0, #96	; 0x60
 800475c:	f7fc fade 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004760:	2101      	movs	r1, #1
 8004762:	2061      	movs	r0, #97	; 0x61
 8004764:	f7fc fada 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004768:	2100      	movs	r1, #0
 800476a:	206a      	movs	r0, #106	; 0x6a
 800476c:	f7fc fad6 	bl	8000d1c <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004770:	2100      	movs	r1, #0
 8004772:	2080      	movs	r0, #128	; 0x80
 8004774:	f7fc fad2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004778:	2100      	movs	r1, #0
 800477a:	2081      	movs	r0, #129	; 0x81
 800477c:	f7fc face 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004780:	2100      	movs	r1, #0
 8004782:	2082      	movs	r0, #130	; 0x82
 8004784:	f7fc faca 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004788:	2100      	movs	r1, #0
 800478a:	2083      	movs	r0, #131	; 0x83
 800478c:	f7fc fac6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004790:	2100      	movs	r1, #0
 8004792:	2084      	movs	r0, #132	; 0x84
 8004794:	f7fc fac2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004798:	2100      	movs	r1, #0
 800479a:	2085      	movs	r0, #133	; 0x85
 800479c:	f7fc fabe 	bl	8000d1c <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80047a0:	2110      	movs	r1, #16
 80047a2:	2090      	movs	r0, #144	; 0x90
 80047a4:	f7fc faba 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80047a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047ac:	2092      	movs	r0, #146	; 0x92
 80047ae:	f7fc fab5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80047b2:	f240 1133 	movw	r1, #307	; 0x133
 80047b6:	2007      	movs	r0, #7
 80047b8:	f7fc fab0 	bl	8000d1c <LCD_WriteReg>
 80047bc:	f001 b99e 	b.w	8005afc <LCD_Init+0x3e34>
 80047c0:	20000fe8 	.word	0x20000fe8
	} else if (lcddev.id == 0x5408) {
 80047c4:	4be2      	ldr	r3, [pc, #904]	; (8004b50 <LCD_Init+0x2e88>)
 80047c6:	889b      	ldrh	r3, [r3, #4]
 80047c8:	f245 4208 	movw	r2, #21512	; 0x5408
 80047cc:	4293      	cmp	r3, r2
 80047ce:	f040 80a3 	bne.w	8004918 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 80047d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047d6:	2001      	movs	r0, #1
 80047d8:	f7fc faa0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80047dc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80047e0:	2002      	movs	r0, #2
 80047e2:	f7fc fa9b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 80047e6:	f241 0130 	movw	r1, #4144	; 0x1030
 80047ea:	2003      	movs	r0, #3
 80047ec:	f7fc fa96 	bl	8000d1c <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 80047f0:	2100      	movs	r1, #0
 80047f2:	2004      	movs	r0, #4
 80047f4:	f7fc fa92 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 80047f8:	f240 2107 	movw	r1, #519	; 0x207
 80047fc:	2008      	movs	r0, #8
 80047fe:	f7fc fa8d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004802:	2100      	movs	r1, #0
 8004804:	2009      	movs	r0, #9
 8004806:	f7fc fa89 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 800480a:	2100      	movs	r1, #0
 800480c:	200a      	movs	r0, #10
 800480e:	f7fc fa85 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004812:	2100      	movs	r1, #0
 8004814:	200c      	movs	r0, #12
 8004816:	f7fc fa81 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800481a:	2100      	movs	r1, #0
 800481c:	200d      	movs	r0, #13
 800481e:	f7fc fa7d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004822:	2100      	movs	r1, #0
 8004824:	200f      	movs	r0, #15
 8004826:	f7fc fa79 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 800482a:	2014      	movs	r0, #20
 800482c:	f001 fb80 	bl	8005f30 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004830:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004834:	2010      	movs	r0, #16
 8004836:	f7fc fa71 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 800483a:	2101      	movs	r1, #1
 800483c:	2011      	movs	r0, #17
 800483e:	f7fc fa6d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004842:	2101      	movs	r1, #1
 8004844:	2017      	movs	r0, #23
 8004846:	f7fc fa69 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 800484a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800484e:	2012      	movs	r0, #18
 8004850:	f7fc fa64 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004858:	2013      	movs	r0, #19
 800485a:	f7fc fa5f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 800485e:	2109      	movs	r1, #9
 8004860:	2029      	movs	r0, #41	; 0x29
 8004862:	f7fc fa5b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004866:	2109      	movs	r1, #9
 8004868:	202a      	movs	r0, #42	; 0x2a
 800486a:	f7fc fa57 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 800486e:	2100      	movs	r1, #0
 8004870:	20a4      	movs	r0, #164	; 0xa4
 8004872:	f7fc fa53 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004876:	2100      	movs	r1, #0
 8004878:	2050      	movs	r0, #80	; 0x50
 800487a:	f7fc fa4f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 800487e:	21ef      	movs	r1, #239	; 0xef
 8004880:	2051      	movs	r0, #81	; 0x51
 8004882:	f7fc fa4b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004886:	2100      	movs	r1, #0
 8004888:	2052      	movs	r0, #82	; 0x52
 800488a:	f7fc fa47 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 800488e:	f240 113f 	movw	r1, #319	; 0x13f
 8004892:	2053      	movs	r0, #83	; 0x53
 8004894:	f7fc fa42 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004898:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800489c:	2060      	movs	r0, #96	; 0x60
 800489e:	f7fc fa3d 	bl	8000d1c <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 80048a2:	2101      	movs	r1, #1
 80048a4:	2061      	movs	r0, #97	; 0x61
 80048a6:	f7fc fa39 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 80048aa:	2100      	movs	r1, #0
 80048ac:	206a      	movs	r0, #106	; 0x6a
 80048ae:	f7fc fa35 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 80048b2:	2100      	movs	r1, #0
 80048b4:	2080      	movs	r0, #128	; 0x80
 80048b6:	f7fc fa31 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 80048ba:	2100      	movs	r1, #0
 80048bc:	2081      	movs	r0, #129	; 0x81
 80048be:	f7fc fa2d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 80048c2:	2100      	movs	r1, #0
 80048c4:	2082      	movs	r0, #130	; 0x82
 80048c6:	f7fc fa29 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 80048ca:	2100      	movs	r1, #0
 80048cc:	2083      	movs	r0, #131	; 0x83
 80048ce:	f7fc fa25 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 80048d2:	2100      	movs	r1, #0
 80048d4:	2084      	movs	r0, #132	; 0x84
 80048d6:	f7fc fa21 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 80048da:	2100      	movs	r1, #0
 80048dc:	2085      	movs	r0, #133	; 0x85
 80048de:	f7fc fa1d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 80048e2:	2113      	movs	r1, #19
 80048e4:	2090      	movs	r0, #144	; 0x90
 80048e6:	f7fc fa19 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 80048ea:	2100      	movs	r1, #0
 80048ec:	2092      	movs	r0, #146	; 0x92
 80048ee:	f7fc fa15 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 80048f2:	2103      	movs	r1, #3
 80048f4:	2093      	movs	r0, #147	; 0x93
 80048f6:	f7fc fa11 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 80048fa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80048fe:	2095      	movs	r0, #149	; 0x95
 8004900:	f7fc fa0c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004904:	f240 1173 	movw	r1, #371	; 0x173
 8004908:	2007      	movs	r0, #7
 800490a:	f7fc fa07 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 800490e:	2032      	movs	r0, #50	; 0x32
 8004910:	f001 fb0e 	bl	8005f30 <HAL_Delay>
 8004914:	f001 b8f2 	b.w	8005afc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004918:	4b8d      	ldr	r3, [pc, #564]	; (8004b50 <LCD_Init+0x2e88>)
 800491a:	889b      	ldrh	r3, [r3, #4]
 800491c:	f241 5205 	movw	r2, #5381	; 0x1505
 8004920:	4293      	cmp	r3, r2
 8004922:	f040 8117 	bne.w	8004b54 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004926:	2100      	movs	r1, #0
 8004928:	2007      	movs	r0, #7
 800492a:	f7fc f9f7 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 800492e:	2032      	movs	r0, #50	; 0x32
 8004930:	f001 fafe 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004934:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004938:	2012      	movs	r0, #18
 800493a:	f7fc f9ef 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 800493e:	2101      	movs	r1, #1
 8004940:	20a4      	movs	r0, #164	; 0xa4
 8004942:	f7fc f9eb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004946:	210f      	movs	r1, #15
 8004948:	2008      	movs	r0, #8
 800494a:	f7fc f9e7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 800494e:	2108      	movs	r1, #8
 8004950:	200a      	movs	r0, #10
 8004952:	f7fc f9e3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004956:	2108      	movs	r1, #8
 8004958:	200d      	movs	r0, #13
 800495a:	f7fc f9df 	bl	8000d1c <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 800495e:	f240 7107 	movw	r1, #1799	; 0x707
 8004962:	2030      	movs	r0, #48	; 0x30
 8004964:	f7fc f9da 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004968:	2107      	movs	r1, #7
 800496a:	2031      	movs	r0, #49	; 0x31
 800496c:	f7fc f9d6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004970:	f240 6103 	movw	r1, #1539	; 0x603
 8004974:	2032      	movs	r0, #50	; 0x32
 8004976:	f7fc f9d1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 800497a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800497e:	2033      	movs	r0, #51	; 0x33
 8004980:	f7fc f9cc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004984:	f240 2102 	movw	r1, #514	; 0x202
 8004988:	2034      	movs	r0, #52	; 0x34
 800498a:	f7fc f9c7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 800498e:	2102      	movs	r1, #2
 8004990:	2035      	movs	r0, #53	; 0x35
 8004992:	f7fc f9c3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004996:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800499a:	2036      	movs	r0, #54	; 0x36
 800499c:	f7fc f9be 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 80049a0:	f240 7107 	movw	r1, #1799	; 0x707
 80049a4:	2037      	movs	r0, #55	; 0x37
 80049a6:	f7fc f9b9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 80049aa:	2100      	movs	r1, #0
 80049ac:	2038      	movs	r0, #56	; 0x38
 80049ae:	f7fc f9b5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 80049b2:	2100      	movs	r1, #0
 80049b4:	2039      	movs	r0, #57	; 0x39
 80049b6:	f7fc f9b1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 80049ba:	f240 7107 	movw	r1, #1799	; 0x707
 80049be:	203a      	movs	r0, #58	; 0x3a
 80049c0:	f7fc f9ac 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 80049c4:	2100      	movs	r1, #0
 80049c6:	203b      	movs	r0, #59	; 0x3b
 80049c8:	f7fc f9a8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 80049cc:	2107      	movs	r1, #7
 80049ce:	203c      	movs	r0, #60	; 0x3c
 80049d0:	f7fc f9a4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 80049d4:	2100      	movs	r1, #0
 80049d6:	203d      	movs	r0, #61	; 0x3d
 80049d8:	f7fc f9a0 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 80049dc:	2032      	movs	r0, #50	; 0x32
 80049de:	f001 faa7 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 80049e2:	2101      	movs	r1, #1
 80049e4:	2007      	movs	r0, #7
 80049e6:	f7fc f999 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 80049ea:	2101      	movs	r1, #1
 80049ec:	2017      	movs	r0, #23
 80049ee:	f7fc f995 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(50);
 80049f2:	2032      	movs	r0, #50	; 0x32
 80049f4:	f001 fa9c 	bl	8005f30 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 80049f8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 80049fc:	2010      	movs	r0, #16
 80049fe:	f7fc f98d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004a02:	f240 2117 	movw	r1, #535	; 0x217
 8004a06:	2011      	movs	r0, #17
 8004a08:	f7fc f988 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004a0c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004a10:	2012      	movs	r0, #18
 8004a12:	f7fc f983 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004a16:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004a1a:	2013      	movs	r0, #19
 8004a1c:	f7fc f97e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004a20:	2100      	movs	r1, #0
 8004a22:	202a      	movs	r0, #42	; 0x2a
 8004a24:	f7fc f97a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004a28:	210a      	movs	r1, #10
 8004a2a:	2029      	movs	r0, #41	; 0x29
 8004a2c:	f7fc f976 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004a30:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004a34:	2012      	movs	r0, #18
 8004a36:	f7fc f971 	bl	8000d1c <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	2050      	movs	r0, #80	; 0x50
 8004a3e:	f7fc f96d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004a42:	21ef      	movs	r1, #239	; 0xef
 8004a44:	2051      	movs	r0, #81	; 0x51
 8004a46:	f7fc f969 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	2052      	movs	r0, #82	; 0x52
 8004a4e:	f7fc f965 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004a52:	f240 113f 	movw	r1, #319	; 0x13f
 8004a56:	2053      	movs	r0, #83	; 0x53
 8004a58:	f7fc f960 	bl	8000d1c <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004a5c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a60:	2060      	movs	r0, #96	; 0x60
 8004a62:	f7fc f95b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004a66:	2101      	movs	r1, #1
 8004a68:	2061      	movs	r0, #97	; 0x61
 8004a6a:	f7fc f957 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004a6e:	2100      	movs	r1, #0
 8004a70:	206a      	movs	r0, #106	; 0x6a
 8004a72:	f7fc f953 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004a76:	2100      	movs	r1, #0
 8004a78:	2080      	movs	r0, #128	; 0x80
 8004a7a:	f7fc f94f 	bl	8000d1c <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004a7e:	2100      	movs	r1, #0
 8004a80:	2081      	movs	r0, #129	; 0x81
 8004a82:	f7fc f94b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004a86:	2100      	movs	r1, #0
 8004a88:	2082      	movs	r0, #130	; 0x82
 8004a8a:	f7fc f947 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004a8e:	2100      	movs	r1, #0
 8004a90:	2083      	movs	r0, #131	; 0x83
 8004a92:	f7fc f943 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004a96:	2100      	movs	r1, #0
 8004a98:	2084      	movs	r0, #132	; 0x84
 8004a9a:	f7fc f93f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	2085      	movs	r0, #133	; 0x85
 8004aa2:	f7fc f93b 	bl	8000d1c <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004aa6:	2113      	movs	r1, #19
 8004aa8:	2090      	movs	r0, #144	; 0x90
 8004aaa:	f7fc f937 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004aae:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004ab2:	2092      	movs	r0, #146	; 0x92
 8004ab4:	f7fc f932 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004ab8:	2105      	movs	r1, #5
 8004aba:	2093      	movs	r0, #147	; 0x93
 8004abc:	f7fc f92e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	2095      	movs	r0, #149	; 0x95
 8004ac4:	f7fc f92a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004ac8:	2100      	movs	r1, #0
 8004aca:	2097      	movs	r0, #151	; 0x97
 8004acc:	f7fc f926 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	2098      	movs	r0, #152	; 0x98
 8004ad4:	f7fc f922 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004adc:	2001      	movs	r0, #1
 8004ade:	f7fc f91d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004ae2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ae6:	2002      	movs	r0, #2
 8004ae8:	f7fc f918 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004aec:	f241 0138 	movw	r1, #4152	; 0x1038
 8004af0:	2003      	movs	r0, #3
 8004af2:	f7fc f913 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004af6:	2100      	movs	r1, #0
 8004af8:	2004      	movs	r0, #4
 8004afa:	f7fc f90f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004afe:	2100      	movs	r1, #0
 8004b00:	200c      	movs	r0, #12
 8004b02:	f7fc f90b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004b06:	2100      	movs	r1, #0
 8004b08:	200f      	movs	r0, #15
 8004b0a:	f7fc f907 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2020      	movs	r0, #32
 8004b12:	f7fc f903 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004b16:	2100      	movs	r1, #0
 8004b18:	2021      	movs	r0, #33	; 0x21
 8004b1a:	f7fc f8ff 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004b1e:	2121      	movs	r1, #33	; 0x21
 8004b20:	2007      	movs	r0, #7
 8004b22:	f7fc f8fb 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004b26:	2014      	movs	r0, #20
 8004b28:	f001 fa02 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004b2c:	2161      	movs	r1, #97	; 0x61
 8004b2e:	2007      	movs	r0, #7
 8004b30:	f7fc f8f4 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004b34:	2014      	movs	r0, #20
 8004b36:	f001 f9fb 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004b3a:	f240 1173 	movw	r1, #371	; 0x173
 8004b3e:	2007      	movs	r0, #7
 8004b40:	f7fc f8ec 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004b44:	2014      	movs	r0, #20
 8004b46:	f001 f9f3 	bl	8005f30 <HAL_Delay>
 8004b4a:	f000 bfd7 	b.w	8005afc <LCD_Init+0x3e34>
 8004b4e:	bf00      	nop
 8004b50:	20000fe8 	.word	0x20000fe8
	} else if (lcddev.id == 0xB505) {
 8004b54:	4bf0      	ldr	r3, [pc, #960]	; (8004f18 <LCD_Init+0x3250>)
 8004b56:	889b      	ldrh	r3, [r3, #4]
 8004b58:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	f040 8103 	bne.w	8004d68 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004b62:	2100      	movs	r1, #0
 8004b64:	2000      	movs	r0, #0
 8004b66:	f7fc f8d9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f7fc f8d5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004b72:	2100      	movs	r1, #0
 8004b74:	2000      	movs	r0, #0
 8004b76:	f7fc f8d1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	f7fc f8cd 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004b82:	2101      	movs	r1, #1
 8004b84:	20a4      	movs	r0, #164	; 0xa4
 8004b86:	f7fc f8c9 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004b8a:	2014      	movs	r0, #20
 8004b8c:	f001 f9d0 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004b90:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b94:	2060      	movs	r0, #96	; 0x60
 8004b96:	f7fc f8c1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004b9a:	f240 2102 	movw	r1, #514	; 0x202
 8004b9e:	2008      	movs	r0, #8
 8004ba0:	f7fc f8bc 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004ba4:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004ba8:	2030      	movs	r0, #48	; 0x30
 8004baa:	f7fc f8b7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004bae:	f243 7115 	movw	r1, #14101	; 0x3715
 8004bb2:	2031      	movs	r0, #49	; 0x31
 8004bb4:	f7fc f8b2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004bb8:	f240 6104 	movw	r1, #1540	; 0x604
 8004bbc:	2032      	movs	r0, #50	; 0x32
 8004bbe:	f7fc f8ad 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004bc2:	f640 6116 	movw	r1, #3606	; 0xe16
 8004bc6:	2033      	movs	r0, #51	; 0x33
 8004bc8:	f7fc f8a8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004bcc:	f242 2111 	movw	r1, #8721	; 0x2211
 8004bd0:	2034      	movs	r0, #52	; 0x34
 8004bd2:	f7fc f8a3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004bd6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004bda:	2035      	movs	r0, #53	; 0x35
 8004bdc:	f7fc f89e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004be0:	f248 5107 	movw	r1, #34055	; 0x8507
 8004be4:	2036      	movs	r0, #54	; 0x36
 8004be6:	f7fc f899 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004bea:	f241 4107 	movw	r1, #5127	; 0x1407
 8004bee:	2037      	movs	r0, #55	; 0x37
 8004bf0:	f7fc f894 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004bf4:	f241 4103 	movw	r1, #5123	; 0x1403
 8004bf8:	2038      	movs	r0, #56	; 0x38
 8004bfa:	f7fc f88f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004bfe:	2120      	movs	r1, #32
 8004c00:	2039      	movs	r0, #57	; 0x39
 8004c02:	f7fc f88b 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004c06:	211a      	movs	r1, #26
 8004c08:	2090      	movs	r0, #144	; 0x90
 8004c0a:	f7fc f887 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004c0e:	2100      	movs	r1, #0
 8004c10:	2010      	movs	r0, #16
 8004c12:	f7fc f883 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004c16:	2107      	movs	r1, #7
 8004c18:	2011      	movs	r0, #17
 8004c1a:	f7fc f87f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004c1e:	2100      	movs	r1, #0
 8004c20:	2012      	movs	r0, #18
 8004c22:	f7fc f87b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004c26:	2100      	movs	r1, #0
 8004c28:	2013      	movs	r0, #19
 8004c2a:	f7fc f877 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004c2e:	2014      	movs	r0, #20
 8004c30:	f001 f97e 	bl	8005f30 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004c34:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004c38:	2010      	movs	r0, #16
 8004c3a:	f7fc f86f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004c3e:	f240 1137 	movw	r1, #311	; 0x137
 8004c42:	2011      	movs	r0, #17
 8004c44:	f7fc f86a 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004c48:	2014      	movs	r0, #20
 8004c4a:	f001 f971 	bl	8005f30 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004c4e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004c52:	2012      	movs	r0, #18
 8004c54:	f7fc f862 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004c58:	2014      	movs	r0, #20
 8004c5a:	f001 f969 	bl	8005f30 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004c5e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004c62:	2013      	movs	r0, #19
 8004c64:	f7fc f85a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	202a      	movs	r0, #42	; 0x2a
 8004c6c:	f7fc f856 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004c70:	2148      	movs	r1, #72	; 0x48
 8004c72:	2029      	movs	r0, #41	; 0x29
 8004c74:	f7fc f852 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004c78:	2014      	movs	r0, #20
 8004c7a:	f001 f959 	bl	8005f30 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004c7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c82:	2001      	movs	r0, #1
 8004c84:	f7fc f84a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004c88:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c8c:	2002      	movs	r0, #2
 8004c8e:	f7fc f845 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004c92:	f241 0138 	movw	r1, #4152	; 0x1038
 8004c96:	2003      	movs	r0, #3
 8004c98:	f7fc f840 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004c9c:	f240 2102 	movw	r1, #514	; 0x202
 8004ca0:	2008      	movs	r0, #8
 8004ca2:	f7fc f83b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	200a      	movs	r0, #10
 8004caa:	f7fc f837 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004cae:	2100      	movs	r1, #0
 8004cb0:	200c      	movs	r0, #12
 8004cb2:	f7fc f833 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	200d      	movs	r0, #13
 8004cba:	f7fc f82f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004cbe:	2130      	movs	r1, #48	; 0x30
 8004cc0:	200e      	movs	r0, #14
 8004cc2:	f7fc f82b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	2050      	movs	r0, #80	; 0x50
 8004cca:	f7fc f827 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004cce:	21ef      	movs	r1, #239	; 0xef
 8004cd0:	2051      	movs	r0, #81	; 0x51
 8004cd2:	f7fc f823 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	2052      	movs	r0, #82	; 0x52
 8004cda:	f7fc f81f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004cde:	f240 113f 	movw	r1, #319	; 0x13f
 8004ce2:	2053      	movs	r0, #83	; 0x53
 8004ce4:	f7fc f81a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004ce8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004cec:	2060      	movs	r0, #96	; 0x60
 8004cee:	f7fc f815 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	2061      	movs	r0, #97	; 0x61
 8004cf6:	f7fc f811 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	206a      	movs	r0, #106	; 0x6a
 8004cfe:	f7fc f80d 	bl	8000d1c <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004d02:	2111      	movs	r1, #17
 8004d04:	2090      	movs	r0, #144	; 0x90
 8004d06:	f7fc f809 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004d0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d0e:	2092      	movs	r0, #146	; 0x92
 8004d10:	f7fc f804 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004d14:	f240 4102 	movw	r1, #1026	; 0x402
 8004d18:	2093      	movs	r0, #147	; 0x93
 8004d1a:	f7fb ffff 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004d1e:	2102      	movs	r1, #2
 8004d20:	2094      	movs	r0, #148	; 0x94
 8004d22:	f7fb fffb 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004d26:	2014      	movs	r0, #20
 8004d28:	f001 f902 	bl	8005f30 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	2007      	movs	r0, #7
 8004d30:	f7fb fff4 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004d34:	2014      	movs	r0, #20
 8004d36:	f001 f8fb 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004d3a:	2161      	movs	r1, #97	; 0x61
 8004d3c:	2007      	movs	r0, #7
 8004d3e:	f7fb ffed 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004d42:	f240 1173 	movw	r1, #371	; 0x173
 8004d46:	2007      	movs	r0, #7
 8004d48:	f7fb ffe8 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	2020      	movs	r0, #32
 8004d50:	f7fb ffe4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004d54:	2100      	movs	r1, #0
 8004d56:	2021      	movs	r0, #33	; 0x21
 8004d58:	f7fb ffe0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004d5c:	2122      	movs	r1, #34	; 0x22
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f7fb ffdc 	bl	8000d1c <LCD_WriteReg>
 8004d64:	f000 beca 	b.w	8005afc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004d68:	4b6b      	ldr	r3, [pc, #428]	; (8004f18 <LCD_Init+0x3250>)
 8004d6a:	889b      	ldrh	r3, [r3, #4]
 8004d6c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004d70:	4293      	cmp	r3, r2
 8004d72:	f040 80d3 	bne.w	8004f1c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004d76:	2100      	movs	r1, #0
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f7fb ffcf 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d7e:	2100      	movs	r1, #0
 8004d80:	2000      	movs	r0, #0
 8004d82:	f7fb ffcb 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004d86:	2014      	movs	r0, #20
 8004d88:	f001 f8d2 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f7fb ffc4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d94:	2100      	movs	r1, #0
 8004d96:	2000      	movs	r0, #0
 8004d98:	f7fb ffc0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7fb ffbc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004da4:	2100      	movs	r1, #0
 8004da6:	2000      	movs	r0, #0
 8004da8:	f7fb ffb8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004dac:	2101      	movs	r1, #1
 8004dae:	20a4      	movs	r0, #164	; 0xa4
 8004db0:	f7fb ffb4 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004db4:	2014      	movs	r0, #20
 8004db6:	f001 f8bb 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004dba:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004dbe:	2060      	movs	r0, #96	; 0x60
 8004dc0:	f7fb ffac 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004dc4:	f640 0106 	movw	r1, #2054	; 0x806
 8004dc8:	2008      	movs	r0, #8
 8004dca:	f7fb ffa7 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004dce:	f240 7103 	movw	r1, #1795	; 0x703
 8004dd2:	2030      	movs	r0, #48	; 0x30
 8004dd4:	f7fb ffa2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004dd8:	2101      	movs	r1, #1
 8004dda:	2031      	movs	r0, #49	; 0x31
 8004ddc:	f7fb ff9e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004de0:	2104      	movs	r1, #4
 8004de2:	2032      	movs	r0, #50	; 0x32
 8004de4:	f7fb ff9a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004de8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004dec:	2033      	movs	r0, #51	; 0x33
 8004dee:	f7fb ff95 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004df2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004df6:	2034      	movs	r0, #52	; 0x34
 8004df8:	f7fb ff90 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004dfc:	f240 1103 	movw	r1, #259	; 0x103
 8004e00:	2035      	movs	r0, #53	; 0x35
 8004e02:	f7fb ff8b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004e06:	211f      	movs	r1, #31
 8004e08:	2036      	movs	r0, #54	; 0x36
 8004e0a:	f7fb ff87 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004e0e:	f240 7103 	movw	r1, #1795	; 0x703
 8004e12:	2037      	movs	r0, #55	; 0x37
 8004e14:	f7fb ff82 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004e18:	2101      	movs	r1, #1
 8004e1a:	2038      	movs	r0, #56	; 0x38
 8004e1c:	f7fb ff7e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004e20:	2104      	movs	r1, #4
 8004e22:	2039      	movs	r0, #57	; 0x39
 8004e24:	f7fb ff7a 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004e28:	2115      	movs	r1, #21
 8004e2a:	2090      	movs	r0, #144	; 0x90
 8004e2c:	f7fb ff76 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004e30:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004e34:	2010      	movs	r0, #16
 8004e36:	f7fb ff71 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004e3a:	f240 2147 	movw	r1, #583	; 0x247
 8004e3e:	2011      	movs	r0, #17
 8004e40:	f7fb ff6c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004e44:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004e48:	2012      	movs	r0, #18
 8004e4a:	f7fb ff67 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004e4e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004e52:	2013      	movs	r0, #19
 8004e54:	f7fb ff62 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(120);
 8004e58:	2078      	movs	r0, #120	; 0x78
 8004e5a:	f001 f869 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e62:	2001      	movs	r0, #1
 8004e64:	f7fb ff5a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	f7fb ff55 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004e72:	f241 0130 	movw	r1, #4144	; 0x1030
 8004e76:	2003      	movs	r0, #3
 8004e78:	f7fb ff50 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004e7c:	2108      	movs	r1, #8
 8004e7e:	200a      	movs	r0, #10
 8004e80:	f7fb ff4c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004e84:	2100      	movs	r1, #0
 8004e86:	200c      	movs	r0, #12
 8004e88:	f7fb ff48 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004e8c:	2120      	movs	r1, #32
 8004e8e:	200e      	movs	r0, #14
 8004e90:	f7fb ff44 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004e94:	2100      	movs	r1, #0
 8004e96:	200f      	movs	r0, #15
 8004e98:	f7fb ff40 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	2020      	movs	r0, #32
 8004ea0:	f7fb ff3c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	2021      	movs	r0, #33	; 0x21
 8004ea8:	f7fb ff38 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8004eac:	213d      	movs	r1, #61	; 0x3d
 8004eae:	202a      	movs	r0, #42	; 0x2a
 8004eb0:	f7fb ff34 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(20);
 8004eb4:	2014      	movs	r0, #20
 8004eb6:	f001 f83b 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8004eba:	212d      	movs	r1, #45	; 0x2d
 8004ebc:	2029      	movs	r0, #41	; 0x29
 8004ebe:	f7fb ff2d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	2050      	movs	r0, #80	; 0x50
 8004ec6:	f7fb ff29 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8004eca:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8004ece:	2051      	movs	r0, #81	; 0x51
 8004ed0:	f7fb ff24 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	2052      	movs	r0, #82	; 0x52
 8004ed8:	f7fb ff20 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004edc:	f240 113f 	movw	r1, #319	; 0x13f
 8004ee0:	2053      	movs	r0, #83	; 0x53
 8004ee2:	f7fb ff1b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	2061      	movs	r0, #97	; 0x61
 8004eea:	f7fb ff17 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004eee:	2100      	movs	r1, #0
 8004ef0:	206a      	movs	r0, #106	; 0x6a
 8004ef2:	f7fb ff13 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004ef6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004efa:	2092      	movs	r0, #146	; 0x92
 8004efc:	f7fb ff0e 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8004f00:	2105      	movs	r1, #5
 8004f02:	2093      	movs	r0, #147	; 0x93
 8004f04:	f7fb ff0a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8004f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f0c:	2007      	movs	r0, #7
 8004f0e:	f7fb ff05 	bl	8000d1c <LCD_WriteReg>
 8004f12:	f000 bdf3 	b.w	8005afc <LCD_Init+0x3e34>
 8004f16:	bf00      	nop
 8004f18:	20000fe8 	.word	0x20000fe8
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8004f1c:	4bc2      	ldr	r3, [pc, #776]	; (8005228 <LCD_Init+0x3560>)
 8004f1e:	889b      	ldrh	r3, [r3, #4]
 8004f20:	f648 1289 	movw	r2, #35209	; 0x8989
 8004f24:	4293      	cmp	r3, r2
 8004f26:	f040 80bc 	bne.w	80050a2 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	f7fb fef5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8004f32:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8004f36:	2003      	movs	r0, #3
 8004f38:	f7fb fef0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	200c      	movs	r0, #12
 8004f40:	f7fb feec 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8004f44:	f640 010c 	movw	r1, #2060	; 0x80c
 8004f48:	200d      	movs	r0, #13
 8004f4a:	f7fb fee7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8004f4e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8004f52:	200e      	movs	r0, #14
 8004f54:	f7fb fee2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8004f58:	21b0      	movs	r1, #176	; 0xb0
 8004f5a:	201e      	movs	r0, #30
 8004f5c:	f7fb fede 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8004f60:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8004f64:	2001      	movs	r0, #1
 8004f66:	f7fb fed9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8004f6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f6e:	2002      	movs	r0, #2
 8004f70:	f7fb fed4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004f74:	2100      	movs	r1, #0
 8004f76:	2010      	movs	r0, #16
 8004f78:	f7fb fed0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8004f7c:	f246 0178 	movw	r1, #24696	; 0x6078
 8004f80:	2011      	movs	r0, #17
 8004f82:	f7fb fecb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8004f86:	2100      	movs	r1, #0
 8004f88:	2005      	movs	r0, #5
 8004f8a:	f7fb fec7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8004f8e:	2100      	movs	r1, #0
 8004f90:	2006      	movs	r0, #6
 8004f92:	f7fb fec3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8004f96:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8004f9a:	2016      	movs	r0, #22
 8004f9c:	f7fb febe 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8004fa0:	2103      	movs	r1, #3
 8004fa2:	2017      	movs	r0, #23
 8004fa4:	f7fb feba 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8004fa8:	f240 2133 	movw	r1, #563	; 0x233
 8004fac:	2007      	movs	r0, #7
 8004fae:	f7fb feb5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	200b      	movs	r0, #11
 8004fb6:	f7fb feb1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8004fba:	2100      	movs	r1, #0
 8004fbc:	200f      	movs	r0, #15
 8004fbe:	f7fb fead 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	2041      	movs	r0, #65	; 0x41
 8004fc6:	f7fb fea9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8004fca:	2100      	movs	r1, #0
 8004fcc:	2042      	movs	r0, #66	; 0x42
 8004fce:	f7fb fea5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	2048      	movs	r0, #72	; 0x48
 8004fd6:	f7fb fea1 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8004fda:	f240 113f 	movw	r1, #319	; 0x13f
 8004fde:	2049      	movs	r0, #73	; 0x49
 8004fe0:	f7fb fe9c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	204a      	movs	r0, #74	; 0x4a
 8004fe8:	f7fb fe98 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8004fec:	2100      	movs	r1, #0
 8004fee:	204b      	movs	r0, #75	; 0x4b
 8004ff0:	f7fb fe94 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8004ff4:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8004ff8:	2044      	movs	r0, #68	; 0x44
 8004ffa:	f7fb fe8f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8004ffe:	2100      	movs	r1, #0
 8005000:	2045      	movs	r0, #69	; 0x45
 8005002:	f7fb fe8b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8005006:	f240 113f 	movw	r1, #319	; 0x13f
 800500a:	2046      	movs	r0, #70	; 0x46
 800500c:	f7fb fe86 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005010:	f240 7107 	movw	r1, #1799	; 0x707
 8005014:	2030      	movs	r0, #48	; 0x30
 8005016:	f7fb fe81 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 800501a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800501e:	2031      	movs	r0, #49	; 0x31
 8005020:	f7fb fe7c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8005024:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005028:	2032      	movs	r0, #50	; 0x32
 800502a:	f7fb fe77 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 800502e:	f240 5102 	movw	r1, #1282	; 0x502
 8005032:	2033      	movs	r0, #51	; 0x33
 8005034:	f7fb fe72 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005038:	f240 5107 	movw	r1, #1287	; 0x507
 800503c:	2034      	movs	r0, #52	; 0x34
 800503e:	f7fb fe6d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005042:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005046:	2035      	movs	r0, #53	; 0x35
 8005048:	f7fb fe68 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 800504c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005050:	2036      	movs	r0, #54	; 0x36
 8005052:	f7fb fe63 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8005056:	f240 5102 	movw	r1, #1282	; 0x502
 800505a:	2037      	movs	r0, #55	; 0x37
 800505c:	f7fb fe5e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005060:	f240 3102 	movw	r1, #770	; 0x302
 8005064:	203a      	movs	r0, #58	; 0x3a
 8005066:	f7fb fe59 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800506a:	f240 3102 	movw	r1, #770	; 0x302
 800506e:	203b      	movs	r0, #59	; 0x3b
 8005070:	f7fb fe54 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005074:	2100      	movs	r1, #0
 8005076:	2023      	movs	r0, #35	; 0x23
 8005078:	f7fb fe50 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800507c:	2100      	movs	r1, #0
 800507e:	2024      	movs	r0, #36	; 0x24
 8005080:	f7fb fe4c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005088:	2025      	movs	r0, #37	; 0x25
 800508a:	f7fb fe47 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800508e:	2100      	movs	r1, #0
 8005090:	204f      	movs	r0, #79	; 0x4f
 8005092:	f7fb fe43 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005096:	2100      	movs	r1, #0
 8005098:	204e      	movs	r0, #78	; 0x4e
 800509a:	f7fb fe3f 	bl	8000d1c <LCD_WriteReg>
 800509e:	f000 bd2d 	b.w	8005afc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 80050a2:	4b61      	ldr	r3, [pc, #388]	; (8005228 <LCD_Init+0x3560>)
 80050a4:	889b      	ldrh	r3, [r3, #4]
 80050a6:	f244 5231 	movw	r2, #17713	; 0x4531
 80050aa:	4293      	cmp	r3, r2
 80050ac:	f040 80be 	bne.w	800522c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 80050b0:	2101      	movs	r1, #1
 80050b2:	2000      	movs	r0, #0
 80050b4:	f7fb fe32 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(10);
 80050b8:	200a      	movs	r0, #10
 80050ba:	f000 ff39 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 80050be:	f241 6128 	movw	r1, #5672	; 0x1628
 80050c2:	2010      	movs	r0, #16
 80050c4:	f7fb fe2a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 80050c8:	210e      	movs	r1, #14
 80050ca:	2012      	movs	r0, #18
 80050cc:	f7fb fe26 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 80050d0:	f640 2139 	movw	r1, #2617	; 0xa39
 80050d4:	2013      	movs	r0, #19
 80050d6:	f7fb fe21 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(10);
 80050da:	200a      	movs	r0, #10
 80050dc:	f000 ff28 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 80050e0:	2140      	movs	r1, #64	; 0x40
 80050e2:	2011      	movs	r0, #17
 80050e4:	f7fb fe1a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80050e8:	2150      	movs	r1, #80	; 0x50
 80050ea:	2015      	movs	r0, #21
 80050ec:	f7fb fe16 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(10);
 80050f0:	200a      	movs	r0, #10
 80050f2:	f000 ff1d 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80050f6:	211e      	movs	r1, #30
 80050f8:	2012      	movs	r0, #18
 80050fa:	f7fb fe0f 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(10);
 80050fe:	200a      	movs	r0, #10
 8005100:	f000 ff16 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8005104:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005108:	2010      	movs	r0, #16
 800510a:	f7fb fe07 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 800510e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005112:	2013      	movs	r0, #19
 8005114:	f7fb fe02 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(10);
 8005118:	200a      	movs	r0, #10
 800511a:	f000 ff09 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 800511e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005122:	2001      	movs	r0, #1
 8005124:	f7fb fdfa 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005128:	f44f 7140 	mov.w	r1, #768	; 0x300
 800512c:	2002      	movs	r0, #2
 800512e:	f7fb fdf5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8005132:	f241 0138 	movw	r1, #4152	; 0x1038
 8005136:	2003      	movs	r0, #3
 8005138:	f7fb fdf0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 800513c:	f240 2102 	movw	r1, #514	; 0x202
 8005140:	2008      	movs	r0, #8
 8005142:	f7fb fdeb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005146:	2108      	movs	r1, #8
 8005148:	200a      	movs	r0, #10
 800514a:	f7fb fde7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 800514e:	2100      	movs	r1, #0
 8005150:	2030      	movs	r0, #48	; 0x30
 8005152:	f7fb fde3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005156:	f240 4102 	movw	r1, #1026	; 0x402
 800515a:	2031      	movs	r0, #49	; 0x31
 800515c:	f7fb fdde 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005160:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005164:	2032      	movs	r0, #50	; 0x32
 8005166:	f7fb fdd9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800516a:	f240 5103 	movw	r1, #1283	; 0x503
 800516e:	2033      	movs	r0, #51	; 0x33
 8005170:	f7fb fdd4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005174:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005178:	2034      	movs	r0, #52	; 0x34
 800517a:	f7fb fdcf 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800517e:	f240 3101 	movw	r1, #769	; 0x301
 8005182:	2035      	movs	r0, #53	; 0x35
 8005184:	f7fb fdca 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005188:	f240 7107 	movw	r1, #1799	; 0x707
 800518c:	2036      	movs	r0, #54	; 0x36
 800518e:	f7fb fdc5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005192:	f240 3105 	movw	r1, #773	; 0x305
 8005196:	2037      	movs	r0, #55	; 0x37
 8005198:	f7fb fdc0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800519c:	f44f 7102 	mov.w	r1, #520	; 0x208
 80051a0:	2038      	movs	r0, #56	; 0x38
 80051a2:	f7fb fdbb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80051a6:	f640 710b 	movw	r1, #3851	; 0xf0b
 80051aa:	2039      	movs	r0, #57	; 0x39
 80051ac:	f7fb fdb6 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 80051b0:	2102      	movs	r1, #2
 80051b2:	2041      	movs	r0, #65	; 0x41
 80051b4:	f7fb fdb2 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80051b8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80051bc:	2060      	movs	r0, #96	; 0x60
 80051be:	f7fb fdad 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80051c2:	2101      	movs	r1, #1
 80051c4:	2061      	movs	r0, #97	; 0x61
 80051c6:	f7fb fda9 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 80051ca:	f44f 7104 	mov.w	r1, #528	; 0x210
 80051ce:	2090      	movs	r0, #144	; 0x90
 80051d0:	f7fb fda4 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 80051d4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80051d8:	2092      	movs	r0, #146	; 0x92
 80051da:	f7fb fd9f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80051de:	2104      	movs	r1, #4
 80051e0:	2093      	movs	r0, #147	; 0x93
 80051e2:	f7fb fd9b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80051e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051ea:	20a0      	movs	r0, #160	; 0xa0
 80051ec:	f7fb fd96 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80051f0:	2101      	movs	r1, #1
 80051f2:	2007      	movs	r0, #7
 80051f4:	f7fb fd92 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80051f8:	2121      	movs	r1, #33	; 0x21
 80051fa:	2007      	movs	r0, #7
 80051fc:	f7fb fd8e 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005200:	2123      	movs	r1, #35	; 0x23
 8005202:	2007      	movs	r0, #7
 8005204:	f7fb fd8a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005208:	2133      	movs	r1, #51	; 0x33
 800520a:	2007      	movs	r0, #7
 800520c:	f7fb fd86 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005210:	f240 1133 	movw	r1, #307	; 0x133
 8005214:	2007      	movs	r0, #7
 8005216:	f7fb fd81 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800521a:	2100      	movs	r1, #0
 800521c:	20a0      	movs	r0, #160	; 0xa0
 800521e:	f7fb fd7d 	bl	8000d1c <LCD_WriteReg>
 8005222:	f000 bc6b 	b.w	8005afc <LCD_Init+0x3e34>
 8005226:	bf00      	nop
 8005228:	20000fe8 	.word	0x20000fe8
	} else if (lcddev.id == 0x4535) {
 800522c:	4b5b      	ldr	r3, [pc, #364]	; (800539c <LCD_Init+0x36d4>)
 800522e:	889b      	ldrh	r3, [r3, #4]
 8005230:	f244 5235 	movw	r2, #17717	; 0x4535
 8005234:	4293      	cmp	r3, r2
 8005236:	f040 80b3 	bne.w	80053a0 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800523a:	2130      	movs	r1, #48	; 0x30
 800523c:	2015      	movs	r0, #21
 800523e:	f7fb fd6d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8005242:	2110      	movs	r1, #16
 8005244:	209a      	movs	r0, #154	; 0x9a
 8005246:	f7fb fd69 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800524a:	2120      	movs	r1, #32
 800524c:	2011      	movs	r0, #17
 800524e:	f7fb fd65 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005252:	f243 4128 	movw	r1, #13352	; 0x3428
 8005256:	2010      	movs	r0, #16
 8005258:	f7fb fd60 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800525c:	2102      	movs	r1, #2
 800525e:	2012      	movs	r0, #18
 8005260:	f7fb fd5c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005264:	f241 0138 	movw	r1, #4152	; 0x1038
 8005268:	2013      	movs	r0, #19
 800526a:	f7fb fd57 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(40);
 800526e:	2028      	movs	r0, #40	; 0x28
 8005270:	f000 fe5e 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005274:	2112      	movs	r1, #18
 8005276:	2012      	movs	r0, #18
 8005278:	f7fb fd50 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(40);
 800527c:	2028      	movs	r0, #40	; 0x28
 800527e:	f000 fe57 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005282:	f243 4120 	movw	r1, #13344	; 0x3420
 8005286:	2010      	movs	r0, #16
 8005288:	f7fb fd48 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800528c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005290:	2013      	movs	r0, #19
 8005292:	f7fb fd43 	bl	8000d1c <LCD_WriteReg>
		HAL_Delay(70);
 8005296:	2046      	movs	r0, #70	; 0x46
 8005298:	f000 fe4a 	bl	8005f30 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800529c:	2100      	movs	r1, #0
 800529e:	2030      	movs	r0, #48	; 0x30
 80052a0:	f7fb fd3c 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80052a4:	f240 4102 	movw	r1, #1026	; 0x402
 80052a8:	2031      	movs	r0, #49	; 0x31
 80052aa:	f7fb fd37 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80052ae:	f240 3107 	movw	r1, #775	; 0x307
 80052b2:	2032      	movs	r0, #50	; 0x32
 80052b4:	f7fb fd32 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80052b8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80052bc:	2033      	movs	r0, #51	; 0x33
 80052be:	f7fb fd2d 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80052c2:	2104      	movs	r1, #4
 80052c4:	2034      	movs	r0, #52	; 0x34
 80052c6:	f7fb fd29 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80052ca:	f240 4101 	movw	r1, #1025	; 0x401
 80052ce:	2035      	movs	r0, #53	; 0x35
 80052d0:	f7fb fd24 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80052d4:	f240 7107 	movw	r1, #1799	; 0x707
 80052d8:	2036      	movs	r0, #54	; 0x36
 80052da:	f7fb fd1f 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80052de:	f240 3105 	movw	r1, #773	; 0x305
 80052e2:	2037      	movs	r0, #55	; 0x37
 80052e4:	f7fb fd1a 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80052e8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80052ec:	2038      	movs	r0, #56	; 0x38
 80052ee:	f7fb fd15 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80052f2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80052f6:	2039      	movs	r0, #57	; 0x39
 80052f8:	f7fb fd10 	bl	8000d1c <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80052fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005300:	2001      	movs	r0, #1
 8005302:	f7fb fd0b 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005306:	f44f 7140 	mov.w	r1, #768	; 0x300
 800530a:	2002      	movs	r0, #2
 800530c:	f7fb fd06 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005310:	f241 0130 	movw	r1, #4144	; 0x1030
 8005314:	2003      	movs	r0, #3
 8005316:	f7fb fd01 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800531a:	f640 0108 	movw	r1, #2056	; 0x808
 800531e:	2008      	movs	r0, #8
 8005320:	f7fb fcfc 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005324:	2108      	movs	r1, #8
 8005326:	200a      	movs	r0, #10
 8005328:	f7fb fcf8 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800532c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005330:	2060      	movs	r0, #96	; 0x60
 8005332:	f7fb fcf3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005336:	2101      	movs	r1, #1
 8005338:	2061      	movs	r0, #97	; 0x61
 800533a:	f7fb fcef 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800533e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005342:	2090      	movs	r0, #144	; 0x90
 8005344:	f7fb fcea 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800534c:	2092      	movs	r0, #146	; 0x92
 800534e:	f7fb fce5 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005356:	2093      	movs	r0, #147	; 0x93
 8005358:	f7fb fce0 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800535c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005360:	20a0      	movs	r0, #160	; 0xa0
 8005362:	f7fb fcdb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005366:	2110      	movs	r1, #16
 8005368:	20a3      	movs	r0, #163	; 0xa3
 800536a:	f7fb fcd7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800536e:	2101      	movs	r1, #1
 8005370:	2007      	movs	r0, #7
 8005372:	f7fb fcd3 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005376:	2121      	movs	r1, #33	; 0x21
 8005378:	2007      	movs	r0, #7
 800537a:	f7fb fccf 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800537e:	2123      	movs	r1, #35	; 0x23
 8005380:	2007      	movs	r0, #7
 8005382:	f7fb fccb 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005386:	2133      	movs	r1, #51	; 0x33
 8005388:	2007      	movs	r0, #7
 800538a:	f7fb fcc7 	bl	8000d1c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800538e:	f240 1133 	movw	r1, #307	; 0x133
 8005392:	2007      	movs	r0, #7
 8005394:	f7fb fcc2 	bl	8000d1c <LCD_WriteReg>
 8005398:	e3b0      	b.n	8005afc <LCD_Init+0x3e34>
 800539a:	bf00      	nop
 800539c:	20000fe8 	.word	0x20000fe8
	} else if (lcddev.id == 0X1963) {
 80053a0:	4ba8      	ldr	r3, [pc, #672]	; (8005644 <LCD_Init+0x397c>)
 80053a2:	889b      	ldrh	r3, [r3, #4]
 80053a4:	f641 1263 	movw	r2, #6499	; 0x1963
 80053a8:	4293      	cmp	r3, r2
 80053aa:	f040 83a7 	bne.w	8005afc <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80053ae:	20e2      	movs	r0, #226	; 0xe2
 80053b0:	f7fb fc28 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80053b4:	4ba4      	ldr	r3, [pc, #656]	; (8005648 <LCD_Init+0x3980>)
 80053b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053ba:	611a      	str	r2, [r3, #16]
 80053bc:	4ba2      	ldr	r3, [pc, #648]	; (8005648 <LCD_Init+0x3980>)
 80053be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c2:	615a      	str	r2, [r3, #20]
 80053c4:	4ba1      	ldr	r3, [pc, #644]	; (800564c <LCD_Init+0x3984>)
 80053c6:	221d      	movs	r2, #29
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	4b9f      	ldr	r3, [pc, #636]	; (8005648 <LCD_Init+0x3980>)
 80053cc:	2280      	movs	r2, #128	; 0x80
 80053ce:	615a      	str	r2, [r3, #20]
 80053d0:	4b9d      	ldr	r3, [pc, #628]	; (8005648 <LCD_Init+0x3980>)
 80053d2:	2280      	movs	r2, #128	; 0x80
 80053d4:	611a      	str	r2, [r3, #16]
 80053d6:	4b9c      	ldr	r3, [pc, #624]	; (8005648 <LCD_Init+0x3980>)
 80053d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80053de:	4b9a      	ldr	r3, [pc, #616]	; (8005648 <LCD_Init+0x3980>)
 80053e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053e4:	611a      	str	r2, [r3, #16]
 80053e6:	4b98      	ldr	r3, [pc, #608]	; (8005648 <LCD_Init+0x3980>)
 80053e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ec:	615a      	str	r2, [r3, #20]
 80053ee:	4b97      	ldr	r3, [pc, #604]	; (800564c <LCD_Init+0x3984>)
 80053f0:	2202      	movs	r2, #2
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	4b94      	ldr	r3, [pc, #592]	; (8005648 <LCD_Init+0x3980>)
 80053f6:	2280      	movs	r2, #128	; 0x80
 80053f8:	615a      	str	r2, [r3, #20]
 80053fa:	4b93      	ldr	r3, [pc, #588]	; (8005648 <LCD_Init+0x3980>)
 80053fc:	2280      	movs	r2, #128	; 0x80
 80053fe:	611a      	str	r2, [r3, #16]
 8005400:	4b91      	ldr	r3, [pc, #580]	; (8005648 <LCD_Init+0x3980>)
 8005402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005406:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005408:	4b8f      	ldr	r3, [pc, #572]	; (8005648 <LCD_Init+0x3980>)
 800540a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800540e:	611a      	str	r2, [r3, #16]
 8005410:	4b8d      	ldr	r3, [pc, #564]	; (8005648 <LCD_Init+0x3980>)
 8005412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005416:	615a      	str	r2, [r3, #20]
 8005418:	4b8c      	ldr	r3, [pc, #560]	; (800564c <LCD_Init+0x3984>)
 800541a:	2204      	movs	r2, #4
 800541c:	60da      	str	r2, [r3, #12]
 800541e:	4b8a      	ldr	r3, [pc, #552]	; (8005648 <LCD_Init+0x3980>)
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	615a      	str	r2, [r3, #20]
 8005424:	4b88      	ldr	r3, [pc, #544]	; (8005648 <LCD_Init+0x3980>)
 8005426:	2280      	movs	r2, #128	; 0x80
 8005428:	611a      	str	r2, [r3, #16]
 800542a:	4b87      	ldr	r3, [pc, #540]	; (8005648 <LCD_Init+0x3980>)
 800542c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005430:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8005432:	2001      	movs	r0, #1
 8005434:	f000 fd7c 	bl	8005f30 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005438:	20e0      	movs	r0, #224	; 0xe0
 800543a:	f7fb fbe3 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800543e:	4b82      	ldr	r3, [pc, #520]	; (8005648 <LCD_Init+0x3980>)
 8005440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005444:	611a      	str	r2, [r3, #16]
 8005446:	4b80      	ldr	r3, [pc, #512]	; (8005648 <LCD_Init+0x3980>)
 8005448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800544c:	615a      	str	r2, [r3, #20]
 800544e:	4b7f      	ldr	r3, [pc, #508]	; (800564c <LCD_Init+0x3984>)
 8005450:	2201      	movs	r2, #1
 8005452:	60da      	str	r2, [r3, #12]
 8005454:	4b7c      	ldr	r3, [pc, #496]	; (8005648 <LCD_Init+0x3980>)
 8005456:	2280      	movs	r2, #128	; 0x80
 8005458:	615a      	str	r2, [r3, #20]
 800545a:	4b7b      	ldr	r3, [pc, #492]	; (8005648 <LCD_Init+0x3980>)
 800545c:	2280      	movs	r2, #128	; 0x80
 800545e:	611a      	str	r2, [r3, #16]
 8005460:	4b79      	ldr	r3, [pc, #484]	; (8005648 <LCD_Init+0x3980>)
 8005462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005466:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005468:	200a      	movs	r0, #10
 800546a:	f000 fd61 	bl	8005f30 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800546e:	20e0      	movs	r0, #224	; 0xe0
 8005470:	f7fb fbc8 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005474:	4b74      	ldr	r3, [pc, #464]	; (8005648 <LCD_Init+0x3980>)
 8005476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800547a:	611a      	str	r2, [r3, #16]
 800547c:	4b72      	ldr	r3, [pc, #456]	; (8005648 <LCD_Init+0x3980>)
 800547e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005482:	615a      	str	r2, [r3, #20]
 8005484:	4b71      	ldr	r3, [pc, #452]	; (800564c <LCD_Init+0x3984>)
 8005486:	2203      	movs	r2, #3
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	4b6f      	ldr	r3, [pc, #444]	; (8005648 <LCD_Init+0x3980>)
 800548c:	2280      	movs	r2, #128	; 0x80
 800548e:	615a      	str	r2, [r3, #20]
 8005490:	4b6d      	ldr	r3, [pc, #436]	; (8005648 <LCD_Init+0x3980>)
 8005492:	2280      	movs	r2, #128	; 0x80
 8005494:	611a      	str	r2, [r3, #16]
 8005496:	4b6c      	ldr	r3, [pc, #432]	; (8005648 <LCD_Init+0x3980>)
 8005498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800549e:	200c      	movs	r0, #12
 80054a0:	f000 fd46 	bl	8005f30 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80054a4:	2001      	movs	r0, #1
 80054a6:	f7fb fbad 	bl	8000c04 <LCD_WR_REG>
		HAL_Delay(10);
 80054aa:	200a      	movs	r0, #10
 80054ac:	f000 fd40 	bl	8005f30 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80054b0:	20e6      	movs	r0, #230	; 0xe6
 80054b2:	f7fb fba7 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80054b6:	4b64      	ldr	r3, [pc, #400]	; (8005648 <LCD_Init+0x3980>)
 80054b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054bc:	611a      	str	r2, [r3, #16]
 80054be:	4b62      	ldr	r3, [pc, #392]	; (8005648 <LCD_Init+0x3980>)
 80054c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c4:	615a      	str	r2, [r3, #20]
 80054c6:	4b61      	ldr	r3, [pc, #388]	; (800564c <LCD_Init+0x3984>)
 80054c8:	222f      	movs	r2, #47	; 0x2f
 80054ca:	60da      	str	r2, [r3, #12]
 80054cc:	4b5e      	ldr	r3, [pc, #376]	; (8005648 <LCD_Init+0x3980>)
 80054ce:	2280      	movs	r2, #128	; 0x80
 80054d0:	615a      	str	r2, [r3, #20]
 80054d2:	4b5d      	ldr	r3, [pc, #372]	; (8005648 <LCD_Init+0x3980>)
 80054d4:	2280      	movs	r2, #128	; 0x80
 80054d6:	611a      	str	r2, [r3, #16]
 80054d8:	4b5b      	ldr	r3, [pc, #364]	; (8005648 <LCD_Init+0x3980>)
 80054da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054de:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80054e0:	4b59      	ldr	r3, [pc, #356]	; (8005648 <LCD_Init+0x3980>)
 80054e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054e6:	611a      	str	r2, [r3, #16]
 80054e8:	4b57      	ldr	r3, [pc, #348]	; (8005648 <LCD_Init+0x3980>)
 80054ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ee:	615a      	str	r2, [r3, #20]
 80054f0:	4b56      	ldr	r3, [pc, #344]	; (800564c <LCD_Init+0x3984>)
 80054f2:	22ff      	movs	r2, #255	; 0xff
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	4b54      	ldr	r3, [pc, #336]	; (8005648 <LCD_Init+0x3980>)
 80054f8:	2280      	movs	r2, #128	; 0x80
 80054fa:	615a      	str	r2, [r3, #20]
 80054fc:	4b52      	ldr	r3, [pc, #328]	; (8005648 <LCD_Init+0x3980>)
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	611a      	str	r2, [r3, #16]
 8005502:	4b51      	ldr	r3, [pc, #324]	; (8005648 <LCD_Init+0x3980>)
 8005504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005508:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800550a:	4b4f      	ldr	r3, [pc, #316]	; (8005648 <LCD_Init+0x3980>)
 800550c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005510:	611a      	str	r2, [r3, #16]
 8005512:	4b4d      	ldr	r3, [pc, #308]	; (8005648 <LCD_Init+0x3980>)
 8005514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005518:	615a      	str	r2, [r3, #20]
 800551a:	4b4c      	ldr	r3, [pc, #304]	; (800564c <LCD_Init+0x3984>)
 800551c:	22ff      	movs	r2, #255	; 0xff
 800551e:	60da      	str	r2, [r3, #12]
 8005520:	4b49      	ldr	r3, [pc, #292]	; (8005648 <LCD_Init+0x3980>)
 8005522:	2280      	movs	r2, #128	; 0x80
 8005524:	615a      	str	r2, [r3, #20]
 8005526:	4b48      	ldr	r3, [pc, #288]	; (8005648 <LCD_Init+0x3980>)
 8005528:	2280      	movs	r2, #128	; 0x80
 800552a:	611a      	str	r2, [r3, #16]
 800552c:	4b46      	ldr	r3, [pc, #280]	; (8005648 <LCD_Init+0x3980>)
 800552e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005532:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005534:	20b0      	movs	r0, #176	; 0xb0
 8005536:	f7fb fb65 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800553a:	4b43      	ldr	r3, [pc, #268]	; (8005648 <LCD_Init+0x3980>)
 800553c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005540:	611a      	str	r2, [r3, #16]
 8005542:	4b41      	ldr	r3, [pc, #260]	; (8005648 <LCD_Init+0x3980>)
 8005544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005548:	615a      	str	r2, [r3, #20]
 800554a:	4b40      	ldr	r3, [pc, #256]	; (800564c <LCD_Init+0x3984>)
 800554c:	2220      	movs	r2, #32
 800554e:	60da      	str	r2, [r3, #12]
 8005550:	4b3d      	ldr	r3, [pc, #244]	; (8005648 <LCD_Init+0x3980>)
 8005552:	2280      	movs	r2, #128	; 0x80
 8005554:	615a      	str	r2, [r3, #20]
 8005556:	4b3c      	ldr	r3, [pc, #240]	; (8005648 <LCD_Init+0x3980>)
 8005558:	2280      	movs	r2, #128	; 0x80
 800555a:	611a      	str	r2, [r3, #16]
 800555c:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <LCD_Init+0x3980>)
 800555e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005562:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005564:	4b38      	ldr	r3, [pc, #224]	; (8005648 <LCD_Init+0x3980>)
 8005566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800556a:	611a      	str	r2, [r3, #16]
 800556c:	4b36      	ldr	r3, [pc, #216]	; (8005648 <LCD_Init+0x3980>)
 800556e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005572:	615a      	str	r2, [r3, #20]
 8005574:	4b35      	ldr	r3, [pc, #212]	; (800564c <LCD_Init+0x3984>)
 8005576:	2200      	movs	r2, #0
 8005578:	60da      	str	r2, [r3, #12]
 800557a:	4b33      	ldr	r3, [pc, #204]	; (8005648 <LCD_Init+0x3980>)
 800557c:	2280      	movs	r2, #128	; 0x80
 800557e:	615a      	str	r2, [r3, #20]
 8005580:	4b31      	ldr	r3, [pc, #196]	; (8005648 <LCD_Init+0x3980>)
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	611a      	str	r2, [r3, #16]
 8005586:	4b30      	ldr	r3, [pc, #192]	; (8005648 <LCD_Init+0x3980>)
 8005588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800558c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800558e:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <LCD_Init+0x3980>)
 8005590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005594:	611a      	str	r2, [r3, #16]
 8005596:	4b2c      	ldr	r3, [pc, #176]	; (8005648 <LCD_Init+0x3980>)
 8005598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559c:	615a      	str	r2, [r3, #20]
 800559e:	4b2b      	ldr	r3, [pc, #172]	; (800564c <LCD_Init+0x3984>)
 80055a0:	2203      	movs	r2, #3
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	4b28      	ldr	r3, [pc, #160]	; (8005648 <LCD_Init+0x3980>)
 80055a6:	2280      	movs	r2, #128	; 0x80
 80055a8:	615a      	str	r2, [r3, #20]
 80055aa:	4b27      	ldr	r3, [pc, #156]	; (8005648 <LCD_Init+0x3980>)
 80055ac:	2280      	movs	r2, #128	; 0x80
 80055ae:	611a      	str	r2, [r3, #16]
 80055b0:	4b25      	ldr	r3, [pc, #148]	; (8005648 <LCD_Init+0x3980>)
 80055b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80055b8:	4b23      	ldr	r3, [pc, #140]	; (8005648 <LCD_Init+0x3980>)
 80055ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055be:	611a      	str	r2, [r3, #16]
 80055c0:	4b21      	ldr	r3, [pc, #132]	; (8005648 <LCD_Init+0x3980>)
 80055c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c6:	615a      	str	r2, [r3, #20]
 80055c8:	4b20      	ldr	r3, [pc, #128]	; (800564c <LCD_Init+0x3984>)
 80055ca:	f240 321f 	movw	r2, #799	; 0x31f
 80055ce:	60da      	str	r2, [r3, #12]
 80055d0:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <LCD_Init+0x3980>)
 80055d2:	2280      	movs	r2, #128	; 0x80
 80055d4:	615a      	str	r2, [r3, #20]
 80055d6:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <LCD_Init+0x3980>)
 80055d8:	2280      	movs	r2, #128	; 0x80
 80055da:	611a      	str	r2, [r3, #16]
 80055dc:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <LCD_Init+0x3980>)
 80055de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80055e4:	4b18      	ldr	r3, [pc, #96]	; (8005648 <LCD_Init+0x3980>)
 80055e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ea:	611a      	str	r2, [r3, #16]
 80055ec:	4b16      	ldr	r3, [pc, #88]	; (8005648 <LCD_Init+0x3980>)
 80055ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f2:	615a      	str	r2, [r3, #20]
 80055f4:	4b15      	ldr	r3, [pc, #84]	; (800564c <LCD_Init+0x3984>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <LCD_Init+0x3980>)
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	615a      	str	r2, [r3, #20]
 8005600:	4b11      	ldr	r3, [pc, #68]	; (8005648 <LCD_Init+0x3980>)
 8005602:	2280      	movs	r2, #128	; 0x80
 8005604:	611a      	str	r2, [r3, #16]
 8005606:	4b10      	ldr	r3, [pc, #64]	; (8005648 <LCD_Init+0x3980>)
 8005608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <LCD_Init+0x3980>)
 8005610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <LCD_Init+0x3980>)
 8005618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561c:	615a      	str	r2, [r3, #20]
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <LCD_Init+0x3984>)
 8005620:	f240 12df 	movw	r2, #479	; 0x1df
 8005624:	60da      	str	r2, [r3, #12]
 8005626:	4b08      	ldr	r3, [pc, #32]	; (8005648 <LCD_Init+0x3980>)
 8005628:	2280      	movs	r2, #128	; 0x80
 800562a:	615a      	str	r2, [r3, #20]
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <LCD_Init+0x3980>)
 800562e:	2280      	movs	r2, #128	; 0x80
 8005630:	611a      	str	r2, [r3, #16]
 8005632:	4b05      	ldr	r3, [pc, #20]	; (8005648 <LCD_Init+0x3980>)
 8005634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005638:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 800563a:	4b03      	ldr	r3, [pc, #12]	; (8005648 <LCD_Init+0x3980>)
 800563c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005640:	e006      	b.n	8005650 <LCD_Init+0x3988>
 8005642:	bf00      	nop
 8005644:	20000fe8 	.word	0x20000fe8
 8005648:	40011000 	.word	0x40011000
 800564c:	40010c00 	.word	0x40010c00
 8005650:	611a      	str	r2, [r3, #16]
 8005652:	4ba3      	ldr	r3, [pc, #652]	; (80058e0 <LCD_Init+0x3c18>)
 8005654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005658:	615a      	str	r2, [r3, #20]
 800565a:	4ba2      	ldr	r3, [pc, #648]	; (80058e4 <LCD_Init+0x3c1c>)
 800565c:	2200      	movs	r2, #0
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	4b9f      	ldr	r3, [pc, #636]	; (80058e0 <LCD_Init+0x3c18>)
 8005662:	2280      	movs	r2, #128	; 0x80
 8005664:	615a      	str	r2, [r3, #20]
 8005666:	4b9e      	ldr	r3, [pc, #632]	; (80058e0 <LCD_Init+0x3c18>)
 8005668:	2280      	movs	r2, #128	; 0x80
 800566a:	611a      	str	r2, [r3, #16]
 800566c:	4b9c      	ldr	r3, [pc, #624]	; (80058e0 <LCD_Init+0x3c18>)
 800566e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005672:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005674:	20b4      	movs	r0, #180	; 0xb4
 8005676:	f7fb fac5 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800567a:	4b99      	ldr	r3, [pc, #612]	; (80058e0 <LCD_Init+0x3c18>)
 800567c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005680:	611a      	str	r2, [r3, #16]
 8005682:	4b97      	ldr	r3, [pc, #604]	; (80058e0 <LCD_Init+0x3c18>)
 8005684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005688:	615a      	str	r2, [r3, #20]
 800568a:	4b96      	ldr	r3, [pc, #600]	; (80058e4 <LCD_Init+0x3c1c>)
 800568c:	2204      	movs	r2, #4
 800568e:	60da      	str	r2, [r3, #12]
 8005690:	4b93      	ldr	r3, [pc, #588]	; (80058e0 <LCD_Init+0x3c18>)
 8005692:	2280      	movs	r2, #128	; 0x80
 8005694:	615a      	str	r2, [r3, #20]
 8005696:	4b92      	ldr	r3, [pc, #584]	; (80058e0 <LCD_Init+0x3c18>)
 8005698:	2280      	movs	r2, #128	; 0x80
 800569a:	611a      	str	r2, [r3, #16]
 800569c:	4b90      	ldr	r3, [pc, #576]	; (80058e0 <LCD_Init+0x3c18>)
 800569e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80056a4:	4b8e      	ldr	r3, [pc, #568]	; (80058e0 <LCD_Init+0x3c18>)
 80056a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056aa:	611a      	str	r2, [r3, #16]
 80056ac:	4b8c      	ldr	r3, [pc, #560]	; (80058e0 <LCD_Init+0x3c18>)
 80056ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b2:	615a      	str	r2, [r3, #20]
 80056b4:	4b8b      	ldr	r3, [pc, #556]	; (80058e4 <LCD_Init+0x3c1c>)
 80056b6:	f240 421f 	movw	r2, #1055	; 0x41f
 80056ba:	60da      	str	r2, [r3, #12]
 80056bc:	4b88      	ldr	r3, [pc, #544]	; (80058e0 <LCD_Init+0x3c18>)
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	615a      	str	r2, [r3, #20]
 80056c2:	4b87      	ldr	r3, [pc, #540]	; (80058e0 <LCD_Init+0x3c18>)
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	611a      	str	r2, [r3, #16]
 80056c8:	4b85      	ldr	r3, [pc, #532]	; (80058e0 <LCD_Init+0x3c18>)
 80056ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80056d0:	4b83      	ldr	r3, [pc, #524]	; (80058e0 <LCD_Init+0x3c18>)
 80056d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056d6:	611a      	str	r2, [r3, #16]
 80056d8:	4b81      	ldr	r3, [pc, #516]	; (80058e0 <LCD_Init+0x3c18>)
 80056da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056de:	615a      	str	r2, [r3, #20]
 80056e0:	4b80      	ldr	r3, [pc, #512]	; (80058e4 <LCD_Init+0x3c1c>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	60da      	str	r2, [r3, #12]
 80056e6:	4b7e      	ldr	r3, [pc, #504]	; (80058e0 <LCD_Init+0x3c18>)
 80056e8:	2280      	movs	r2, #128	; 0x80
 80056ea:	615a      	str	r2, [r3, #20]
 80056ec:	4b7c      	ldr	r3, [pc, #496]	; (80058e0 <LCD_Init+0x3c18>)
 80056ee:	2280      	movs	r2, #128	; 0x80
 80056f0:	611a      	str	r2, [r3, #16]
 80056f2:	4b7b      	ldr	r3, [pc, #492]	; (80058e0 <LCD_Init+0x3c18>)
 80056f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80056fa:	4b79      	ldr	r3, [pc, #484]	; (80058e0 <LCD_Init+0x3c18>)
 80056fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005700:	611a      	str	r2, [r3, #16]
 8005702:	4b77      	ldr	r3, [pc, #476]	; (80058e0 <LCD_Init+0x3c18>)
 8005704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005708:	615a      	str	r2, [r3, #20]
 800570a:	4b76      	ldr	r3, [pc, #472]	; (80058e4 <LCD_Init+0x3c1c>)
 800570c:	222e      	movs	r2, #46	; 0x2e
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	4b73      	ldr	r3, [pc, #460]	; (80058e0 <LCD_Init+0x3c18>)
 8005712:	2280      	movs	r2, #128	; 0x80
 8005714:	615a      	str	r2, [r3, #20]
 8005716:	4b72      	ldr	r3, [pc, #456]	; (80058e0 <LCD_Init+0x3c18>)
 8005718:	2280      	movs	r2, #128	; 0x80
 800571a:	611a      	str	r2, [r3, #16]
 800571c:	4b70      	ldr	r3, [pc, #448]	; (80058e0 <LCD_Init+0x3c18>)
 800571e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005722:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005724:	4b6e      	ldr	r3, [pc, #440]	; (80058e0 <LCD_Init+0x3c18>)
 8005726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800572a:	611a      	str	r2, [r3, #16]
 800572c:	4b6c      	ldr	r3, [pc, #432]	; (80058e0 <LCD_Init+0x3c18>)
 800572e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005732:	615a      	str	r2, [r3, #20]
 8005734:	4b6b      	ldr	r3, [pc, #428]	; (80058e4 <LCD_Init+0x3c1c>)
 8005736:	2200      	movs	r2, #0
 8005738:	60da      	str	r2, [r3, #12]
 800573a:	4b69      	ldr	r3, [pc, #420]	; (80058e0 <LCD_Init+0x3c18>)
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	615a      	str	r2, [r3, #20]
 8005740:	4b67      	ldr	r3, [pc, #412]	; (80058e0 <LCD_Init+0x3c18>)
 8005742:	2280      	movs	r2, #128	; 0x80
 8005744:	611a      	str	r2, [r3, #16]
 8005746:	4b66      	ldr	r3, [pc, #408]	; (80058e0 <LCD_Init+0x3c18>)
 8005748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800574e:	4b64      	ldr	r3, [pc, #400]	; (80058e0 <LCD_Init+0x3c18>)
 8005750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005754:	611a      	str	r2, [r3, #16]
 8005756:	4b62      	ldr	r3, [pc, #392]	; (80058e0 <LCD_Init+0x3c18>)
 8005758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800575c:	615a      	str	r2, [r3, #20]
 800575e:	4b61      	ldr	r3, [pc, #388]	; (80058e4 <LCD_Init+0x3c1c>)
 8005760:	2200      	movs	r2, #0
 8005762:	60da      	str	r2, [r3, #12]
 8005764:	4b5e      	ldr	r3, [pc, #376]	; (80058e0 <LCD_Init+0x3c18>)
 8005766:	2280      	movs	r2, #128	; 0x80
 8005768:	615a      	str	r2, [r3, #20]
 800576a:	4b5d      	ldr	r3, [pc, #372]	; (80058e0 <LCD_Init+0x3c18>)
 800576c:	2280      	movs	r2, #128	; 0x80
 800576e:	611a      	str	r2, [r3, #16]
 8005770:	4b5b      	ldr	r3, [pc, #364]	; (80058e0 <LCD_Init+0x3c18>)
 8005772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005776:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005778:	4b59      	ldr	r3, [pc, #356]	; (80058e0 <LCD_Init+0x3c18>)
 800577a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800577e:	611a      	str	r2, [r3, #16]
 8005780:	4b57      	ldr	r3, [pc, #348]	; (80058e0 <LCD_Init+0x3c18>)
 8005782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005786:	615a      	str	r2, [r3, #20]
 8005788:	4b56      	ldr	r3, [pc, #344]	; (80058e4 <LCD_Init+0x3c1c>)
 800578a:	2200      	movs	r2, #0
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	4b54      	ldr	r3, [pc, #336]	; (80058e0 <LCD_Init+0x3c18>)
 8005790:	2280      	movs	r2, #128	; 0x80
 8005792:	615a      	str	r2, [r3, #20]
 8005794:	4b52      	ldr	r3, [pc, #328]	; (80058e0 <LCD_Init+0x3c18>)
 8005796:	2280      	movs	r2, #128	; 0x80
 8005798:	611a      	str	r2, [r3, #16]
 800579a:	4b51      	ldr	r3, [pc, #324]	; (80058e0 <LCD_Init+0x3c18>)
 800579c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80057a2:	4b4f      	ldr	r3, [pc, #316]	; (80058e0 <LCD_Init+0x3c18>)
 80057a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a8:	611a      	str	r2, [r3, #16]
 80057aa:	4b4d      	ldr	r3, [pc, #308]	; (80058e0 <LCD_Init+0x3c18>)
 80057ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b0:	615a      	str	r2, [r3, #20]
 80057b2:	4b4c      	ldr	r3, [pc, #304]	; (80058e4 <LCD_Init+0x3c1c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	4b49      	ldr	r3, [pc, #292]	; (80058e0 <LCD_Init+0x3c18>)
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	615a      	str	r2, [r3, #20]
 80057be:	4b48      	ldr	r3, [pc, #288]	; (80058e0 <LCD_Init+0x3c18>)
 80057c0:	2280      	movs	r2, #128	; 0x80
 80057c2:	611a      	str	r2, [r3, #16]
 80057c4:	4b46      	ldr	r3, [pc, #280]	; (80058e0 <LCD_Init+0x3c18>)
 80057c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ca:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80057cc:	20b6      	movs	r0, #182	; 0xb6
 80057ce:	f7fb fa19 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80057d2:	4b43      	ldr	r3, [pc, #268]	; (80058e0 <LCD_Init+0x3c18>)
 80057d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d8:	611a      	str	r2, [r3, #16]
 80057da:	4b41      	ldr	r3, [pc, #260]	; (80058e0 <LCD_Init+0x3c18>)
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	615a      	str	r2, [r3, #20]
 80057e2:	4b40      	ldr	r3, [pc, #256]	; (80058e4 <LCD_Init+0x3c1c>)
 80057e4:	2202      	movs	r2, #2
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	4b3d      	ldr	r3, [pc, #244]	; (80058e0 <LCD_Init+0x3c18>)
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	615a      	str	r2, [r3, #20]
 80057ee:	4b3c      	ldr	r3, [pc, #240]	; (80058e0 <LCD_Init+0x3c18>)
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	611a      	str	r2, [r3, #16]
 80057f4:	4b3a      	ldr	r3, [pc, #232]	; (80058e0 <LCD_Init+0x3c18>)
 80057f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 80057fc:	4b38      	ldr	r3, [pc, #224]	; (80058e0 <LCD_Init+0x3c18>)
 80057fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005802:	611a      	str	r2, [r3, #16]
 8005804:	4b36      	ldr	r3, [pc, #216]	; (80058e0 <LCD_Init+0x3c18>)
 8005806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580a:	615a      	str	r2, [r3, #20]
 800580c:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <LCD_Init+0x3c1c>)
 800580e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	4b32      	ldr	r3, [pc, #200]	; (80058e0 <LCD_Init+0x3c18>)
 8005816:	2280      	movs	r2, #128	; 0x80
 8005818:	615a      	str	r2, [r3, #20]
 800581a:	4b31      	ldr	r3, [pc, #196]	; (80058e0 <LCD_Init+0x3c18>)
 800581c:	2280      	movs	r2, #128	; 0x80
 800581e:	611a      	str	r2, [r3, #16]
 8005820:	4b2f      	ldr	r3, [pc, #188]	; (80058e0 <LCD_Init+0x3c18>)
 8005822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005826:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005828:	4b2d      	ldr	r3, [pc, #180]	; (80058e0 <LCD_Init+0x3c18>)
 800582a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800582e:	611a      	str	r2, [r3, #16]
 8005830:	4b2b      	ldr	r3, [pc, #172]	; (80058e0 <LCD_Init+0x3c18>)
 8005832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005836:	615a      	str	r2, [r3, #20]
 8005838:	4b2a      	ldr	r3, [pc, #168]	; (80058e4 <LCD_Init+0x3c1c>)
 800583a:	2200      	movs	r2, #0
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	4b28      	ldr	r3, [pc, #160]	; (80058e0 <LCD_Init+0x3c18>)
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	615a      	str	r2, [r3, #20]
 8005844:	4b26      	ldr	r3, [pc, #152]	; (80058e0 <LCD_Init+0x3c18>)
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	611a      	str	r2, [r3, #16]
 800584a:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <LCD_Init+0x3c18>)
 800584c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005850:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005852:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <LCD_Init+0x3c18>)
 8005854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005858:	611a      	str	r2, [r3, #16]
 800585a:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <LCD_Init+0x3c18>)
 800585c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005860:	615a      	str	r2, [r3, #20]
 8005862:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <LCD_Init+0x3c1c>)
 8005864:	2217      	movs	r2, #23
 8005866:	60da      	str	r2, [r3, #12]
 8005868:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <LCD_Init+0x3c18>)
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	615a      	str	r2, [r3, #20]
 800586e:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <LCD_Init+0x3c18>)
 8005870:	2280      	movs	r2, #128	; 0x80
 8005872:	611a      	str	r2, [r3, #16]
 8005874:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <LCD_Init+0x3c18>)
 8005876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800587c:	4b18      	ldr	r3, [pc, #96]	; (80058e0 <LCD_Init+0x3c18>)
 800587e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005882:	611a      	str	r2, [r3, #16]
 8005884:	4b16      	ldr	r3, [pc, #88]	; (80058e0 <LCD_Init+0x3c18>)
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	615a      	str	r2, [r3, #20]
 800588c:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <LCD_Init+0x3c1c>)
 800588e:	2215      	movs	r2, #21
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <LCD_Init+0x3c18>)
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	615a      	str	r2, [r3, #20]
 8005898:	4b11      	ldr	r3, [pc, #68]	; (80058e0 <LCD_Init+0x3c18>)
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	611a      	str	r2, [r3, #16]
 800589e:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <LCD_Init+0x3c18>)
 80058a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80058a6:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <LCD_Init+0x3c18>)
 80058a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ac:	611a      	str	r2, [r3, #16]
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <LCD_Init+0x3c18>)
 80058b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b4:	615a      	str	r2, [r3, #20]
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <LCD_Init+0x3c1c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <LCD_Init+0x3c18>)
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	615a      	str	r2, [r3, #20]
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <LCD_Init+0x3c18>)
 80058c4:	2280      	movs	r2, #128	; 0x80
 80058c6:	611a      	str	r2, [r3, #16]
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <LCD_Init+0x3c18>)
 80058ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80058d0:	4b03      	ldr	r3, [pc, #12]	; (80058e0 <LCD_Init+0x3c18>)
 80058d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d6:	611a      	str	r2, [r3, #16]
 80058d8:	4b01      	ldr	r3, [pc, #4]	; (80058e0 <LCD_Init+0x3c18>)
 80058da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058de:	e003      	b.n	80058e8 <LCD_Init+0x3c20>
 80058e0:	40011000 	.word	0x40011000
 80058e4:	40010c00 	.word	0x40010c00
 80058e8:	615a      	str	r2, [r3, #20]
 80058ea:	4b8b      	ldr	r3, [pc, #556]	; (8005b18 <LCD_Init+0x3e50>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	4b8a      	ldr	r3, [pc, #552]	; (8005b1c <LCD_Init+0x3e54>)
 80058f2:	2280      	movs	r2, #128	; 0x80
 80058f4:	615a      	str	r2, [r3, #20]
 80058f6:	4b89      	ldr	r3, [pc, #548]	; (8005b1c <LCD_Init+0x3e54>)
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	611a      	str	r2, [r3, #16]
 80058fc:	4b87      	ldr	r3, [pc, #540]	; (8005b1c <LCD_Init+0x3e54>)
 80058fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005902:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005904:	20f0      	movs	r0, #240	; 0xf0
 8005906:	f7fb f97d 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 800590a:	4b84      	ldr	r3, [pc, #528]	; (8005b1c <LCD_Init+0x3e54>)
 800590c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005910:	611a      	str	r2, [r3, #16]
 8005912:	4b82      	ldr	r3, [pc, #520]	; (8005b1c <LCD_Init+0x3e54>)
 8005914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005918:	615a      	str	r2, [r3, #20]
 800591a:	4b7f      	ldr	r3, [pc, #508]	; (8005b18 <LCD_Init+0x3e50>)
 800591c:	2203      	movs	r2, #3
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	4b7e      	ldr	r3, [pc, #504]	; (8005b1c <LCD_Init+0x3e54>)
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	615a      	str	r2, [r3, #20]
 8005926:	4b7d      	ldr	r3, [pc, #500]	; (8005b1c <LCD_Init+0x3e54>)
 8005928:	2280      	movs	r2, #128	; 0x80
 800592a:	611a      	str	r2, [r3, #16]
 800592c:	4b7b      	ldr	r3, [pc, #492]	; (8005b1c <LCD_Init+0x3e54>)
 800592e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005932:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005934:	2029      	movs	r0, #41	; 0x29
 8005936:	f7fb f965 	bl	8000c04 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 800593a:	20d0      	movs	r0, #208	; 0xd0
 800593c:	f7fb f962 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005940:	4b76      	ldr	r3, [pc, #472]	; (8005b1c <LCD_Init+0x3e54>)
 8005942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005946:	611a      	str	r2, [r3, #16]
 8005948:	4b74      	ldr	r3, [pc, #464]	; (8005b1c <LCD_Init+0x3e54>)
 800594a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594e:	615a      	str	r2, [r3, #20]
 8005950:	4b71      	ldr	r3, [pc, #452]	; (8005b18 <LCD_Init+0x3e50>)
 8005952:	2200      	movs	r2, #0
 8005954:	60da      	str	r2, [r3, #12]
 8005956:	4b71      	ldr	r3, [pc, #452]	; (8005b1c <LCD_Init+0x3e54>)
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	615a      	str	r2, [r3, #20]
 800595c:	4b6f      	ldr	r3, [pc, #444]	; (8005b1c <LCD_Init+0x3e54>)
 800595e:	2280      	movs	r2, #128	; 0x80
 8005960:	611a      	str	r2, [r3, #16]
 8005962:	4b6e      	ldr	r3, [pc, #440]	; (8005b1c <LCD_Init+0x3e54>)
 8005964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005968:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 800596a:	20be      	movs	r0, #190	; 0xbe
 800596c:	f7fb f94a 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005970:	4b6a      	ldr	r3, [pc, #424]	; (8005b1c <LCD_Init+0x3e54>)
 8005972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005976:	611a      	str	r2, [r3, #16]
 8005978:	4b68      	ldr	r3, [pc, #416]	; (8005b1c <LCD_Init+0x3e54>)
 800597a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597e:	615a      	str	r2, [r3, #20]
 8005980:	4b65      	ldr	r3, [pc, #404]	; (8005b18 <LCD_Init+0x3e50>)
 8005982:	2205      	movs	r2, #5
 8005984:	60da      	str	r2, [r3, #12]
 8005986:	4b65      	ldr	r3, [pc, #404]	; (8005b1c <LCD_Init+0x3e54>)
 8005988:	2280      	movs	r2, #128	; 0x80
 800598a:	615a      	str	r2, [r3, #20]
 800598c:	4b63      	ldr	r3, [pc, #396]	; (8005b1c <LCD_Init+0x3e54>)
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	611a      	str	r2, [r3, #16]
 8005992:	4b62      	ldr	r3, [pc, #392]	; (8005b1c <LCD_Init+0x3e54>)
 8005994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005998:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 800599a:	4b60      	ldr	r3, [pc, #384]	; (8005b1c <LCD_Init+0x3e54>)
 800599c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059a0:	611a      	str	r2, [r3, #16]
 80059a2:	4b5e      	ldr	r3, [pc, #376]	; (8005b1c <LCD_Init+0x3e54>)
 80059a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a8:	615a      	str	r2, [r3, #20]
 80059aa:	4b5b      	ldr	r3, [pc, #364]	; (8005b18 <LCD_Init+0x3e50>)
 80059ac:	22fe      	movs	r2, #254	; 0xfe
 80059ae:	60da      	str	r2, [r3, #12]
 80059b0:	4b5a      	ldr	r3, [pc, #360]	; (8005b1c <LCD_Init+0x3e54>)
 80059b2:	2280      	movs	r2, #128	; 0x80
 80059b4:	615a      	str	r2, [r3, #20]
 80059b6:	4b59      	ldr	r3, [pc, #356]	; (8005b1c <LCD_Init+0x3e54>)
 80059b8:	2280      	movs	r2, #128	; 0x80
 80059ba:	611a      	str	r2, [r3, #16]
 80059bc:	4b57      	ldr	r3, [pc, #348]	; (8005b1c <LCD_Init+0x3e54>)
 80059be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 80059c4:	4b55      	ldr	r3, [pc, #340]	; (8005b1c <LCD_Init+0x3e54>)
 80059c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ca:	611a      	str	r2, [r3, #16]
 80059cc:	4b53      	ldr	r3, [pc, #332]	; (8005b1c <LCD_Init+0x3e54>)
 80059ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d2:	615a      	str	r2, [r3, #20]
 80059d4:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <LCD_Init+0x3e50>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	4b50      	ldr	r3, [pc, #320]	; (8005b1c <LCD_Init+0x3e54>)
 80059dc:	2280      	movs	r2, #128	; 0x80
 80059de:	615a      	str	r2, [r3, #20]
 80059e0:	4b4e      	ldr	r3, [pc, #312]	; (8005b1c <LCD_Init+0x3e54>)
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	611a      	str	r2, [r3, #16]
 80059e6:	4b4d      	ldr	r3, [pc, #308]	; (8005b1c <LCD_Init+0x3e54>)
 80059e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 80059ee:	4b4b      	ldr	r3, [pc, #300]	; (8005b1c <LCD_Init+0x3e54>)
 80059f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	4b49      	ldr	r3, [pc, #292]	; (8005b1c <LCD_Init+0x3e54>)
 80059f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fc:	615a      	str	r2, [r3, #20]
 80059fe:	4b46      	ldr	r3, [pc, #280]	; (8005b18 <LCD_Init+0x3e50>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	60da      	str	r2, [r3, #12]
 8005a04:	4b45      	ldr	r3, [pc, #276]	; (8005b1c <LCD_Init+0x3e54>)
 8005a06:	2280      	movs	r2, #128	; 0x80
 8005a08:	615a      	str	r2, [r3, #20]
 8005a0a:	4b44      	ldr	r3, [pc, #272]	; (8005b1c <LCD_Init+0x3e54>)
 8005a0c:	2280      	movs	r2, #128	; 0x80
 8005a0e:	611a      	str	r2, [r3, #16]
 8005a10:	4b42      	ldr	r3, [pc, #264]	; (8005b1c <LCD_Init+0x3e54>)
 8005a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005a18:	4b40      	ldr	r3, [pc, #256]	; (8005b1c <LCD_Init+0x3e54>)
 8005a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a1e:	611a      	str	r2, [r3, #16]
 8005a20:	4b3e      	ldr	r3, [pc, #248]	; (8005b1c <LCD_Init+0x3e54>)
 8005a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a26:	615a      	str	r2, [r3, #20]
 8005a28:	4b3b      	ldr	r3, [pc, #236]	; (8005b18 <LCD_Init+0x3e50>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	60da      	str	r2, [r3, #12]
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <LCD_Init+0x3e54>)
 8005a30:	2280      	movs	r2, #128	; 0x80
 8005a32:	615a      	str	r2, [r3, #20]
 8005a34:	4b39      	ldr	r3, [pc, #228]	; (8005b1c <LCD_Init+0x3e54>)
 8005a36:	2280      	movs	r2, #128	; 0x80
 8005a38:	611a      	str	r2, [r3, #16]
 8005a3a:	4b38      	ldr	r3, [pc, #224]	; (8005b1c <LCD_Init+0x3e54>)
 8005a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005a42:	4b36      	ldr	r3, [pc, #216]	; (8005b1c <LCD_Init+0x3e54>)
 8005a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a48:	611a      	str	r2, [r3, #16]
 8005a4a:	4b34      	ldr	r3, [pc, #208]	; (8005b1c <LCD_Init+0x3e54>)
 8005a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a50:	615a      	str	r2, [r3, #20]
 8005a52:	4b31      	ldr	r3, [pc, #196]	; (8005b18 <LCD_Init+0x3e50>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	60da      	str	r2, [r3, #12]
 8005a58:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <LCD_Init+0x3e54>)
 8005a5a:	2280      	movs	r2, #128	; 0x80
 8005a5c:	615a      	str	r2, [r3, #20]
 8005a5e:	4b2f      	ldr	r3, [pc, #188]	; (8005b1c <LCD_Init+0x3e54>)
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	611a      	str	r2, [r3, #16]
 8005a64:	4b2d      	ldr	r3, [pc, #180]	; (8005b1c <LCD_Init+0x3e54>)
 8005a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005a6c:	20b8      	movs	r0, #184	; 0xb8
 8005a6e:	f7fb f8c9 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005a72:	4b2a      	ldr	r3, [pc, #168]	; (8005b1c <LCD_Init+0x3e54>)
 8005a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a78:	611a      	str	r2, [r3, #16]
 8005a7a:	4b28      	ldr	r3, [pc, #160]	; (8005b1c <LCD_Init+0x3e54>)
 8005a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a80:	615a      	str	r2, [r3, #20]
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <LCD_Init+0x3e50>)
 8005a84:	2203      	movs	r2, #3
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <LCD_Init+0x3e54>)
 8005a8a:	2280      	movs	r2, #128	; 0x80
 8005a8c:	615a      	str	r2, [r3, #20]
 8005a8e:	4b23      	ldr	r3, [pc, #140]	; (8005b1c <LCD_Init+0x3e54>)
 8005a90:	2280      	movs	r2, #128	; 0x80
 8005a92:	611a      	str	r2, [r3, #16]
 8005a94:	4b21      	ldr	r3, [pc, #132]	; (8005b1c <LCD_Init+0x3e54>)
 8005a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005a9c:	4b1f      	ldr	r3, [pc, #124]	; (8005b1c <LCD_Init+0x3e54>)
 8005a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aa2:	611a      	str	r2, [r3, #16]
 8005aa4:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <LCD_Init+0x3e54>)
 8005aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aaa:	615a      	str	r2, [r3, #20]
 8005aac:	4b1a      	ldr	r3, [pc, #104]	; (8005b18 <LCD_Init+0x3e50>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <LCD_Init+0x3e54>)
 8005ab4:	2280      	movs	r2, #128	; 0x80
 8005ab6:	615a      	str	r2, [r3, #20]
 8005ab8:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <LCD_Init+0x3e54>)
 8005aba:	2280      	movs	r2, #128	; 0x80
 8005abc:	611a      	str	r2, [r3, #16]
 8005abe:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <LCD_Init+0x3e54>)
 8005ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005ac6:	20ba      	movs	r0, #186	; 0xba
 8005ac8:	f7fb f89c 	bl	8000c04 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <LCD_Init+0x3e54>)
 8005ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ad2:	611a      	str	r2, [r3, #16]
 8005ad4:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <LCD_Init+0x3e54>)
 8005ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ada:	615a      	str	r2, [r3, #20]
 8005adc:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <LCD_Init+0x3e50>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <LCD_Init+0x3e54>)
 8005ae4:	2280      	movs	r2, #128	; 0x80
 8005ae6:	615a      	str	r2, [r3, #20]
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <LCD_Init+0x3e54>)
 8005aea:	2280      	movs	r2, #128	; 0x80
 8005aec:	611a      	str	r2, [r3, #16]
 8005aee:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <LCD_Init+0x3e54>)
 8005af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005af6:	2064      	movs	r0, #100	; 0x64
 8005af8:	f7fb ff36 	bl	8001968 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005afc:	2000      	movs	r0, #0
 8005afe:	f7fb ffd7 	bl	8001ab0 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <LCD_Init+0x3e58>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005b08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005b0c:	f000 f80a 	bl	8005b24 <LCD_Clear>
}
 8005b10:	bf00      	nop
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40010c00 	.word	0x40010c00
 8005b1c:	40011000 	.word	0x40011000
 8005b20:	422201a8 	.word	0x422201a8

08005b24 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005b32:	4b2a      	ldr	r3, [pc, #168]	; (8005bdc <LCD_Clear+0xb8>)
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005b38:	4b28      	ldr	r3, [pc, #160]	; (8005bdc <LCD_Clear+0xb8>)
 8005b3a:	885b      	ldrh	r3, [r3, #2]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	fb02 f303 	mul.w	r3, r2, r3
 8005b44:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005b46:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <LCD_Clear+0xb8>)
 8005b48:	889b      	ldrh	r3, [r3, #4]
 8005b4a:	f646 0204 	movw	r2, #26628	; 0x6804
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d11a      	bne.n	8005b88 <LCD_Clear+0x64>
 8005b52:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <LCD_Clear+0xb8>)
 8005b54:	799b      	ldrb	r3, [r3, #6]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d116      	bne.n	8005b88 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005b5a:	4b20      	ldr	r3, [pc, #128]	; (8005bdc <LCD_Clear+0xb8>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005b60:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <LCD_Clear+0xb8>)
 8005b62:	222a      	movs	r2, #42	; 0x2a
 8005b64:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005b66:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <LCD_Clear+0xb8>)
 8005b68:	222b      	movs	r2, #43	; 0x2b
 8005b6a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	2000      	movs	r0, #0
 8005b70:	f7fb f91a 	bl	8000da8 <LCD_SetCursor>
		lcddev.dir = 1;
 8005b74:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <LCD_Clear+0xb8>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <LCD_Clear+0xb8>)
 8005b7c:	222b      	movs	r2, #43	; 0x2b
 8005b7e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005b80:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <LCD_Clear+0xb8>)
 8005b82:	222a      	movs	r2, #42	; 0x2a
 8005b84:	819a      	strh	r2, [r3, #12]
 8005b86:	e003      	b.n	8005b90 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005b88:	2100      	movs	r1, #0
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f7fb f90c 	bl	8000da8 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005b90:	f7fb f8fe 	bl	8000d90 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e017      	b.n	8005bca <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005b9a:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <LCD_Clear+0xbc>)
 8005b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ba0:	611a      	str	r2, [r3, #16]
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <LCD_Clear+0xbc>)
 8005ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	4a0e      	ldr	r2, [pc, #56]	; (8005be4 <LCD_Clear+0xc0>)
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	60d3      	str	r3, [r2, #12]
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <LCD_Clear+0xbc>)
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	615a      	str	r2, [r3, #20]
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <LCD_Clear+0xbc>)
 8005bb8:	2280      	movs	r2, #128	; 0x80
 8005bba:	611a      	str	r2, [r3, #16]
 8005bbc:	4b08      	ldr	r3, [pc, #32]	; (8005be0 <LCD_Clear+0xbc>)
 8005bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d3e3      	bcc.n	8005b9a <LCD_Clear+0x76>
}
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000fe8 	.word	0x20000fe8
 8005be0:	40011000 	.word	0x40011000
 8005be4:	40010c00 	.word	0x40010c00

08005be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005bec:	f000 f96e 	bl	8005ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005bf0:	f000 f809 	bl	8005c06 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 8005bf4:	f7fc f868 	bl	8001cc8 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005bf8:	f7fa ffb0 	bl	8000b5c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005bfc:	f7fa ff1e 	bl	8000a3c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8005c00:	f001 fa91 	bl	8007126 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005c04:	e7fe      	b.n	8005c04 <main+0x1c>

08005c06 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b090      	sub	sp, #64	; 0x40
 8005c0a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c0c:	f107 0318 	add.w	r3, r7, #24
 8005c10:	2228      	movs	r2, #40	; 0x28
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f002 fc51 	bl	80084bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c30:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005c32:	2300      	movs	r3, #0
 8005c34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c36:	2301      	movs	r3, #1
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005c44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c4a:	f107 0318 	add.w	r3, r7, #24
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fc0a 	bl	8006468 <HAL_RCC_OscConfig>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005c5a:	f000 f82b 	bl	8005cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c5e:	230f      	movs	r3, #15
 8005c60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c62:	2302      	movs	r3, #2
 8005c64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005c74:	1d3b      	adds	r3, r7, #4
 8005c76:	2102      	movs	r1, #2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fe75 	bl	8006968 <HAL_RCC_ClockConfig>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005c84:	f000 f816 	bl	8005cb4 <Error_Handler>
  }
}
 8005c88:	bf00      	nop
 8005c8a:	3740      	adds	r7, #64	; 0x40
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005ca2:	f000 f929 	bl	8005ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40000400 	.word	0x40000400

08005cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005cc6:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <HAL_MspInit+0x5c>)
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	4a14      	ldr	r2, [pc, #80]	; (8005d1c <HAL_MspInit+0x5c>)
 8005ccc:	f043 0301 	orr.w	r3, r3, #1
 8005cd0:	6193      	str	r3, [r2, #24]
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <HAL_MspInit+0x5c>)
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cde:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <HAL_MspInit+0x5c>)
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4a0e      	ldr	r2, [pc, #56]	; (8005d1c <HAL_MspInit+0x5c>)
 8005ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	61d3      	str	r3, [r2, #28]
 8005cea:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <HAL_MspInit+0x5c>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	607b      	str	r3, [r7, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <HAL_MspInit+0x60>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <HAL_MspInit+0x60>)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	40010000 	.word	0x40010000

08005d24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	; 0x30
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8005d34:	2200      	movs	r2, #0
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	201d      	movs	r0, #29
 8005d3a:	f000 f9d0 	bl	80060de <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d3e:	201d      	movs	r0, #29
 8005d40:	f000 f9e9 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005d44:	4b1f      	ldr	r3, [pc, #124]	; (8005dc4 <HAL_InitTick+0xa0>)
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	4a1e      	ldr	r2, [pc, #120]	; (8005dc4 <HAL_InitTick+0xa0>)
 8005d4a:	f043 0302 	orr.w	r3, r3, #2
 8005d4e:	61d3      	str	r3, [r2, #28]
 8005d50:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <HAL_InitTick+0xa0>)
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d5c:	f107 0210 	add.w	r2, r7, #16
 8005d60:	f107 0314 	add.w	r3, r7, #20
 8005d64:	4611      	mov	r1, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 ff68 	bl	8006c3c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005d6c:	f000 ff52 	bl	8006c14 <HAL_RCC_GetPCLK1Freq>
 8005d70:	4603      	mov	r3, r0
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <HAL_InitTick+0xa4>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	0c9b      	lsrs	r3, r3, #18
 8005d80:	3b01      	subs	r3, #1
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8005d84:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <HAL_InitTick+0xa8>)
 8005d86:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <HAL_InitTick+0xac>)
 8005d88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8005d8a:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <HAL_InitTick+0xa8>)
 8005d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d90:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8005d92:	4a0e      	ldr	r2, [pc, #56]	; (8005dcc <HAL_InitTick+0xa8>)
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <HAL_InitTick+0xa8>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <HAL_InitTick+0xa8>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8005da4:	4809      	ldr	r0, [pc, #36]	; (8005dcc <HAL_InitTick+0xa8>)
 8005da6:	f000 ff97 	bl	8006cd8 <HAL_TIM_Base_Init>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8005db0:	4806      	ldr	r0, [pc, #24]	; (8005dcc <HAL_InitTick+0xa8>)
 8005db2:	f000 ffc5 	bl	8006d40 <HAL_TIM_Base_Start_IT>
 8005db6:	4603      	mov	r3, r0
 8005db8:	e000      	b.n	8005dbc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3730      	adds	r7, #48	; 0x30
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	431bde83 	.word	0x431bde83
 8005dcc:	20000ff8 	.word	0x20000ff8
 8005dd0:	40000400 	.word	0x40000400

08005dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005dd8:	bf00      	nop
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005de4:	e7fe      	b.n	8005de4 <HardFault_Handler+0x4>

08005de6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005de6:	b480      	push	{r7}
 8005de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dea:	e7fe      	b.n	8005dea <MemManage_Handler+0x4>

08005dec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005df0:	e7fe      	b.n	8005df0 <BusFault_Handler+0x4>

08005df2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005df2:	b480      	push	{r7}
 8005df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005df6:	e7fe      	b.n	8005df6 <UsageFault_Handler+0x4>

08005df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005dfc:	bf00      	nop
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005e08:	4802      	ldr	r0, [pc, #8]	; (8005e14 <TIM3_IRQHandler+0x10>)
 8005e0a:	f000 ffbc 	bl	8006d86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005e0e:	bf00      	nop
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000ff8 	.word	0x20000ff8

08005e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005e1c:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <SystemInit+0x5c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <SystemInit+0x5c>)
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005e28:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <SystemInit+0x5c>)
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	4911      	ldr	r1, [pc, #68]	; (8005e74 <SystemInit+0x5c>)
 8005e2e:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <SystemInit+0x60>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005e34:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <SystemInit+0x5c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <SystemInit+0x5c>)
 8005e3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <SystemInit+0x5c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a0a      	ldr	r2, [pc, #40]	; (8005e74 <SystemInit+0x5c>)
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005e50:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <SystemInit+0x5c>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	4a07      	ldr	r2, [pc, #28]	; (8005e74 <SystemInit+0x5c>)
 8005e56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005e5a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <SystemInit+0x5c>)
 8005e5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005e62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <SystemInit+0x64>)
 8005e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e6a:	609a      	str	r2, [r3, #8]
#endif 
}
 8005e6c:	bf00      	nop
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr
 8005e74:	40021000 	.word	0x40021000
 8005e78:	f8ff0000 	.word	0xf8ff0000
 8005e7c:	e000ed00 	.word	0xe000ed00

08005e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005e80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005e82:	e003      	b.n	8005e8c <LoopCopyDataInit>

08005e84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005e86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005e88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005e8a:	3104      	adds	r1, #4

08005e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005e8c:	480a      	ldr	r0, [pc, #40]	; (8005eb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005e90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005e92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005e94:	d3f6      	bcc.n	8005e84 <CopyDataInit>
  ldr r2, =_sbss
 8005e96:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005e98:	e002      	b.n	8005ea0 <LoopFillZerobss>

08005e9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005e9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005e9c:	f842 3b04 	str.w	r3, [r2], #4

08005ea0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005ea0:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005ea2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005ea4:	d3f9      	bcc.n	8005e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ea6:	f7ff ffb7 	bl	8005e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005eaa:	f002 fae3 	bl	8008474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005eae:	f7ff fe9b 	bl	8005be8 <main>
  bx lr
 8005eb2:	4770      	bx	lr
  ldr r3, =_sidata
 8005eb4:	08008598 	.word	0x08008598
  ldr r0, =_sdata
 8005eb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005ebc:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 8005ec0:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 8005ec4:	2000103c 	.word	0x2000103c

08005ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ec8:	e7fe      	b.n	8005ec8 <ADC1_2_IRQHandler>
	...

08005ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <HAL_Init+0x28>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a07      	ldr	r2, [pc, #28]	; (8005ef4 <HAL_Init+0x28>)
 8005ed6:	f043 0310 	orr.w	r3, r3, #16
 8005eda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005edc:	2003      	movs	r0, #3
 8005ede:	f000 f8f3 	bl	80060c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	f7ff ff1e 	bl	8005d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ee8:	f7ff feea 	bl	8005cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40022000 	.word	0x40022000

08005ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <HAL_IncTick+0x1c>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <HAL_IncTick+0x20>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4413      	add	r3, r2
 8005f08:	4a03      	ldr	r2, [pc, #12]	; (8005f18 <HAL_IncTick+0x20>)
 8005f0a:	6013      	str	r3, [r2, #0]
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr
 8005f14:	20000014 	.word	0x20000014
 8005f18:	20001038 	.word	0x20001038

08005f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f20:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <HAL_GetTick+0x10>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr
 8005f2c:	20001038 	.word	0x20001038

08005f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f38:	f7ff fff0 	bl	8005f1c <HAL_GetTick>
 8005f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d005      	beq.n	8005f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <HAL_Delay+0x40>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f56:	bf00      	nop
 8005f58:	f7ff ffe0 	bl	8005f1c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d8f7      	bhi.n	8005f58 <HAL_Delay+0x28>
  {
  }
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000014 	.word	0x20000014

08005f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f90:	4013      	ands	r3, r2
 8005f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fa6:	4a04      	ldr	r2, [pc, #16]	; (8005fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	60d3      	str	r3, [r2, #12]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	0a1b      	lsrs	r3, r3, #8
 8005fc6:	f003 0307 	and.w	r3, r3, #7
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	db0b      	blt.n	8006002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	f003 021f 	and.w	r2, r3, #31
 8005ff0:	4906      	ldr	r1, [pc, #24]	; (800600c <__NVIC_EnableIRQ+0x34>)
 8005ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8005ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr
 800600c:	e000e100 	.word	0xe000e100

08006010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	6039      	str	r1, [r7, #0]
 800601a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800601c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006020:	2b00      	cmp	r3, #0
 8006022:	db0a      	blt.n	800603a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	490c      	ldr	r1, [pc, #48]	; (800605c <__NVIC_SetPriority+0x4c>)
 800602a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602e:	0112      	lsls	r2, r2, #4
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	440b      	add	r3, r1
 8006034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006038:	e00a      	b.n	8006050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	4908      	ldr	r1, [pc, #32]	; (8006060 <__NVIC_SetPriority+0x50>)
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	3b04      	subs	r3, #4
 8006048:	0112      	lsls	r2, r2, #4
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	440b      	add	r3, r1
 800604e:	761a      	strb	r2, [r3, #24]
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	e000e100 	.word	0xe000e100
 8006060:	e000ed00 	.word	0xe000ed00

08006064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006064:	b480      	push	{r7}
 8006066:	b089      	sub	sp, #36	; 0x24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f1c3 0307 	rsb	r3, r3, #7
 800607e:	2b04      	cmp	r3, #4
 8006080:	bf28      	it	cs
 8006082:	2304      	movcs	r3, #4
 8006084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3304      	adds	r3, #4
 800608a:	2b06      	cmp	r3, #6
 800608c:	d902      	bls.n	8006094 <NVIC_EncodePriority+0x30>
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	3b03      	subs	r3, #3
 8006092:	e000      	b.n	8006096 <NVIC_EncodePriority+0x32>
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006098:	f04f 32ff 	mov.w	r2, #4294967295
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	43da      	mvns	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	401a      	ands	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060ac:	f04f 31ff 	mov.w	r1, #4294967295
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	fa01 f303 	lsl.w	r3, r1, r3
 80060b6:	43d9      	mvns	r1, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060bc:	4313      	orrs	r3, r2
         );
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3724      	adds	r7, #36	; 0x24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr

080060c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ff4f 	bl	8005f74 <__NVIC_SetPriorityGrouping>
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060de:	b580      	push	{r7, lr}
 80060e0:	b086      	sub	sp, #24
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	4603      	mov	r3, r0
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
 80060ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060f0:	f7ff ff64 	bl	8005fbc <__NVIC_GetPriorityGrouping>
 80060f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	6978      	ldr	r0, [r7, #20]
 80060fc:	f7ff ffb2 	bl	8006064 <NVIC_EncodePriority>
 8006100:	4602      	mov	r2, r0
 8006102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006106:	4611      	mov	r1, r2
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff ff81 	bl	8006010 <__NVIC_SetPriority>
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	4603      	mov	r3, r0
 800611e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ff57 	bl	8005fd8 <__NVIC_EnableIRQ>
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006134:	b480      	push	{r7}
 8006136:	b08b      	sub	sp, #44	; 0x2c
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800613e:	2300      	movs	r3, #0
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006146:	e133      	b.n	80063b0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006148:	2201      	movs	r2, #1
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	429a      	cmp	r2, r3
 8006162:	f040 8122 	bne.w	80063aa <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b12      	cmp	r3, #18
 800616c:	d034      	beq.n	80061d8 <HAL_GPIO_Init+0xa4>
 800616e:	2b12      	cmp	r3, #18
 8006170:	d80d      	bhi.n	800618e <HAL_GPIO_Init+0x5a>
 8006172:	2b02      	cmp	r3, #2
 8006174:	d02b      	beq.n	80061ce <HAL_GPIO_Init+0x9a>
 8006176:	2b02      	cmp	r3, #2
 8006178:	d804      	bhi.n	8006184 <HAL_GPIO_Init+0x50>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d031      	beq.n	80061e2 <HAL_GPIO_Init+0xae>
 800617e:	2b01      	cmp	r3, #1
 8006180:	d01c      	beq.n	80061bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006182:	e048      	b.n	8006216 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006184:	2b03      	cmp	r3, #3
 8006186:	d043      	beq.n	8006210 <HAL_GPIO_Init+0xdc>
 8006188:	2b11      	cmp	r3, #17
 800618a:	d01b      	beq.n	80061c4 <HAL_GPIO_Init+0x90>
          break;
 800618c:	e043      	b.n	8006216 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800618e:	4a8f      	ldr	r2, [pc, #572]	; (80063cc <HAL_GPIO_Init+0x298>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d026      	beq.n	80061e2 <HAL_GPIO_Init+0xae>
 8006194:	4a8d      	ldr	r2, [pc, #564]	; (80063cc <HAL_GPIO_Init+0x298>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d806      	bhi.n	80061a8 <HAL_GPIO_Init+0x74>
 800619a:	4a8d      	ldr	r2, [pc, #564]	; (80063d0 <HAL_GPIO_Init+0x29c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d020      	beq.n	80061e2 <HAL_GPIO_Init+0xae>
 80061a0:	4a8c      	ldr	r2, [pc, #560]	; (80063d4 <HAL_GPIO_Init+0x2a0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01d      	beq.n	80061e2 <HAL_GPIO_Init+0xae>
          break;
 80061a6:	e036      	b.n	8006216 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80061a8:	4a8b      	ldr	r2, [pc, #556]	; (80063d8 <HAL_GPIO_Init+0x2a4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d019      	beq.n	80061e2 <HAL_GPIO_Init+0xae>
 80061ae:	4a8b      	ldr	r2, [pc, #556]	; (80063dc <HAL_GPIO_Init+0x2a8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d016      	beq.n	80061e2 <HAL_GPIO_Init+0xae>
 80061b4:	4a8a      	ldr	r2, [pc, #552]	; (80063e0 <HAL_GPIO_Init+0x2ac>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_GPIO_Init+0xae>
          break;
 80061ba:	e02c      	b.n	8006216 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	623b      	str	r3, [r7, #32]
          break;
 80061c2:	e028      	b.n	8006216 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	3304      	adds	r3, #4
 80061ca:	623b      	str	r3, [r7, #32]
          break;
 80061cc:	e023      	b.n	8006216 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	3308      	adds	r3, #8
 80061d4:	623b      	str	r3, [r7, #32]
          break;
 80061d6:	e01e      	b.n	8006216 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	330c      	adds	r3, #12
 80061de:	623b      	str	r3, [r7, #32]
          break;
 80061e0:	e019      	b.n	8006216 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80061ea:	2304      	movs	r3, #4
 80061ec:	623b      	str	r3, [r7, #32]
          break;
 80061ee:	e012      	b.n	8006216 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d105      	bne.n	8006204 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80061f8:	2308      	movs	r3, #8
 80061fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	611a      	str	r2, [r3, #16]
          break;
 8006202:	e008      	b.n	8006216 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006204:	2308      	movs	r3, #8
 8006206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	615a      	str	r2, [r3, #20]
          break;
 800620e:	e002      	b.n	8006216 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006210:	2300      	movs	r3, #0
 8006212:	623b      	str	r3, [r7, #32]
          break;
 8006214:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2bff      	cmp	r3, #255	; 0xff
 800621a:	d801      	bhi.n	8006220 <HAL_GPIO_Init+0xec>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	e001      	b.n	8006224 <HAL_GPIO_Init+0xf0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3304      	adds	r3, #4
 8006224:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2bff      	cmp	r3, #255	; 0xff
 800622a:	d802      	bhi.n	8006232 <HAL_GPIO_Init+0xfe>
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	e002      	b.n	8006238 <HAL_GPIO_Init+0x104>
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	3b08      	subs	r3, #8
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	210f      	movs	r1, #15
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	fa01 f303 	lsl.w	r3, r1, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	401a      	ands	r2, r3
 800624a:	6a39      	ldr	r1, [r7, #32]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	fa01 f303 	lsl.w	r3, r1, r3
 8006252:	431a      	orrs	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 80a2 	beq.w	80063aa <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006266:	4b5f      	ldr	r3, [pc, #380]	; (80063e4 <HAL_GPIO_Init+0x2b0>)
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	4a5e      	ldr	r2, [pc, #376]	; (80063e4 <HAL_GPIO_Init+0x2b0>)
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	6193      	str	r3, [r2, #24]
 8006272:	4b5c      	ldr	r3, [pc, #368]	; (80063e4 <HAL_GPIO_Init+0x2b0>)
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	60bb      	str	r3, [r7, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800627e:	4a5a      	ldr	r2, [pc, #360]	; (80063e8 <HAL_GPIO_Init+0x2b4>)
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	3302      	adds	r3, #2
 8006286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800628a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	220f      	movs	r2, #15
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4013      	ands	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a51      	ldr	r2, [pc, #324]	; (80063ec <HAL_GPIO_Init+0x2b8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d01f      	beq.n	80062ea <HAL_GPIO_Init+0x1b6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a50      	ldr	r2, [pc, #320]	; (80063f0 <HAL_GPIO_Init+0x2bc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d019      	beq.n	80062e6 <HAL_GPIO_Init+0x1b2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a4f      	ldr	r2, [pc, #316]	; (80063f4 <HAL_GPIO_Init+0x2c0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_GPIO_Init+0x1ae>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a4e      	ldr	r2, [pc, #312]	; (80063f8 <HAL_GPIO_Init+0x2c4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00d      	beq.n	80062de <HAL_GPIO_Init+0x1aa>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a4d      	ldr	r2, [pc, #308]	; (80063fc <HAL_GPIO_Init+0x2c8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d007      	beq.n	80062da <HAL_GPIO_Init+0x1a6>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a4c      	ldr	r2, [pc, #304]	; (8006400 <HAL_GPIO_Init+0x2cc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d101      	bne.n	80062d6 <HAL_GPIO_Init+0x1a2>
 80062d2:	2305      	movs	r3, #5
 80062d4:	e00a      	b.n	80062ec <HAL_GPIO_Init+0x1b8>
 80062d6:	2306      	movs	r3, #6
 80062d8:	e008      	b.n	80062ec <HAL_GPIO_Init+0x1b8>
 80062da:	2304      	movs	r3, #4
 80062dc:	e006      	b.n	80062ec <HAL_GPIO_Init+0x1b8>
 80062de:	2303      	movs	r3, #3
 80062e0:	e004      	b.n	80062ec <HAL_GPIO_Init+0x1b8>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e002      	b.n	80062ec <HAL_GPIO_Init+0x1b8>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <HAL_GPIO_Init+0x1b8>
 80062ea:	2300      	movs	r3, #0
 80062ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ee:	f002 0203 	and.w	r2, r2, #3
 80062f2:	0092      	lsls	r2, r2, #2
 80062f4:	4093      	lsls	r3, r2
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80062fc:	493a      	ldr	r1, [pc, #232]	; (80063e8 <HAL_GPIO_Init+0x2b4>)
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	089b      	lsrs	r3, r3, #2
 8006302:	3302      	adds	r3, #2
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006316:	4b3b      	ldr	r3, [pc, #236]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	493a      	ldr	r1, [pc, #232]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	4313      	orrs	r3, r2
 8006320:	600b      	str	r3, [r1, #0]
 8006322:	e006      	b.n	8006332 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006324:	4b37      	ldr	r3, [pc, #220]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	43db      	mvns	r3, r3
 800632c:	4935      	ldr	r1, [pc, #212]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 800632e:	4013      	ands	r3, r2
 8006330:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d006      	beq.n	800634c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800633e:	4b31      	ldr	r3, [pc, #196]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	4930      	ldr	r1, [pc, #192]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	4313      	orrs	r3, r2
 8006348:	604b      	str	r3, [r1, #4]
 800634a:	e006      	b.n	800635a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800634c:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	43db      	mvns	r3, r3
 8006354:	492b      	ldr	r1, [pc, #172]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006356:	4013      	ands	r3, r2
 8006358:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d006      	beq.n	8006374 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006366:	4b27      	ldr	r3, [pc, #156]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	4926      	ldr	r1, [pc, #152]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	4313      	orrs	r3, r2
 8006370:	608b      	str	r3, [r1, #8]
 8006372:	e006      	b.n	8006382 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006374:	4b23      	ldr	r3, [pc, #140]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	43db      	mvns	r3, r3
 800637c:	4921      	ldr	r1, [pc, #132]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 800637e:	4013      	ands	r3, r2
 8006380:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800638e:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	491c      	ldr	r1, [pc, #112]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	4313      	orrs	r3, r2
 8006398:	60cb      	str	r3, [r1, #12]
 800639a:	e006      	b.n	80063aa <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800639c:	4b19      	ldr	r3, [pc, #100]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	43db      	mvns	r3, r3
 80063a4:	4917      	ldr	r1, [pc, #92]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	3301      	adds	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f47f aec4 	bne.w	8006148 <HAL_GPIO_Init+0x14>
  }
}
 80063c0:	bf00      	nop
 80063c2:	372c      	adds	r7, #44	; 0x2c
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	10210000 	.word	0x10210000
 80063d0:	10110000 	.word	0x10110000
 80063d4:	10120000 	.word	0x10120000
 80063d8:	10310000 	.word	0x10310000
 80063dc:	10320000 	.word	0x10320000
 80063e0:	10220000 	.word	0x10220000
 80063e4:	40021000 	.word	0x40021000
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010800 	.word	0x40010800
 80063f0:	40010c00 	.word	0x40010c00
 80063f4:	40011000 	.word	0x40011000
 80063f8:	40011400 	.word	0x40011400
 80063fc:	40011800 	.word	0x40011800
 8006400:	40011c00 	.word	0x40011c00
 8006404:	40010400 	.word	0x40010400

08006408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	807b      	strh	r3, [r7, #2]
 8006414:	4613      	mov	r3, r2
 8006416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006418:	787b      	ldrb	r3, [r7, #1]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800641e:	887a      	ldrh	r2, [r7, #2]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006424:	e003      	b.n	800642e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006426:	887b      	ldrh	r3, [r7, #2]
 8006428:	041a      	lsls	r2, r3, #16
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	611a      	str	r2, [r3, #16]
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	887b      	ldrh	r3, [r7, #2]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006450:	887a      	ldrh	r2, [r7, #2]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006456:	e002      	b.n	800645e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006458:	887a      	ldrh	r2, [r7, #2]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	611a      	str	r2, [r3, #16]
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr

08006468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e26c      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 8087 	beq.w	8006596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006488:	4b92      	ldr	r3, [pc, #584]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f003 030c 	and.w	r3, r3, #12
 8006490:	2b04      	cmp	r3, #4
 8006492:	d00c      	beq.n	80064ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006494:	4b8f      	ldr	r3, [pc, #572]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f003 030c 	and.w	r3, r3, #12
 800649c:	2b08      	cmp	r3, #8
 800649e:	d112      	bne.n	80064c6 <HAL_RCC_OscConfig+0x5e>
 80064a0:	4b8c      	ldr	r3, [pc, #560]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ac:	d10b      	bne.n	80064c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ae:	4b89      	ldr	r3, [pc, #548]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d06c      	beq.n	8006594 <HAL_RCC_OscConfig+0x12c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d168      	bne.n	8006594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e246      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ce:	d106      	bne.n	80064de <HAL_RCC_OscConfig+0x76>
 80064d0:	4b80      	ldr	r3, [pc, #512]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a7f      	ldr	r2, [pc, #508]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80064d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e02e      	b.n	800653c <HAL_RCC_OscConfig+0xd4>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10c      	bne.n	8006500 <HAL_RCC_OscConfig+0x98>
 80064e6:	4b7b      	ldr	r3, [pc, #492]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a7a      	ldr	r2, [pc, #488]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80064ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4b78      	ldr	r3, [pc, #480]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a77      	ldr	r2, [pc, #476]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80064f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	e01d      	b.n	800653c <HAL_RCC_OscConfig+0xd4>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006508:	d10c      	bne.n	8006524 <HAL_RCC_OscConfig+0xbc>
 800650a:	4b72      	ldr	r3, [pc, #456]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a71      	ldr	r2, [pc, #452]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	4b6f      	ldr	r3, [pc, #444]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a6e      	ldr	r2, [pc, #440]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 800651c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e00b      	b.n	800653c <HAL_RCC_OscConfig+0xd4>
 8006524:	4b6b      	ldr	r3, [pc, #428]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a6a      	ldr	r2, [pc, #424]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 800652a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b68      	ldr	r3, [pc, #416]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a67      	ldr	r2, [pc, #412]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800653a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d013      	beq.n	800656c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006544:	f7ff fcea 	bl	8005f1c <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800654c:	f7ff fce6 	bl	8005f1c <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b64      	cmp	r3, #100	; 0x64
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e1fa      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655e:	4b5d      	ldr	r3, [pc, #372]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0xe4>
 800656a:	e014      	b.n	8006596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656c:	f7ff fcd6 	bl	8005f1c <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006574:	f7ff fcd2 	bl	8005f1c <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b64      	cmp	r3, #100	; 0x64
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e1e6      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006586:	4b53      	ldr	r3, [pc, #332]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x10c>
 8006592:	e000      	b.n	8006596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d063      	beq.n	800666a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065a2:	4b4c      	ldr	r3, [pc, #304]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f003 030c 	and.w	r3, r3, #12
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065ae:	4b49      	ldr	r3, [pc, #292]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f003 030c 	and.w	r3, r3, #12
 80065b6:	2b08      	cmp	r3, #8
 80065b8:	d11c      	bne.n	80065f4 <HAL_RCC_OscConfig+0x18c>
 80065ba:	4b46      	ldr	r3, [pc, #280]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d116      	bne.n	80065f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065c6:	4b43      	ldr	r3, [pc, #268]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_RCC_OscConfig+0x176>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d001      	beq.n	80065de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e1ba      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065de:	4b3d      	ldr	r3, [pc, #244]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	4939      	ldr	r1, [pc, #228]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065f2:	e03a      	b.n	800666a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d020      	beq.n	800663e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065fc:	4b36      	ldr	r3, [pc, #216]	; (80066d8 <HAL_RCC_OscConfig+0x270>)
 80065fe:	2201      	movs	r2, #1
 8006600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006602:	f7ff fc8b 	bl	8005f1c <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006608:	e008      	b.n	800661c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800660a:	f7ff fc87 	bl	8005f1c <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e19b      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800661c:	4b2d      	ldr	r3, [pc, #180]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0f0      	beq.n	800660a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006628:	4b2a      	ldr	r3, [pc, #168]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4927      	ldr	r1, [pc, #156]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006638:	4313      	orrs	r3, r2
 800663a:	600b      	str	r3, [r1, #0]
 800663c:	e015      	b.n	800666a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800663e:	4b26      	ldr	r3, [pc, #152]	; (80066d8 <HAL_RCC_OscConfig+0x270>)
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006644:	f7ff fc6a 	bl	8005f1c <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800664c:	f7ff fc66 	bl	8005f1c <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e17a      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d03a      	beq.n	80066ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d019      	beq.n	80066b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800667e:	4b17      	ldr	r3, [pc, #92]	; (80066dc <HAL_RCC_OscConfig+0x274>)
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006684:	f7ff fc4a 	bl	8005f1c <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800668c:	f7ff fc46 	bl	8005f1c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e15a      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800669e:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <HAL_RCC_OscConfig+0x26c>)
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0f0      	beq.n	800668c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066aa:	2001      	movs	r0, #1
 80066ac:	f000 faf6 	bl	8006c9c <RCC_Delay>
 80066b0:	e01c      	b.n	80066ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <HAL_RCC_OscConfig+0x274>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b8:	f7ff fc30 	bl	8005f1c <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066be:	e00f      	b.n	80066e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c0:	f7ff fc2c 	bl	8005f1c <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d908      	bls.n	80066e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e140      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
 80066d2:	bf00      	nop
 80066d4:	40021000 	.word	0x40021000
 80066d8:	42420000 	.word	0x42420000
 80066dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e0:	4b9e      	ldr	r3, [pc, #632]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e9      	bne.n	80066c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80a6 	beq.w	8006846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066fe:	4b97      	ldr	r3, [pc, #604]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10d      	bne.n	8006726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800670a:	4b94      	ldr	r3, [pc, #592]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4a93      	ldr	r2, [pc, #588]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006714:	61d3      	str	r3, [r2, #28]
 8006716:	4b91      	ldr	r3, [pc, #580]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671e:	60bb      	str	r3, [r7, #8]
 8006720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006722:	2301      	movs	r3, #1
 8006724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006726:	4b8e      	ldr	r3, [pc, #568]	; (8006960 <HAL_RCC_OscConfig+0x4f8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d118      	bne.n	8006764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006732:	4b8b      	ldr	r3, [pc, #556]	; (8006960 <HAL_RCC_OscConfig+0x4f8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a8a      	ldr	r2, [pc, #552]	; (8006960 <HAL_RCC_OscConfig+0x4f8>)
 8006738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800673e:	f7ff fbed 	bl	8005f1c <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006746:	f7ff fbe9 	bl	8005f1c <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b64      	cmp	r3, #100	; 0x64
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e0fd      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006758:	4b81      	ldr	r3, [pc, #516]	; (8006960 <HAL_RCC_OscConfig+0x4f8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0f0      	beq.n	8006746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d106      	bne.n	800677a <HAL_RCC_OscConfig+0x312>
 800676c:	4b7b      	ldr	r3, [pc, #492]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	4a7a      	ldr	r2, [pc, #488]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	6213      	str	r3, [r2, #32]
 8006778:	e02d      	b.n	80067d6 <HAL_RCC_OscConfig+0x36e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10c      	bne.n	800679c <HAL_RCC_OscConfig+0x334>
 8006782:	4b76      	ldr	r3, [pc, #472]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	4a75      	ldr	r2, [pc, #468]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	6213      	str	r3, [r2, #32]
 800678e:	4b73      	ldr	r3, [pc, #460]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	4a72      	ldr	r2, [pc, #456]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006794:	f023 0304 	bic.w	r3, r3, #4
 8006798:	6213      	str	r3, [r2, #32]
 800679a:	e01c      	b.n	80067d6 <HAL_RCC_OscConfig+0x36e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b05      	cmp	r3, #5
 80067a2:	d10c      	bne.n	80067be <HAL_RCC_OscConfig+0x356>
 80067a4:	4b6d      	ldr	r3, [pc, #436]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	4a6c      	ldr	r2, [pc, #432]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80067aa:	f043 0304 	orr.w	r3, r3, #4
 80067ae:	6213      	str	r3, [r2, #32]
 80067b0:	4b6a      	ldr	r3, [pc, #424]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	4a69      	ldr	r2, [pc, #420]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	6213      	str	r3, [r2, #32]
 80067bc:	e00b      	b.n	80067d6 <HAL_RCC_OscConfig+0x36e>
 80067be:	4b67      	ldr	r3, [pc, #412]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	4a66      	ldr	r2, [pc, #408]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	6213      	str	r3, [r2, #32]
 80067ca:	4b64      	ldr	r3, [pc, #400]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	4a63      	ldr	r2, [pc, #396]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80067d0:	f023 0304 	bic.w	r3, r3, #4
 80067d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d015      	beq.n	800680a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067de:	f7ff fb9d 	bl	8005f1c <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e4:	e00a      	b.n	80067fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e6:	f7ff fb99 	bl	8005f1c <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0ab      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067fc:	4b57      	ldr	r3, [pc, #348]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0ee      	beq.n	80067e6 <HAL_RCC_OscConfig+0x37e>
 8006808:	e014      	b.n	8006834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800680a:	f7ff fb87 	bl	8005f1c <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006810:	e00a      	b.n	8006828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006812:	f7ff fb83 	bl	8005f1c <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006820:	4293      	cmp	r3, r2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e095      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006828:	4b4c      	ldr	r3, [pc, #304]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1ee      	bne.n	8006812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d105      	bne.n	8006846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800683a:	4b48      	ldr	r3, [pc, #288]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4a47      	ldr	r2, [pc, #284]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8081 	beq.w	8006952 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006850:	4b42      	ldr	r3, [pc, #264]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f003 030c 	and.w	r3, r3, #12
 8006858:	2b08      	cmp	r3, #8
 800685a:	d061      	beq.n	8006920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d146      	bne.n	80068f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006864:	4b3f      	ldr	r3, [pc, #252]	; (8006964 <HAL_RCC_OscConfig+0x4fc>)
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800686a:	f7ff fb57 	bl	8005f1c <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006872:	f7ff fb53 	bl	8005f1c <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e067      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006884:	4b35      	ldr	r3, [pc, #212]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1f0      	bne.n	8006872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006898:	d108      	bne.n	80068ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800689a:	4b30      	ldr	r3, [pc, #192]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	492d      	ldr	r1, [pc, #180]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ac:	4b2b      	ldr	r3, [pc, #172]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a19      	ldr	r1, [r3, #32]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	430b      	orrs	r3, r1
 80068be:	4927      	ldr	r1, [pc, #156]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068c4:	4b27      	ldr	r3, [pc, #156]	; (8006964 <HAL_RCC_OscConfig+0x4fc>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ca:	f7ff fb27 	bl	8005f1c <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068d2:	f7ff fb23 	bl	8005f1c <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e037      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068e4:	4b1d      	ldr	r3, [pc, #116]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0f0      	beq.n	80068d2 <HAL_RCC_OscConfig+0x46a>
 80068f0:	e02f      	b.n	8006952 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f2:	4b1c      	ldr	r3, [pc, #112]	; (8006964 <HAL_RCC_OscConfig+0x4fc>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f8:	f7ff fb10 	bl	8005f1c <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006900:	f7ff fb0c 	bl	8005f1c <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e020      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006912:	4b12      	ldr	r3, [pc, #72]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0x498>
 800691e:	e018      	b.n	8006952 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e013      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800692c:	4b0b      	ldr	r3, [pc, #44]	; (800695c <HAL_RCC_OscConfig+0x4f4>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	429a      	cmp	r2, r3
 800693e:	d106      	bne.n	800694e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800694a:	429a      	cmp	r2, r3
 800694c:	d001      	beq.n	8006952 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40021000 	.word	0x40021000
 8006960:	40007000 	.word	0x40007000
 8006964:	42420060 	.word	0x42420060

08006968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0d0      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800697c:	4b6a      	ldr	r3, [pc, #424]	; (8006b28 <HAL_RCC_ClockConfig+0x1c0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d910      	bls.n	80069ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698a:	4b67      	ldr	r3, [pc, #412]	; (8006b28 <HAL_RCC_ClockConfig+0x1c0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f023 0207 	bic.w	r2, r3, #7
 8006992:	4965      	ldr	r1, [pc, #404]	; (8006b28 <HAL_RCC_ClockConfig+0x1c0>)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b63      	ldr	r3, [pc, #396]	; (8006b28 <HAL_RCC_ClockConfig+0x1c0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0b8      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d020      	beq.n	80069fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069c4:	4b59      	ldr	r3, [pc, #356]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	4a58      	ldr	r2, [pc, #352]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 80069ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069dc:	4b53      	ldr	r3, [pc, #332]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4a52      	ldr	r2, [pc, #328]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 80069e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80069e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e8:	4b50      	ldr	r3, [pc, #320]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	494d      	ldr	r1, [pc, #308]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d040      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0e:	4b47      	ldr	r3, [pc, #284]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d115      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e07f      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d107      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a26:	4b41      	ldr	r3, [pc, #260]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e073      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a36:	4b3d      	ldr	r3, [pc, #244]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e06b      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a46:	4b39      	ldr	r3, [pc, #228]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f023 0203 	bic.w	r2, r3, #3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	4936      	ldr	r1, [pc, #216]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a58:	f7ff fa60 	bl	8005f1c <HAL_GetTick>
 8006a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5e:	e00a      	b.n	8006a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a60:	f7ff fa5c 	bl	8005f1c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e053      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a76:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f003 020c 	and.w	r2, r3, #12
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d1eb      	bne.n	8006a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a88:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <HAL_RCC_ClockConfig+0x1c0>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d210      	bcs.n	8006ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a96:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <HAL_RCC_ClockConfig+0x1c0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 0207 	bic.w	r2, r3, #7
 8006a9e:	4922      	ldr	r1, [pc, #136]	; (8006b28 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e032      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ac4:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4916      	ldr	r1, [pc, #88]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ae2:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	490e      	ldr	r1, [pc, #56]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006af6:	f000 f821 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8006afa:	4601      	mov	r1, r0
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <HAL_RCC_ClockConfig+0x1c4>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	4a0a      	ldr	r2, [pc, #40]	; (8006b30 <HAL_RCC_ClockConfig+0x1c8>)
 8006b08:	5cd3      	ldrb	r3, [r2, r3]
 8006b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8006b0e:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <HAL_RCC_ClockConfig+0x1cc>)
 8006b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <HAL_RCC_ClockConfig+0x1d0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff f904 	bl	8005d24 <HAL_InitTick>

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40022000 	.word	0x40022000
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	08008578 	.word	0x08008578
 8006b34:	2000000c 	.word	0x2000000c
 8006b38:	20000010 	.word	0x20000010

08006b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b3c:	b490      	push	{r4, r7}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b42:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b44:	1d3c      	adds	r4, r7, #4
 8006b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b4c:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61fb      	str	r3, [r7, #28]
 8006b56:	2300      	movs	r3, #0
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b66:	4b23      	ldr	r3, [pc, #140]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f003 030c 	and.w	r3, r3, #12
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d002      	beq.n	8006b7c <HAL_RCC_GetSysClockFreq+0x40>
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d003      	beq.n	8006b82 <HAL_RCC_GetSysClockFreq+0x46>
 8006b7a:	e02d      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b7c:	4b1e      	ldr	r3, [pc, #120]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b7e:	623b      	str	r3, [r7, #32]
      break;
 8006b80:	e02d      	b.n	8006bde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	0c9b      	lsrs	r3, r3, #18
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b8e:	4413      	add	r3, r2
 8006b90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d013      	beq.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ba0:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	0c5b      	lsrs	r3, r3, #17
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006bae:	4413      	add	r3, r2
 8006bb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006bb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4a0f      	ldr	r2, [pc, #60]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bba:	fb02 f203 	mul.w	r2, r2, r3
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc6:	e004      	b.n	8006bd2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	4a0c      	ldr	r2, [pc, #48]	; (8006bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006bcc:	fb02 f303 	mul.w	r3, r2, r3
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	623b      	str	r3, [r7, #32]
      break;
 8006bd6:	e002      	b.n	8006bde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bd8:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bda:	623b      	str	r3, [r7, #32]
      break;
 8006bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bde:	6a3b      	ldr	r3, [r7, #32]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3728      	adds	r7, #40	; 0x28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc90      	pop	{r4, r7}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	0800855c 	.word	0x0800855c
 8006bf0:	0800856c 	.word	0x0800856c
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	007a1200 	.word	0x007a1200
 8006bfc:	003d0900 	.word	0x003d0900

08006c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c04:	4b02      	ldr	r3, [pc, #8]	; (8006c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c06:	681b      	ldr	r3, [r3, #0]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr
 8006c10:	2000000c 	.word	0x2000000c

08006c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c18:	f7ff fff2 	bl	8006c00 <HAL_RCC_GetHCLKFreq>
 8006c1c:	4601      	mov	r1, r0
 8006c1e:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	4a03      	ldr	r2, [pc, #12]	; (8006c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c2a:	5cd3      	ldrb	r3, [r2, r3]
 8006c2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	40021000 	.word	0x40021000
 8006c38:	08008588 	.word	0x08008588

08006c3c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	220f      	movs	r2, #15
 8006c4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c4c:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <HAL_RCC_GetClockConfig+0x58>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 0203 	and.w	r2, r3, #3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c58:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <HAL_RCC_GetClockConfig+0x58>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_GetClockConfig+0x58>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006c70:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <HAL_RCC_GetClockConfig+0x58>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	08db      	lsrs	r3, r3, #3
 8006c76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c7e:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <HAL_RCC_GetClockConfig+0x5c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0207 	and.w	r2, r3, #7
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr
 8006c94:	40021000 	.word	0x40021000
 8006c98:	40022000 	.word	0x40022000

08006c9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <RCC_Delay+0x34>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a0a      	ldr	r2, [pc, #40]	; (8006cd4 <RCC_Delay+0x38>)
 8006caa:	fba2 2303 	umull	r2, r3, r2, r3
 8006cae:	0a5b      	lsrs	r3, r3, #9
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
 8006cb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006cb8:	bf00      	nop
  }
  while (Delay --);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1e5a      	subs	r2, r3, #1
 8006cbe:	60fa      	str	r2, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1f9      	bne.n	8006cb8 <RCC_Delay+0x1c>
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	2000000c 	.word	0x2000000c
 8006cd4:	10624dd3 	.word	0x10624dd3

08006cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e01d      	b.n	8006d26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f815 	bl	8006d2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f000 f962 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b06      	cmp	r3, #6
 8006d68:	d007      	beq.n	8006d7a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0201 	orr.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr

08006d86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d122      	bne.n	8006de2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d11b      	bne.n	8006de2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f06f 0202 	mvn.w	r2, #2
 8006db2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f8ed 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006dce:	e005      	b.n	8006ddc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8e0 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f8ef 	bl	8006fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d122      	bne.n	8006e36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d11b      	bne.n	8006e36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f06f 0204 	mvn.w	r2, #4
 8006e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f8c3 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006e22:	e005      	b.n	8006e30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f8b6 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f8c5 	bl	8006fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d122      	bne.n	8006e8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d11b      	bne.n	8006e8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f06f 0208 	mvn.w	r2, #8
 8006e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2204      	movs	r2, #4
 8006e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f899 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006e76:	e005      	b.n	8006e84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f88c 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f89b 	bl	8006fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d122      	bne.n	8006ede <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b10      	cmp	r3, #16
 8006ea4:	d11b      	bne.n	8006ede <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f06f 0210 	mvn.w	r2, #16
 8006eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f86f 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006eca:	e005      	b.n	8006ed8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f862 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f871 	bl	8006fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d10e      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d107      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f06f 0201 	mvn.w	r2, #1
 8006f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fe fec3 	bl	8005c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f14:	2b80      	cmp	r3, #128	; 0x80
 8006f16:	d10e      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	2b80      	cmp	r3, #128	; 0x80
 8006f24:	d107      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f8d8 	bl	80070e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	2b40      	cmp	r3, #64	; 0x40
 8006f42:	d10e      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d107      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f835 	bl	8006fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d10e      	bne.n	8006f8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	d107      	bne.n	8006f8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f06f 0220 	mvn.w	r2, #32
 8006f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f8a3 	bl	80070d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr
	...

08006fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a33      	ldr	r2, [pc, #204]	; (80070c0 <TIM_Base_SetConfig+0xe0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d013      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a32      	ldr	r2, [pc, #200]	; (80070c4 <TIM_Base_SetConfig+0xe4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00f      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007006:	d00b      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a2f      	ldr	r2, [pc, #188]	; (80070c8 <TIM_Base_SetConfig+0xe8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <TIM_Base_SetConfig+0xec>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a2d      	ldr	r2, [pc, #180]	; (80070d0 <TIM_Base_SetConfig+0xf0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d108      	bne.n	8007032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a22      	ldr	r2, [pc, #136]	; (80070c0 <TIM_Base_SetConfig+0xe0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <TIM_Base_SetConfig+0x82>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a21      	ldr	r2, [pc, #132]	; (80070c4 <TIM_Base_SetConfig+0xe4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00f      	beq.n	8007062 <TIM_Base_SetConfig+0x82>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007048:	d00b      	beq.n	8007062 <TIM_Base_SetConfig+0x82>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a1e      	ldr	r2, [pc, #120]	; (80070c8 <TIM_Base_SetConfig+0xe8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_Base_SetConfig+0x82>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a1d      	ldr	r2, [pc, #116]	; (80070cc <TIM_Base_SetConfig+0xec>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_Base_SetConfig+0x82>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a1c      	ldr	r2, [pc, #112]	; (80070d0 <TIM_Base_SetConfig+0xf0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d108      	bne.n	8007074 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <TIM_Base_SetConfig+0xe0>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_Base_SetConfig+0xc8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a08      	ldr	r2, [pc, #32]	; (80070c4 <TIM_Base_SetConfig+0xe4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d103      	bne.n	80070b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	615a      	str	r2, [r3, #20]
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr
 80070c0:	40012c00 	.word	0x40012c00
 80070c4:	40013400 	.word	0x40013400
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00

080070d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800710a:	2b84      	cmp	r3, #132	; 0x84
 800710c:	d005      	beq.n	800711a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800710e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	3303      	adds	r3, #3
 8007118:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800711a:	68fb      	ldr	r3, [r7, #12]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr

08007126 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800712a:	f000 facd 	bl	80076c8 <vTaskStartScheduler>
  
  return osOK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	bd80      	pop	{r7, pc}

08007134 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007136:	b089      	sub	sp, #36	; 0x24
 8007138:	af04      	add	r7, sp, #16
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d020      	beq.n	8007188 <osThreadCreate+0x54>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01c      	beq.n	8007188 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685c      	ldr	r4, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681d      	ldr	r5, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691e      	ldr	r6, [r3, #16]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff ffc9 	bl	80070f8 <makeFreeRtosPriority>
 8007166:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007170:	9202      	str	r2, [sp, #8]
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	9100      	str	r1, [sp, #0]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	4632      	mov	r2, r6
 800717a:	4629      	mov	r1, r5
 800717c:	4620      	mov	r0, r4
 800717e:	f000 f8e8 	bl	8007352 <xTaskCreateStatic>
 8007182:	4603      	mov	r3, r0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	e01c      	b.n	80071c2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685c      	ldr	r4, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007194:	b29e      	uxth	r6, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff ffab 	bl	80070f8 <makeFreeRtosPriority>
 80071a2:	4602      	mov	r2, r0
 80071a4:	f107 030c 	add.w	r3, r7, #12
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	9200      	str	r2, [sp, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	4632      	mov	r2, r6
 80071b0:	4629      	mov	r1, r5
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 f926 	bl	8007404 <xTaskCreate>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d001      	beq.n	80071c2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	e000      	b.n	80071c4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80071c2:	68fb      	ldr	r3, [r7, #12]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071cc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <osDelay+0x16>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	e000      	b.n	80071e4 <osDelay+0x18>
 80071e2:	2301      	movs	r3, #1
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fa3b 	bl	8007660 <vTaskDelay>
  
  return osOK;
 80071ea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f103 0208 	add.w	r2, r3, #8
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f04f 32ff 	mov.w	r2, #4294967295
 800720c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f103 0208 	add.w	r2, r3, #8
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f103 0208 	add.w	r2, r3, #8
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr

08007232 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr

0800724a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
}
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d103      	bne.n	80072b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e00c      	b.n	80072ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3308      	adds	r3, #8
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e002      	b.n	80072be <vListInsert+0x2e>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d2f6      	bcs.n	80072b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	601a      	str	r2, [r3, #0]
}
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6892      	ldr	r2, [r2, #8]
 8007316:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6852      	ldr	r2, [r2, #4]
 8007320:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	429a      	cmp	r2, r3
 800732a:	d103      	bne.n	8007334 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	1e5a      	subs	r2, r3, #1
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr

08007352 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007352:	b580      	push	{r7, lr}
 8007354:	b08e      	sub	sp, #56	; 0x38
 8007356:	af04      	add	r7, sp, #16
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	623b      	str	r3, [r7, #32]
 8007378:	e7fe      	b.n	8007378 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <xTaskCreateStatic+0x42>
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	61fb      	str	r3, [r7, #28]
 8007392:	e7fe      	b.n	8007392 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007394:	2354      	movs	r3, #84	; 0x54
 8007396:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b54      	cmp	r3, #84	; 0x54
 800739c:	d009      	beq.n	80073b2 <xTaskCreateStatic+0x60>
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	e7fe      	b.n	80073b0 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01e      	beq.n	80073f6 <xTaskCreateStatic+0xa4>
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01b      	beq.n	80073f6 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073d0:	2300      	movs	r3, #0
 80073d2:	9303      	str	r3, [sp, #12]
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	9302      	str	r3, [sp, #8]
 80073d8:	f107 0314 	add.w	r3, r7, #20
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f850 	bl	800748e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073f0:	f000 f8cc 	bl	800758c <prvAddNewTaskToReadyList>
 80073f4:	e001      	b.n	80073fa <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073fa:	697b      	ldr	r3, [r7, #20]
	}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3728      	adds	r7, #40	; 0x28
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08c      	sub	sp, #48	; 0x30
 8007408:	af04      	add	r7, sp, #16
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	4613      	mov	r3, r2
 8007412:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fe57 	bl	80080cc <pvPortMalloc>
 800741e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00e      	beq.n	8007444 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007426:	2054      	movs	r0, #84	; 0x54
 8007428:	f000 fe50 	bl	80080cc <pvPortMalloc>
 800742c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	631a      	str	r2, [r3, #48]	; 0x30
 800743a:	e005      	b.n	8007448 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800743c:	6978      	ldr	r0, [r7, #20]
 800743e:	f000 ff07 	bl	8008250 <vPortFree>
 8007442:	e001      	b.n	8007448 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007444:	2300      	movs	r3, #0
 8007446:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d017      	beq.n	800747e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007456:	88fa      	ldrh	r2, [r7, #6]
 8007458:	2300      	movs	r3, #0
 800745a:	9303      	str	r3, [sp, #12]
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	9302      	str	r3, [sp, #8]
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f80e 	bl	800748e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007472:	69f8      	ldr	r0, [r7, #28]
 8007474:	f000 f88a 	bl	800758c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007478:	2301      	movs	r3, #1
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	e002      	b.n	8007484 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800747e:	f04f 33ff 	mov.w	r3, #4294967295
 8007482:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007484:	69bb      	ldr	r3, [r7, #24]
	}
 8007486:	4618      	mov	r0, r3
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b088      	sub	sp, #32
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074a6:	3b01      	subs	r3, #1
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f023 0307 	bic.w	r3, r3, #7
 80074b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d009      	beq.n	80074d4 <prvInitialiseNewTask+0x46>
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e7fe      	b.n	80074d2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	e012      	b.n	8007500 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	7819      	ldrb	r1, [r3, #0]
 80074e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	3334      	adds	r3, #52	; 0x34
 80074ea:	460a      	mov	r2, r1
 80074ec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	4413      	add	r3, r2
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d006      	beq.n	8007508 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	3301      	adds	r3, #1
 80074fe:	61fb      	str	r3, [r7, #28]
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2b0f      	cmp	r3, #15
 8007504:	d9e9      	bls.n	80074da <prvInitialiseNewTask+0x4c>
 8007506:	e000      	b.n	800750a <prvInitialiseNewTask+0x7c>
		{
			break;
 8007508:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	2b06      	cmp	r3, #6
 8007516:	d901      	bls.n	800751c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007518:	2306      	movs	r3, #6
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007520:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007526:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	2200      	movs	r2, #0
 800752c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	3304      	adds	r3, #4
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fe7d 	bl	8007232 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	3318      	adds	r3, #24
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff fe78 	bl	8007232 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007546:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	f1c3 0207 	rsb	r2, r3, #7
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007556:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	2200      	movs	r2, #0
 800755c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	68f9      	ldr	r1, [r7, #12]
 800756a:	69b8      	ldr	r0, [r7, #24]
 800756c:	f000 fc06 	bl	8007d7c <pxPortInitialiseStack>
 8007570:	4602      	mov	r2, r0
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007580:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007582:	bf00      	nop
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007594:	f000 fce0 	bl	8007f58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007598:	4b2a      	ldr	r3, [pc, #168]	; (8007644 <prvAddNewTaskToReadyList+0xb8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3301      	adds	r3, #1
 800759e:	4a29      	ldr	r2, [pc, #164]	; (8007644 <prvAddNewTaskToReadyList+0xb8>)
 80075a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075a2:	4b29      	ldr	r3, [pc, #164]	; (8007648 <prvAddNewTaskToReadyList+0xbc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075aa:	4a27      	ldr	r2, [pc, #156]	; (8007648 <prvAddNewTaskToReadyList+0xbc>)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075b0:	4b24      	ldr	r3, [pc, #144]	; (8007644 <prvAddNewTaskToReadyList+0xb8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d110      	bne.n	80075da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075b8:	f000 fabc 	bl	8007b34 <prvInitialiseTaskLists>
 80075bc:	e00d      	b.n	80075da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075be:	4b23      	ldr	r3, [pc, #140]	; (800764c <prvAddNewTaskToReadyList+0xc0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075c6:	4b20      	ldr	r3, [pc, #128]	; (8007648 <prvAddNewTaskToReadyList+0xbc>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d802      	bhi.n	80075da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075d4:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <prvAddNewTaskToReadyList+0xbc>)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075da:	4b1d      	ldr	r3, [pc, #116]	; (8007650 <prvAddNewTaskToReadyList+0xc4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3301      	adds	r3, #1
 80075e0:	4a1b      	ldr	r2, [pc, #108]	; (8007650 <prvAddNewTaskToReadyList+0xc4>)
 80075e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	2201      	movs	r2, #1
 80075ea:	409a      	lsls	r2, r3
 80075ec:	4b19      	ldr	r3, [pc, #100]	; (8007654 <prvAddNewTaskToReadyList+0xc8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	4a18      	ldr	r2, [pc, #96]	; (8007654 <prvAddNewTaskToReadyList+0xc8>)
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4a15      	ldr	r2, [pc, #84]	; (8007658 <prvAddNewTaskToReadyList+0xcc>)
 8007604:	441a      	add	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3304      	adds	r3, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f7ff fe1c 	bl	800724a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007612:	f000 fccf 	bl	8007fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007616:	4b0d      	ldr	r3, [pc, #52]	; (800764c <prvAddNewTaskToReadyList+0xc0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00e      	beq.n	800763c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800761e:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <prvAddNewTaskToReadyList+0xbc>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	429a      	cmp	r2, r3
 800762a:	d207      	bcs.n	800763c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800762c:	4b0b      	ldr	r3, [pc, #44]	; (800765c <prvAddNewTaskToReadyList+0xd0>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	20000390 	.word	0x20000390
 8007648:	20000290 	.word	0x20000290
 800764c:	2000039c 	.word	0x2000039c
 8007650:	200003ac 	.word	0x200003ac
 8007654:	20000398 	.word	0x20000398
 8007658:	20000294 	.word	0x20000294
 800765c:	e000ed04 	.word	0xe000ed04

08007660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d016      	beq.n	80076a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <vTaskDelay+0x60>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d009      	beq.n	800768e <vTaskDelay+0x2e>
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	60bb      	str	r3, [r7, #8]
 800768c:	e7fe      	b.n	800768c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800768e:	f000 f879 	bl	8007784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007692:	2100      	movs	r1, #0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fb0b 	bl	8007cb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800769a:	f000 f881 	bl	80077a0 <xTaskResumeAll>
 800769e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d107      	bne.n	80076b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80076a6:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <vTaskDelay+0x64>)
 80076a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076b6:	bf00      	nop
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	200003b8 	.word	0x200003b8
 80076c4:	e000ed04 	.word	0xe000ed04

080076c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	; 0x28
 80076cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076d6:	463a      	mov	r2, r7
 80076d8:	1d39      	adds	r1, r7, #4
 80076da:	f107 0308 	add.w	r3, r7, #8
 80076de:	4618      	mov	r0, r3
 80076e0:	f7f9 f994 	bl	8000a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	9202      	str	r2, [sp, #8]
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	2300      	movs	r3, #0
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	2300      	movs	r3, #0
 80076f4:	460a      	mov	r2, r1
 80076f6:	491d      	ldr	r1, [pc, #116]	; (800776c <vTaskStartScheduler+0xa4>)
 80076f8:	481d      	ldr	r0, [pc, #116]	; (8007770 <vTaskStartScheduler+0xa8>)
 80076fa:	f7ff fe2a 	bl	8007352 <xTaskCreateStatic>
 80076fe:	4602      	mov	r2, r0
 8007700:	4b1c      	ldr	r3, [pc, #112]	; (8007774 <vTaskStartScheduler+0xac>)
 8007702:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007704:	4b1b      	ldr	r3, [pc, #108]	; (8007774 <vTaskStartScheduler+0xac>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800770c:	2301      	movs	r3, #1
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	e001      	b.n	8007716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d115      	bne.n	8007748 <vTaskStartScheduler+0x80>
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800772e:	4b12      	ldr	r3, [pc, #72]	; (8007778 <vTaskStartScheduler+0xb0>)
 8007730:	f04f 32ff 	mov.w	r2, #4294967295
 8007734:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007736:	4b11      	ldr	r3, [pc, #68]	; (800777c <vTaskStartScheduler+0xb4>)
 8007738:	2201      	movs	r2, #1
 800773a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800773c:	4b10      	ldr	r3, [pc, #64]	; (8007780 <vTaskStartScheduler+0xb8>)
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007742:	f000 fb99 	bl	8007e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007746:	e00d      	b.n	8007764 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d109      	bne.n	8007764 <vTaskStartScheduler+0x9c>
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	e7fe      	b.n	8007762 <vTaskStartScheduler+0x9a>
}
 8007764:	bf00      	nop
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	08008570 	.word	0x08008570
 8007770:	08007b05 	.word	0x08007b05
 8007774:	200003b4 	.word	0x200003b4
 8007778:	200003b0 	.word	0x200003b0
 800777c:	2000039c 	.word	0x2000039c
 8007780:	20000394 	.word	0x20000394

08007784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007788:	4b04      	ldr	r3, [pc, #16]	; (800779c <vTaskSuspendAll+0x18>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3301      	adds	r3, #1
 800778e:	4a03      	ldr	r2, [pc, #12]	; (800779c <vTaskSuspendAll+0x18>)
 8007790:	6013      	str	r3, [r2, #0]
}
 8007792:	bf00      	nop
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	200003b8 	.word	0x200003b8

080077a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077ae:	4b41      	ldr	r3, [pc, #260]	; (80078b4 <xTaskResumeAll+0x114>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <xTaskResumeAll+0x2a>
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	e7fe      	b.n	80077c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077ca:	f000 fbc5 	bl	8007f58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077ce:	4b39      	ldr	r3, [pc, #228]	; (80078b4 <xTaskResumeAll+0x114>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	4a37      	ldr	r2, [pc, #220]	; (80078b4 <xTaskResumeAll+0x114>)
 80077d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d8:	4b36      	ldr	r3, [pc, #216]	; (80078b4 <xTaskResumeAll+0x114>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d161      	bne.n	80078a4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077e0:	4b35      	ldr	r3, [pc, #212]	; (80078b8 <xTaskResumeAll+0x118>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d05d      	beq.n	80078a4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e8:	e02e      	b.n	8007848 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80077ea:	4b34      	ldr	r3, [pc, #208]	; (80078bc <xTaskResumeAll+0x11c>)
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3318      	adds	r3, #24
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fd82 	bl	8007300 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3304      	adds	r3, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff fd7d 	bl	8007300 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	2201      	movs	r2, #1
 800780c:	409a      	lsls	r2, r3
 800780e:	4b2c      	ldr	r3, [pc, #176]	; (80078c0 <xTaskResumeAll+0x120>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4313      	orrs	r3, r2
 8007814:	4a2a      	ldr	r2, [pc, #168]	; (80078c0 <xTaskResumeAll+0x120>)
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4a27      	ldr	r2, [pc, #156]	; (80078c4 <xTaskResumeAll+0x124>)
 8007826:	441a      	add	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7ff fd0b 	bl	800724a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007838:	4b23      	ldr	r3, [pc, #140]	; (80078c8 <xTaskResumeAll+0x128>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	429a      	cmp	r2, r3
 8007840:	d302      	bcc.n	8007848 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007842:	4b22      	ldr	r3, [pc, #136]	; (80078cc <xTaskResumeAll+0x12c>)
 8007844:	2201      	movs	r2, #1
 8007846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007848:	4b1c      	ldr	r3, [pc, #112]	; (80078bc <xTaskResumeAll+0x11c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1cc      	bne.n	80077ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007856:	f000 fa07 	bl	8007c68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800785a:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <xTaskResumeAll+0x130>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d010      	beq.n	8007888 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007866:	f000 f837 	bl	80078d8 <xTaskIncrementTick>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007870:	4b16      	ldr	r3, [pc, #88]	; (80078cc <xTaskResumeAll+0x12c>)
 8007872:	2201      	movs	r2, #1
 8007874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3b01      	subs	r3, #1
 800787a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1f1      	bne.n	8007866 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007882:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <xTaskResumeAll+0x130>)
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007888:	4b10      	ldr	r3, [pc, #64]	; (80078cc <xTaskResumeAll+0x12c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d009      	beq.n	80078a4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007890:	2301      	movs	r3, #1
 8007892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007894:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <xTaskResumeAll+0x134>)
 8007896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078a4:	f000 fb86 	bl	8007fb4 <vPortExitCritical>

	return xAlreadyYielded;
 80078a8:	68bb      	ldr	r3, [r7, #8]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	200003b8 	.word	0x200003b8
 80078b8:	20000390 	.word	0x20000390
 80078bc:	20000350 	.word	0x20000350
 80078c0:	20000398 	.word	0x20000398
 80078c4:	20000294 	.word	0x20000294
 80078c8:	20000290 	.word	0x20000290
 80078cc:	200003a4 	.word	0x200003a4
 80078d0:	200003a0 	.word	0x200003a0
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e2:	4b50      	ldr	r3, [pc, #320]	; (8007a24 <xTaskIncrementTick+0x14c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 808c 	bne.w	8007a04 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078ec:	4b4e      	ldr	r3, [pc, #312]	; (8007a28 <xTaskIncrementTick+0x150>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078f4:	4a4c      	ldr	r2, [pc, #304]	; (8007a28 <xTaskIncrementTick+0x150>)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d11f      	bne.n	8007940 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007900:	4b4a      	ldr	r3, [pc, #296]	; (8007a2c <xTaskIncrementTick+0x154>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <xTaskIncrementTick+0x46>
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	e7fe      	b.n	800791c <xTaskIncrementTick+0x44>
 800791e:	4b43      	ldr	r3, [pc, #268]	; (8007a2c <xTaskIncrementTick+0x154>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	4b42      	ldr	r3, [pc, #264]	; (8007a30 <xTaskIncrementTick+0x158>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a40      	ldr	r2, [pc, #256]	; (8007a2c <xTaskIncrementTick+0x154>)
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	4a40      	ldr	r2, [pc, #256]	; (8007a30 <xTaskIncrementTick+0x158>)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	4b40      	ldr	r3, [pc, #256]	; (8007a34 <xTaskIncrementTick+0x15c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	4a3e      	ldr	r2, [pc, #248]	; (8007a34 <xTaskIncrementTick+0x15c>)
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	f000 f994 	bl	8007c68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007940:	4b3d      	ldr	r3, [pc, #244]	; (8007a38 <xTaskIncrementTick+0x160>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	429a      	cmp	r2, r3
 8007948:	d34d      	bcc.n	80079e6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800794a:	4b38      	ldr	r3, [pc, #224]	; (8007a2c <xTaskIncrementTick+0x154>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <xTaskIncrementTick+0x80>
 8007954:	2301      	movs	r3, #1
 8007956:	e000      	b.n	800795a <xTaskIncrementTick+0x82>
 8007958:	2300      	movs	r3, #0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800795e:	4b36      	ldr	r3, [pc, #216]	; (8007a38 <xTaskIncrementTick+0x160>)
 8007960:	f04f 32ff 	mov.w	r2, #4294967295
 8007964:	601a      	str	r2, [r3, #0]
					break;
 8007966:	e03e      	b.n	80079e6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007968:	4b30      	ldr	r3, [pc, #192]	; (8007a2c <xTaskIncrementTick+0x154>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	429a      	cmp	r2, r3
 800797e:	d203      	bcs.n	8007988 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007980:	4a2d      	ldr	r2, [pc, #180]	; (8007a38 <xTaskIncrementTick+0x160>)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6013      	str	r3, [r2, #0]
						break;
 8007986:	e02e      	b.n	80079e6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	3304      	adds	r3, #4
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff fcb7 	bl	8007300 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	3318      	adds	r3, #24
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff fcae 	bl	8007300 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	2201      	movs	r2, #1
 80079aa:	409a      	lsls	r2, r3
 80079ac:	4b23      	ldr	r3, [pc, #140]	; (8007a3c <xTaskIncrementTick+0x164>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	4a22      	ldr	r2, [pc, #136]	; (8007a3c <xTaskIncrementTick+0x164>)
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <xTaskIncrementTick+0x168>)
 80079c4:	441a      	add	r2, r3
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f7ff fc3c 	bl	800724a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	4b1b      	ldr	r3, [pc, #108]	; (8007a44 <xTaskIncrementTick+0x16c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d3b4      	bcc.n	800794a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80079e0:	2301      	movs	r3, #1
 80079e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079e4:	e7b1      	b.n	800794a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079e6:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <xTaskIncrementTick+0x16c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ec:	4914      	ldr	r1, [pc, #80]	; (8007a40 <xTaskIncrementTick+0x168>)
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d907      	bls.n	8007a0e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80079fe:	2301      	movs	r3, #1
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	e004      	b.n	8007a0e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a04:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <xTaskIncrementTick+0x170>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	4a0f      	ldr	r2, [pc, #60]	; (8007a48 <xTaskIncrementTick+0x170>)
 8007a0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <xTaskIncrementTick+0x174>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a1a:	697b      	ldr	r3, [r7, #20]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	200003b8 	.word	0x200003b8
 8007a28:	20000394 	.word	0x20000394
 8007a2c:	20000348 	.word	0x20000348
 8007a30:	2000034c 	.word	0x2000034c
 8007a34:	200003a8 	.word	0x200003a8
 8007a38:	200003b0 	.word	0x200003b0
 8007a3c:	20000398 	.word	0x20000398
 8007a40:	20000294 	.word	0x20000294
 8007a44:	20000290 	.word	0x20000290
 8007a48:	200003a0 	.word	0x200003a0
 8007a4c:	200003a4 	.word	0x200003a4

08007a50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a56:	4b26      	ldr	r3, [pc, #152]	; (8007af0 <vTaskSwitchContext+0xa0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a5e:	4b25      	ldr	r3, [pc, #148]	; (8007af4 <vTaskSwitchContext+0xa4>)
 8007a60:	2201      	movs	r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a64:	e03e      	b.n	8007ae4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007a66:	4b23      	ldr	r3, [pc, #140]	; (8007af4 <vTaskSwitchContext+0xa4>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a6c:	4b22      	ldr	r3, [pc, #136]	; (8007af8 <vTaskSwitchContext+0xa8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	fab3 f383 	clz	r3, r3
 8007a78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	f1c3 031f 	rsb	r3, r3, #31
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	491e      	ldr	r1, [pc, #120]	; (8007afc <vTaskSwitchContext+0xac>)
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d109      	bne.n	8007aaa <vTaskSwitchContext+0x5a>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	607b      	str	r3, [r7, #4]
 8007aa8:	e7fe      	b.n	8007aa8 <vTaskSwitchContext+0x58>
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4a11      	ldr	r2, [pc, #68]	; (8007afc <vTaskSwitchContext+0xac>)
 8007ab6:	4413      	add	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3308      	adds	r3, #8
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d104      	bne.n	8007ada <vTaskSwitchContext+0x8a>
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	4a07      	ldr	r2, [pc, #28]	; (8007b00 <vTaskSwitchContext+0xb0>)
 8007ae2:	6013      	str	r3, [r2, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	200003b8 	.word	0x200003b8
 8007af4:	200003a4 	.word	0x200003a4
 8007af8:	20000398 	.word	0x20000398
 8007afc:	20000294 	.word	0x20000294
 8007b00:	20000290 	.word	0x20000290

08007b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b0c:	f000 f852 	bl	8007bb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b10:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <prvIdleTask+0x28>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d9f9      	bls.n	8007b0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b18:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <prvIdleTask+0x2c>)
 8007b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b28:	e7f0      	b.n	8007b0c <prvIdleTask+0x8>
 8007b2a:	bf00      	nop
 8007b2c:	20000294 	.word	0x20000294
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	607b      	str	r3, [r7, #4]
 8007b3e:	e00c      	b.n	8007b5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4a12      	ldr	r2, [pc, #72]	; (8007b94 <prvInitialiseTaskLists+0x60>)
 8007b4c:	4413      	add	r3, r2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff fb50 	bl	80071f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3301      	adds	r3, #1
 8007b58:	607b      	str	r3, [r7, #4]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b06      	cmp	r3, #6
 8007b5e:	d9ef      	bls.n	8007b40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b60:	480d      	ldr	r0, [pc, #52]	; (8007b98 <prvInitialiseTaskLists+0x64>)
 8007b62:	f7ff fb47 	bl	80071f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b66:	480d      	ldr	r0, [pc, #52]	; (8007b9c <prvInitialiseTaskLists+0x68>)
 8007b68:	f7ff fb44 	bl	80071f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b6c:	480c      	ldr	r0, [pc, #48]	; (8007ba0 <prvInitialiseTaskLists+0x6c>)
 8007b6e:	f7ff fb41 	bl	80071f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b72:	480c      	ldr	r0, [pc, #48]	; (8007ba4 <prvInitialiseTaskLists+0x70>)
 8007b74:	f7ff fb3e 	bl	80071f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b78:	480b      	ldr	r0, [pc, #44]	; (8007ba8 <prvInitialiseTaskLists+0x74>)
 8007b7a:	f7ff fb3b 	bl	80071f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <prvInitialiseTaskLists+0x78>)
 8007b80:	4a05      	ldr	r2, [pc, #20]	; (8007b98 <prvInitialiseTaskLists+0x64>)
 8007b82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <prvInitialiseTaskLists+0x7c>)
 8007b86:	4a05      	ldr	r2, [pc, #20]	; (8007b9c <prvInitialiseTaskLists+0x68>)
 8007b88:	601a      	str	r2, [r3, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	20000294 	.word	0x20000294
 8007b98:	20000320 	.word	0x20000320
 8007b9c:	20000334 	.word	0x20000334
 8007ba0:	20000350 	.word	0x20000350
 8007ba4:	20000364 	.word	0x20000364
 8007ba8:	2000037c 	.word	0x2000037c
 8007bac:	20000348 	.word	0x20000348
 8007bb0:	2000034c 	.word	0x2000034c

08007bb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bba:	e019      	b.n	8007bf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bbc:	f000 f9cc 	bl	8007f58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <prvCheckTasksWaitingTermination+0x4c>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff fb97 	bl	8007300 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <prvCheckTasksWaitingTermination+0x50>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	4a0a      	ldr	r2, [pc, #40]	; (8007c04 <prvCheckTasksWaitingTermination+0x50>)
 8007bda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <prvCheckTasksWaitingTermination+0x54>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	4a09      	ldr	r2, [pc, #36]	; (8007c08 <prvCheckTasksWaitingTermination+0x54>)
 8007be4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007be6:	f000 f9e5 	bl	8007fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f80e 	bl	8007c0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <prvCheckTasksWaitingTermination+0x54>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e1      	bne.n	8007bbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000364 	.word	0x20000364
 8007c04:	20000390 	.word	0x20000390
 8007c08:	20000378 	.word	0x20000378

08007c0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d108      	bne.n	8007c30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fb14 	bl	8008250 <vPortFree>
				vPortFree( pxTCB );
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb11 	bl	8008250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c2e:	e017      	b.n	8007c60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d103      	bne.n	8007c42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fb08 	bl	8008250 <vPortFree>
	}
 8007c40:	e00e      	b.n	8007c60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d009      	beq.n	8007c60 <prvDeleteTCB+0x54>
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	e7fe      	b.n	8007c5e <prvDeleteTCB+0x52>
	}
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <prvResetNextTaskUnblockTime+0x40>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <prvResetNextTaskUnblockTime+0x14>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e000      	b.n	8007c7e <prvResetNextTaskUnblockTime+0x16>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c82:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <prvResetNextTaskUnblockTime+0x44>)
 8007c84:	f04f 32ff 	mov.w	r2, #4294967295
 8007c88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c8a:	e008      	b.n	8007c9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c8c:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <prvResetNextTaskUnblockTime+0x40>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	4a04      	ldr	r2, [pc, #16]	; (8007cac <prvResetNextTaskUnblockTime+0x44>)
 8007c9c:	6013      	str	r3, [r2, #0]
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bc80      	pop	{r7}
 8007ca6:	4770      	bx	lr
 8007ca8:	20000348 	.word	0x20000348
 8007cac:	200003b0 	.word	0x200003b0

08007cb0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cba:	4b29      	ldr	r3, [pc, #164]	; (8007d60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc0:	4b28      	ldr	r3, [pc, #160]	; (8007d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fb1a 	bl	8007300 <uxListRemove>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10b      	bne.n	8007cea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007cd2:	4b24      	ldr	r3, [pc, #144]	; (8007d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	2201      	movs	r2, #1
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	43da      	mvns	r2, r3
 8007ce0:	4b21      	ldr	r3, [pc, #132]	; (8007d68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	4a20      	ldr	r2, [pc, #128]	; (8007d68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ce8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d10a      	bne.n	8007d08 <prvAddCurrentTaskToDelayedList+0x58>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	4619      	mov	r1, r3
 8007d00:	481a      	ldr	r0, [pc, #104]	; (8007d6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d02:	f7ff faa2 	bl	800724a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d06:	e026      	b.n	8007d56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d10:	4b14      	ldr	r3, [pc, #80]	; (8007d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d209      	bcs.n	8007d34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d20:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	f7ff faaf 	bl	8007290 <vListInsert>
}
 8007d32:	e010      	b.n	8007d56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d34:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7ff faa5 	bl	8007290 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d46:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d202      	bcs.n	8007d56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d50:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	6013      	str	r3, [r2, #0]
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000394 	.word	0x20000394
 8007d64:	20000290 	.word	0x20000290
 8007d68:	20000398 	.word	0x20000398
 8007d6c:	2000037c 	.word	0x2000037c
 8007d70:	2000034c 	.word	0x2000034c
 8007d74:	20000348 	.word	0x20000348
 8007d78:	200003b0 	.word	0x200003b0

08007d7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3b04      	subs	r3, #4
 8007d8c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3b04      	subs	r3, #4
 8007d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f023 0201 	bic.w	r2, r3, #1
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3b04      	subs	r3, #4
 8007daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dac:	4a08      	ldr	r2, [pc, #32]	; (8007dd0 <pxPortInitialiseStack+0x54>)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3b14      	subs	r3, #20
 8007db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3b20      	subs	r3, #32
 8007dc2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr
 8007dd0:	08007dd5 	.word	0x08007dd5

08007dd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dde:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <prvTaskExitError+0x4c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de6:	d009      	beq.n	8007dfc <prvTaskExitError+0x28>
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	e7fe      	b.n	8007dfa <prvTaskExitError+0x26>
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e0e:	bf00      	nop
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0fc      	beq.n	8007e10 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr
 8007e20:	20000018 	.word	0x20000018
	...

08007e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <pxCurrentTCBConst2>)
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	6808      	ldr	r0, [r1, #0]
 8007e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e3a:	f380 8809 	msr	PSP, r0
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f380 8811 	msr	BASEPRI, r0
 8007e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007e4e:	4770      	bx	lr

08007e50 <pxCurrentTCBConst2>:
 8007e50:	20000290 	.word	0x20000290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007e58:	4806      	ldr	r0, [pc, #24]	; (8007e74 <prvPortStartFirstTask+0x1c>)
 8007e5a:	6800      	ldr	r0, [r0, #0]
 8007e5c:	6800      	ldr	r0, [r0, #0]
 8007e5e:	f380 8808 	msr	MSP, r0
 8007e62:	b662      	cpsie	i
 8007e64:	b661      	cpsie	f
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	df00      	svc	0
 8007e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e72:	bf00      	nop
 8007e74:	e000ed08 	.word	0xe000ed08

08007e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e7e:	4b31      	ldr	r3, [pc, #196]	; (8007f44 <xPortStartScheduler+0xcc>)
 8007e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	22ff      	movs	r2, #255	; 0xff
 8007e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	4b29      	ldr	r3, [pc, #164]	; (8007f48 <xPortStartScheduler+0xd0>)
 8007ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ea6:	4b29      	ldr	r3, [pc, #164]	; (8007f4c <xPortStartScheduler+0xd4>)
 8007ea8:	2207      	movs	r2, #7
 8007eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eac:	e009      	b.n	8007ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007eae:	4b27      	ldr	r3, [pc, #156]	; (8007f4c <xPortStartScheduler+0xd4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	4a25      	ldr	r2, [pc, #148]	; (8007f4c <xPortStartScheduler+0xd4>)
 8007eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eca:	2b80      	cmp	r3, #128	; 0x80
 8007ecc:	d0ef      	beq.n	8007eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ece:	4b1f      	ldr	r3, [pc, #124]	; (8007f4c <xPortStartScheduler+0xd4>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f1c3 0307 	rsb	r3, r3, #7
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d009      	beq.n	8007eee <xPortStartScheduler+0x76>
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	60bb      	str	r3, [r7, #8]
 8007eec:	e7fe      	b.n	8007eec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007eee:	4b17      	ldr	r3, [pc, #92]	; (8007f4c <xPortStartScheduler+0xd4>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	4a15      	ldr	r2, [pc, #84]	; (8007f4c <xPortStartScheduler+0xd4>)
 8007ef6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ef8:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <xPortStartScheduler+0xd4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f00:	4a12      	ldr	r2, [pc, #72]	; (8007f4c <xPortStartScheduler+0xd4>)
 8007f02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f0c:	4b10      	ldr	r3, [pc, #64]	; (8007f50 <xPortStartScheduler+0xd8>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0f      	ldr	r2, [pc, #60]	; (8007f50 <xPortStartScheduler+0xd8>)
 8007f12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f18:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <xPortStartScheduler+0xd8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a0c      	ldr	r2, [pc, #48]	; (8007f50 <xPortStartScheduler+0xd8>)
 8007f1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f24:	f000 f8b0 	bl	8008088 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <xPortStartScheduler+0xdc>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f2e:	f7ff ff93 	bl	8007e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f32:	f7ff fd8d 	bl	8007a50 <vTaskSwitchContext>
	prvTaskExitError();
 8007f36:	f7ff ff4d 	bl	8007dd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	e000e400 	.word	0xe000e400
 8007f48:	200003bc 	.word	0x200003bc
 8007f4c:	200003c0 	.word	0x200003c0
 8007f50:	e000ed20 	.word	0xe000ed20
 8007f54:	20000018 	.word	0x20000018

08007f58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f70:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <vPortEnterCritical+0x54>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a0d      	ldr	r2, [pc, #52]	; (8007fac <vPortEnterCritical+0x54>)
 8007f78:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <vPortEnterCritical+0x54>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d10e      	bne.n	8007fa0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f82:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <vPortEnterCritical+0x58>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d009      	beq.n	8007fa0 <vPortEnterCritical+0x48>
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	603b      	str	r3, [r7, #0]
 8007f9e:	e7fe      	b.n	8007f9e <vPortEnterCritical+0x46>
	}
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	20000018 	.word	0x20000018
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fba:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <vPortExitCritical+0x48>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d109      	bne.n	8007fd6 <vPortExitCritical+0x22>
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	607b      	str	r3, [r7, #4]
 8007fd4:	e7fe      	b.n	8007fd4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007fd6:	4b09      	ldr	r3, [pc, #36]	; (8007ffc <vPortExitCritical+0x48>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4a07      	ldr	r2, [pc, #28]	; (8007ffc <vPortExitCritical+0x48>)
 8007fde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fe0:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <vPortExitCritical+0x48>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d104      	bne.n	8007ff2 <vPortExitCritical+0x3e>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr
 8007ffc:	20000018 	.word	0x20000018

08008000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008000:	f3ef 8009 	mrs	r0, PSP
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <pxCurrentTCBConst>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008010:	6010      	str	r0, [r2, #0]
 8008012:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008016:	f04f 0050 	mov.w	r0, #80	; 0x50
 800801a:	f380 8811 	msr	BASEPRI, r0
 800801e:	f7ff fd17 	bl	8007a50 <vTaskSwitchContext>
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f380 8811 	msr	BASEPRI, r0
 800802a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800802e:	6819      	ldr	r1, [r3, #0]
 8008030:	6808      	ldr	r0, [r1, #0]
 8008032:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008036:	f380 8809 	msr	PSP, r0
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	4770      	bx	lr

08008040 <pxCurrentTCBConst>:
 8008040:	20000290 	.word	0x20000290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008060:	f7ff fc3a 	bl	80078d8 <xTaskIncrementTick>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <SysTick_Handler+0x3c>)
 800806c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	e000ed04 	.word	0xe000ed04

08008088 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800808c:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <vPortSetupTimerInterrupt+0x30>)
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008092:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <vPortSetupTimerInterrupt+0x34>)
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008098:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <vPortSetupTimerInterrupt+0x38>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <vPortSetupTimerInterrupt+0x3c>)
 800809e:	fba2 2303 	umull	r2, r3, r2, r3
 80080a2:	099b      	lsrs	r3, r3, #6
 80080a4:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <vPortSetupTimerInterrupt+0x40>)
 80080a6:	3b01      	subs	r3, #1
 80080a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080aa:	4b03      	ldr	r3, [pc, #12]	; (80080b8 <vPortSetupTimerInterrupt+0x30>)
 80080ac:	2207      	movs	r2, #7
 80080ae:	601a      	str	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr
 80080b8:	e000e010 	.word	0xe000e010
 80080bc:	e000e018 	.word	0xe000e018
 80080c0:	2000000c 	.word	0x2000000c
 80080c4:	10624dd3 	.word	0x10624dd3
 80080c8:	e000e014 	.word	0xe000e014

080080cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b08a      	sub	sp, #40	; 0x28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080d4:	2300      	movs	r3, #0
 80080d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080d8:	f7ff fb54 	bl	8007784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080dc:	4b57      	ldr	r3, [pc, #348]	; (800823c <pvPortMalloc+0x170>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080e4:	f000 f90c 	bl	8008300 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080e8:	4b55      	ldr	r3, [pc, #340]	; (8008240 <pvPortMalloc+0x174>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f040 808c 	bne.w	800820e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01c      	beq.n	8008136 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80080fc:	2208      	movs	r2, #8
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b00      	cmp	r3, #0
 800810c:	d013      	beq.n	8008136 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f023 0307 	bic.w	r3, r3, #7
 8008114:	3308      	adds	r3, #8
 8008116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <pvPortMalloc+0x6a>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e7fe      	b.n	8008134 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d068      	beq.n	800820e <pvPortMalloc+0x142>
 800813c:	4b41      	ldr	r3, [pc, #260]	; (8008244 <pvPortMalloc+0x178>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d863      	bhi.n	800820e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008146:	4b40      	ldr	r3, [pc, #256]	; (8008248 <pvPortMalloc+0x17c>)
 8008148:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800814a:	4b3f      	ldr	r3, [pc, #252]	; (8008248 <pvPortMalloc+0x17c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008150:	e004      	b.n	800815c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d903      	bls.n	800816e <pvPortMalloc+0xa2>
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1f1      	bne.n	8008152 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800816e:	4b33      	ldr	r3, [pc, #204]	; (800823c <pvPortMalloc+0x170>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008174:	429a      	cmp	r2, r3
 8008176:	d04a      	beq.n	800820e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2208      	movs	r2, #8
 800817e:	4413      	add	r3, r2
 8008180:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	2308      	movs	r3, #8
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	429a      	cmp	r2, r3
 8008198:	d91e      	bls.n	80081d8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800819a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4413      	add	r3, r2
 80081a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d009      	beq.n	80081c0 <pvPortMalloc+0xf4>
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	613b      	str	r3, [r7, #16]
 80081be:	e7fe      	b.n	80081be <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	1ad2      	subs	r2, r2, r3
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081d2:	69b8      	ldr	r0, [r7, #24]
 80081d4:	f000 f8f6 	bl	80083c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081d8:	4b1a      	ldr	r3, [pc, #104]	; (8008244 <pvPortMalloc+0x178>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	4a18      	ldr	r2, [pc, #96]	; (8008244 <pvPortMalloc+0x178>)
 80081e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081e6:	4b17      	ldr	r3, [pc, #92]	; (8008244 <pvPortMalloc+0x178>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b18      	ldr	r3, [pc, #96]	; (800824c <pvPortMalloc+0x180>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d203      	bcs.n	80081fa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081f2:	4b14      	ldr	r3, [pc, #80]	; (8008244 <pvPortMalloc+0x178>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <pvPortMalloc+0x180>)
 80081f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	4b10      	ldr	r3, [pc, #64]	; (8008240 <pvPortMalloc+0x174>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	431a      	orrs	r2, r3
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800820e:	f7ff fac7 	bl	80077a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f003 0307 	and.w	r3, r3, #7
 8008218:	2b00      	cmp	r3, #0
 800821a:	d009      	beq.n	8008230 <pvPortMalloc+0x164>
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	e7fe      	b.n	800822e <pvPortMalloc+0x162>
	return pvReturn;
 8008230:	69fb      	ldr	r3, [r7, #28]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3728      	adds	r7, #40	; 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000fcc 	.word	0x20000fcc
 8008240:	20000fd8 	.word	0x20000fd8
 8008244:	20000fd0 	.word	0x20000fd0
 8008248:	20000fc4 	.word	0x20000fc4
 800824c:	20000fd4 	.word	0x20000fd4

08008250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d046      	beq.n	80082f0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008262:	2308      	movs	r3, #8
 8008264:	425b      	negs	r3, r3
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	4413      	add	r3, r2
 800826a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	4b20      	ldr	r3, [pc, #128]	; (80082f8 <vPortFree+0xa8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4013      	ands	r3, r2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d109      	bne.n	8008292 <vPortFree+0x42>
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e7fe      	b.n	8008290 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d009      	beq.n	80082ae <vPortFree+0x5e>
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	60bb      	str	r3, [r7, #8]
 80082ac:	e7fe      	b.n	80082ac <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <vPortFree+0xa8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4013      	ands	r3, r2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d019      	beq.n	80082f0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d115      	bne.n	80082f0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <vPortFree+0xa8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	43db      	mvns	r3, r3
 80082ce:	401a      	ands	r2, r3
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082d4:	f7ff fa56 	bl	8007784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <vPortFree+0xac>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4413      	add	r3, r2
 80082e2:	4a06      	ldr	r2, [pc, #24]	; (80082fc <vPortFree+0xac>)
 80082e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082e6:	6938      	ldr	r0, [r7, #16]
 80082e8:	f000 f86c 	bl	80083c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082ec:	f7ff fa58 	bl	80077a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000fd8 	.word	0x20000fd8
 80082fc:	20000fd0 	.word	0x20000fd0

08008300 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008306:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800830a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800830c:	4b27      	ldr	r3, [pc, #156]	; (80083ac <prvHeapInit+0xac>)
 800830e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00c      	beq.n	8008334 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3307      	adds	r3, #7
 800831e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0307 	bic.w	r3, r3, #7
 8008326:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	4a1f      	ldr	r2, [pc, #124]	; (80083ac <prvHeapInit+0xac>)
 8008330:	4413      	add	r3, r2
 8008332:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008338:	4a1d      	ldr	r2, [pc, #116]	; (80083b0 <prvHeapInit+0xb0>)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800833e:	4b1c      	ldr	r3, [pc, #112]	; (80083b0 <prvHeapInit+0xb0>)
 8008340:	2200      	movs	r2, #0
 8008342:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4413      	add	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800834c:	2208      	movs	r2, #8
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1a9b      	subs	r3, r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0307 	bic.w	r3, r3, #7
 800835a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a15      	ldr	r2, [pc, #84]	; (80083b4 <prvHeapInit+0xb4>)
 8008360:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008362:	4b14      	ldr	r3, [pc, #80]	; (80083b4 <prvHeapInit+0xb4>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800836a:	4b12      	ldr	r3, [pc, #72]	; (80083b4 <prvHeapInit+0xb4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	1ad2      	subs	r2, r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008380:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <prvHeapInit+0xb4>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	4a0a      	ldr	r2, [pc, #40]	; (80083b8 <prvHeapInit+0xb8>)
 800838e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	4a09      	ldr	r2, [pc, #36]	; (80083bc <prvHeapInit+0xbc>)
 8008396:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008398:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <prvHeapInit+0xc0>)
 800839a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800839e:	601a      	str	r2, [r3, #0]
}
 80083a0:	bf00      	nop
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	200003c4 	.word	0x200003c4
 80083b0:	20000fc4 	.word	0x20000fc4
 80083b4:	20000fcc 	.word	0x20000fcc
 80083b8:	20000fd4 	.word	0x20000fd4
 80083bc:	20000fd0 	.word	0x20000fd0
 80083c0:	20000fd8 	.word	0x20000fd8

080083c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083cc:	4b27      	ldr	r3, [pc, #156]	; (800846c <prvInsertBlockIntoFreeList+0xa8>)
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	e002      	b.n	80083d8 <prvInsertBlockIntoFreeList+0x14>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d8f7      	bhi.n	80083d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	4413      	add	r3, r2
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d108      	bne.n	8008406 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	441a      	add	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	441a      	add	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d118      	bne.n	800844c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	4b14      	ldr	r3, [pc, #80]	; (8008470 <prvInsertBlockIntoFreeList+0xac>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d00d      	beq.n	8008442 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	441a      	add	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e008      	b.n	8008454 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008442:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <prvInsertBlockIntoFreeList+0xac>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	e003      	b.n	8008454 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	429a      	cmp	r2, r3
 800845a:	d002      	beq.n	8008462 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008462:	bf00      	nop
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr
 800846c:	20000fc4 	.word	0x20000fc4
 8008470:	20000fcc 	.word	0x20000fcc

08008474 <__libc_init_array>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	2500      	movs	r5, #0
 8008478:	4e0c      	ldr	r6, [pc, #48]	; (80084ac <__libc_init_array+0x38>)
 800847a:	4c0d      	ldr	r4, [pc, #52]	; (80084b0 <__libc_init_array+0x3c>)
 800847c:	1ba4      	subs	r4, r4, r6
 800847e:	10a4      	asrs	r4, r4, #2
 8008480:	42a5      	cmp	r5, r4
 8008482:	d109      	bne.n	8008498 <__libc_init_array+0x24>
 8008484:	f000 f822 	bl	80084cc <_init>
 8008488:	2500      	movs	r5, #0
 800848a:	4e0a      	ldr	r6, [pc, #40]	; (80084b4 <__libc_init_array+0x40>)
 800848c:	4c0a      	ldr	r4, [pc, #40]	; (80084b8 <__libc_init_array+0x44>)
 800848e:	1ba4      	subs	r4, r4, r6
 8008490:	10a4      	asrs	r4, r4, #2
 8008492:	42a5      	cmp	r5, r4
 8008494:	d105      	bne.n	80084a2 <__libc_init_array+0x2e>
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800849c:	4798      	blx	r3
 800849e:	3501      	adds	r5, #1
 80084a0:	e7ee      	b.n	8008480 <__libc_init_array+0xc>
 80084a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084a6:	4798      	blx	r3
 80084a8:	3501      	adds	r5, #1
 80084aa:	e7f2      	b.n	8008492 <__libc_init_array+0x1e>
 80084ac:	08008590 	.word	0x08008590
 80084b0:	08008590 	.word	0x08008590
 80084b4:	08008590 	.word	0x08008590
 80084b8:	08008594 	.word	0x08008594

080084bc <memset>:
 80084bc:	4603      	mov	r3, r0
 80084be:	4402      	add	r2, r0
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d100      	bne.n	80084c6 <memset+0xa>
 80084c4:	4770      	bx	lr
 80084c6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ca:	e7f9      	b.n	80084c0 <memset+0x4>

080084cc <_init>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr

080084d8 <_fini>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr

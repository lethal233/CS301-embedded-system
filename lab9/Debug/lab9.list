
lab9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b33c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a68  0800b528  0800b528  0001b528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf90  0800cf90  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cf90  0800cf90  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cf90  0800cf90  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf90  0800cf90  0001cf90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf94  0800cf94  0001cf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cf98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  200001e0  0800d178  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  0800d178  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009743  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c22  00000000  00000000  0002994c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  0002b570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e0  00000000  00000000  0002be20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019910  00000000  00000000  0002c600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f81  00000000  00000000  00045f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096746  00000000  00000000  0004ee91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e55d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c94  00000000  00000000  000e5654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b50c 	.word	0x0800b50c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800b50c 	.word	0x0800b50c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <LCD_WR_REG+0x40>)
 8000c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c50:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <LCD_WR_REG+0x40>)
 8000c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c58:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <LCD_WR_REG+0x44>)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <LCD_WR_REG+0x40>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <LCD_WR_REG+0x40>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <LCD_WR_REG+0x40>)
 8000c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c72:	611a      	str	r2, [r3, #16]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40011000 	.word	0x40011000
 8000c84:	40010c00 	.word	0x40010c00

08000c88 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <LCD_WR_DATAX+0x40>)
 8000c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c98:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <LCD_WR_DATAX+0x40>)
 8000c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca0:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <LCD_WR_DATAX+0x44>)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <LCD_WR_DATAX+0x40>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <LCD_WR_DATAX+0x40>)
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <LCD_WR_DATAX+0x40>)
 8000cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cba:	611a      	str	r2, [r3, #16]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <LCD_RD_DATA+0x7c>)
 8000cd8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000cdc:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <LCD_RD_DATA+0x7c>)
 8000ce0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ce4:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <LCD_RD_DATA+0x7c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <LCD_RD_DATA+0x80>)
 8000cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf2:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <LCD_RD_DATA+0x80>)
 8000cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfa:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <LCD_RD_DATA+0x80>)
 8000cfe:	2240      	movs	r2, #64	; 0x40
 8000d00:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <LCD_RD_DATA+0x84>)
 8000d04:	889b      	ldrh	r3, [r3, #4]
 8000d06:	f648 1289 	movw	r2, #35209	; 0x8989
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d102      	bne.n	8000d14 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f006 f9d8 	bl	80070c4 <HAL_Delay>
	t = DATAIN
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <LCD_RD_DATA+0x7c>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <LCD_RD_DATA+0x80>)
 8000d1c:	2240      	movs	r2, #64	; 0x40
 8000d1e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <LCD_RD_DATA+0x80>)
 8000d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d26:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <LCD_RD_DATA+0x7c>)
 8000d2a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000d2e:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <LCD_RD_DATA+0x7c>)
 8000d32:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000d36:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <LCD_RD_DATA+0x7c>)
 8000d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d3e:	60da      	str	r2, [r3, #12]
	return t;
 8000d40:	88fb      	ldrh	r3, [r7, #6]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	40011000 	.word	0x40011000
 8000d54:	20000714 	.word	0x20000714

08000d58 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	80fb      	strh	r3, [r7, #6]
 8000d64:	4613      	mov	r3, r2
 8000d66:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff68 	bl	8000c40 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <LCD_WriteReg+0x4c>)
 8000d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <LCD_WriteReg+0x4c>)
 8000d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7e:	615a      	str	r2, [r3, #20]
 8000d80:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <LCD_WriteReg+0x50>)
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	60d3      	str	r3, [r2, #12]
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <LCD_WriteReg+0x4c>)
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <LCD_WriteReg+0x4c>)
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	611a      	str	r2, [r3, #16]
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <LCD_WriteReg+0x4c>)
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	611a      	str	r2, [r3, #16]
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40011000 	.word	0x40011000
 8000da8:	40010c00 	.word	0x40010c00

08000dac <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff41 	bl	8000c40 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000dbe:	f7ff ff87 	bl	8000cd0 <LCD_RD_DATA>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <LCD_WriteRAM_Prepare+0x14>)
 8000dd2:	891b      	ldrh	r3, [r3, #8]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff33 	bl	8000c40 <LCD_WR_REG>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000714 	.word	0x20000714

08000de4 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	80fb      	strh	r3, [r7, #6]
 8000df0:	4613      	mov	r3, r2
 8000df2:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000df4:	4b73      	ldr	r3, [pc, #460]	; (8000fc4 <LCD_SetCursor+0x1e0>)
 8000df6:	889b      	ldrh	r3, [r3, #4]
 8000df8:	f249 3241 	movw	r2, #37697	; 0x9341
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d005      	beq.n	8000e0c <LCD_SetCursor+0x28>
 8000e00:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <LCD_SetCursor+0x1e0>)
 8000e02:	889b      	ldrh	r3, [r3, #4]
 8000e04:	f245 3210 	movw	r2, #21264	; 0x5310
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d164      	bne.n	8000ed6 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000e0c:	4b6d      	ldr	r3, [pc, #436]	; (8000fc4 <LCD_SetCursor+0x1e0>)
 8000e0e:	895b      	ldrh	r3, [r3, #10]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff15 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e16:	4b6c      	ldr	r3, [pc, #432]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e1c:	611a      	str	r2, [r3, #16]
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b67      	ldr	r3, [pc, #412]	; (8000fcc <LCD_SetCursor+0x1e8>)
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	611a      	str	r2, [r3, #16]
 8000e3c:	4b62      	ldr	r3, [pc, #392]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000e44:	4b60      	ldr	r3, [pc, #384]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e52:	615a      	str	r2, [r3, #20]
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4a5d      	ldr	r2, [pc, #372]	; (8000fcc <LCD_SetCursor+0x1e8>)
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	60d3      	str	r3, [r2, #12]
 8000e5c:	4b5a      	ldr	r3, [pc, #360]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e70:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <LCD_SetCursor+0x1e0>)
 8000e72:	899b      	ldrh	r3, [r3, #12]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fee3 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <LCD_SetCursor+0x1e8>)
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	615a      	str	r2, [r3, #20]
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ea8:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	611a      	str	r2, [r3, #16]
 8000eb0:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	4a44      	ldr	r2, [pc, #272]	; (8000fcc <LCD_SetCursor+0x1e8>)
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	60d3      	str	r3, [r2, #12]
 8000ec0:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	4b40      	ldr	r3, [pc, #256]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	4b3e      	ldr	r3, [pc, #248]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed2:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000ed4:	e248      	b.n	8001368 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000ed6:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <LCD_SetCursor+0x1e0>)
 8000ed8:	889b      	ldrh	r3, [r3, #4]
 8000eda:	f646 0204 	movw	r2, #26628	; 0x6804
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d176      	bne.n	8000fd0 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <LCD_SetCursor+0x1e0>)
 8000ee4:	799b      	ldrb	r3, [r3, #6]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d106      	bne.n	8000ef8 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000eea:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <LCD_SetCursor+0x1e0>)
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <LCD_SetCursor+0x1e0>)
 8000efa:	895b      	ldrh	r3, [r3, #10]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fe9f 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <LCD_SetCursor+0x1e8>)
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	615a      	str	r2, [r3, #20]
 8000f22:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f36:	611a      	str	r2, [r3, #16]
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3e:	615a      	str	r2, [r3, #20]
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <LCD_SetCursor+0x1e8>)
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	60d3      	str	r3, [r2, #12]
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <LCD_SetCursor+0x1e0>)
 8000f5e:	899b      	ldrh	r3, [r3, #12]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fe6d 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <LCD_SetCursor+0x1e8>)
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	615a      	str	r2, [r3, #20]
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f92:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <LCD_SetCursor+0x1e8>)
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	60d3      	str	r3, [r2, #12]
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <LCD_SetCursor+0x1e4>)
 8000fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbe:	611a      	str	r2, [r3, #16]
}
 8000fc0:	e1d2      	b.n	8001368 <LCD_SetCursor+0x584>
 8000fc2:	bf00      	nop
 8000fc4:	20000714 	.word	0x20000714
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000fd0:	4b99      	ldr	r3, [pc, #612]	; (8001238 <LCD_SetCursor+0x454>)
 8000fd2:	889b      	ldrh	r3, [r3, #4]
 8000fd4:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	f040 8133 	bne.w	8001244 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000fde:	4b96      	ldr	r3, [pc, #600]	; (8001238 <LCD_SetCursor+0x454>)
 8000fe0:	799b      	ldrb	r3, [r3, #6]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d163      	bne.n	80010ae <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000fe6:	4b94      	ldr	r3, [pc, #592]	; (8001238 <LCD_SetCursor+0x454>)
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000ff4:	4b90      	ldr	r3, [pc, #576]	; (8001238 <LCD_SetCursor+0x454>)
 8000ff6:	895b      	ldrh	r3, [r3, #10]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe21 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000ffe:	4b8f      	ldr	r3, [pc, #572]	; (800123c <LCD_SetCursor+0x458>)
 8001000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	4b8d      	ldr	r3, [pc, #564]	; (800123c <LCD_SetCursor+0x458>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	4b8c      	ldr	r3, [pc, #560]	; (8001240 <LCD_SetCursor+0x45c>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	4b89      	ldr	r3, [pc, #548]	; (800123c <LCD_SetCursor+0x458>)
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	4b88      	ldr	r3, [pc, #544]	; (800123c <LCD_SetCursor+0x458>)
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	4b86      	ldr	r3, [pc, #536]	; (800123c <LCD_SetCursor+0x458>)
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001028:	4b84      	ldr	r3, [pc, #528]	; (800123c <LCD_SetCursor+0x458>)
 800102a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	4b82      	ldr	r3, [pc, #520]	; (800123c <LCD_SetCursor+0x458>)
 8001032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	4b81      	ldr	r3, [pc, #516]	; (8001240 <LCD_SetCursor+0x45c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	4b7f      	ldr	r3, [pc, #508]	; (800123c <LCD_SetCursor+0x458>)
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	4b7d      	ldr	r3, [pc, #500]	; (800123c <LCD_SetCursor+0x458>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	4b7c      	ldr	r3, [pc, #496]	; (800123c <LCD_SetCursor+0x458>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8001052:	4b7a      	ldr	r3, [pc, #488]	; (800123c <LCD_SetCursor+0x458>)
 8001054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	4b78      	ldr	r3, [pc, #480]	; (800123c <LCD_SetCursor+0x458>)
 800105c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b75      	ldr	r3, [pc, #468]	; (8001240 <LCD_SetCursor+0x45c>)
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	4b73      	ldr	r3, [pc, #460]	; (800123c <LCD_SetCursor+0x458>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	4b72      	ldr	r3, [pc, #456]	; (800123c <LCD_SetCursor+0x458>)
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	4b70      	ldr	r3, [pc, #448]	; (800123c <LCD_SetCursor+0x458>)
 800107a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001080:	4b6e      	ldr	r3, [pc, #440]	; (800123c <LCD_SetCursor+0x458>)
 8001082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	4b6c      	ldr	r3, [pc, #432]	; (800123c <LCD_SetCursor+0x458>)
 800108a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4a6b      	ldr	r2, [pc, #428]	; (8001240 <LCD_SetCursor+0x45c>)
 8001094:	b2db      	uxtb	r3, r3
 8001096:	60d3      	str	r3, [r2, #12]
 8001098:	4b68      	ldr	r3, [pc, #416]	; (800123c <LCD_SetCursor+0x458>)
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	4b67      	ldr	r3, [pc, #412]	; (800123c <LCD_SetCursor+0x458>)
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	4b65      	ldr	r3, [pc, #404]	; (800123c <LCD_SetCursor+0x458>)
 80010a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	e061      	b.n	8001172 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 80010ae:	4b62      	ldr	r3, [pc, #392]	; (8001238 <LCD_SetCursor+0x454>)
 80010b0:	895b      	ldrh	r3, [r3, #10]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fdc4 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 80010b8:	4b60      	ldr	r3, [pc, #384]	; (800123c <LCD_SetCursor+0x458>)
 80010ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	4b5e      	ldr	r3, [pc, #376]	; (800123c <LCD_SetCursor+0x458>)
 80010c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <LCD_SetCursor+0x45c>)
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	4b5a      	ldr	r3, [pc, #360]	; (800123c <LCD_SetCursor+0x458>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	4b58      	ldr	r3, [pc, #352]	; (800123c <LCD_SetCursor+0x458>)
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <LCD_SetCursor+0x458>)
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80010e6:	4b55      	ldr	r3, [pc, #340]	; (800123c <LCD_SetCursor+0x458>)
 80010e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ec:	611a      	str	r2, [r3, #16]
 80010ee:	4b53      	ldr	r3, [pc, #332]	; (800123c <LCD_SetCursor+0x458>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4a51      	ldr	r2, [pc, #324]	; (8001240 <LCD_SetCursor+0x45c>)
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	60d3      	str	r3, [r2, #12]
 80010fe:	4b4f      	ldr	r3, [pc, #316]	; (800123c <LCD_SetCursor+0x458>)
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	615a      	str	r2, [r3, #20]
 8001104:	4b4d      	ldr	r3, [pc, #308]	; (800123c <LCD_SetCursor+0x458>)
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	4b4c      	ldr	r3, [pc, #304]	; (800123c <LCD_SetCursor+0x458>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001112:	4b4a      	ldr	r3, [pc, #296]	; (800123c <LCD_SetCursor+0x458>)
 8001114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	4b48      	ldr	r3, [pc, #288]	; (800123c <LCD_SetCursor+0x458>)
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	4b45      	ldr	r3, [pc, #276]	; (8001238 <LCD_SetCursor+0x454>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	3b01      	subs	r3, #1
 8001128:	121a      	asrs	r2, r3, #8
 800112a:	4b45      	ldr	r3, [pc, #276]	; (8001240 <LCD_SetCursor+0x45c>)
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	4b43      	ldr	r3, [pc, #268]	; (800123c <LCD_SetCursor+0x458>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	4b41      	ldr	r3, [pc, #260]	; (800123c <LCD_SetCursor+0x458>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	4b40      	ldr	r3, [pc, #256]	; (800123c <LCD_SetCursor+0x458>)
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001142:	4b3e      	ldr	r3, [pc, #248]	; (800123c <LCD_SetCursor+0x458>)
 8001144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	4b3c      	ldr	r3, [pc, #240]	; (800123c <LCD_SetCursor+0x458>)
 800114c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001150:	615a      	str	r2, [r3, #20]
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <LCD_SetCursor+0x454>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a39      	ldr	r2, [pc, #228]	; (8001240 <LCD_SetCursor+0x45c>)
 800115a:	b2db      	uxtb	r3, r3
 800115c:	60d3      	str	r3, [r2, #12]
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <LCD_SetCursor+0x458>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <LCD_SetCursor+0x458>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <LCD_SetCursor+0x458>)
 800116c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001170:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001172:	4b31      	ldr	r3, [pc, #196]	; (8001238 <LCD_SetCursor+0x454>)
 8001174:	899b      	ldrh	r3, [r3, #12]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fd62 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <LCD_SetCursor+0x458>)
 800117e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <LCD_SetCursor+0x458>)
 8001186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <LCD_SetCursor+0x45c>)
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <LCD_SetCursor+0x458>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	615a      	str	r2, [r3, #20]
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <LCD_SetCursor+0x458>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <LCD_SetCursor+0x458>)
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <LCD_SetCursor+0x458>)
 80011ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <LCD_SetCursor+0x458>)
 80011b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <LCD_SetCursor+0x45c>)
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	60d3      	str	r3, [r2, #12]
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <LCD_SetCursor+0x458>)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <LCD_SetCursor+0x458>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <LCD_SetCursor+0x458>)
 80011d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <LCD_SetCursor+0x458>)
 80011d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <LCD_SetCursor+0x458>)
 80011e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <LCD_SetCursor+0x454>)
 80011e8:	885b      	ldrh	r3, [r3, #2]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	121a      	asrs	r2, r3, #8
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <LCD_SetCursor+0x45c>)
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <LCD_SetCursor+0x458>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <LCD_SetCursor+0x458>)
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <LCD_SetCursor+0x458>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <LCD_SetCursor+0x458>)
 8001208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <LCD_SetCursor+0x458>)
 8001210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <LCD_SetCursor+0x454>)
 8001218:	885b      	ldrh	r3, [r3, #2]
 800121a:	3b01      	subs	r3, #1
 800121c:	4a08      	ldr	r2, [pc, #32]	; (8001240 <LCD_SetCursor+0x45c>)
 800121e:	b2db      	uxtb	r3, r3
 8001220:	60d3      	str	r3, [r2, #12]
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <LCD_SetCursor+0x458>)
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <LCD_SetCursor+0x458>)
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	4b03      	ldr	r3, [pc, #12]	; (800123c <LCD_SetCursor+0x458>)
 8001230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001234:	611a      	str	r2, [r3, #16]
}
 8001236:	e097      	b.n	8001368 <LCD_SetCursor+0x584>
 8001238:	20000714 	.word	0x20000714
 800123c:	40011000 	.word	0x40011000
 8001240:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001244:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <LCD_SetCursor+0x58c>)
 8001246:	889b      	ldrh	r3, [r3, #4]
 8001248:	f245 5210 	movw	r2, #21776	; 0x5510
 800124c:	4293      	cmp	r3, r2
 800124e:	d172      	bne.n	8001336 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <LCD_SetCursor+0x58c>)
 8001252:	895b      	ldrh	r3, [r3, #10]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fcf3 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800125a:	4b46      	ldr	r3, [pc, #280]	; (8001374 <LCD_SetCursor+0x590>)
 800125c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	4b44      	ldr	r3, [pc, #272]	; (8001374 <LCD_SetCursor+0x590>)
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b41      	ldr	r3, [pc, #260]	; (8001378 <LCD_SetCursor+0x594>)
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <LCD_SetCursor+0x590>)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <LCD_SetCursor+0x590>)
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <LCD_SetCursor+0x590>)
 8001282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001286:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <LCD_SetCursor+0x58c>)
 800128a:	895b      	ldrh	r3, [r3, #10]
 800128c:	3301      	adds	r3, #1
 800128e:	b29b      	uxth	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fcd5 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8001296:	4b37      	ldr	r3, [pc, #220]	; (8001374 <LCD_SetCursor+0x590>)
 8001298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <LCD_SetCursor+0x590>)
 80012a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4a33      	ldr	r2, [pc, #204]	; (8001378 <LCD_SetCursor+0x594>)
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	60d3      	str	r3, [r2, #12]
 80012ae:	4b31      	ldr	r3, [pc, #196]	; (8001374 <LCD_SetCursor+0x590>)
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <LCD_SetCursor+0x590>)
 80012b6:	2280      	movs	r2, #128	; 0x80
 80012b8:	611a      	str	r2, [r3, #16]
 80012ba:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <LCD_SetCursor+0x590>)
 80012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <LCD_SetCursor+0x58c>)
 80012c4:	899b      	ldrh	r3, [r3, #12]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fcba 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <LCD_SetCursor+0x590>)
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <LCD_SetCursor+0x590>)
 80012d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <LCD_SetCursor+0x594>)
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <LCD_SetCursor+0x590>)
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <LCD_SetCursor+0x590>)
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <LCD_SetCursor+0x590>)
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <LCD_SetCursor+0x58c>)
 80012fc:	899b      	ldrh	r3, [r3, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	b29b      	uxth	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fc9c 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <LCD_SetCursor+0x590>)
 800130a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <LCD_SetCursor+0x590>)
 8001312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <LCD_SetCursor+0x594>)
 800131c:	b2db      	uxtb	r3, r3
 800131e:	60d3      	str	r3, [r2, #12]
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <LCD_SetCursor+0x590>)
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <LCD_SetCursor+0x590>)
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <LCD_SetCursor+0x590>)
 800132e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001332:	611a      	str	r2, [r3, #16]
}
 8001334:	e018      	b.n	8001368 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <LCD_SetCursor+0x58c>)
 8001338:	799b      	ldrb	r3, [r3, #6]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <LCD_SetCursor+0x58c>)
 8001340:	881a      	ldrh	r2, [r3, #0]
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	3b01      	subs	r3, #1
 800134a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <LCD_SetCursor+0x58c>)
 800134e:	895b      	ldrh	r3, [r3, #10]
 8001350:	88fa      	ldrh	r2, [r7, #6]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fcff 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <LCD_SetCursor+0x58c>)
 800135c:	899b      	ldrh	r3, [r3, #12]
 800135e:	88ba      	ldrh	r2, [r7, #4]
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fcf8 	bl	8000d58 <LCD_WriteReg>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000714 	.word	0x20000714
 8001374:	40011000 	.word	0x40011000
 8001378:	40010c00 	.word	0x40010c00

0800137c <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001390:	799b      	ldrb	r3, [r3, #6]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d10b      	bne.n	80013ae <LCD_Scan_Dir+0x32>
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001398:	889b      	ldrh	r3, [r3, #4]
 800139a:	f646 0204 	movw	r2, #26628	; 0x6804
 800139e:	4293      	cmp	r3, r2
 80013a0:	d005      	beq.n	80013ae <LCD_Scan_Dir+0x32>
 80013a2:	4b73      	ldr	r3, [pc, #460]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 80013a4:	889b      	ldrh	r3, [r3, #4]
 80013a6:	f641 1263 	movw	r2, #6499	; 0x1963
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d109      	bne.n	80013c2 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80013ae:	4b70      	ldr	r3, [pc, #448]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 80013b0:	799b      	ldrb	r3, [r3, #6]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d134      	bne.n	8001420 <LCD_Scan_Dir+0xa4>
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 80013b8:	889b      	ldrh	r3, [r3, #4]
 80013ba:	f641 1263 	movw	r2, #6499	; 0x1963
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12e      	bne.n	8001420 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	d82b      	bhi.n	8001420 <LCD_Scan_Dir+0xa4>
 80013c8:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <LCD_Scan_Dir+0x54>)
 80013ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ce:	bf00      	nop
 80013d0:	080013f1 	.word	0x080013f1
 80013d4:	080013f7 	.word	0x080013f7
 80013d8:	080013fd 	.word	0x080013fd
 80013dc:	08001403 	.word	0x08001403
 80013e0:	08001409 	.word	0x08001409
 80013e4:	0800140f 	.word	0x0800140f
 80013e8:	08001415 	.word	0x08001415
 80013ec:	0800141b 	.word	0x0800141b
		{
		case 0:
			dir = 6;
 80013f0:	2306      	movs	r3, #6
 80013f2:	71fb      	strb	r3, [r7, #7]
			break;
 80013f4:	e014      	b.n	8001420 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80013f6:	2307      	movs	r3, #7
 80013f8:	71fb      	strb	r3, [r7, #7]
			break;
 80013fa:	e011      	b.n	8001420 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80013fc:	2304      	movs	r3, #4
 80013fe:	71fb      	strb	r3, [r7, #7]
			break;
 8001400:	e00e      	b.n	8001420 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8001402:	2305      	movs	r3, #5
 8001404:	71fb      	strb	r3, [r7, #7]
			break;
 8001406:	e00b      	b.n	8001420 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	71fb      	strb	r3, [r7, #7]
			break;
 800140c:	e008      	b.n	8001420 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
			break;
 8001412:	e005      	b.n	8001420 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001414:	2303      	movs	r3, #3
 8001416:	71fb      	strb	r3, [r7, #7]
			break;
 8001418:	e002      	b.n	8001420 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	71fb      	strb	r3, [r7, #7]
			break;
 800141e:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001420:	4b53      	ldr	r3, [pc, #332]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001422:	889b      	ldrh	r3, [r3, #4]
 8001424:	f249 3241 	movw	r2, #37697	; 0x9341
 8001428:	4293      	cmp	r3, r2
 800142a:	d018      	beq.n	800145e <LCD_Scan_Dir+0xe2>
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 800142e:	889b      	ldrh	r3, [r3, #4]
 8001430:	f646 0204 	movw	r2, #26628	; 0x6804
 8001434:	4293      	cmp	r3, r2
 8001436:	d012      	beq.n	800145e <LCD_Scan_Dir+0xe2>
 8001438:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001440:	4293      	cmp	r3, r2
 8001442:	d00c      	beq.n	800145e <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001444:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001446:	889b      	ldrh	r3, [r3, #4]
 8001448:	f245 5210 	movw	r2, #21776	; 0x5510
 800144c:	4293      	cmp	r3, r2
 800144e:	d006      	beq.n	800145e <LCD_Scan_Dir+0xe2>
 8001450:	4b47      	ldr	r3, [pc, #284]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001452:	889b      	ldrh	r3, [r3, #4]
 8001454:	f641 1263 	movw	r2, #6499	; 0x1963
 8001458:	4293      	cmp	r3, r2
 800145a:	f040 8250 	bne.w	80018fe <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b07      	cmp	r3, #7
 8001462:	d836      	bhi.n	80014d2 <LCD_Scan_Dir+0x156>
 8001464:	a201      	add	r2, pc, #4	; (adr r2, 800146c <LCD_Scan_Dir+0xf0>)
 8001466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	080014d3 	.word	0x080014d3
 8001470:	0800148d 	.word	0x0800148d
 8001474:	08001497 	.word	0x08001497
 8001478:	080014a1 	.word	0x080014a1
 800147c:	080014ab 	.word	0x080014ab
 8001480:	080014b5 	.word	0x080014b5
 8001484:	080014bf 	.word	0x080014bf
 8001488:	080014c9 	.word	0x080014c9
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001492:	81fb      	strh	r3, [r7, #14]
			break;
 8001494:	e01d      	b.n	80014d2 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800149c:	81fb      	strh	r3, [r7, #14]
			break;
 800149e:	e018      	b.n	80014d2 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80014a6:	81fb      	strh	r3, [r7, #14]
			break;
 80014a8:	e013      	b.n	80014d2 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	f043 0320 	orr.w	r3, r3, #32
 80014b0:	81fb      	strh	r3, [r7, #14]
			break;
 80014b2:	e00e      	b.n	80014d2 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ba:	81fb      	strh	r3, [r7, #14]
			break;
 80014bc:	e009      	b.n	80014d2 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80014c4:	81fb      	strh	r3, [r7, #14]
			break;
 80014c6:	e004      	b.n	80014d2 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80014ce:	81fb      	strh	r3, [r7, #14]
			break;
 80014d0:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 80014d4:	889b      	ldrh	r3, [r3, #4]
 80014d6:	f245 5210 	movw	r2, #21776	; 0x5510
 80014da:	4293      	cmp	r3, r2
 80014dc:	d103      	bne.n	80014e6 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80014de:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80014e2:	81bb      	strh	r3, [r7, #12]
 80014e4:	e001      	b.n	80014ea <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80014e6:	2336      	movs	r3, #54	; 0x36
 80014e8:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 80014ec:	889b      	ldrh	r3, [r3, #4]
 80014ee:	f245 3210 	movw	r2, #21264	; 0x5310
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00f      	beq.n	8001516 <LCD_Scan_Dir+0x19a>
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 80014f8:	889b      	ldrh	r3, [r3, #4]
 80014fa:	f245 5210 	movw	r2, #21776	; 0x5510
 80014fe:	4293      	cmp	r3, r2
 8001500:	d009      	beq.n	8001516 <LCD_Scan_Dir+0x19a>
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001504:	889b      	ldrh	r3, [r3, #4]
 8001506:	f641 1263 	movw	r2, #6499	; 0x1963
 800150a:	4293      	cmp	r3, r2
 800150c:	d003      	beq.n	8001516 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001518:	889b      	ldrh	r3, [r3, #4]
 800151a:	f646 0204 	movw	r2, #26628	; 0x6804
 800151e:	4293      	cmp	r3, r2
 8001520:	d103      	bne.n	800152a <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800152a:	89fa      	ldrh	r2, [r7, #14]
 800152c:	89bb      	ldrh	r3, [r7, #12]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fc11 	bl	8000d58 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001538:	889b      	ldrh	r3, [r3, #4]
 800153a:	f641 1263 	movw	r2, #6499	; 0x1963
 800153e:	4293      	cmp	r3, r2
 8001540:	d028      	beq.n	8001594 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001552:	885b      	ldrh	r3, [r3, #2]
 8001554:	429a      	cmp	r2, r3
 8001556:	d21d      	bcs.n	8001594 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001560:	885a      	ldrh	r2, [r3, #2]
 8001562:	4b03      	ldr	r3, [pc, #12]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001564:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001566:	4a02      	ldr	r2, [pc, #8]	; (8001570 <LCD_Scan_Dir+0x1f4>)
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	8053      	strh	r3, [r2, #2]
 800156c:	e012      	b.n	8001594 <LCD_Scan_Dir+0x218>
 800156e:	bf00      	nop
 8001570:	20000714 	.word	0x20000714
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001574:	4b7f      	ldr	r3, [pc, #508]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 8001576:	881a      	ldrh	r2, [r3, #0]
 8001578:	4b7e      	ldr	r3, [pc, #504]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 800157a:	885b      	ldrh	r3, [r3, #2]
 800157c:	429a      	cmp	r2, r3
 800157e:	d909      	bls.n	8001594 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001580:	4b7c      	ldr	r3, [pc, #496]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001586:	4b7b      	ldr	r3, [pc, #492]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 8001588:	885a      	ldrh	r2, [r3, #2]
 800158a:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 800158c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800158e:	4a79      	ldr	r2, [pc, #484]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 8001590:	897b      	ldrh	r3, [r7, #10]
 8001592:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001594:	4b77      	ldr	r3, [pc, #476]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 8001596:	889b      	ldrh	r3, [r3, #4]
 8001598:	f245 5210 	movw	r2, #21776	; 0x5510
 800159c:	4293      	cmp	r3, r2
 800159e:	f040 80ef 	bne.w	8001780 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80015a2:	4b74      	ldr	r3, [pc, #464]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 80015a4:	895b      	ldrh	r3, [r3, #10]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb4a 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015ac:	4b72      	ldr	r3, [pc, #456]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80015ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	4b70      	ldr	r3, [pc, #448]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	4b6f      	ldr	r3, [pc, #444]	; (800177c <LCD_Scan_Dir+0x400>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	615a      	str	r2, [r3, #20]
 80015c8:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80015d6:	4b67      	ldr	r3, [pc, #412]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 80015d8:	895b      	ldrh	r3, [r3, #10]
 80015da:	3301      	adds	r3, #1
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fb2e 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015e4:	4b64      	ldr	r3, [pc, #400]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80015e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	4b62      	ldr	r3, [pc, #392]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80015ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	4b61      	ldr	r3, [pc, #388]	; (800177c <LCD_Scan_Dir+0x400>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	4b5f      	ldr	r3, [pc, #380]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	615a      	str	r2, [r3, #20]
 8001600:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800160e:	4b59      	ldr	r3, [pc, #356]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 8001610:	895b      	ldrh	r3, [r3, #10]
 8001612:	3302      	adds	r3, #2
 8001614:	b29b      	uxth	r3, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb12 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800161c:	4b56      	ldr	r3, [pc, #344]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	4b54      	ldr	r3, [pc, #336]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	4b51      	ldr	r3, [pc, #324]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	3b01      	subs	r3, #1
 8001632:	121a      	asrs	r2, r3, #8
 8001634:	4b51      	ldr	r3, [pc, #324]	; (800177c <LCD_Scan_Dir+0x400>)
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	4b4f      	ldr	r3, [pc, #316]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	611a      	str	r2, [r3, #16]
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 800164c:	4b49      	ldr	r3, [pc, #292]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 800164e:	895b      	ldrh	r3, [r3, #10]
 8001650:	3303      	adds	r3, #3
 8001652:	b29b      	uxth	r3, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff faf3 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 800165c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	4b45      	ldr	r3, [pc, #276]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a42      	ldr	r2, [pc, #264]	; (800177c <LCD_Scan_Dir+0x400>)
 8001672:	b2db      	uxtb	r3, r3
 8001674:	60d3      	str	r3, [r2, #12]
 8001676:	4b40      	ldr	r3, [pc, #256]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	611a      	str	r2, [r3, #16]
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800168a:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 800168c:	899b      	ldrh	r3, [r3, #12]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fad6 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 800169e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <LCD_Scan_Dir+0x400>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80016b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016bc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 80016c0:	899b      	ldrh	r3, [r3, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff faba 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80016ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80016d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <LCD_Scan_Dir+0x400>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	615a      	str	r2, [r3, #20]
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 80016f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 80016f8:	899b      	ldrh	r3, [r3, #12]
 80016fa:	3302      	adds	r3, #2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fa9e 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 800170e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 8001716:	885b      	ldrh	r3, [r3, #2]
 8001718:	3b01      	subs	r3, #1
 800171a:	121a      	asrs	r2, r3, #8
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <LCD_Scan_Dir+0x400>)
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	615a      	str	r2, [r3, #20]
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 800172e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001732:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 8001736:	899b      	ldrh	r3, [r3, #12]
 8001738:	3303      	adds	r3, #3
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fa7f 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 800174c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <LCD_Scan_Dir+0x3f8>)
 8001754:	885b      	ldrh	r3, [r3, #2]
 8001756:	3b01      	subs	r3, #1
 8001758:	4a08      	ldr	r2, [pc, #32]	; (800177c <LCD_Scan_Dir+0x400>)
 800175a:	b2db      	uxtb	r3, r3
 800175c:	60d3      	str	r3, [r2, #12]
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	4b03      	ldr	r3, [pc, #12]	; (8001778 <LCD_Scan_Dir+0x3fc>)
 800176c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001770:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001772:	e10a      	b.n	800198a <LCD_Scan_Dir+0x60e>
 8001774:	20000714 	.word	0x20000714
 8001778:	40011000 	.word	0x40011000
 800177c:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001780:	4b84      	ldr	r3, [pc, #528]	; (8001994 <LCD_Scan_Dir+0x618>)
 8001782:	895b      	ldrh	r3, [r3, #10]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fa5b 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800178a:	4b83      	ldr	r3, [pc, #524]	; (8001998 <LCD_Scan_Dir+0x61c>)
 800178c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	4b81      	ldr	r3, [pc, #516]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	4b80      	ldr	r3, [pc, #512]	; (800199c <LCD_Scan_Dir+0x620>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	4b7d      	ldr	r3, [pc, #500]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	4b7c      	ldr	r3, [pc, #496]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	4b7a      	ldr	r3, [pc, #488]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80017b4:	4b78      	ldr	r3, [pc, #480]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	4b76      	ldr	r3, [pc, #472]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	4b75      	ldr	r3, [pc, #468]	; (800199c <LCD_Scan_Dir+0x620>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	4b73      	ldr	r3, [pc, #460]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	4b71      	ldr	r3, [pc, #452]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	611a      	str	r2, [r3, #16]
 80017d6:	4b70      	ldr	r3, [pc, #448]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017dc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80017de:	4b6e      	ldr	r3, [pc, #440]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	4b6c      	ldr	r3, [pc, #432]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	4b69      	ldr	r3, [pc, #420]	; (8001994 <LCD_Scan_Dir+0x618>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	121a      	asrs	r2, r3, #8
 80017f6:	4b69      	ldr	r3, [pc, #420]	; (800199c <LCD_Scan_Dir+0x620>)
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	4b67      	ldr	r3, [pc, #412]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	4b65      	ldr	r3, [pc, #404]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	4b64      	ldr	r3, [pc, #400]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800180e:	4b62      	ldr	r3, [pc, #392]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	4b60      	ldr	r3, [pc, #384]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <LCD_Scan_Dir+0x618>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	4a5d      	ldr	r2, [pc, #372]	; (800199c <LCD_Scan_Dir+0x620>)
 8001826:	b2db      	uxtb	r3, r3
 8001828:	60d3      	str	r3, [r2, #12]
 800182a:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <LCD_Scan_Dir+0x61c>)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
 8001836:	4b58      	ldr	r3, [pc, #352]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800183e:	4b55      	ldr	r3, [pc, #340]	; (8001994 <LCD_Scan_Dir+0x618>)
 8001840:	899b      	ldrh	r3, [r3, #12]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f9fc 	bl	8000c40 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <LCD_Scan_Dir+0x61c>)
 800184a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	4b51      	ldr	r3, [pc, #324]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <LCD_Scan_Dir+0x620>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <LCD_Scan_Dir+0x61c>)
 800186c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001870:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001878:	611a      	str	r2, [r3, #16]
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <LCD_Scan_Dir+0x61c>)
 800187c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	4b46      	ldr	r3, [pc, #280]	; (800199c <LCD_Scan_Dir+0x620>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	4b43      	ldr	r3, [pc, #268]	; (8001998 <LCD_Scan_Dir+0x61c>)
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	615a      	str	r2, [r3, #20]
 800188e:	4b42      	ldr	r3, [pc, #264]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <LCD_Scan_Dir+0x61c>)
 8001896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800189c:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <LCD_Scan_Dir+0x61c>)
 800189e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80018a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	4b39      	ldr	r3, [pc, #228]	; (8001994 <LCD_Scan_Dir+0x618>)
 80018ae:	885b      	ldrh	r3, [r3, #2]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	121a      	asrs	r2, r3, #8
 80018b4:	4b39      	ldr	r3, [pc, #228]	; (800199c <LCD_Scan_Dir+0x620>)
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	615a      	str	r2, [r3, #20]
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	4b34      	ldr	r3, [pc, #208]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80018c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ca:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80018ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80018d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <LCD_Scan_Dir+0x618>)
 80018de:	885b      	ldrh	r3, [r3, #2]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	4a2e      	ldr	r2, [pc, #184]	; (800199c <LCD_Scan_Dir+0x620>)
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	60d3      	str	r3, [r2, #12]
 80018e8:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <LCD_Scan_Dir+0x61c>)
 80018f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fa:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80018fc:	e045      	b.n	800198a <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b07      	cmp	r3, #7
 8001902:	d836      	bhi.n	8001972 <LCD_Scan_Dir+0x5f6>
 8001904:	a201      	add	r2, pc, #4	; (adr r2, 800190c <LCD_Scan_Dir+0x590>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	0800192d 	.word	0x0800192d
 8001910:	08001937 	.word	0x08001937
 8001914:	08001941 	.word	0x08001941
 8001918:	08001973 	.word	0x08001973
 800191c:	0800194b 	.word	0x0800194b
 8001920:	08001955 	.word	0x08001955
 8001924:	0800195f 	.word	0x0800195f
 8001928:	08001969 	.word	0x08001969
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001932:	81fb      	strh	r3, [r7, #14]
			break;
 8001934:	e01d      	b.n	8001972 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001936:	89fb      	ldrh	r3, [r7, #14]
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	81fb      	strh	r3, [r7, #14]
			break;
 800193e:	e018      	b.n	8001972 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	f043 0320 	orr.w	r3, r3, #32
 8001946:	81fb      	strh	r3, [r7, #14]
			break;
 8001948:	e013      	b.n	8001972 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001950:	81fb      	strh	r3, [r7, #14]
			break;
 8001952:	e00e      	b.n	8001972 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800195a:	81fb      	strh	r3, [r7, #14]
			break;
 800195c:	e009      	b.n	8001972 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	f043 0318 	orr.w	r3, r3, #24
 8001964:	81fb      	strh	r3, [r7, #14]
			break;
 8001966:	e004      	b.n	8001972 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	81fb      	strh	r3, [r7, #14]
			break;
 8001970:	bf00      	nop
		}
		dirreg = 0X03;
 8001972:	2303      	movs	r3, #3
 8001974:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800197c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800197e:	89fa      	ldrh	r2, [r7, #14]
 8001980:	89bb      	ldrh	r3, [r7, #12]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f9e7 	bl	8000d58 <LCD_WriteReg>
	}
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000714 	.word	0x20000714
 8001998:	40011000 	.word	0x40011000
 800199c:	40010c00 	.word	0x40010c00

080019a0 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	460a      	mov	r2, r1
 80019aa:	80fb      	strh	r3, [r7, #6]
 80019ac:	4613      	mov	r3, r2
 80019ae:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 80019b0:	88ba      	ldrh	r2, [r7, #4]
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fa14 	bl	8000de4 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 80019bc:	f7ff fa06 	bl	8000dcc <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LCD_DrawPoint+0x54>)
 80019c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <LCD_DrawPoint+0x54>)
 80019ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <LCD_DrawPoint+0x58>)
 80019d2:	881a      	ldrh	r2, [r3, #0]
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <LCD_DrawPoint+0x5c>)
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <LCD_DrawPoint+0x54>)
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	615a      	str	r2, [r3, #20]
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <LCD_DrawPoint+0x54>)
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <LCD_DrawPoint+0x54>)
 80019e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ea:	611a      	str	r2, [r3, #16]
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40011000 	.word	0x40011000
 80019f8:	200001fc 	.word	0x200001fc
 80019fc:	40010c00 	.word	0x40010c00

08001a00 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	80bb      	strh	r3, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001a12:	4b75      	ldr	r3, [pc, #468]	; (8001be8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a14:	889b      	ldrh	r3, [r3, #4]
 8001a16:	f249 3241 	movw	r2, #37697	; 0x9341
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d005      	beq.n	8001a2a <LCD_Fast_DrawPoint+0x2a>
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a20:	889b      	ldrh	r3, [r3, #4]
 8001a22:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d164      	bne.n	8001af4 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a2c:	895b      	ldrh	r3, [r3, #10]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f906 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001a34:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	4b6b      	ldr	r3, [pc, #428]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <LCD_Fast_DrawPoint+0x1f0>)
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	4b67      	ldr	r3, [pc, #412]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	615a      	str	r2, [r3, #20]
 8001a54:	4b65      	ldr	r3, [pc, #404]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	4b64      	ldr	r3, [pc, #400]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a60:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	4b60      	ldr	r3, [pc, #384]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4a5e      	ldr	r2, [pc, #376]	; (8001bf0 <LCD_Fast_DrawPoint+0x1f0>)
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	60d3      	str	r3, [r2, #12]
 8001a7a:	4b5c      	ldr	r3, [pc, #368]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	611a      	str	r2, [r3, #16]
 8001a86:	4b59      	ldr	r3, [pc, #356]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001a8e:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a90:	899b      	ldrh	r3, [r3, #12]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f8d4 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a98:	4b54      	ldr	r3, [pc, #336]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	4b52      	ldr	r3, [pc, #328]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	88bb      	ldrh	r3, [r7, #4]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <LCD_Fast_DrawPoint+0x1f0>)
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	615a      	str	r2, [r3, #20]
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001ac6:	4b49      	ldr	r3, [pc, #292]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001acc:	611a      	str	r2, [r3, #16]
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	4a45      	ldr	r2, [pc, #276]	; (8001bf0 <LCD_Fast_DrawPoint+0x1f0>)
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	60d3      	str	r3, [r2, #12]
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	e1e6      	b.n	8001ec2 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8001af4:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <LCD_Fast_DrawPoint+0x1e8>)
 8001af6:	889b      	ldrh	r3, [r3, #4]
 8001af8:	f245 5210 	movw	r2, #21776	; 0x5510
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d179      	bne.n	8001bf4 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001b00:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <LCD_Fast_DrawPoint+0x1e8>)
 8001b02:	895b      	ldrh	r3, [r3, #10]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f89b 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	4b36      	ldr	r3, [pc, #216]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	615a      	str	r2, [r3, #20]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <LCD_Fast_DrawPoint+0x1f0>)
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	4b30      	ldr	r3, [pc, #192]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b36:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001b38:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <LCD_Fast_DrawPoint+0x1e8>)
 8001b3a:	895b      	ldrh	r3, [r3, #10]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f87d 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b54:	615a      	str	r2, [r3, #20]
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <LCD_Fast_DrawPoint+0x1f0>)
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	60d3      	str	r3, [r2, #12]
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b70:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <LCD_Fast_DrawPoint+0x1e8>)
 8001b74:	899b      	ldrh	r3, [r3, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f862 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	88bb      	ldrh	r3, [r7, #4]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <LCD_Fast_DrawPoint+0x1f0>)
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <LCD_Fast_DrawPoint+0x1e8>)
 8001bac:	899b      	ldrh	r3, [r3, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f844 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	88bb      	ldrh	r3, [r7, #4]
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <LCD_Fast_DrawPoint+0x1f0>)
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	60d3      	str	r3, [r2, #12]
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	611a      	str	r2, [r3, #16]
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <LCD_Fast_DrawPoint+0x1ec>)
 8001bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	e16d      	b.n	8001ec2 <LCD_Fast_DrawPoint+0x4c2>
 8001be6:	bf00      	nop
 8001be8:	20000714 	.word	0x20000714
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001bf4:	4b68      	ldr	r3, [pc, #416]	; (8001d98 <LCD_Fast_DrawPoint+0x398>)
 8001bf6:	889b      	ldrh	r3, [r3, #4]
 8001bf8:	f641 1263 	movw	r2, #6499	; 0x1963
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	f040 80d1 	bne.w	8001da4 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001c02:	4b65      	ldr	r3, [pc, #404]	; (8001d98 <LCD_Fast_DrawPoint+0x398>)
 8001c04:	799b      	ldrb	r3, [r3, #6]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001c0a:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <LCD_Fast_DrawPoint+0x398>)
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001c18:	4b5f      	ldr	r3, [pc, #380]	; (8001d98 <LCD_Fast_DrawPoint+0x398>)
 8001c1a:	895b      	ldrh	r3, [r3, #10]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f80f 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001c22:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c30:	615a      	str	r2, [r3, #20]
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <LCD_Fast_DrawPoint+0x3a0>)
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001c50:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4a4f      	ldr	r2, [pc, #316]	; (8001da0 <LCD_Fast_DrawPoint+0x3a0>)
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	60d3      	str	r3, [r2, #12]
 8001c68:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	611a      	str	r2, [r3, #16]
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c82:	611a      	str	r2, [r3, #16]
 8001c84:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8a:	615a      	str	r2, [r3, #20]
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <LCD_Fast_DrawPoint+0x3a0>)
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb8:	615a      	str	r2, [r3, #20]
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4a38      	ldr	r2, [pc, #224]	; (8001da0 <LCD_Fast_DrawPoint+0x3a0>)
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	60d3      	str	r3, [r2, #12]
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <LCD_Fast_DrawPoint+0x398>)
 8001cd8:	899b      	ldrh	r3, [r3, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe ffb0 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	88bb      	ldrh	r3, [r7, #4]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <LCD_Fast_DrawPoint+0x3a0>)
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001d0e:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d14:	611a      	str	r2, [r3, #16]
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	88bb      	ldrh	r3, [r7, #4]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <LCD_Fast_DrawPoint+0x3a0>)
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	60d3      	str	r3, [r2, #12]
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d48:	615a      	str	r2, [r3, #20]
 8001d4a:	88bb      	ldrh	r3, [r7, #4]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <LCD_Fast_DrawPoint+0x3a0>)
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	615a      	str	r2, [r3, #20]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6e:	611a      	str	r2, [r3, #16]
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d76:	615a      	str	r2, [r3, #20]
 8001d78:	88bb      	ldrh	r3, [r7, #4]
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <LCD_Fast_DrawPoint+0x3a0>)
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	60d3      	str	r3, [r2, #12]
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d88:	2280      	movs	r2, #128	; 0x80
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <LCD_Fast_DrawPoint+0x39c>)
 8001d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	e095      	b.n	8001ec2 <LCD_Fast_DrawPoint+0x4c2>
 8001d96:	bf00      	nop
 8001d98:	20000714 	.word	0x20000714
 8001d9c:	40011000 	.word	0x40011000
 8001da0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001da6:	889b      	ldrh	r3, [r3, #4]
 8001da8:	f646 0204 	movw	r2, #26628	; 0x6804
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d16f      	bne.n	8001e90 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001db0:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001db2:	799b      	ldrb	r3, [r3, #6]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d106      	bne.n	8001dc6 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001dba:	881a      	ldrh	r2, [r3, #0]
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001dc6:	4b56      	ldr	r3, [pc, #344]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001dc8:	895b      	ldrh	r3, [r3, #10]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe ff38 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001dd0:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <LCD_Fast_DrawPoint+0x528>)
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001dfe:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0c:	615a      	str	r2, [r3, #20]
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <LCD_Fast_DrawPoint+0x528>)
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	60d3      	str	r3, [r2, #12]
 8001e16:	4b43      	ldr	r3, [pc, #268]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e18:	2280      	movs	r2, #128	; 0x80
 8001e1a:	615a      	str	r2, [r3, #20]
 8001e1c:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	611a      	str	r2, [r3, #16]
 8001e22:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e28:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001e2c:	899b      	ldrh	r3, [r3, #12]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe ff06 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001e34:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	88bb      	ldrh	r3, [r7, #4]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <LCD_Fast_DrawPoint+0x528>)
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	4b35      	ldr	r3, [pc, #212]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	615a      	str	r2, [r3, #20]
 8001e54:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	611a      	str	r2, [r3, #16]
 8001e5a:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e60:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e68:	611a      	str	r2, [r3, #16]
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e70:	615a      	str	r2, [r3, #20]
 8001e72:	88bb      	ldrh	r3, [r7, #4]
 8001e74:	4a2c      	ldr	r2, [pc, #176]	; (8001f28 <LCD_Fast_DrawPoint+0x528>)
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	60d3      	str	r3, [r2, #12]
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	e018      	b.n	8001ec2 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001e90:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001e92:	799b      	ldrb	r3, [r3, #6]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001e9a:	881a      	ldrh	r2, [r3, #0]
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001ea8:	895b      	ldrh	r3, [r3, #10]
 8001eaa:	88fa      	ldrh	r2, [r7, #6]
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe ff52 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001eb6:	899b      	ldrh	r3, [r3, #12]
 8001eb8:	88ba      	ldrh	r2, [r7, #4]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe ff4b 	bl	8000d58 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec8:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed0:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <LCD_Fast_DrawPoint+0x520>)
 8001ed4:	891a      	ldrh	r2, [r3, #8]
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <LCD_Fast_DrawPoint+0x528>)
 8001ed8:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eec:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efc:	615a      	str	r2, [r3, #20]
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <LCD_Fast_DrawPoint+0x528>)
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	60d3      	str	r3, [r2, #12]
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	615a      	str	r2, [r3, #20]
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <LCD_Fast_DrawPoint+0x524>)
 8001f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f16:	611a      	str	r2, [r3, #16]
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000714 	.word	0x20000714
 8001f24:	40011000 	.word	0x40011000
 8001f28:	40010c00 	.word	0x40010c00
 8001f2c:	00000000 	.word	0x00000000

08001f30 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001f3a:	20be      	movs	r0, #190	; 0xbe
 8001f3c:	f7fe fe80 	bl	8000c40 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f46:	611a      	str	r2, [r3, #16]
 8001f48:	4b49      	ldr	r3, [pc, #292]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	4b48      	ldr	r3, [pc, #288]	; (8002074 <LCD_SSD_BackLightSet+0x144>)
 8001f52:	2205      	movs	r2, #5
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	4b46      	ldr	r3, [pc, #280]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	4b44      	ldr	r3, [pc, #272]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f68:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe faad 	bl	80004dc <__aeabi_i2d>
 8001f82:	a339      	add	r3, pc, #228	; (adr r3, 8002068 <LCD_SSD_BackLightSet+0x138>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fb12 	bl	80005b0 <__aeabi_dmul>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	4c37      	ldr	r4, [pc, #220]	; (8002074 <LCD_SSD_BackLightSet+0x144>)
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fde1 	bl	8000b60 <__aeabi_d2uiz>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	60e3      	str	r3, [r4, #12]
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	615a      	str	r2, [r3, #20]
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc4:	615a      	str	r2, [r3, #20]
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <LCD_SSD_BackLightSet+0x144>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	611a      	str	r2, [r3, #16]
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fde:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <LCD_SSD_BackLightSet+0x144>)
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	615a      	str	r2, [r3, #20]
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	611a      	str	r2, [r3, #16]
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8002004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002008:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 800200c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8002014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002018:	615a      	str	r2, [r3, #20]
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <LCD_SSD_BackLightSet+0x144>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	615a      	str	r2, [r3, #20]
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	611a      	str	r2, [r3, #16]
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 800202e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002032:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8002036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800203a:	611a      	str	r2, [r3, #16]
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 800203e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002042:	615a      	str	r2, [r3, #20]
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <LCD_SSD_BackLightSet+0x144>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	615a      	str	r2, [r3, #20]
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	611a      	str	r2, [r3, #16]
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <LCD_SSD_BackLightSet+0x140>)
 8002058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205c:	611a      	str	r2, [r3, #16]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	bf00      	nop
 8002068:	66666666 	.word	0x66666666
 800206c:	40046666 	.word	0x40046666
 8002070:	40011000 	.word	0x40011000
 8002074:	40010c00 	.word	0x40010c00

08002078 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d177      	bne.n	8002178 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8002088:	4b80      	ldr	r3, [pc, #512]	; (800228c <LCD_Display_Dir+0x214>)
 800208a:	2200      	movs	r2, #0
 800208c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 800208e:	4b7f      	ldr	r3, [pc, #508]	; (800228c <LCD_Display_Dir+0x214>)
 8002090:	22f0      	movs	r2, #240	; 0xf0
 8002092:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8002094:	4b7d      	ldr	r3, [pc, #500]	; (800228c <LCD_Display_Dir+0x214>)
 8002096:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800209a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800209c:	4b7b      	ldr	r3, [pc, #492]	; (800228c <LCD_Display_Dir+0x214>)
 800209e:	889b      	ldrh	r3, [r3, #4]
 80020a0:	f249 3241 	movw	r2, #37697	; 0x9341
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00b      	beq.n	80020c0 <LCD_Display_Dir+0x48>
 80020a8:	4b78      	ldr	r3, [pc, #480]	; (800228c <LCD_Display_Dir+0x214>)
 80020aa:	889b      	ldrh	r3, [r3, #4]
 80020ac:	f646 0204 	movw	r2, #26628	; 0x6804
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d005      	beq.n	80020c0 <LCD_Display_Dir+0x48>
 80020b4:	4b75      	ldr	r3, [pc, #468]	; (800228c <LCD_Display_Dir+0x214>)
 80020b6:	889b      	ldrh	r3, [r3, #4]
 80020b8:	f245 3210 	movw	r2, #21264	; 0x5310
 80020bc:	4293      	cmp	r3, r2
 80020be:	d11e      	bne.n	80020fe <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 80020c0:	4b72      	ldr	r3, [pc, #456]	; (800228c <LCD_Display_Dir+0x214>)
 80020c2:	222c      	movs	r2, #44	; 0x2c
 80020c4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80020c6:	4b71      	ldr	r3, [pc, #452]	; (800228c <LCD_Display_Dir+0x214>)
 80020c8:	222a      	movs	r2, #42	; 0x2a
 80020ca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80020cc:	4b6f      	ldr	r3, [pc, #444]	; (800228c <LCD_Display_Dir+0x214>)
 80020ce:	222b      	movs	r2, #43	; 0x2b
 80020d0:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80020d2:	4b6e      	ldr	r3, [pc, #440]	; (800228c <LCD_Display_Dir+0x214>)
 80020d4:	889b      	ldrh	r3, [r3, #4]
 80020d6:	f646 0204 	movw	r2, #26628	; 0x6804
 80020da:	4293      	cmp	r3, r2
 80020dc:	d006      	beq.n	80020ec <LCD_Display_Dir+0x74>
 80020de:	4b6b      	ldr	r3, [pc, #428]	; (800228c <LCD_Display_Dir+0x214>)
 80020e0:	889b      	ldrh	r3, [r3, #4]
 80020e2:	f245 3210 	movw	r2, #21264	; 0x5310
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 80c7 	bne.w	800227a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 80020ec:	4b67      	ldr	r3, [pc, #412]	; (800228c <LCD_Display_Dir+0x214>)
 80020ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020f2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 80020f4:	4b65      	ldr	r3, [pc, #404]	; (800228c <LCD_Display_Dir+0x214>)
 80020f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020fa:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80020fc:	e0bd      	b.n	800227a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <LCD_Display_Dir+0x214>)
 8002100:	889b      	ldrh	r3, [r3, #4]
 8002102:	f245 5210 	movw	r2, #21776	; 0x5510
 8002106:	4293      	cmp	r3, r2
 8002108:	d114      	bne.n	8002134 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 800210a:	4b60      	ldr	r3, [pc, #384]	; (800228c <LCD_Display_Dir+0x214>)
 800210c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002110:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8002112:	4b5e      	ldr	r3, [pc, #376]	; (800228c <LCD_Display_Dir+0x214>)
 8002114:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002118:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800211a:	4b5c      	ldr	r3, [pc, #368]	; (800228c <LCD_Display_Dir+0x214>)
 800211c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002120:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8002122:	4b5a      	ldr	r3, [pc, #360]	; (800228c <LCD_Display_Dir+0x214>)
 8002124:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002128:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 800212a:	4b58      	ldr	r3, [pc, #352]	; (800228c <LCD_Display_Dir+0x214>)
 800212c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002130:	805a      	strh	r2, [r3, #2]
 8002132:	e0a3      	b.n	800227c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8002134:	4b55      	ldr	r3, [pc, #340]	; (800228c <LCD_Display_Dir+0x214>)
 8002136:	889b      	ldrh	r3, [r3, #4]
 8002138:	f641 1263 	movw	r2, #6499	; 0x1963
 800213c:	4293      	cmp	r3, r2
 800213e:	d111      	bne.n	8002164 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002140:	4b52      	ldr	r3, [pc, #328]	; (800228c <LCD_Display_Dir+0x214>)
 8002142:	222c      	movs	r2, #44	; 0x2c
 8002144:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8002146:	4b51      	ldr	r3, [pc, #324]	; (800228c <LCD_Display_Dir+0x214>)
 8002148:	222b      	movs	r2, #43	; 0x2b
 800214a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 800214c:	4b4f      	ldr	r3, [pc, #316]	; (800228c <LCD_Display_Dir+0x214>)
 800214e:	222a      	movs	r2, #42	; 0x2a
 8002150:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8002152:	4b4e      	ldr	r3, [pc, #312]	; (800228c <LCD_Display_Dir+0x214>)
 8002154:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002158:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 800215a:	4b4c      	ldr	r3, [pc, #304]	; (800228c <LCD_Display_Dir+0x214>)
 800215c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002160:	805a      	strh	r2, [r3, #2]
 8002162:	e08b      	b.n	800227c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8002164:	4b49      	ldr	r3, [pc, #292]	; (800228c <LCD_Display_Dir+0x214>)
 8002166:	2222      	movs	r2, #34	; 0x22
 8002168:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 800216a:	4b48      	ldr	r3, [pc, #288]	; (800228c <LCD_Display_Dir+0x214>)
 800216c:	2220      	movs	r2, #32
 800216e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8002170:	4b46      	ldr	r3, [pc, #280]	; (800228c <LCD_Display_Dir+0x214>)
 8002172:	2221      	movs	r2, #33	; 0x21
 8002174:	819a      	strh	r2, [r3, #12]
 8002176:	e081      	b.n	800227c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8002178:	4b44      	ldr	r3, [pc, #272]	; (800228c <LCD_Display_Dir+0x214>)
 800217a:	2201      	movs	r2, #1
 800217c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <LCD_Display_Dir+0x214>)
 8002180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002184:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <LCD_Display_Dir+0x214>)
 8002188:	22f0      	movs	r2, #240	; 0xf0
 800218a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800218c:	4b3f      	ldr	r3, [pc, #252]	; (800228c <LCD_Display_Dir+0x214>)
 800218e:	889b      	ldrh	r3, [r3, #4]
 8002190:	f249 3241 	movw	r2, #37697	; 0x9341
 8002194:	4293      	cmp	r3, r2
 8002196:	d005      	beq.n	80021a4 <LCD_Display_Dir+0x12c>
 8002198:	4b3c      	ldr	r3, [pc, #240]	; (800228c <LCD_Display_Dir+0x214>)
 800219a:	889b      	ldrh	r3, [r3, #4]
 800219c:	f245 3210 	movw	r2, #21264	; 0x5310
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d109      	bne.n	80021b8 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <LCD_Display_Dir+0x214>)
 80021a6:	222c      	movs	r2, #44	; 0x2c
 80021a8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80021aa:	4b38      	ldr	r3, [pc, #224]	; (800228c <LCD_Display_Dir+0x214>)
 80021ac:	222a      	movs	r2, #42	; 0x2a
 80021ae:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80021b0:	4b36      	ldr	r3, [pc, #216]	; (800228c <LCD_Display_Dir+0x214>)
 80021b2:	222b      	movs	r2, #43	; 0x2b
 80021b4:	819a      	strh	r2, [r3, #12]
 80021b6:	e04b      	b.n	8002250 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 80021b8:	4b34      	ldr	r3, [pc, #208]	; (800228c <LCD_Display_Dir+0x214>)
 80021ba:	889b      	ldrh	r3, [r3, #4]
 80021bc:	f646 0204 	movw	r2, #26628	; 0x6804
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d109      	bne.n	80021d8 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <LCD_Display_Dir+0x214>)
 80021c6:	222c      	movs	r2, #44	; 0x2c
 80021c8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80021ca:	4b30      	ldr	r3, [pc, #192]	; (800228c <LCD_Display_Dir+0x214>)
 80021cc:	222b      	movs	r2, #43	; 0x2b
 80021ce:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <LCD_Display_Dir+0x214>)
 80021d2:	222a      	movs	r2, #42	; 0x2a
 80021d4:	819a      	strh	r2, [r3, #12]
 80021d6:	e03b      	b.n	8002250 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <LCD_Display_Dir+0x214>)
 80021da:	889b      	ldrh	r3, [r3, #4]
 80021dc:	f245 5210 	movw	r2, #21776	; 0x5510
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d114      	bne.n	800220e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <LCD_Display_Dir+0x214>)
 80021e6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80021ea:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <LCD_Display_Dir+0x214>)
 80021ee:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80021f2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <LCD_Display_Dir+0x214>)
 80021f6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80021fa:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <LCD_Display_Dir+0x214>)
 80021fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002202:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <LCD_Display_Dir+0x214>)
 8002206:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800220a:	805a      	strh	r2, [r3, #2]
 800220c:	e020      	b.n	8002250 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <LCD_Display_Dir+0x214>)
 8002210:	889b      	ldrh	r3, [r3, #4]
 8002212:	f641 1263 	movw	r2, #6499	; 0x1963
 8002216:	4293      	cmp	r3, r2
 8002218:	d111      	bne.n	800223e <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <LCD_Display_Dir+0x214>)
 800221c:	222c      	movs	r2, #44	; 0x2c
 800221e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <LCD_Display_Dir+0x214>)
 8002222:	222a      	movs	r2, #42	; 0x2a
 8002224:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <LCD_Display_Dir+0x214>)
 8002228:	222b      	movs	r2, #43	; 0x2b
 800222a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <LCD_Display_Dir+0x214>)
 800222e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002232:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <LCD_Display_Dir+0x214>)
 8002236:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800223a:	805a      	strh	r2, [r3, #2]
 800223c:	e008      	b.n	8002250 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <LCD_Display_Dir+0x214>)
 8002240:	2222      	movs	r2, #34	; 0x22
 8002242:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <LCD_Display_Dir+0x214>)
 8002246:	2221      	movs	r2, #33	; 0x21
 8002248:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <LCD_Display_Dir+0x214>)
 800224c:	2220      	movs	r2, #32
 800224e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <LCD_Display_Dir+0x214>)
 8002252:	889b      	ldrh	r3, [r3, #4]
 8002254:	f646 0204 	movw	r2, #26628	; 0x6804
 8002258:	4293      	cmp	r3, r2
 800225a:	d005      	beq.n	8002268 <LCD_Display_Dir+0x1f0>
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <LCD_Display_Dir+0x214>)
 800225e:	889b      	ldrh	r3, [r3, #4]
 8002260:	f245 3210 	movw	r2, #21264	; 0x5310
 8002264:	4293      	cmp	r3, r2
 8002266:	d109      	bne.n	800227c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <LCD_Display_Dir+0x214>)
 800226a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800226e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <LCD_Display_Dir+0x214>)
 8002272:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002276:	805a      	strh	r2, [r3, #2]
 8002278:	e000      	b.n	800227c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800227a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff f87d 	bl	800137c <LCD_Scan_Dir>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000714 	.word	0x20000714

08002290 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8002296:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <LCD_Init+0x248>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a8f      	ldr	r2, [pc, #572]	; (80024d8 <LCD_Init+0x248>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6193      	str	r3, [r2, #24]
 80022a2:	4b8d      	ldr	r3, [pc, #564]	; (80024d8 <LCD_Init+0x248>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 80022ae:	4b8a      	ldr	r3, [pc, #552]	; (80024d8 <LCD_Init+0x248>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	4a89      	ldr	r2, [pc, #548]	; (80024d8 <LCD_Init+0x248>)
 80022b4:	f043 0310 	orr.w	r3, r3, #16
 80022b8:	6193      	str	r3, [r2, #24]
 80022ba:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <LCD_Init+0x248>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 80022c6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80022ca:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 80022cc:	2301      	movs	r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80022d0:	2301      	movs	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80022d4:	2303      	movs	r3, #3
 80022d6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	487f      	ldr	r0, [pc, #508]	; (80024dc <LCD_Init+0x24c>)
 80022e0:	f005 fd4a 	bl	8007d78 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80022e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	4619      	mov	r1, r3
 80022f0:	487b      	ldr	r0, [pc, #492]	; (80024e0 <LCD_Init+0x250>)
 80022f2:	f005 fd41 	bl	8007d78 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80022f6:	2032      	movs	r0, #50	; 0x32
 80022f8:	f004 fee4 	bl	80070c4 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80022fc:	2101      	movs	r1, #1
 80022fe:	2000      	movs	r0, #0
 8002300:	f7fe fd2a 	bl	8000d58 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8002304:	2032      	movs	r0, #50	; 0x32
 8002306:	f004 fedd 	bl	80070c4 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 800230a:	2000      	movs	r0, #0
 800230c:	f7fe fd4e 	bl	8000dac <LCD_ReadReg>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <LCD_Init+0x254>)
 8002316:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002318:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <LCD_Init+0x254>)
 800231a:	889b      	ldrh	r3, [r3, #4]
 800231c:	2bfe      	cmp	r3, #254	; 0xfe
 800231e:	d90b      	bls.n	8002338 <LCD_Init+0xa8>
 8002320:	4b70      	ldr	r3, [pc, #448]	; (80024e4 <LCD_Init+0x254>)
 8002322:	889b      	ldrh	r3, [r3, #4]
 8002324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002328:	4293      	cmp	r3, r2
 800232a:	d005      	beq.n	8002338 <LCD_Init+0xa8>
 800232c:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <LCD_Init+0x254>)
 800232e:	889b      	ldrh	r3, [r3, #4]
 8002330:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002334:	f040 80c8 	bne.w	80024c8 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002338:	20d3      	movs	r0, #211	; 0xd3
 800233a:	f7fe fc81 	bl	8000c40 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 800233e:	f7fe fcc7 	bl	8000cd0 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8002342:	f7fe fcc5 	bl	8000cd0 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8002346:	f7fe fcc3 	bl	8000cd0 <LCD_RD_DATA>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <LCD_Init+0x254>)
 8002350:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8002352:	4b64      	ldr	r3, [pc, #400]	; (80024e4 <LCD_Init+0x254>)
 8002354:	889b      	ldrh	r3, [r3, #4]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	b29a      	uxth	r2, r3
 800235a:	4b62      	ldr	r3, [pc, #392]	; (80024e4 <LCD_Init+0x254>)
 800235c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800235e:	f7fe fcb7 	bl	8000cd0 <LCD_RD_DATA>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <LCD_Init+0x254>)
 8002368:	889b      	ldrh	r3, [r3, #4]
 800236a:	4313      	orrs	r3, r2
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b5d      	ldr	r3, [pc, #372]	; (80024e4 <LCD_Init+0x254>)
 8002370:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8002372:	4b5c      	ldr	r3, [pc, #368]	; (80024e4 <LCD_Init+0x254>)
 8002374:	889b      	ldrh	r3, [r3, #4]
 8002376:	f249 3241 	movw	r2, #37697	; 0x9341
 800237a:	4293      	cmp	r3, r2
 800237c:	f000 80a4 	beq.w	80024c8 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002380:	20bf      	movs	r0, #191	; 0xbf
 8002382:	f7fe fc5d 	bl	8000c40 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8002386:	f7fe fca3 	bl	8000cd0 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800238a:	f7fe fca1 	bl	8000cd0 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800238e:	f7fe fc9f 	bl	8000cd0 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8002392:	f7fe fc9d 	bl	8000cd0 <LCD_RD_DATA>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <LCD_Init+0x254>)
 800239c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <LCD_Init+0x254>)
 80023a0:	889b      	ldrh	r3, [r3, #4]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b4f      	ldr	r3, [pc, #316]	; (80024e4 <LCD_Init+0x254>)
 80023a8:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 80023aa:	f7fe fc91 	bl	8000cd0 <LCD_RD_DATA>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <LCD_Init+0x254>)
 80023b4:	889b      	ldrh	r3, [r3, #4]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <LCD_Init+0x254>)
 80023bc:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80023be:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <LCD_Init+0x254>)
 80023c0:	889b      	ldrh	r3, [r3, #4]
 80023c2:	f646 0204 	movw	r2, #26628	; 0x6804
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d07e      	beq.n	80024c8 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80023ca:	20d4      	movs	r0, #212	; 0xd4
 80023cc:	f7fe fc38 	bl	8000c40 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80023d0:	f7fe fc7e 	bl	8000cd0 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80023d4:	f7fe fc7c 	bl	8000cd0 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80023d8:	f7fe fc7a 	bl	8000cd0 <LCD_RD_DATA>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <LCD_Init+0x254>)
 80023e2:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80023e4:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <LCD_Init+0x254>)
 80023e6:	889b      	ldrh	r3, [r3, #4]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <LCD_Init+0x254>)
 80023ee:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80023f0:	f7fe fc6e 	bl	8000cd0 <LCD_RD_DATA>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <LCD_Init+0x254>)
 80023fa:	889b      	ldrh	r3, [r3, #4]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b29a      	uxth	r2, r3
 8002400:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <LCD_Init+0x254>)
 8002402:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002404:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <LCD_Init+0x254>)
 8002406:	889b      	ldrh	r3, [r3, #4]
 8002408:	f245 3210 	movw	r2, #21264	; 0x5310
 800240c:	4293      	cmp	r3, r2
 800240e:	d05b      	beq.n	80024c8 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002410:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002414:	f7fe fc14 	bl	8000c40 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002418:	f7fe fc5a 	bl	8000cd0 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 800241c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002420:	f7fe fc0e 	bl	8000c40 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8002424:	f7fe fc54 	bl	8000cd0 <LCD_RD_DATA>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <LCD_Init+0x254>)
 800242e:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002430:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <LCD_Init+0x254>)
 8002432:	889b      	ldrh	r3, [r3, #4]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	b29a      	uxth	r2, r3
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <LCD_Init+0x254>)
 800243a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 800243c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002440:	f7fe fbfe 	bl	8000c40 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8002444:	f7fe fc44 	bl	8000cd0 <LCD_RD_DATA>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <LCD_Init+0x254>)
 800244e:	889b      	ldrh	r3, [r3, #4]
 8002450:	4313      	orrs	r3, r2
 8002452:	b29a      	uxth	r2, r3
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <LCD_Init+0x254>)
 8002456:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002458:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <LCD_Init+0x254>)
 800245a:	889b      	ldrh	r3, [r3, #4]
 800245c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002460:	d103      	bne.n	800246a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <LCD_Init+0x254>)
 8002464:	f245 5210 	movw	r2, #21776	; 0x5510
 8002468:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <LCD_Init+0x254>)
 800246c:	889b      	ldrh	r3, [r3, #4]
 800246e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002472:	4293      	cmp	r3, r2
 8002474:	d028      	beq.n	80024c8 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002476:	20a1      	movs	r0, #161	; 0xa1
 8002478:	f7fe fbe2 	bl	8000c40 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800247c:	f7fe fc28 	bl	8000cd0 <LCD_RD_DATA>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <LCD_Init+0x254>)
 8002486:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002488:	f7fe fc22 	bl	8000cd0 <LCD_RD_DATA>
 800248c:	4603      	mov	r3, r0
 800248e:	461a      	mov	r2, r3
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <LCD_Init+0x254>)
 8002492:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <LCD_Init+0x254>)
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	b29a      	uxth	r2, r3
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <LCD_Init+0x254>)
 800249e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 80024a0:	f7fe fc16 	bl	8000cd0 <LCD_RD_DATA>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <LCD_Init+0x254>)
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <LCD_Init+0x254>)
 80024b2:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <LCD_Init+0x254>)
 80024b6:	889b      	ldrh	r3, [r3, #4]
 80024b8:	f245 7261 	movw	r2, #22369	; 0x5761
 80024bc:	4293      	cmp	r3, r2
 80024be:	d103      	bne.n	80024c8 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <LCD_Init+0x254>)
 80024c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80024c6:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <LCD_Init+0x254>)
 80024ca:	889b      	ldrh	r3, [r3, #4]
 80024cc:	f249 3241 	movw	r2, #37697	; 0x9341
 80024d0:	4293      	cmp	r3, r2
 80024d2:	f040 811f 	bne.w	8002714 <LCD_Init+0x484>
 80024d6:	e007      	b.n	80024e8 <LCD_Init+0x258>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40011000 	.word	0x40011000
 80024e0:	40010c00 	.word	0x40010c00
 80024e4:	20000714 	.word	0x20000714
			{
		LCD_WR_REG(0xCF);
 80024e8:	20cf      	movs	r0, #207	; 0xcf
 80024ea:	f7fe fba9 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7fe fbca 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80024f4:	20c1      	movs	r0, #193	; 0xc1
 80024f6:	f7fe fbc7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80024fa:	2030      	movs	r0, #48	; 0x30
 80024fc:	f7fe fbc4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002500:	20ed      	movs	r0, #237	; 0xed
 8002502:	f7fe fb9d 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002506:	2064      	movs	r0, #100	; 0x64
 8002508:	f7fe fbbe 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800250c:	2003      	movs	r0, #3
 800250e:	f7fe fbbb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8002512:	2012      	movs	r0, #18
 8002514:	f7fe fbb8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002518:	2081      	movs	r0, #129	; 0x81
 800251a:	f7fe fbb5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 800251e:	20e8      	movs	r0, #232	; 0xe8
 8002520:	f7fe fb8e 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8002524:	2085      	movs	r0, #133	; 0x85
 8002526:	f7fe fbaf 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800252a:	2010      	movs	r0, #16
 800252c:	f7fe fbac 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002530:	207a      	movs	r0, #122	; 0x7a
 8002532:	f7fe fba9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8002536:	20cb      	movs	r0, #203	; 0xcb
 8002538:	f7fe fb82 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 800253c:	2039      	movs	r0, #57	; 0x39
 800253e:	f7fe fba3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002542:	202c      	movs	r0, #44	; 0x2c
 8002544:	f7fe fba0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe fb9d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800254e:	2034      	movs	r0, #52	; 0x34
 8002550:	f7fe fb9a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002554:	2002      	movs	r0, #2
 8002556:	f7fe fb97 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800255a:	20f7      	movs	r0, #247	; 0xf7
 800255c:	f7fe fb70 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002560:	2020      	movs	r0, #32
 8002562:	f7fe fb91 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002566:	20ea      	movs	r0, #234	; 0xea
 8002568:	f7fe fb6a 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800256c:	2000      	movs	r0, #0
 800256e:	f7fe fb8b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe fb88 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002578:	20c0      	movs	r0, #192	; 0xc0
 800257a:	f7fe fb61 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800257e:	201b      	movs	r0, #27
 8002580:	f7fe fb82 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002584:	20c1      	movs	r0, #193	; 0xc1
 8002586:	f7fe fb5b 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800258a:	2001      	movs	r0, #1
 800258c:	f7fe fb7c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002590:	20c5      	movs	r0, #197	; 0xc5
 8002592:	f7fe fb55 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002596:	2030      	movs	r0, #48	; 0x30
 8002598:	f7fe fb76 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800259c:	2030      	movs	r0, #48	; 0x30
 800259e:	f7fe fb73 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 80025a2:	20c7      	movs	r0, #199	; 0xc7
 80025a4:	f7fe fb4c 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 80025a8:	20b7      	movs	r0, #183	; 0xb7
 80025aa:	f7fe fb6d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 80025ae:	2036      	movs	r0, #54	; 0x36
 80025b0:	f7fe fb46 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 80025b4:	2048      	movs	r0, #72	; 0x48
 80025b6:	f7fe fb67 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80025ba:	203a      	movs	r0, #58	; 0x3a
 80025bc:	f7fe fb40 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80025c0:	2055      	movs	r0, #85	; 0x55
 80025c2:	f7fe fb61 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80025c6:	20b1      	movs	r0, #177	; 0xb1
 80025c8:	f7fe fb3a 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7fe fb5b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80025d2:	201a      	movs	r0, #26
 80025d4:	f7fe fb58 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80025d8:	20b6      	movs	r0, #182	; 0xb6
 80025da:	f7fe fb31 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80025de:	200a      	movs	r0, #10
 80025e0:	f7fe fb52 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80025e4:	20a2      	movs	r0, #162	; 0xa2
 80025e6:	f7fe fb4f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80025ea:	20f2      	movs	r0, #242	; 0xf2
 80025ec:	f7fe fb28 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7fe fb49 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80025f6:	2026      	movs	r0, #38	; 0x26
 80025f8:	f7fe fb22 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7fe fb43 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002602:	20e0      	movs	r0, #224	; 0xe0
 8002604:	f7fe fb1c 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002608:	200f      	movs	r0, #15
 800260a:	f7fe fb3d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800260e:	202a      	movs	r0, #42	; 0x2a
 8002610:	f7fe fb3a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8002614:	2028      	movs	r0, #40	; 0x28
 8002616:	f7fe fb37 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800261a:	2008      	movs	r0, #8
 800261c:	f7fe fb34 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002620:	200e      	movs	r0, #14
 8002622:	f7fe fb31 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002626:	2008      	movs	r0, #8
 8002628:	f7fe fb2e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800262c:	2054      	movs	r0, #84	; 0x54
 800262e:	f7fe fb2b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8002632:	20a9      	movs	r0, #169	; 0xa9
 8002634:	f7fe fb28 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002638:	2043      	movs	r0, #67	; 0x43
 800263a:	f7fe fb25 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 800263e:	200a      	movs	r0, #10
 8002640:	f7fe fb22 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002644:	200f      	movs	r0, #15
 8002646:	f7fe fb1f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264a:	2000      	movs	r0, #0
 800264c:	f7fe fb1c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7fe fb19 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe fb16 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fb13 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002662:	20e1      	movs	r0, #225	; 0xe1
 8002664:	f7fe faec 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fb0d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 800266e:	2015      	movs	r0, #21
 8002670:	f7fe fb0a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002674:	2017      	movs	r0, #23
 8002676:	f7fe fb07 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800267a:	2007      	movs	r0, #7
 800267c:	f7fe fb04 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002680:	2011      	movs	r0, #17
 8002682:	f7fe fb01 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002686:	2006      	movs	r0, #6
 8002688:	f7fe fafe 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800268c:	202b      	movs	r0, #43	; 0x2b
 800268e:	f7fe fafb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002692:	2056      	movs	r0, #86	; 0x56
 8002694:	f7fe faf8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002698:	203c      	movs	r0, #60	; 0x3c
 800269a:	f7fe faf5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800269e:	2005      	movs	r0, #5
 80026a0:	f7fe faf2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80026a4:	2010      	movs	r0, #16
 80026a6:	f7fe faef 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80026aa:	200f      	movs	r0, #15
 80026ac:	f7fe faec 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80026b0:	203f      	movs	r0, #63	; 0x3f
 80026b2:	f7fe fae9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80026b6:	203f      	movs	r0, #63	; 0x3f
 80026b8:	f7fe fae6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80026bc:	200f      	movs	r0, #15
 80026be:	f7fe fae3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80026c2:	202b      	movs	r0, #43	; 0x2b
 80026c4:	f7fe fabc 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7fe fadd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fada 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7fe fad7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80026da:	203f      	movs	r0, #63	; 0x3f
 80026dc:	f7fe fad4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80026e0:	202a      	movs	r0, #42	; 0x2a
 80026e2:	f7fe faad 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe face 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7fe facb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe fac8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80026f8:	20ef      	movs	r0, #239	; 0xef
 80026fa:	f7fe fac5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80026fe:	2011      	movs	r0, #17
 8002700:	f7fe fa9e 	bl	8000c40 <LCD_WR_REG>
		HAL_Delay(120);
 8002704:	2078      	movs	r0, #120	; 0x78
 8002706:	f004 fcdd 	bl	80070c4 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800270a:	2029      	movs	r0, #41	; 0x29
 800270c:	f7fe fa98 	bl	8000c40 <LCD_WR_REG>
 8002710:	f003 bcd8 	b.w	80060c4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002714:	4b58      	ldr	r3, [pc, #352]	; (8002878 <LCD_Init+0x5e8>)
 8002716:	889b      	ldrh	r3, [r3, #4]
 8002718:	f646 0204 	movw	r2, #26628	; 0x6804
 800271c:	4293      	cmp	r3, r2
 800271e:	f040 80ad 	bne.w	800287c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8002722:	2011      	movs	r0, #17
 8002724:	f7fe fa8c 	bl	8000c40 <LCD_WR_REG>
		HAL_Delay(20);
 8002728:	2014      	movs	r0, #20
 800272a:	f004 fccb 	bl	80070c4 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 800272e:	20d0      	movs	r0, #208	; 0xd0
 8002730:	f7fe fa86 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8002734:	2007      	movs	r0, #7
 8002736:	f7fe faa7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 800273a:	2042      	movs	r0, #66	; 0x42
 800273c:	f7fe faa4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002740:	201d      	movs	r0, #29
 8002742:	f7fe faa1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8002746:	20d1      	movs	r0, #209	; 0xd1
 8002748:	f7fe fa7a 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe fa9b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002752:	201a      	movs	r0, #26
 8002754:	f7fe fa98 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002758:	2009      	movs	r0, #9
 800275a:	f7fe fa95 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800275e:	20d2      	movs	r0, #210	; 0xd2
 8002760:	f7fe fa6e 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002764:	2001      	movs	r0, #1
 8002766:	f7fe fa8f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 800276a:	2022      	movs	r0, #34	; 0x22
 800276c:	f7fe fa8c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002770:	20c0      	movs	r0, #192	; 0xc0
 8002772:	f7fe fa65 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002776:	2010      	movs	r0, #16
 8002778:	f7fe fa86 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800277c:	203b      	movs	r0, #59	; 0x3b
 800277e:	f7fe fa83 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002782:	2000      	movs	r0, #0
 8002784:	f7fe fa80 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002788:	2002      	movs	r0, #2
 800278a:	f7fe fa7d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800278e:	2011      	movs	r0, #17
 8002790:	f7fe fa7a 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002794:	20c5      	movs	r0, #197	; 0xc5
 8002796:	f7fe fa53 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800279a:	2003      	movs	r0, #3
 800279c:	f7fe fa74 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80027a0:	20c8      	movs	r0, #200	; 0xc8
 80027a2:	f7fe fa4d 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe fa6e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80027ac:	2025      	movs	r0, #37	; 0x25
 80027ae:	f7fe fa6b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80027b2:	2021      	movs	r0, #33	; 0x21
 80027b4:	f7fe fa68 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80027b8:	2005      	movs	r0, #5
 80027ba:	f7fe fa65 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe fa62 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80027c4:	200a      	movs	r0, #10
 80027c6:	f7fe fa5f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80027ca:	2065      	movs	r0, #101	; 0x65
 80027cc:	f7fe fa5c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80027d0:	2025      	movs	r0, #37	; 0x25
 80027d2:	f7fe fa59 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80027d6:	2077      	movs	r0, #119	; 0x77
 80027d8:	f7fe fa56 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80027dc:	2050      	movs	r0, #80	; 0x50
 80027de:	f7fe fa53 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80027e2:	200f      	movs	r0, #15
 80027e4:	f7fe fa50 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe fa4d 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80027ee:	20f8      	movs	r0, #248	; 0xf8
 80027f0:	f7fe fa26 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f7fe fa47 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80027fa:	20fe      	movs	r0, #254	; 0xfe
 80027fc:	f7fe fa20 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fa41 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002806:	2002      	movs	r0, #2
 8002808:	f7fe fa3e 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800280c:	2020      	movs	r0, #32
 800280e:	f7fe fa17 	bl	8000c40 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002812:	2036      	movs	r0, #54	; 0x36
 8002814:	f7fe fa14 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002818:	2008      	movs	r0, #8
 800281a:	f7fe fa35 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800281e:	203a      	movs	r0, #58	; 0x3a
 8002820:	f7fe fa0e 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8002824:	2055      	movs	r0, #85	; 0x55
 8002826:	f7fe fa2f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 800282a:	202b      	movs	r0, #43	; 0x2b
 800282c:	f7fe fa08 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe fa29 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002836:	2000      	movs	r0, #0
 8002838:	f7fe fa26 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800283c:	2001      	movs	r0, #1
 800283e:	f7fe fa23 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8002842:	203f      	movs	r0, #63	; 0x3f
 8002844:	f7fe fa20 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002848:	202a      	movs	r0, #42	; 0x2a
 800284a:	f7fe f9f9 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe fa1a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe fa17 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800285a:	2001      	movs	r0, #1
 800285c:	f7fe fa14 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002860:	20df      	movs	r0, #223	; 0xdf
 8002862:	f7fe fa11 	bl	8000c88 <LCD_WR_DATAX>
		HAL_Delay(120);
 8002866:	2078      	movs	r0, #120	; 0x78
 8002868:	f004 fc2c 	bl	80070c4 <HAL_Delay>
		LCD_WR_REG(0X29);
 800286c:	2029      	movs	r0, #41	; 0x29
 800286e:	f7fe f9e7 	bl	8000c40 <LCD_WR_REG>
 8002872:	f003 bc27 	b.w	80060c4 <LCD_Init+0x3e34>
 8002876:	bf00      	nop
 8002878:	20000714 	.word	0x20000714
	} else if (lcddev.id == 0x5310) {
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <LCD_Init+0x5fc>)
 800287e:	889b      	ldrh	r3, [r3, #4]
 8002880:	f245 3210 	movw	r2, #21264	; 0x5310
 8002884:	4293      	cmp	r3, r2
 8002886:	f040 877c 	bne.w	8003782 <LCD_Init+0x14f2>
 800288a:	e001      	b.n	8002890 <LCD_Init+0x600>
 800288c:	20000714 	.word	0x20000714
		LCD_WR_REG(0xED);
 8002890:	20ed      	movs	r0, #237	; 0xed
 8002892:	f7fe f9d5 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002896:	2001      	movs	r0, #1
 8002898:	f7fe f9f6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800289c:	20fe      	movs	r0, #254	; 0xfe
 800289e:	f7fe f9f3 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80028a2:	20ee      	movs	r0, #238	; 0xee
 80028a4:	f7fe f9cc 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80028a8:	20de      	movs	r0, #222	; 0xde
 80028aa:	f7fe f9ed 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80028ae:	2021      	movs	r0, #33	; 0x21
 80028b0:	f7fe f9ea 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80028b4:	20f1      	movs	r0, #241	; 0xf1
 80028b6:	f7fe f9c3 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7fe f9e4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80028c0:	20df      	movs	r0, #223	; 0xdf
 80028c2:	f7fe f9bd 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80028c6:	2010      	movs	r0, #16
 80028c8:	f7fe f9de 	bl	8000c88 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80028cc:	20c4      	movs	r0, #196	; 0xc4
 80028ce:	f7fe f9b7 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80028d2:	208f      	movs	r0, #143	; 0x8f
 80028d4:	f7fe f9d8 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80028d8:	20c6      	movs	r0, #198	; 0xc6
 80028da:	f7fe f9b1 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe f9d2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80028e4:	20e2      	movs	r0, #226	; 0xe2
 80028e6:	f7fe f9cf 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80028ea:	20e2      	movs	r0, #226	; 0xe2
 80028ec:	f7fe f9cc 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80028f0:	20e2      	movs	r0, #226	; 0xe2
 80028f2:	f7fe f9c9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80028f6:	20bf      	movs	r0, #191	; 0xbf
 80028f8:	f7fe f9a2 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80028fc:	20aa      	movs	r0, #170	; 0xaa
 80028fe:	f7fe f9c3 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002902:	20b0      	movs	r0, #176	; 0xb0
 8002904:	f7fe f99c 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002908:	200d      	movs	r0, #13
 800290a:	f7fe f9bd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe f9ba 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002914:	200d      	movs	r0, #13
 8002916:	f7fe f9b7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe f9b4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002920:	2011      	movs	r0, #17
 8002922:	f7fe f9b1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe f9ae 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 800292c:	2019      	movs	r0, #25
 800292e:	f7fe f9ab 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe f9a8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002938:	2021      	movs	r0, #33	; 0x21
 800293a:	f7fe f9a5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe f9a2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8002944:	202d      	movs	r0, #45	; 0x2d
 8002946:	f7fe f99f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe f99c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002950:	203d      	movs	r0, #61	; 0x3d
 8002952:	f7fe f999 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe f996 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800295c:	205d      	movs	r0, #93	; 0x5d
 800295e:	f7fe f993 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fe f990 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002968:	205d      	movs	r0, #93	; 0x5d
 800296a:	f7fe f98d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe f98a 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002974:	20b1      	movs	r0, #177	; 0xb1
 8002976:	f7fe f963 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800297a:	2080      	movs	r0, #128	; 0x80
 800297c:	f7fe f984 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7fe f981 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002986:	208b      	movs	r0, #139	; 0x8b
 8002988:	f7fe f97e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe f97b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002992:	2096      	movs	r0, #150	; 0x96
 8002994:	f7fe f978 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe f975 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800299e:	20b2      	movs	r0, #178	; 0xb2
 80029a0:	f7fe f94e 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fe f96f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7fe f96c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80029b0:	2002      	movs	r0, #2
 80029b2:	f7fe f969 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe f966 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80029bc:	2003      	movs	r0, #3
 80029be:	f7fe f963 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe f960 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80029c8:	20b3      	movs	r0, #179	; 0xb3
 80029ca:	f7fe f939 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7fe f95a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe f957 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fe f954 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe f951 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe f94e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fe f94b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe f948 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe f945 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7fe f942 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe f93f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7fe f93c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe f939 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe f936 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fe f933 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7fe f930 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe f92d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe f92a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7fe f927 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7fe f924 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7fe f921 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe f91e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fe f91b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7fe f918 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe f915 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002a5e:	20b4      	movs	r0, #180	; 0xb4
 8002a60:	f7fe f8ee 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002a64:	208b      	movs	r0, #139	; 0x8b
 8002a66:	f7fe f90f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe f90c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002a70:	2096      	movs	r0, #150	; 0x96
 8002a72:	f7fe f909 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fe f906 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002a7c:	20a1      	movs	r0, #161	; 0xa1
 8002a7e:	f7fe f903 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fe f900 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002a88:	20b5      	movs	r0, #181	; 0xb5
 8002a8a:	f7fe f8d9 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f7fe f8fa 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7fe f8f7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002a9a:	2003      	movs	r0, #3
 8002a9c:	f7fe f8f4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7fe f8f1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002aa6:	2004      	movs	r0, #4
 8002aa8:	f7fe f8ee 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7fe f8eb 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002ab2:	20b6      	movs	r0, #182	; 0xb6
 8002ab4:	f7fe f8c4 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7fe f8e5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe f8e2 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002ac4:	20b7      	movs	r0, #183	; 0xb7
 8002ac6:	f7fe f8bb 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe f8dc 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7fe f8d9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002ad6:	203f      	movs	r0, #63	; 0x3f
 8002ad8:	f7fe f8d6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7fe f8d3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002ae2:	205e      	movs	r0, #94	; 0x5e
 8002ae4:	f7fe f8d0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fe f8cd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002aee:	2064      	movs	r0, #100	; 0x64
 8002af0:	f7fe f8ca 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fe f8c7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002afa:	208c      	movs	r0, #140	; 0x8c
 8002afc:	f7fe f8c4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fe f8c1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002b06:	20ac      	movs	r0, #172	; 0xac
 8002b08:	f7fe f8be 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fe f8bb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002b12:	20dc      	movs	r0, #220	; 0xdc
 8002b14:	f7fe f8b8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe f8b5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002b1e:	2070      	movs	r0, #112	; 0x70
 8002b20:	f7fe f8b2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7fe f8af 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002b2a:	2090      	movs	r0, #144	; 0x90
 8002b2c:	f7fe f8ac 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fe f8a9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002b36:	20eb      	movs	r0, #235	; 0xeb
 8002b38:	f7fe f8a6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7fe f8a3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002b42:	20dc      	movs	r0, #220	; 0xdc
 8002b44:	f7fe f8a0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fe f89d 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002b4e:	20b8      	movs	r0, #184	; 0xb8
 8002b50:	f7fe f876 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7fe f897 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fe f894 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7fe f891 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fe f88e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe f88b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fe f888 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe f885 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fe f882 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002b84:	20ba      	movs	r0, #186	; 0xba
 8002b86:	f7fe f85b 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002b8a:	2024      	movs	r0, #36	; 0x24
 8002b8c:	f7fe f87c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe f879 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fe f876 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fe f873 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002ba2:	20c1      	movs	r0, #193	; 0xc1
 8002ba4:	f7fe f84c 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002ba8:	2020      	movs	r0, #32
 8002baa:	f7fe f86d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7fe f86a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002bb4:	2054      	movs	r0, #84	; 0x54
 8002bb6:	f7fe f867 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fe f864 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002bc0:	20ff      	movs	r0, #255	; 0xff
 8002bc2:	f7fe f861 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f7fe f85e 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002bcc:	20c2      	movs	r0, #194	; 0xc2
 8002bce:	f7fe f837 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002bd2:	200a      	movs	r0, #10
 8002bd4:	f7fe f858 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fe f855 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002bde:	2004      	movs	r0, #4
 8002be0:	f7fe f852 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fe f84f 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002bea:	20c3      	movs	r0, #195	; 0xc3
 8002bec:	f7fe f828 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002bf0:	203c      	movs	r0, #60	; 0x3c
 8002bf2:	f7fe f849 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7fe f846 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002bfc:	203a      	movs	r0, #58	; 0x3a
 8002bfe:	f7fe f843 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7fe f840 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002c08:	2039      	movs	r0, #57	; 0x39
 8002c0a:	f7fe f83d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7fe f83a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002c14:	2037      	movs	r0, #55	; 0x37
 8002c16:	f7fe f837 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7fe f834 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002c20:	203c      	movs	r0, #60	; 0x3c
 8002c22:	f7fe f831 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7fe f82e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002c2c:	2036      	movs	r0, #54	; 0x36
 8002c2e:	f7fe f82b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fe f828 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002c38:	2032      	movs	r0, #50	; 0x32
 8002c3a:	f7fe f825 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7fe f822 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002c44:	202f      	movs	r0, #47	; 0x2f
 8002c46:	f7fe f81f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fe f81c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002c50:	202c      	movs	r0, #44	; 0x2c
 8002c52:	f7fe f819 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fe f816 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002c5c:	2029      	movs	r0, #41	; 0x29
 8002c5e:	f7fe f813 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7fe f810 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002c68:	2026      	movs	r0, #38	; 0x26
 8002c6a:	f7fe f80d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7fe f80a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002c74:	2024      	movs	r0, #36	; 0x24
 8002c76:	f7fe f807 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7fe f804 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002c80:	2024      	movs	r0, #36	; 0x24
 8002c82:	f7fe f801 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fd fffe 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002c8c:	2023      	movs	r0, #35	; 0x23
 8002c8e:	f7fd fffb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fd fff8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002c98:	203c      	movs	r0, #60	; 0x3c
 8002c9a:	f7fd fff5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fd fff2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ca4:	2036      	movs	r0, #54	; 0x36
 8002ca6:	f7fd ffef 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fd ffec 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002cb0:	2032      	movs	r0, #50	; 0x32
 8002cb2:	f7fd ffe9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fd ffe6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002cbc:	202f      	movs	r0, #47	; 0x2f
 8002cbe:	f7fd ffe3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fd ffe0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002cc8:	202c      	movs	r0, #44	; 0x2c
 8002cca:	f7fd ffdd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fd ffda 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002cd4:	2029      	movs	r0, #41	; 0x29
 8002cd6:	f7fd ffd7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fd ffd4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002ce0:	2026      	movs	r0, #38	; 0x26
 8002ce2:	f7fd ffd1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fd ffce 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002cec:	2024      	movs	r0, #36	; 0x24
 8002cee:	f7fd ffcb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fd ffc8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002cf8:	2024      	movs	r0, #36	; 0x24
 8002cfa:	f7fd ffc5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fd ffc2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002d04:	2023      	movs	r0, #35	; 0x23
 8002d06:	f7fd ffbf 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fd ffbc 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002d10:	20c4      	movs	r0, #196	; 0xc4
 8002d12:	f7fd ff95 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002d16:	2062      	movs	r0, #98	; 0x62
 8002d18:	f7fd ffb6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fd ffb3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002d22:	2005      	movs	r0, #5
 8002d24:	f7fd ffb0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fd ffad 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002d2e:	2084      	movs	r0, #132	; 0x84
 8002d30:	f7fd ffaa 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fd ffa7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002d3a:	20f0      	movs	r0, #240	; 0xf0
 8002d3c:	f7fd ffa4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7fd ffa1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002d46:	2018      	movs	r0, #24
 8002d48:	f7fd ff9e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fd ff9b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002d52:	20a4      	movs	r0, #164	; 0xa4
 8002d54:	f7fd ff98 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fd ff95 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002d5e:	2018      	movs	r0, #24
 8002d60:	f7fd ff92 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fd ff8f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002d6a:	2050      	movs	r0, #80	; 0x50
 8002d6c:	f7fd ff8c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fd ff89 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002d76:	200c      	movs	r0, #12
 8002d78:	f7fd ff86 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fd ff83 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002d82:	2017      	movs	r0, #23
 8002d84:	f7fd ff80 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fd ff7d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002d8e:	2095      	movs	r0, #149	; 0x95
 8002d90:	f7fd ff7a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fd ff77 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d9a:	20f3      	movs	r0, #243	; 0xf3
 8002d9c:	f7fd ff74 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fd ff71 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002da6:	20e6      	movs	r0, #230	; 0xe6
 8002da8:	f7fd ff6e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fd ff6b 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002db2:	20c5      	movs	r0, #197	; 0xc5
 8002db4:	f7fd ff44 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002db8:	2032      	movs	r0, #50	; 0x32
 8002dba:	f7fd ff65 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f7fd ff62 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002dc4:	2044      	movs	r0, #68	; 0x44
 8002dc6:	f7fd ff5f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7fd ff5c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002dd0:	2065      	movs	r0, #101	; 0x65
 8002dd2:	f7fd ff59 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f7fd ff56 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002ddc:	2076      	movs	r0, #118	; 0x76
 8002dde:	f7fd ff53 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7fd ff50 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002de8:	2088      	movs	r0, #136	; 0x88
 8002dea:	f7fd ff4d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7fd ff4a 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002df4:	20c6      	movs	r0, #198	; 0xc6
 8002df6:	f7fd ff23 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002dfa:	2020      	movs	r0, #32
 8002dfc:	f7fd ff44 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fd ff41 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002e06:	2017      	movs	r0, #23
 8002e08:	f7fd ff3e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fd ff3b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002e12:	2001      	movs	r0, #1
 8002e14:	f7fd ff38 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fd ff35 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002e1e:	20c7      	movs	r0, #199	; 0xc7
 8002e20:	f7fd ff0e 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fd ff2f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fd ff2c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7fd ff29 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fd ff26 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002e3c:	20c8      	movs	r0, #200	; 0xc8
 8002e3e:	f7fd feff 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fd ff20 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7fd ff1d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fd ff1a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fd ff17 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002e5a:	20c9      	movs	r0, #201	; 0xc9
 8002e5c:	f7fd fef0 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7fd ff11 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fd ff0e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7fd ff0b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fd ff08 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fd ff05 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fd ff02 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fd feff 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fd fefc 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7fd fef9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fd fef6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7fd fef3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fd fef0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7fd feed 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7fd feea 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fd fee7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fee4 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002ec0:	20e0      	movs	r0, #224	; 0xe0
 8002ec2:	f7fd febd 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002ec6:	2016      	movs	r0, #22
 8002ec8:	f7fd fede 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7fd fedb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002ed2:	201c      	movs	r0, #28
 8002ed4:	f7fd fed8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7fd fed5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002ede:	2021      	movs	r0, #33	; 0x21
 8002ee0:	f7fd fed2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7fd fecf 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002eea:	2036      	movs	r0, #54	; 0x36
 8002eec:	f7fd fecc 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fd fec9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002ef6:	2046      	movs	r0, #70	; 0x46
 8002ef8:	f7fd fec6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fd fec3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002f02:	2052      	movs	r0, #82	; 0x52
 8002f04:	f7fd fec0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fd febd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002f0e:	2064      	movs	r0, #100	; 0x64
 8002f10:	f7fd feba 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fd feb7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002f1a:	207a      	movs	r0, #122	; 0x7a
 8002f1c:	f7fd feb4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fd feb1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002f26:	208b      	movs	r0, #139	; 0x8b
 8002f28:	f7fd feae 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fd feab 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002f32:	2099      	movs	r0, #153	; 0x99
 8002f34:	f7fd fea8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fd fea5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002f3e:	20a8      	movs	r0, #168	; 0xa8
 8002f40:	f7fd fea2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fd fe9f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002f4a:	20b9      	movs	r0, #185	; 0xb9
 8002f4c:	f7fd fe9c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd fe99 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f56:	20c4      	movs	r0, #196	; 0xc4
 8002f58:	f7fd fe96 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fd fe93 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002f62:	20ca      	movs	r0, #202	; 0xca
 8002f64:	f7fd fe90 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fe8d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002f6e:	20d2      	movs	r0, #210	; 0xd2
 8002f70:	f7fd fe8a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fd fe87 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002f7a:	20d9      	movs	r0, #217	; 0xd9
 8002f7c:	f7fd fe84 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fd fe81 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002f86:	20e0      	movs	r0, #224	; 0xe0
 8002f88:	f7fd fe7e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fd fe7b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f92:	20f3      	movs	r0, #243	; 0xf3
 8002f94:	f7fd fe78 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fd fe75 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002f9e:	20e1      	movs	r0, #225	; 0xe1
 8002fa0:	f7fd fe4e 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002fa4:	2016      	movs	r0, #22
 8002fa6:	f7fd fe6f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7fd fe6c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002fb0:	201c      	movs	r0, #28
 8002fb2:	f7fd fe69 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fd fe66 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002fbc:	2022      	movs	r0, #34	; 0x22
 8002fbe:	f7fd fe63 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7fd fe60 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002fc8:	2036      	movs	r0, #54	; 0x36
 8002fca:	f7fd fe5d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fd fe5a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002fd4:	2045      	movs	r0, #69	; 0x45
 8002fd6:	f7fd fe57 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fd fe54 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002fe0:	2052      	movs	r0, #82	; 0x52
 8002fe2:	f7fd fe51 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fd fe4e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002fec:	2064      	movs	r0, #100	; 0x64
 8002fee:	f7fd fe4b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fd fe48 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002ff8:	207a      	movs	r0, #122	; 0x7a
 8002ffa:	f7fd fe45 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7fd fe42 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8003004:	208b      	movs	r0, #139	; 0x8b
 8003006:	f7fd fe3f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fd fe3c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003010:	2099      	movs	r0, #153	; 0x99
 8003012:	f7fd fe39 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fd fe36 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 800301c:	20a8      	movs	r0, #168	; 0xa8
 800301e:	f7fd fe33 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fd fe30 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8003028:	20b9      	movs	r0, #185	; 0xb9
 800302a:	f7fd fe2d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302e:	2000      	movs	r0, #0
 8003030:	f7fd fe2a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003034:	20c4      	movs	r0, #196	; 0xc4
 8003036:	f7fd fe27 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303a:	2000      	movs	r0, #0
 800303c:	f7fd fe24 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8003040:	20ca      	movs	r0, #202	; 0xca
 8003042:	f7fd fe21 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003046:	2000      	movs	r0, #0
 8003048:	f7fd fe1e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 800304c:	20d2      	movs	r0, #210	; 0xd2
 800304e:	f7fd fe1b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003052:	2000      	movs	r0, #0
 8003054:	f7fd fe18 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8003058:	20d8      	movs	r0, #216	; 0xd8
 800305a:	f7fd fe15 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305e:	2000      	movs	r0, #0
 8003060:	f7fd fe12 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8003064:	20e0      	movs	r0, #224	; 0xe0
 8003066:	f7fd fe0f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306a:	2000      	movs	r0, #0
 800306c:	f7fd fe0c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003070:	20f3      	movs	r0, #243	; 0xf3
 8003072:	f7fd fe09 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fd fe06 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 800307c:	20e2      	movs	r0, #226	; 0xe2
 800307e:	f7fd fddf 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003082:	2005      	movs	r0, #5
 8003084:	f7fd fe00 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003088:	2000      	movs	r0, #0
 800308a:	f7fd fdfd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 800308e:	200b      	movs	r0, #11
 8003090:	f7fd fdfa 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003094:	2000      	movs	r0, #0
 8003096:	f7fd fdf7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 800309a:	201b      	movs	r0, #27
 800309c:	f7fd fdf4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7fd fdf1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80030a6:	2034      	movs	r0, #52	; 0x34
 80030a8:	f7fd fdee 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7fd fdeb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80030b2:	2044      	movs	r0, #68	; 0x44
 80030b4:	f7fd fde8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7fd fde5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 80030be:	204f      	movs	r0, #79	; 0x4f
 80030c0:	f7fd fde2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fd fddf 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 80030ca:	2061      	movs	r0, #97	; 0x61
 80030cc:	f7fd fddc 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7fd fdd9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 80030d6:	2079      	movs	r0, #121	; 0x79
 80030d8:	f7fd fdd6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fd fdd3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80030e2:	2088      	movs	r0, #136	; 0x88
 80030e4:	f7fd fdd0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fd fdcd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80030ee:	2097      	movs	r0, #151	; 0x97
 80030f0:	f7fd fdca 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fd fdc7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80030fa:	20a6      	movs	r0, #166	; 0xa6
 80030fc:	f7fd fdc4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fd fdc1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003106:	20b7      	movs	r0, #183	; 0xb7
 8003108:	f7fd fdbe 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fd fdbb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003112:	20c2      	movs	r0, #194	; 0xc2
 8003114:	f7fd fdb8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003118:	2000      	movs	r0, #0
 800311a:	f7fd fdb5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 800311e:	20c7      	movs	r0, #199	; 0xc7
 8003120:	f7fd fdb2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fd fdaf 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 800312a:	20d1      	movs	r0, #209	; 0xd1
 800312c:	f7fd fdac 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003130:	2000      	movs	r0, #0
 8003132:	f7fd fda9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8003136:	20d6      	movs	r0, #214	; 0xd6
 8003138:	f7fd fda6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313c:	2000      	movs	r0, #0
 800313e:	f7fd fda3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003142:	20dd      	movs	r0, #221	; 0xdd
 8003144:	f7fd fda0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fd fd9d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800314e:	20f3      	movs	r0, #243	; 0xf3
 8003150:	f7fd fd9a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fd fd97 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 800315a:	20e3      	movs	r0, #227	; 0xe3
 800315c:	f7fd fd70 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003160:	2005      	movs	r0, #5
 8003162:	f7fd fd91 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003166:	2000      	movs	r0, #0
 8003168:	f7fd fd8e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 800316c:	200a      	movs	r0, #10
 800316e:	f7fd fd8b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003172:	2000      	movs	r0, #0
 8003174:	f7fd fd88 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003178:	201c      	movs	r0, #28
 800317a:	f7fd fd85 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800317e:	2000      	movs	r0, #0
 8003180:	f7fd fd82 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003184:	2033      	movs	r0, #51	; 0x33
 8003186:	f7fd fd7f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f7fd fd7c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003190:	2044      	movs	r0, #68	; 0x44
 8003192:	f7fd fd79 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7fd fd76 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800319c:	2050      	movs	r0, #80	; 0x50
 800319e:	f7fd fd73 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fd fd70 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 80031a8:	2062      	movs	r0, #98	; 0x62
 80031aa:	f7fd fd6d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7fd fd6a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 80031b4:	2078      	movs	r0, #120	; 0x78
 80031b6:	f7fd fd67 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd fd64 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80031c0:	2088      	movs	r0, #136	; 0x88
 80031c2:	f7fd fd61 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fd fd5e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80031cc:	2097      	movs	r0, #151	; 0x97
 80031ce:	f7fd fd5b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fd fd58 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80031d8:	20a6      	movs	r0, #166	; 0xa6
 80031da:	f7fd fd55 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fd fd52 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80031e4:	20b7      	movs	r0, #183	; 0xb7
 80031e6:	f7fd fd4f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fd fd4c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80031f0:	20c2      	movs	r0, #194	; 0xc2
 80031f2:	f7fd fd49 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fd fd46 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80031fc:	20c7      	movs	r0, #199	; 0xc7
 80031fe:	f7fd fd43 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fd fd40 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003208:	20d1      	movs	r0, #209	; 0xd1
 800320a:	f7fd fd3d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7fd fd3a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8003214:	20d5      	movs	r0, #213	; 0xd5
 8003216:	f7fd fd37 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321a:	2000      	movs	r0, #0
 800321c:	f7fd fd34 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003220:	20dd      	movs	r0, #221	; 0xdd
 8003222:	f7fd fd31 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fd fd2e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800322c:	20f3      	movs	r0, #243	; 0xf3
 800322e:	f7fd fd2b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f7fd fd28 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003238:	20e4      	movs	r0, #228	; 0xe4
 800323a:	f7fd fd01 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800323e:	2001      	movs	r0, #1
 8003240:	f7fd fd22 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003244:	2000      	movs	r0, #0
 8003246:	f7fd fd1f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800324a:	2001      	movs	r0, #1
 800324c:	f7fd fd1c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003250:	2000      	movs	r0, #0
 8003252:	f7fd fd19 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003256:	2002      	movs	r0, #2
 8003258:	f7fd fd16 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325c:	2000      	movs	r0, #0
 800325e:	f7fd fd13 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8003262:	202a      	movs	r0, #42	; 0x2a
 8003264:	f7fd fd10 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003268:	2000      	movs	r0, #0
 800326a:	f7fd fd0d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800326e:	203c      	movs	r0, #60	; 0x3c
 8003270:	f7fd fd0a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fd fd07 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 800327a:	204b      	movs	r0, #75	; 0x4b
 800327c:	f7fd fd04 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fd fd01 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003286:	205d      	movs	r0, #93	; 0x5d
 8003288:	f7fd fcfe 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7fd fcfb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003292:	2074      	movs	r0, #116	; 0x74
 8003294:	f7fd fcf8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f7fd fcf5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800329e:	2084      	movs	r0, #132	; 0x84
 80032a0:	f7fd fcf2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fd fcef 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80032aa:	2093      	movs	r0, #147	; 0x93
 80032ac:	f7fd fcec 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd fce9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80032b6:	20a2      	movs	r0, #162	; 0xa2
 80032b8:	f7fd fce6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd fce3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80032c2:	20b3      	movs	r0, #179	; 0xb3
 80032c4:	f7fd fce0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd fcdd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80032ce:	20be      	movs	r0, #190	; 0xbe
 80032d0:	f7fd fcda 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fd fcd7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80032da:	20c4      	movs	r0, #196	; 0xc4
 80032dc:	f7fd fcd4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fd fcd1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80032e6:	20cd      	movs	r0, #205	; 0xcd
 80032e8:	f7fd fcce 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd fccb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80032f2:	20d3      	movs	r0, #211	; 0xd3
 80032f4:	f7fd fcc8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fd fcc5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80032fe:	20dd      	movs	r0, #221	; 0xdd
 8003300:	f7fd fcc2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fd fcbf 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800330a:	20f3      	movs	r0, #243	; 0xf3
 800330c:	f7fd fcbc 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd fcb9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8003316:	20e5      	movs	r0, #229	; 0xe5
 8003318:	f7fd fc92 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fd fcb3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003322:	2000      	movs	r0, #0
 8003324:	f7fd fcb0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fd fcad 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800332e:	2000      	movs	r0, #0
 8003330:	f7fd fcaa 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003334:	2002      	movs	r0, #2
 8003336:	f7fd fca7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333a:	2000      	movs	r0, #0
 800333c:	f7fd fca4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003340:	2029      	movs	r0, #41	; 0x29
 8003342:	f7fd fca1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f7fd fc9e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800334c:	203c      	movs	r0, #60	; 0x3c
 800334e:	f7fd fc9b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003352:	2000      	movs	r0, #0
 8003354:	f7fd fc98 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003358:	204b      	movs	r0, #75	; 0x4b
 800335a:	f7fd fc95 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fd fc92 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003364:	205d      	movs	r0, #93	; 0x5d
 8003366:	f7fd fc8f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fd fc8c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003370:	2074      	movs	r0, #116	; 0x74
 8003372:	f7fd fc89 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003376:	2000      	movs	r0, #0
 8003378:	f7fd fc86 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800337c:	2084      	movs	r0, #132	; 0x84
 800337e:	f7fd fc83 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fd fc80 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003388:	2093      	movs	r0, #147	; 0x93
 800338a:	f7fd fc7d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fd fc7a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003394:	20a2      	movs	r0, #162	; 0xa2
 8003396:	f7fd fc77 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fd fc74 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80033a0:	20b3      	movs	r0, #179	; 0xb3
 80033a2:	f7fd fc71 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fd fc6e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80033ac:	20be      	movs	r0, #190	; 0xbe
 80033ae:	f7fd fc6b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd fc68 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80033b8:	20c4      	movs	r0, #196	; 0xc4
 80033ba:	f7fd fc65 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fc62 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80033c4:	20cd      	movs	r0, #205	; 0xcd
 80033c6:	f7fd fc5f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fc5c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80033d0:	20d3      	movs	r0, #211	; 0xd3
 80033d2:	f7fd fc59 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd fc56 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80033dc:	20dc      	movs	r0, #220	; 0xdc
 80033de:	f7fd fc53 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd fc50 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80033e8:	20f3      	movs	r0, #243	; 0xf3
 80033ea:	f7fd fc4d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fd fc4a 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80033f4:	20e6      	movs	r0, #230	; 0xe6
 80033f6:	f7fd fc23 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80033fa:	2011      	movs	r0, #17
 80033fc:	f7fd fc44 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003400:	2000      	movs	r0, #0
 8003402:	f7fd fc41 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003406:	2034      	movs	r0, #52	; 0x34
 8003408:	f7fd fc3e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd fc3b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003412:	2056      	movs	r0, #86	; 0x56
 8003414:	f7fd fc38 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003418:	2000      	movs	r0, #0
 800341a:	f7fd fc35 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800341e:	2076      	movs	r0, #118	; 0x76
 8003420:	f7fd fc32 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003424:	2000      	movs	r0, #0
 8003426:	f7fd fc2f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800342a:	2077      	movs	r0, #119	; 0x77
 800342c:	f7fd fc2c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003430:	2000      	movs	r0, #0
 8003432:	f7fd fc29 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003436:	2066      	movs	r0, #102	; 0x66
 8003438:	f7fd fc26 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343c:	2000      	movs	r0, #0
 800343e:	f7fd fc23 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003442:	2088      	movs	r0, #136	; 0x88
 8003444:	f7fd fc20 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003448:	2000      	movs	r0, #0
 800344a:	f7fd fc1d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800344e:	2099      	movs	r0, #153	; 0x99
 8003450:	f7fd fc1a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003454:	2000      	movs	r0, #0
 8003456:	f7fd fc17 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800345a:	20bb      	movs	r0, #187	; 0xbb
 800345c:	f7fd fc14 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003460:	2000      	movs	r0, #0
 8003462:	f7fd fc11 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003466:	2099      	movs	r0, #153	; 0x99
 8003468:	f7fd fc0e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd fc0b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003472:	2066      	movs	r0, #102	; 0x66
 8003474:	f7fd fc08 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003478:	2000      	movs	r0, #0
 800347a:	f7fd fc05 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800347e:	2055      	movs	r0, #85	; 0x55
 8003480:	f7fd fc02 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003484:	2000      	movs	r0, #0
 8003486:	f7fd fbff 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800348a:	2055      	movs	r0, #85	; 0x55
 800348c:	f7fd fbfc 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003490:	2000      	movs	r0, #0
 8003492:	f7fd fbf9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003496:	2045      	movs	r0, #69	; 0x45
 8003498:	f7fd fbf6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800349c:	2000      	movs	r0, #0
 800349e:	f7fd fbf3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80034a2:	2043      	movs	r0, #67	; 0x43
 80034a4:	f7fd fbf0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fd fbed 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80034ae:	2044      	movs	r0, #68	; 0x44
 80034b0:	f7fd fbea 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7fd fbe7 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80034ba:	20e7      	movs	r0, #231	; 0xe7
 80034bc:	f7fd fbc0 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80034c0:	2032      	movs	r0, #50	; 0x32
 80034c2:	f7fd fbe1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7fd fbde 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80034cc:	2055      	movs	r0, #85	; 0x55
 80034ce:	f7fd fbdb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f7fd fbd8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80034d8:	2076      	movs	r0, #118	; 0x76
 80034da:	f7fd fbd5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd fbd2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80034e4:	2066      	movs	r0, #102	; 0x66
 80034e6:	f7fd fbcf 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7fd fbcc 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80034f0:	2067      	movs	r0, #103	; 0x67
 80034f2:	f7fd fbc9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fd fbc6 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80034fc:	2067      	movs	r0, #103	; 0x67
 80034fe:	f7fd fbc3 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd fbc0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003508:	2087      	movs	r0, #135	; 0x87
 800350a:	f7fd fbbd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800350e:	2000      	movs	r0, #0
 8003510:	f7fd fbba 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003514:	2099      	movs	r0, #153	; 0x99
 8003516:	f7fd fbb7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351a:	2000      	movs	r0, #0
 800351c:	f7fd fbb4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003520:	20bb      	movs	r0, #187	; 0xbb
 8003522:	f7fd fbb1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd fbae 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800352c:	2099      	movs	r0, #153	; 0x99
 800352e:	f7fd fbab 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003532:	2000      	movs	r0, #0
 8003534:	f7fd fba8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003538:	2077      	movs	r0, #119	; 0x77
 800353a:	f7fd fba5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800353e:	2000      	movs	r0, #0
 8003540:	f7fd fba2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003544:	2044      	movs	r0, #68	; 0x44
 8003546:	f7fd fb9f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800354a:	2000      	movs	r0, #0
 800354c:	f7fd fb9c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003550:	2056      	movs	r0, #86	; 0x56
 8003552:	f7fd fb99 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003556:	2000      	movs	r0, #0
 8003558:	f7fd fb96 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800355c:	2023      	movs	r0, #35	; 0x23
 800355e:	f7fd fb93 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fd fb90 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003568:	2033      	movs	r0, #51	; 0x33
 800356a:	f7fd fb8d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800356e:	2000      	movs	r0, #0
 8003570:	f7fd fb8a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003574:	2045      	movs	r0, #69	; 0x45
 8003576:	f7fd fb87 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800357a:	2000      	movs	r0, #0
 800357c:	f7fd fb84 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003580:	20e8      	movs	r0, #232	; 0xe8
 8003582:	f7fd fb5d 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003586:	2000      	movs	r0, #0
 8003588:	f7fd fb7e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800358c:	2000      	movs	r0, #0
 800358e:	f7fd fb7b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003592:	2099      	movs	r0, #153	; 0x99
 8003594:	f7fd fb78 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003598:	2000      	movs	r0, #0
 800359a:	f7fd fb75 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800359e:	2087      	movs	r0, #135	; 0x87
 80035a0:	f7fd fb72 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f7fd fb6f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80035aa:	2088      	movs	r0, #136	; 0x88
 80035ac:	f7fd fb6c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b0:	2000      	movs	r0, #0
 80035b2:	f7fd fb69 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80035b6:	2077      	movs	r0, #119	; 0x77
 80035b8:	f7fd fb66 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fd fb63 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80035c2:	2066      	movs	r0, #102	; 0x66
 80035c4:	f7fd fb60 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7fd fb5d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80035ce:	2088      	movs	r0, #136	; 0x88
 80035d0:	f7fd fb5a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d4:	2000      	movs	r0, #0
 80035d6:	f7fd fb57 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80035da:	20aa      	movs	r0, #170	; 0xaa
 80035dc:	f7fd fb54 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fd fb51 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80035e6:	20bb      	movs	r0, #187	; 0xbb
 80035e8:	f7fd fb4e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7fd fb4b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80035f2:	2099      	movs	r0, #153	; 0x99
 80035f4:	f7fd fb48 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035f8:	2000      	movs	r0, #0
 80035fa:	f7fd fb45 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80035fe:	2066      	movs	r0, #102	; 0x66
 8003600:	f7fd fb42 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003604:	2000      	movs	r0, #0
 8003606:	f7fd fb3f 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800360a:	2055      	movs	r0, #85	; 0x55
 800360c:	f7fd fb3c 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003610:	2000      	movs	r0, #0
 8003612:	f7fd fb39 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003616:	2055      	movs	r0, #85	; 0x55
 8003618:	f7fd fb36 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800361c:	2000      	movs	r0, #0
 800361e:	f7fd fb33 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003622:	2044      	movs	r0, #68	; 0x44
 8003624:	f7fd fb30 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003628:	2000      	movs	r0, #0
 800362a:	f7fd fb2d 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800362e:	2044      	movs	r0, #68	; 0x44
 8003630:	f7fd fb2a 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003634:	2000      	movs	r0, #0
 8003636:	f7fd fb27 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800363a:	2055      	movs	r0, #85	; 0x55
 800363c:	f7fd fb24 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003640:	2000      	movs	r0, #0
 8003642:	f7fd fb21 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003646:	20e9      	movs	r0, #233	; 0xe9
 8003648:	f7fd fafa 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800364c:	20aa      	movs	r0, #170	; 0xaa
 800364e:	f7fd fb1b 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003652:	2000      	movs	r0, #0
 8003654:	f7fd fb18 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003658:	2000      	movs	r0, #0
 800365a:	f7fd fb15 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800365e:	2000      	movs	r0, #0
 8003660:	f7fd fb12 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003664:	2000      	movs	r0, #0
 8003666:	f7fd faeb 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800366a:	20aa      	movs	r0, #170	; 0xaa
 800366c:	f7fd fb0c 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003670:	20cf      	movs	r0, #207	; 0xcf
 8003672:	f7fd fae5 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003676:	2000      	movs	r0, #0
 8003678:	f7fd fb06 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800367c:	2000      	movs	r0, #0
 800367e:	f7fd fb03 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003682:	2000      	movs	r0, #0
 8003684:	f7fd fb00 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003688:	2000      	movs	r0, #0
 800368a:	f7fd fafd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800368e:	2000      	movs	r0, #0
 8003690:	f7fd fafa 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003694:	2000      	movs	r0, #0
 8003696:	f7fd faf7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800369a:	2000      	movs	r0, #0
 800369c:	f7fd faf4 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7fd faf1 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7fd faee 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fd faeb 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f7fd fae8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036b8:	2000      	movs	r0, #0
 80036ba:	f7fd fae5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036be:	2000      	movs	r0, #0
 80036c0:	f7fd fae2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7fd fadf 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036ca:	2000      	movs	r0, #0
 80036cc:	f7fd fadc 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f7fd fad9 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036d6:	2000      	movs	r0, #0
 80036d8:	f7fd fad6 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80036dc:	20f0      	movs	r0, #240	; 0xf0
 80036de:	f7fd faaf 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7fd fad0 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80036e8:	2050      	movs	r0, #80	; 0x50
 80036ea:	f7fd facd 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f7fd faca 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036f4:	2000      	movs	r0, #0
 80036f6:	f7fd fac7 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7fd fac4 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003700:	20f3      	movs	r0, #243	; 0xf3
 8003702:	f7fd fa9d 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003706:	2000      	movs	r0, #0
 8003708:	f7fd fabe 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800370c:	20f9      	movs	r0, #249	; 0xf9
 800370e:	f7fd fa97 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003712:	2006      	movs	r0, #6
 8003714:	f7fd fab8 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003718:	2010      	movs	r0, #16
 800371a:	f7fd fab5 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800371e:	2029      	movs	r0, #41	; 0x29
 8003720:	f7fd fab2 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003724:	2000      	movs	r0, #0
 8003726:	f7fd faaf 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 800372a:	203a      	movs	r0, #58	; 0x3a
 800372c:	f7fd fa88 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003730:	2055      	movs	r0, #85	; 0x55
 8003732:	f7fd faa9 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003736:	2011      	movs	r0, #17
 8003738:	f7fd fa82 	bl	8000c40 <LCD_WR_REG>
		HAL_Delay(100);
 800373c:	2064      	movs	r0, #100	; 0x64
 800373e:	f003 fcc1 	bl	80070c4 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003742:	2029      	movs	r0, #41	; 0x29
 8003744:	f7fd fa7c 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003748:	2035      	movs	r0, #53	; 0x35
 800374a:	f7fd fa79 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800374e:	2000      	movs	r0, #0
 8003750:	f7fd fa9a 	bl	8000c88 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003754:	2051      	movs	r0, #81	; 0x51
 8003756:	f7fd fa73 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 800375a:	20ff      	movs	r0, #255	; 0xff
 800375c:	f7fd fa94 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003760:	2053      	movs	r0, #83	; 0x53
 8003762:	f7fd fa6d 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003766:	202c      	movs	r0, #44	; 0x2c
 8003768:	f7fd fa8e 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 800376c:	2055      	movs	r0, #85	; 0x55
 800376e:	f7fd fa67 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003772:	2082      	movs	r0, #130	; 0x82
 8003774:	f7fd fa88 	bl	8000c88 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003778:	202c      	movs	r0, #44	; 0x2c
 800377a:	f7fd fa61 	bl	8000c40 <LCD_WR_REG>
 800377e:	f002 bca1 	b.w	80060c4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <LCD_Init+0x1504>)
 8003784:	889b      	ldrh	r3, [r3, #4]
 8003786:	f245 5210 	movw	r2, #21776	; 0x5510
 800378a:	4293      	cmp	r3, r2
 800378c:	f040 8782 	bne.w	8004694 <LCD_Init+0x2404>
 8003790:	e002      	b.n	8003798 <LCD_Init+0x1508>
 8003792:	bf00      	nop
 8003794:	20000714 	.word	0x20000714
		LCD_WriteReg(0xF000, 0x55);
 8003798:	2155      	movs	r1, #85	; 0x55
 800379a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800379e:	f7fd fadb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80037a2:	21aa      	movs	r1, #170	; 0xaa
 80037a4:	f24f 0001 	movw	r0, #61441	; 0xf001
 80037a8:	f7fd fad6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80037ac:	2152      	movs	r1, #82	; 0x52
 80037ae:	f24f 0002 	movw	r0, #61442	; 0xf002
 80037b2:	f7fd fad1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80037b6:	2108      	movs	r1, #8
 80037b8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80037bc:	f7fd facc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80037c0:	2101      	movs	r1, #1
 80037c2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80037c6:	f7fd fac7 	bl	8000d58 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80037ca:	210d      	movs	r1, #13
 80037cc:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80037d0:	f7fd fac2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80037d4:	210d      	movs	r1, #13
 80037d6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80037da:	f7fd fabd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80037de:	210d      	movs	r1, #13
 80037e0:	f24b 0002 	movw	r0, #45058	; 0xb002
 80037e4:	f7fd fab8 	bl	8000d58 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80037e8:	2134      	movs	r1, #52	; 0x34
 80037ea:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80037ee:	f7fd fab3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80037f2:	2134      	movs	r1, #52	; 0x34
 80037f4:	f24b 6001 	movw	r0, #46593	; 0xb601
 80037f8:	f7fd faae 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80037fc:	2134      	movs	r1, #52	; 0x34
 80037fe:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003802:	f7fd faa9 	bl	8000d58 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003806:	210d      	movs	r1, #13
 8003808:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800380c:	f7fd faa4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003810:	210d      	movs	r1, #13
 8003812:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003816:	f7fd fa9f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800381a:	210d      	movs	r1, #13
 800381c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003820:	f7fd fa9a 	bl	8000d58 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8003824:	2134      	movs	r1, #52	; 0x34
 8003826:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800382a:	f7fd fa95 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 800382e:	2134      	movs	r1, #52	; 0x34
 8003830:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003834:	f7fd fa90 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003838:	2134      	movs	r1, #52	; 0x34
 800383a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800383e:	f7fd fa8b 	bl	8000d58 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8003842:	2100      	movs	r1, #0
 8003844:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003848:	f7fd fa86 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 800384c:	2100      	movs	r1, #0
 800384e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003852:	f7fd fa81 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003856:	2100      	movs	r1, #0
 8003858:	f24b 2002 	movw	r0, #45570	; 0xb202
 800385c:	f7fd fa7c 	bl	8000d58 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003860:	2124      	movs	r1, #36	; 0x24
 8003862:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003866:	f7fd fa77 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800386a:	2124      	movs	r1, #36	; 0x24
 800386c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003870:	f7fd fa72 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003874:	2124      	movs	r1, #36	; 0x24
 8003876:	f64b 0002 	movw	r0, #47106	; 0xb802
 800387a:	f7fd fa6d 	bl	8000d58 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800387e:	2101      	movs	r1, #1
 8003880:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003884:	f7fd fa68 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003888:	210f      	movs	r1, #15
 800388a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800388e:	f7fd fa63 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003892:	210f      	movs	r1, #15
 8003894:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003898:	f7fd fa5e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800389c:	210f      	movs	r1, #15
 800389e:	f24b 3002 	movw	r0, #45826	; 0xb302
 80038a2:	f7fd fa59 	bl	8000d58 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80038a6:	2134      	movs	r1, #52	; 0x34
 80038a8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80038ac:	f7fd fa54 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80038b0:	2134      	movs	r1, #52	; 0x34
 80038b2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80038b6:	f7fd fa4f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80038ba:	2134      	movs	r1, #52	; 0x34
 80038bc:	f64b 1002 	movw	r0, #47362	; 0xb902
 80038c0:	f7fd fa4a 	bl	8000d58 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80038c4:	2108      	movs	r1, #8
 80038c6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80038ca:	f7fd fa45 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80038ce:	2108      	movs	r1, #8
 80038d0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80038d4:	f7fd fa40 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80038d8:	2108      	movs	r1, #8
 80038da:	f24b 5002 	movw	r0, #46338	; 0xb502
 80038de:	f7fd fa3b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80038e2:	2103      	movs	r1, #3
 80038e4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80038e8:	f7fd fa36 	bl	8000d58 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80038ec:	2124      	movs	r1, #36	; 0x24
 80038ee:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80038f2:	f7fd fa31 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80038f6:	2124      	movs	r1, #36	; 0x24
 80038f8:	f64b 2001 	movw	r0, #47617	; 0xba01
 80038fc:	f7fd fa2c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003900:	2124      	movs	r1, #36	; 0x24
 8003902:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003906:	f7fd fa27 	bl	8000d58 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800390a:	2100      	movs	r1, #0
 800390c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003910:	f7fd fa22 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003914:	2178      	movs	r1, #120	; 0x78
 8003916:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800391a:	f7fd fa1d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800391e:	2100      	movs	r1, #0
 8003920:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003924:	f7fd fa18 	bl	8000d58 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003928:	2100      	movs	r1, #0
 800392a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800392e:	f7fd fa13 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8003932:	2178      	movs	r1, #120	; 0x78
 8003934:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003938:	f7fd fa0e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 800393c:	2100      	movs	r1, #0
 800393e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003942:	f7fd fa09 	bl	8000d58 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8003946:	2100      	movs	r1, #0
 8003948:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800394c:	f7fd fa04 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003950:	2164      	movs	r1, #100	; 0x64
 8003952:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003956:	f7fd f9ff 	bl	8000d58 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 800395a:	2100      	movs	r1, #0
 800395c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003960:	f7fd f9fa 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003964:	2133      	movs	r1, #51	; 0x33
 8003966:	f24d 1001 	movw	r0, #53505	; 0xd101
 800396a:	f7fd f9f5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 800396e:	2100      	movs	r1, #0
 8003970:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003974:	f7fd f9f0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003978:	2134      	movs	r1, #52	; 0x34
 800397a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800397e:	f7fd f9eb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003982:	2100      	movs	r1, #0
 8003984:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003988:	f7fd f9e6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800398c:	213a      	movs	r1, #58	; 0x3a
 800398e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003992:	f7fd f9e1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003996:	2100      	movs	r1, #0
 8003998:	f24d 1006 	movw	r0, #53510	; 0xd106
 800399c:	f7fd f9dc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80039a0:	214a      	movs	r1, #74	; 0x4a
 80039a2:	f24d 1007 	movw	r0, #53511	; 0xd107
 80039a6:	f7fd f9d7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80039aa:	2100      	movs	r1, #0
 80039ac:	f24d 1008 	movw	r0, #53512	; 0xd108
 80039b0:	f7fd f9d2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80039b4:	215c      	movs	r1, #92	; 0x5c
 80039b6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80039ba:	f7fd f9cd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80039be:	2100      	movs	r1, #0
 80039c0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80039c4:	f7fd f9c8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80039c8:	2181      	movs	r1, #129	; 0x81
 80039ca:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80039ce:	f7fd f9c3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80039d2:	2100      	movs	r1, #0
 80039d4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80039d8:	f7fd f9be 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80039dc:	21a6      	movs	r1, #166	; 0xa6
 80039de:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80039e2:	f7fd f9b9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80039e6:	2100      	movs	r1, #0
 80039e8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80039ec:	f7fd f9b4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80039f0:	21e5      	movs	r1, #229	; 0xe5
 80039f2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80039f6:	f7fd f9af 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80039fa:	2101      	movs	r1, #1
 80039fc:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003a00:	f7fd f9aa 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003a04:	2113      	movs	r1, #19
 8003a06:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003a0a:	f7fd f9a5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8003a0e:	2101      	movs	r1, #1
 8003a10:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003a14:	f7fd f9a0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003a18:	2154      	movs	r1, #84	; 0x54
 8003a1a:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003a1e:	f7fd f99b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8003a22:	2101      	movs	r1, #1
 8003a24:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003a28:	f7fd f996 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003a2c:	2182      	movs	r1, #130	; 0x82
 8003a2e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003a32:	f7fd f991 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8003a36:	2101      	movs	r1, #1
 8003a38:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003a3c:	f7fd f98c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003a40:	21ca      	movs	r1, #202	; 0xca
 8003a42:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003a46:	f7fd f987 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003a50:	f7fd f982 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003a54:	2100      	movs	r1, #0
 8003a56:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003a5a:	f7fd f97d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003a5e:	2102      	movs	r1, #2
 8003a60:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003a64:	f7fd f978 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003a68:	2101      	movs	r1, #1
 8003a6a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003a6e:	f7fd f973 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003a72:	2102      	movs	r1, #2
 8003a74:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003a78:	f7fd f96e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003a7c:	2134      	movs	r1, #52	; 0x34
 8003a7e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003a82:	f7fd f969 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003a86:	2102      	movs	r1, #2
 8003a88:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003a8c:	f7fd f964 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003a90:	2167      	movs	r1, #103	; 0x67
 8003a92:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003a96:	f7fd f95f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003aa0:	f7fd f95a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003aa4:	2184      	movs	r1, #132	; 0x84
 8003aa6:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003aaa:	f7fd f955 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003aae:	2102      	movs	r1, #2
 8003ab0:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003ab4:	f7fd f950 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003ab8:	21a4      	movs	r1, #164	; 0xa4
 8003aba:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003abe:	f7fd f94b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003ac8:	f7fd f946 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003acc:	21b7      	movs	r1, #183	; 0xb7
 8003ace:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003ad2:	f7fd f941 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003adc:	f7fd f93c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003ae0:	21cf      	movs	r1, #207	; 0xcf
 8003ae2:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003ae6:	f7fd f937 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003aea:	2102      	movs	r1, #2
 8003aec:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003af0:	f7fd f932 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8003af4:	21de      	movs	r1, #222	; 0xde
 8003af6:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003afa:	f7fd f92d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003afe:	2102      	movs	r1, #2
 8003b00:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003b04:	f7fd f928 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003b08:	21f2      	movs	r1, #242	; 0xf2
 8003b0a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003b0e:	f7fd f923 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003b12:	2102      	movs	r1, #2
 8003b14:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003b18:	f7fd f91e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003b1c:	21fe      	movs	r1, #254	; 0xfe
 8003b1e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003b22:	f7fd f919 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8003b26:	2103      	movs	r1, #3
 8003b28:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003b2c:	f7fd f914 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003b30:	2110      	movs	r1, #16
 8003b32:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003b36:	f7fd f90f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003b3a:	2103      	movs	r1, #3
 8003b3c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003b40:	f7fd f90a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003b44:	2133      	movs	r1, #51	; 0x33
 8003b46:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003b4a:	f7fd f905 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003b4e:	2103      	movs	r1, #3
 8003b50:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003b54:	f7fd f900 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003b58:	216d      	movs	r1, #109	; 0x6d
 8003b5a:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003b5e:	f7fd f8fb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003b62:	2100      	movs	r1, #0
 8003b64:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003b68:	f7fd f8f6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003b6c:	2133      	movs	r1, #51	; 0x33
 8003b6e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003b72:	f7fd f8f1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003b76:	2100      	movs	r1, #0
 8003b78:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003b7c:	f7fd f8ec 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003b80:	2134      	movs	r1, #52	; 0x34
 8003b82:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003b86:	f7fd f8e7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003b90:	f7fd f8e2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003b94:	213a      	movs	r1, #58	; 0x3a
 8003b96:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003b9a:	f7fd f8dd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003ba4:	f7fd f8d8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003ba8:	214a      	movs	r1, #74	; 0x4a
 8003baa:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003bae:	f7fd f8d3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003bb8:	f7fd f8ce 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003bbc:	215c      	movs	r1, #92	; 0x5c
 8003bbe:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003bc2:	f7fd f8c9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003bcc:	f7fd f8c4 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003bd0:	2181      	movs	r1, #129	; 0x81
 8003bd2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003bd6:	f7fd f8bf 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003bda:	2100      	movs	r1, #0
 8003bdc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003be0:	f7fd f8ba 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003be4:	21a6      	movs	r1, #166	; 0xa6
 8003be6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003bea:	f7fd f8b5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003bf4:	f7fd f8b0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003bf8:	21e5      	movs	r1, #229	; 0xe5
 8003bfa:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003bfe:	f7fd f8ab 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003c02:	2101      	movs	r1, #1
 8003c04:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003c08:	f7fd f8a6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003c0c:	2113      	movs	r1, #19
 8003c0e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003c12:	f7fd f8a1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003c16:	2101      	movs	r1, #1
 8003c18:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003c1c:	f7fd f89c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003c20:	2154      	movs	r1, #84	; 0x54
 8003c22:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003c26:	f7fd f897 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003c30:	f7fd f892 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003c34:	2182      	movs	r1, #130	; 0x82
 8003c36:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003c3a:	f7fd f88d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003c3e:	2101      	movs	r1, #1
 8003c40:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003c44:	f7fd f888 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003c48:	21ca      	movs	r1, #202	; 0xca
 8003c4a:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003c4e:	f7fd f883 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003c52:	2102      	movs	r1, #2
 8003c54:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003c58:	f7fd f87e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003c62:	f7fd f879 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003c66:	2102      	movs	r1, #2
 8003c68:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003c6c:	f7fd f874 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003c70:	2101      	movs	r1, #1
 8003c72:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003c76:	f7fd f86f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003c80:	f7fd f86a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003c84:	2134      	movs	r1, #52	; 0x34
 8003c86:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003c8a:	f7fd f865 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003c8e:	2102      	movs	r1, #2
 8003c90:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003c94:	f7fd f860 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003c98:	2167      	movs	r1, #103	; 0x67
 8003c9a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003c9e:	f7fd f85b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003ca8:	f7fd f856 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003cac:	2184      	movs	r1, #132	; 0x84
 8003cae:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003cb2:	f7fd f851 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003cbc:	f7fd f84c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003cc0:	21a4      	movs	r1, #164	; 0xa4
 8003cc2:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003cc6:	f7fd f847 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003cca:	2102      	movs	r1, #2
 8003ccc:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003cd0:	f7fd f842 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003cd4:	21b7      	movs	r1, #183	; 0xb7
 8003cd6:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003cda:	f7fd f83d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003cde:	2102      	movs	r1, #2
 8003ce0:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003ce4:	f7fd f838 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003ce8:	21cf      	movs	r1, #207	; 0xcf
 8003cea:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003cee:	f7fd f833 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003cf8:	f7fd f82e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003cfc:	21de      	movs	r1, #222	; 0xde
 8003cfe:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003d02:	f7fd f829 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003d06:	2102      	movs	r1, #2
 8003d08:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003d0c:	f7fd f824 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003d10:	21f2      	movs	r1, #242	; 0xf2
 8003d12:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003d16:	f7fd f81f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003d20:	f7fd f81a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003d24:	21fe      	movs	r1, #254	; 0xfe
 8003d26:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003d2a:	f7fd f815 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003d2e:	2103      	movs	r1, #3
 8003d30:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003d34:	f7fd f810 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003d38:	2110      	movs	r1, #16
 8003d3a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003d3e:	f7fd f80b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003d42:	2103      	movs	r1, #3
 8003d44:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003d48:	f7fd f806 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003d4c:	2133      	movs	r1, #51	; 0x33
 8003d4e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003d52:	f7fd f801 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003d56:	2103      	movs	r1, #3
 8003d58:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003d5c:	f7fc fffc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003d60:	216d      	movs	r1, #109	; 0x6d
 8003d62:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003d66:	f7fc fff7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003d70:	f7fc fff2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003d74:	2133      	movs	r1, #51	; 0x33
 8003d76:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003d7a:	f7fc ffed 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003d84:	f7fc ffe8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003d88:	2134      	movs	r1, #52	; 0x34
 8003d8a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003d8e:	f7fc ffe3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003d92:	2100      	movs	r1, #0
 8003d94:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003d98:	f7fc ffde 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003d9c:	213a      	movs	r1, #58	; 0x3a
 8003d9e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003da2:	f7fc ffd9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003da6:	2100      	movs	r1, #0
 8003da8:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003dac:	f7fc ffd4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003db0:	214a      	movs	r1, #74	; 0x4a
 8003db2:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003db6:	f7fc ffcf 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003dc0:	f7fc ffca 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003dc4:	215c      	movs	r1, #92	; 0x5c
 8003dc6:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003dca:	f7fc ffc5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003dd4:	f7fc ffc0 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003dd8:	2181      	movs	r1, #129	; 0x81
 8003dda:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003dde:	f7fc ffbb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003de2:	2100      	movs	r1, #0
 8003de4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003de8:	f7fc ffb6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003dec:	21a6      	movs	r1, #166	; 0xa6
 8003dee:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003df2:	f7fc ffb1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003df6:	2100      	movs	r1, #0
 8003df8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003dfc:	f7fc ffac 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003e00:	21e5      	movs	r1, #229	; 0xe5
 8003e02:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003e06:	f7fc ffa7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003e10:	f7fc ffa2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003e14:	2113      	movs	r1, #19
 8003e16:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003e1a:	f7fc ff9d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003e24:	f7fc ff98 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003e28:	2154      	movs	r1, #84	; 0x54
 8003e2a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003e2e:	f7fc ff93 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003e32:	2101      	movs	r1, #1
 8003e34:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003e38:	f7fc ff8e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003e3c:	2182      	movs	r1, #130	; 0x82
 8003e3e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003e42:	f7fc ff89 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003e46:	2101      	movs	r1, #1
 8003e48:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003e4c:	f7fc ff84 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003e50:	21ca      	movs	r1, #202	; 0xca
 8003e52:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003e56:	f7fc ff7f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003e60:	f7fc ff7a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003e64:	2100      	movs	r1, #0
 8003e66:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003e6a:	f7fc ff75 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003e6e:	2102      	movs	r1, #2
 8003e70:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003e74:	f7fc ff70 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003e78:	2101      	movs	r1, #1
 8003e7a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003e7e:	f7fc ff6b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003e82:	2102      	movs	r1, #2
 8003e84:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003e88:	f7fc ff66 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003e8c:	2134      	movs	r1, #52	; 0x34
 8003e8e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003e92:	f7fc ff61 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003e96:	2102      	movs	r1, #2
 8003e98:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003e9c:	f7fc ff5c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003ea0:	2167      	movs	r1, #103	; 0x67
 8003ea2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003ea6:	f7fc ff57 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003eaa:	2102      	movs	r1, #2
 8003eac:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003eb0:	f7fc ff52 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003eb4:	2184      	movs	r1, #132	; 0x84
 8003eb6:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003eba:	f7fc ff4d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003ec4:	f7fc ff48 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003ec8:	21a4      	movs	r1, #164	; 0xa4
 8003eca:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003ece:	f7fc ff43 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003ed8:	f7fc ff3e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003edc:	21b7      	movs	r1, #183	; 0xb7
 8003ede:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003ee2:	f7fc ff39 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003eec:	f7fc ff34 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003ef0:	21cf      	movs	r1, #207	; 0xcf
 8003ef2:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003ef6:	f7fc ff2f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003efa:	2102      	movs	r1, #2
 8003efc:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003f00:	f7fc ff2a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003f04:	21de      	movs	r1, #222	; 0xde
 8003f06:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003f0a:	f7fc ff25 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003f0e:	2102      	movs	r1, #2
 8003f10:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003f14:	f7fc ff20 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003f18:	21f2      	movs	r1, #242	; 0xf2
 8003f1a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003f1e:	f7fc ff1b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003f22:	2102      	movs	r1, #2
 8003f24:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003f28:	f7fc ff16 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003f2c:	21fe      	movs	r1, #254	; 0xfe
 8003f2e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003f32:	f7fc ff11 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003f36:	2103      	movs	r1, #3
 8003f38:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003f3c:	f7fc ff0c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003f40:	2110      	movs	r1, #16
 8003f42:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003f46:	f7fc ff07 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003f4a:	2103      	movs	r1, #3
 8003f4c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003f50:	f7fc ff02 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003f54:	2133      	movs	r1, #51	; 0x33
 8003f56:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003f5a:	f7fc fefd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003f5e:	2103      	movs	r1, #3
 8003f60:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003f64:	f7fc fef8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003f68:	216d      	movs	r1, #109	; 0x6d
 8003f6a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003f6e:	f7fc fef3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003f72:	2100      	movs	r1, #0
 8003f74:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003f78:	f7fc feee 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003f7c:	2133      	movs	r1, #51	; 0x33
 8003f7e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003f82:	f7fc fee9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003f86:	2100      	movs	r1, #0
 8003f88:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003f8c:	f7fc fee4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003f90:	2134      	movs	r1, #52	; 0x34
 8003f92:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003f96:	f7fc fedf 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003fa0:	f7fc feda 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003fa4:	213a      	movs	r1, #58	; 0x3a
 8003fa6:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003faa:	f7fc fed5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003fb4:	f7fc fed0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003fb8:	214a      	movs	r1, #74	; 0x4a
 8003fba:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003fbe:	f7fc fecb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003fc8:	f7fc fec6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003fcc:	215c      	movs	r1, #92	; 0x5c
 8003fce:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003fd2:	f7fc fec1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003fdc:	f7fc febc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003fe0:	2181      	movs	r1, #129	; 0x81
 8003fe2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003fe6:	f7fc feb7 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003fea:	2100      	movs	r1, #0
 8003fec:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003ff0:	f7fc feb2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003ff4:	21a6      	movs	r1, #166	; 0xa6
 8003ff6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003ffa:	f7fc fead 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003ffe:	2100      	movs	r1, #0
 8004000:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8004004:	f7fc fea8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8004008:	21e5      	movs	r1, #229	; 0xe5
 800400a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800400e:	f7fc fea3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8004012:	2101      	movs	r1, #1
 8004014:	f24d 4010 	movw	r0, #54288	; 0xd410
 8004018:	f7fc fe9e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 800401c:	2113      	movs	r1, #19
 800401e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8004022:	f7fc fe99 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8004026:	2101      	movs	r1, #1
 8004028:	f24d 4012 	movw	r0, #54290	; 0xd412
 800402c:	f7fc fe94 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8004030:	2154      	movs	r1, #84	; 0x54
 8004032:	f24d 4013 	movw	r0, #54291	; 0xd413
 8004036:	f7fc fe8f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 800403a:	2101      	movs	r1, #1
 800403c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8004040:	f7fc fe8a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8004044:	2182      	movs	r1, #130	; 0x82
 8004046:	f24d 4015 	movw	r0, #54293	; 0xd415
 800404a:	f7fc fe85 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 800404e:	2101      	movs	r1, #1
 8004050:	f24d 4016 	movw	r0, #54294	; 0xd416
 8004054:	f7fc fe80 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8004058:	21ca      	movs	r1, #202	; 0xca
 800405a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800405e:	f7fc fe7b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8004062:	2102      	movs	r1, #2
 8004064:	f24d 4018 	movw	r0, #54296	; 0xd418
 8004068:	f7fc fe76 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 800406c:	2100      	movs	r1, #0
 800406e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8004072:	f7fc fe71 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8004076:	2102      	movs	r1, #2
 8004078:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800407c:	f7fc fe6c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8004080:	2101      	movs	r1, #1
 8004082:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8004086:	f7fc fe67 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 800408a:	2102      	movs	r1, #2
 800408c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8004090:	f7fc fe62 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8004094:	2134      	movs	r1, #52	; 0x34
 8004096:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800409a:	f7fc fe5d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 800409e:	2102      	movs	r1, #2
 80040a0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80040a4:	f7fc fe58 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 80040a8:	2167      	movs	r1, #103	; 0x67
 80040aa:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80040ae:	f7fc fe53 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 80040b2:	2102      	movs	r1, #2
 80040b4:	f24d 4020 	movw	r0, #54304	; 0xd420
 80040b8:	f7fc fe4e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 80040bc:	2184      	movs	r1, #132	; 0x84
 80040be:	f24d 4021 	movw	r0, #54305	; 0xd421
 80040c2:	f7fc fe49 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 80040c6:	2102      	movs	r1, #2
 80040c8:	f24d 4022 	movw	r0, #54306	; 0xd422
 80040cc:	f7fc fe44 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 80040d0:	21a4      	movs	r1, #164	; 0xa4
 80040d2:	f24d 4023 	movw	r0, #54307	; 0xd423
 80040d6:	f7fc fe3f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 80040da:	2102      	movs	r1, #2
 80040dc:	f24d 4024 	movw	r0, #54308	; 0xd424
 80040e0:	f7fc fe3a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 80040e4:	21b7      	movs	r1, #183	; 0xb7
 80040e6:	f24d 4025 	movw	r0, #54309	; 0xd425
 80040ea:	f7fc fe35 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 80040ee:	2102      	movs	r1, #2
 80040f0:	f24d 4026 	movw	r0, #54310	; 0xd426
 80040f4:	f7fc fe30 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 80040f8:	21cf      	movs	r1, #207	; 0xcf
 80040fa:	f24d 4027 	movw	r0, #54311	; 0xd427
 80040fe:	f7fc fe2b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8004102:	2102      	movs	r1, #2
 8004104:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004108:	f7fc fe26 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 800410c:	21de      	movs	r1, #222	; 0xde
 800410e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8004112:	f7fc fe21 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8004116:	2102      	movs	r1, #2
 8004118:	f24d 402a 	movw	r0, #54314	; 0xd42a
 800411c:	f7fc fe1c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8004120:	21f2      	movs	r1, #242	; 0xf2
 8004122:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8004126:	f7fc fe17 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 800412a:	2102      	movs	r1, #2
 800412c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004130:	f7fc fe12 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8004134:	21fe      	movs	r1, #254	; 0xfe
 8004136:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800413a:	f7fc fe0d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 800413e:	2103      	movs	r1, #3
 8004140:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8004144:	f7fc fe08 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8004148:	2110      	movs	r1, #16
 800414a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800414e:	f7fc fe03 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8004152:	2103      	movs	r1, #3
 8004154:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004158:	f7fc fdfe 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 800415c:	2133      	movs	r1, #51	; 0x33
 800415e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8004162:	f7fc fdf9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8004166:	2103      	movs	r1, #3
 8004168:	f24d 4032 	movw	r0, #54322	; 0xd432
 800416c:	f7fc fdf4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8004170:	216d      	movs	r1, #109	; 0x6d
 8004172:	f24d 4033 	movw	r0, #54323	; 0xd433
 8004176:	f7fc fdef 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 800417a:	2100      	movs	r1, #0
 800417c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8004180:	f7fc fdea 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8004184:	2133      	movs	r1, #51	; 0x33
 8004186:	f24d 5001 	movw	r0, #54529	; 0xd501
 800418a:	f7fc fde5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 800418e:	2100      	movs	r1, #0
 8004190:	f24d 5002 	movw	r0, #54530	; 0xd502
 8004194:	f7fc fde0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8004198:	2134      	movs	r1, #52	; 0x34
 800419a:	f24d 5003 	movw	r0, #54531	; 0xd503
 800419e:	f7fc fddb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 80041a2:	2100      	movs	r1, #0
 80041a4:	f24d 5004 	movw	r0, #54532	; 0xd504
 80041a8:	f7fc fdd6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 80041ac:	213a      	movs	r1, #58	; 0x3a
 80041ae:	f24d 5005 	movw	r0, #54533	; 0xd505
 80041b2:	f7fc fdd1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 80041b6:	2100      	movs	r1, #0
 80041b8:	f24d 5006 	movw	r0, #54534	; 0xd506
 80041bc:	f7fc fdcc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 80041c0:	214a      	movs	r1, #74	; 0x4a
 80041c2:	f24d 5007 	movw	r0, #54535	; 0xd507
 80041c6:	f7fc fdc7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80041ca:	2100      	movs	r1, #0
 80041cc:	f24d 5008 	movw	r0, #54536	; 0xd508
 80041d0:	f7fc fdc2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80041d4:	215c      	movs	r1, #92	; 0x5c
 80041d6:	f24d 5009 	movw	r0, #54537	; 0xd509
 80041da:	f7fc fdbd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 80041de:	2100      	movs	r1, #0
 80041e0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80041e4:	f7fc fdb8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 80041e8:	2181      	movs	r1, #129	; 0x81
 80041ea:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80041ee:	f7fc fdb3 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80041f2:	2100      	movs	r1, #0
 80041f4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80041f8:	f7fc fdae 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80041fc:	21a6      	movs	r1, #166	; 0xa6
 80041fe:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8004202:	f7fc fda9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8004206:	2100      	movs	r1, #0
 8004208:	f24d 500e 	movw	r0, #54542	; 0xd50e
 800420c:	f7fc fda4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8004210:	21e5      	movs	r1, #229	; 0xe5
 8004212:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8004216:	f7fc fd9f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 800421a:	2101      	movs	r1, #1
 800421c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004220:	f7fc fd9a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8004224:	2113      	movs	r1, #19
 8004226:	f24d 5011 	movw	r0, #54545	; 0xd511
 800422a:	f7fc fd95 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 800422e:	2101      	movs	r1, #1
 8004230:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004234:	f7fc fd90 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004238:	2154      	movs	r1, #84	; 0x54
 800423a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800423e:	f7fc fd8b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8004242:	2101      	movs	r1, #1
 8004244:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004248:	f7fc fd86 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 800424c:	2182      	movs	r1, #130	; 0x82
 800424e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8004252:	f7fc fd81 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8004256:	2101      	movs	r1, #1
 8004258:	f24d 5016 	movw	r0, #54550	; 0xd516
 800425c:	f7fc fd7c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004260:	21ca      	movs	r1, #202	; 0xca
 8004262:	f24d 5017 	movw	r0, #54551	; 0xd517
 8004266:	f7fc fd77 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 800426a:	2102      	movs	r1, #2
 800426c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8004270:	f7fc fd72 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8004274:	2100      	movs	r1, #0
 8004276:	f24d 5019 	movw	r0, #54553	; 0xd519
 800427a:	f7fc fd6d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 800427e:	2102      	movs	r1, #2
 8004280:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8004284:	f7fc fd68 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8004288:	2101      	movs	r1, #1
 800428a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800428e:	f7fc fd63 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8004292:	2102      	movs	r1, #2
 8004294:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004298:	f7fc fd5e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 800429c:	2134      	movs	r1, #52	; 0x34
 800429e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80042a2:	f7fc fd59 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 80042a6:	2102      	movs	r1, #2
 80042a8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80042ac:	f7fc fd54 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 80042b0:	2167      	movs	r1, #103	; 0x67
 80042b2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80042b6:	f7fc fd4f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 80042ba:	2102      	movs	r1, #2
 80042bc:	f24d 5020 	movw	r0, #54560	; 0xd520
 80042c0:	f7fc fd4a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 80042c4:	2184      	movs	r1, #132	; 0x84
 80042c6:	f24d 5021 	movw	r0, #54561	; 0xd521
 80042ca:	f7fc fd45 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 80042ce:	2102      	movs	r1, #2
 80042d0:	f24d 5022 	movw	r0, #54562	; 0xd522
 80042d4:	f7fc fd40 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 80042d8:	21a4      	movs	r1, #164	; 0xa4
 80042da:	f24d 5023 	movw	r0, #54563	; 0xd523
 80042de:	f7fc fd3b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80042e2:	2102      	movs	r1, #2
 80042e4:	f24d 5024 	movw	r0, #54564	; 0xd524
 80042e8:	f7fc fd36 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80042ec:	21b7      	movs	r1, #183	; 0xb7
 80042ee:	f24d 5025 	movw	r0, #54565	; 0xd525
 80042f2:	f7fc fd31 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80042f6:	2102      	movs	r1, #2
 80042f8:	f24d 5026 	movw	r0, #54566	; 0xd526
 80042fc:	f7fc fd2c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8004300:	21cf      	movs	r1, #207	; 0xcf
 8004302:	f24d 5027 	movw	r0, #54567	; 0xd527
 8004306:	f7fc fd27 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 800430a:	2102      	movs	r1, #2
 800430c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004310:	f7fc fd22 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8004314:	21de      	movs	r1, #222	; 0xde
 8004316:	f24d 5029 	movw	r0, #54569	; 0xd529
 800431a:	f7fc fd1d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 800431e:	2102      	movs	r1, #2
 8004320:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8004324:	f7fc fd18 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004328:	21f2      	movs	r1, #242	; 0xf2
 800432a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800432e:	f7fc fd13 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8004332:	2102      	movs	r1, #2
 8004334:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004338:	f7fc fd0e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 800433c:	21fe      	movs	r1, #254	; 0xfe
 800433e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8004342:	f7fc fd09 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8004346:	2103      	movs	r1, #3
 8004348:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800434c:	f7fc fd04 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004350:	2110      	movs	r1, #16
 8004352:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004356:	f7fc fcff 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800435a:	2103      	movs	r1, #3
 800435c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004360:	f7fc fcfa 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8004364:	2133      	movs	r1, #51	; 0x33
 8004366:	f24d 5031 	movw	r0, #54577	; 0xd531
 800436a:	f7fc fcf5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800436e:	2103      	movs	r1, #3
 8004370:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004374:	f7fc fcf0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004378:	216d      	movs	r1, #109	; 0x6d
 800437a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800437e:	f7fc fceb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8004382:	2100      	movs	r1, #0
 8004384:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004388:	f7fc fce6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800438c:	2133      	movs	r1, #51	; 0x33
 800438e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8004392:	f7fc fce1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8004396:	2100      	movs	r1, #0
 8004398:	f24d 6002 	movw	r0, #54786	; 0xd602
 800439c:	f7fc fcdc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 80043a0:	2134      	movs	r1, #52	; 0x34
 80043a2:	f24d 6003 	movw	r0, #54787	; 0xd603
 80043a6:	f7fc fcd7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 80043aa:	2100      	movs	r1, #0
 80043ac:	f24d 6004 	movw	r0, #54788	; 0xd604
 80043b0:	f7fc fcd2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 80043b4:	213a      	movs	r1, #58	; 0x3a
 80043b6:	f24d 6005 	movw	r0, #54789	; 0xd605
 80043ba:	f7fc fccd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80043be:	2100      	movs	r1, #0
 80043c0:	f24d 6006 	movw	r0, #54790	; 0xd606
 80043c4:	f7fc fcc8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80043c8:	214a      	movs	r1, #74	; 0x4a
 80043ca:	f24d 6007 	movw	r0, #54791	; 0xd607
 80043ce:	f7fc fcc3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80043d2:	2100      	movs	r1, #0
 80043d4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80043d8:	f7fc fcbe 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80043dc:	215c      	movs	r1, #92	; 0x5c
 80043de:	f24d 6009 	movw	r0, #54793	; 0xd609
 80043e2:	f7fc fcb9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80043e6:	2100      	movs	r1, #0
 80043e8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80043ec:	f7fc fcb4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80043f0:	2181      	movs	r1, #129	; 0x81
 80043f2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80043f6:	f7fc fcaf 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80043fa:	2100      	movs	r1, #0
 80043fc:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004400:	f7fc fcaa 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8004404:	21a6      	movs	r1, #166	; 0xa6
 8004406:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800440a:	f7fc fca5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 800440e:	2100      	movs	r1, #0
 8004410:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004414:	f7fc fca0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004418:	21e5      	movs	r1, #229	; 0xe5
 800441a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800441e:	f7fc fc9b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8004422:	2101      	movs	r1, #1
 8004424:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004428:	f7fc fc96 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 800442c:	2113      	movs	r1, #19
 800442e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004432:	f7fc fc91 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8004436:	2101      	movs	r1, #1
 8004438:	f24d 6012 	movw	r0, #54802	; 0xd612
 800443c:	f7fc fc8c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004440:	2154      	movs	r1, #84	; 0x54
 8004442:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004446:	f7fc fc87 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800444a:	2101      	movs	r1, #1
 800444c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004450:	f7fc fc82 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8004454:	2182      	movs	r1, #130	; 0x82
 8004456:	f24d 6015 	movw	r0, #54805	; 0xd615
 800445a:	f7fc fc7d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800445e:	2101      	movs	r1, #1
 8004460:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004464:	f7fc fc78 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004468:	21ca      	movs	r1, #202	; 0xca
 800446a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800446e:	f7fc fc73 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004472:	2102      	movs	r1, #2
 8004474:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004478:	f7fc fc6e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800447c:	2100      	movs	r1, #0
 800447e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004482:	f7fc fc69 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8004486:	2102      	movs	r1, #2
 8004488:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800448c:	f7fc fc64 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004490:	2101      	movs	r1, #1
 8004492:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004496:	f7fc fc5f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800449a:	2102      	movs	r1, #2
 800449c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80044a0:	f7fc fc5a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 80044a4:	2134      	movs	r1, #52	; 0x34
 80044a6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80044aa:	f7fc fc55 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 80044ae:	2102      	movs	r1, #2
 80044b0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80044b4:	f7fc fc50 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80044b8:	2167      	movs	r1, #103	; 0x67
 80044ba:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80044be:	f7fc fc4b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80044c2:	2102      	movs	r1, #2
 80044c4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80044c8:	f7fc fc46 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80044cc:	2184      	movs	r1, #132	; 0x84
 80044ce:	f24d 6021 	movw	r0, #54817	; 0xd621
 80044d2:	f7fc fc41 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80044d6:	2102      	movs	r1, #2
 80044d8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80044dc:	f7fc fc3c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80044e0:	21a4      	movs	r1, #164	; 0xa4
 80044e2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80044e6:	f7fc fc37 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80044ea:	2102      	movs	r1, #2
 80044ec:	f24d 6024 	movw	r0, #54820	; 0xd624
 80044f0:	f7fc fc32 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80044f4:	21b7      	movs	r1, #183	; 0xb7
 80044f6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80044fa:	f7fc fc2d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80044fe:	2102      	movs	r1, #2
 8004500:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004504:	f7fc fc28 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004508:	21cf      	movs	r1, #207	; 0xcf
 800450a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800450e:	f7fc fc23 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8004512:	2102      	movs	r1, #2
 8004514:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004518:	f7fc fc1e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 800451c:	21de      	movs	r1, #222	; 0xde
 800451e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004522:	f7fc fc19 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8004526:	2102      	movs	r1, #2
 8004528:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800452c:	f7fc fc14 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004530:	21f2      	movs	r1, #242	; 0xf2
 8004532:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004536:	f7fc fc0f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 800453a:	2102      	movs	r1, #2
 800453c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004540:	f7fc fc0a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8004544:	21fe      	movs	r1, #254	; 0xfe
 8004546:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800454a:	f7fc fc05 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 800454e:	2103      	movs	r1, #3
 8004550:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004554:	f7fc fc00 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004558:	2110      	movs	r1, #16
 800455a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800455e:	f7fc fbfb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004562:	2103      	movs	r1, #3
 8004564:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004568:	f7fc fbf6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800456c:	2133      	movs	r1, #51	; 0x33
 800456e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004572:	f7fc fbf1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004576:	2103      	movs	r1, #3
 8004578:	f24d 6032 	movw	r0, #54834	; 0xd632
 800457c:	f7fc fbec 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004580:	216d      	movs	r1, #109	; 0x6d
 8004582:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004586:	f7fc fbe7 	bl	8000d58 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800458a:	2155      	movs	r1, #85	; 0x55
 800458c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004590:	f7fc fbe2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004594:	21aa      	movs	r1, #170	; 0xaa
 8004596:	f24f 0001 	movw	r0, #61441	; 0xf001
 800459a:	f7fc fbdd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800459e:	2152      	movs	r1, #82	; 0x52
 80045a0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80045a4:	f7fc fbd8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80045a8:	2108      	movs	r1, #8
 80045aa:	f24f 0003 	movw	r0, #61443	; 0xf003
 80045ae:	f7fc fbd3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 80045b2:	2100      	movs	r1, #0
 80045b4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80045b8:	f7fc fbce 	bl	8000d58 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80045bc:	21cc      	movs	r1, #204	; 0xcc
 80045be:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80045c2:	f7fc fbc9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80045c6:	2100      	movs	r1, #0
 80045c8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80045cc:	f7fc fbc4 	bl	8000d58 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80045d0:	2105      	movs	r1, #5
 80045d2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80045d6:	f7fc fbbf 	bl	8000d58 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80045da:	2170      	movs	r1, #112	; 0x70
 80045dc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80045e0:	f7fc fbba 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80045e4:	2170      	movs	r1, #112	; 0x70
 80045e6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80045ea:	f7fc fbb5 	bl	8000d58 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80045ee:	2101      	movs	r1, #1
 80045f0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80045f4:	f7fc fbb0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80045f8:	2103      	movs	r1, #3
 80045fa:	f64b 0001 	movw	r0, #47105	; 0xb801
 80045fe:	f7fc fbab 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004602:	2103      	movs	r1, #3
 8004604:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004608:	f7fc fba6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 800460c:	2103      	movs	r1, #3
 800460e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004612:	f7fc fba1 	bl	8000d58 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8004616:	2102      	movs	r1, #2
 8004618:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800461c:	f7fc fb9c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004620:	2100      	movs	r1, #0
 8004622:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004626:	f7fc fb97 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800462a:	2100      	movs	r1, #0
 800462c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004630:	f7fc fb92 	bl	8000d58 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8004634:	21d0      	movs	r1, #208	; 0xd0
 8004636:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800463a:	f7fc fb8d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 800463e:	2102      	movs	r1, #2
 8004640:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004644:	f7fc fb88 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004648:	2150      	movs	r1, #80	; 0x50
 800464a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800464e:	f7fc fb83 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004652:	2150      	movs	r1, #80	; 0x50
 8004654:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004658:	f7fc fb7e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 800465c:	2150      	movs	r1, #80	; 0x50
 800465e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004662:	f7fc fb79 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004666:	2100      	movs	r1, #0
 8004668:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800466c:	f7fc fb74 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004670:	2155      	movs	r1, #85	; 0x55
 8004672:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004676:	f7fc fb6f 	bl	8000d58 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800467a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800467e:	f7fc fadf 	bl	8000c40 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004682:	2001      	movs	r0, #1
 8004684:	f002 fd1e 	bl	80070c4 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004688:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800468c:	f7fc fad8 	bl	8000c40 <LCD_WR_REG>
 8004690:	f001 bd18 	b.w	80060c4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004694:	4bec      	ldr	r3, [pc, #944]	; (8004a48 <LCD_Init+0x27b8>)
 8004696:	889b      	ldrh	r3, [r3, #4]
 8004698:	f249 3225 	movw	r2, #37669	; 0x9325
 800469c:	4293      	cmp	r3, r2
 800469e:	f040 80d7 	bne.w	8004850 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 80046a2:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80046a6:	20e5      	movs	r0, #229	; 0xe5
 80046a8:	f7fc fb56 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 80046ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046b0:	2001      	movs	r0, #1
 80046b2:	f7fc fb51 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80046b6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046ba:	2002      	movs	r0, #2
 80046bc:	f7fc fb4c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80046c0:	f241 0130 	movw	r1, #4144	; 0x1030
 80046c4:	2003      	movs	r0, #3
 80046c6:	f7fc fb47 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80046ca:	2100      	movs	r1, #0
 80046cc:	2004      	movs	r0, #4
 80046ce:	f7fc fb43 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80046d2:	f240 2102 	movw	r1, #514	; 0x202
 80046d6:	2008      	movs	r0, #8
 80046d8:	f7fc fb3e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80046dc:	2100      	movs	r1, #0
 80046de:	2009      	movs	r0, #9
 80046e0:	f7fc fb3a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80046e4:	2100      	movs	r1, #0
 80046e6:	200a      	movs	r0, #10
 80046e8:	f7fc fb36 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80046ec:	2100      	movs	r1, #0
 80046ee:	200c      	movs	r0, #12
 80046f0:	f7fc fb32 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80046f4:	2100      	movs	r1, #0
 80046f6:	200d      	movs	r0, #13
 80046f8:	f7fc fb2e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80046fc:	2100      	movs	r1, #0
 80046fe:	200f      	movs	r0, #15
 8004700:	f7fc fb2a 	bl	8000d58 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004704:	2100      	movs	r1, #0
 8004706:	2010      	movs	r0, #16
 8004708:	f7fc fb26 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800470c:	2107      	movs	r1, #7
 800470e:	2011      	movs	r0, #17
 8004710:	f7fc fb22 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004714:	2100      	movs	r1, #0
 8004716:	2012      	movs	r0, #18
 8004718:	f7fc fb1e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800471c:	2100      	movs	r1, #0
 800471e:	2013      	movs	r0, #19
 8004720:	f7fc fb1a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8004724:	2100      	movs	r1, #0
 8004726:	2007      	movs	r0, #7
 8004728:	f7fc fb16 	bl	8000d58 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 800472c:	f241 6190 	movw	r1, #5776	; 0x1690
 8004730:	2010      	movs	r0, #16
 8004732:	f7fc fb11 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004736:	f240 2127 	movw	r1, #551	; 0x227
 800473a:	2011      	movs	r0, #17
 800473c:	f7fc fb0c 	bl	8000d58 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004740:	219d      	movs	r1, #157	; 0x9d
 8004742:	2012      	movs	r0, #18
 8004744:	f7fc fb08 	bl	8000d58 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004748:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800474c:	2013      	movs	r0, #19
 800474e:	f7fc fb03 	bl	8000d58 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004752:	2125      	movs	r1, #37	; 0x25
 8004754:	2029      	movs	r0, #41	; 0x29
 8004756:	f7fc faff 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 800475a:	210d      	movs	r1, #13
 800475c:	202b      	movs	r0, #43	; 0x2b
 800475e:	f7fc fafb 	bl	8000d58 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004762:	2107      	movs	r1, #7
 8004764:	2030      	movs	r0, #48	; 0x30
 8004766:	f7fc faf7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 800476a:	f240 3103 	movw	r1, #771	; 0x303
 800476e:	2031      	movs	r0, #49	; 0x31
 8004770:	f7fc faf2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004774:	2103      	movs	r1, #3
 8004776:	2032      	movs	r0, #50	; 0x32
 8004778:	f7fc faee 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800477c:	f240 2106 	movw	r1, #518	; 0x206
 8004780:	2035      	movs	r0, #53	; 0x35
 8004782:	f7fc fae9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004786:	2108      	movs	r1, #8
 8004788:	2036      	movs	r0, #54	; 0x36
 800478a:	f7fc fae5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800478e:	f240 4106 	movw	r1, #1030	; 0x406
 8004792:	2037      	movs	r0, #55	; 0x37
 8004794:	f7fc fae0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004798:	f44f 7141 	mov.w	r1, #772	; 0x304
 800479c:	2038      	movs	r0, #56	; 0x38
 800479e:	f7fc fadb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80047a2:	2107      	movs	r1, #7
 80047a4:	2039      	movs	r0, #57	; 0x39
 80047a6:	f7fc fad7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80047aa:	f240 6102 	movw	r1, #1538	; 0x602
 80047ae:	203c      	movs	r0, #60	; 0x3c
 80047b0:	f7fc fad2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80047b4:	2108      	movs	r1, #8
 80047b6:	203d      	movs	r0, #61	; 0x3d
 80047b8:	f7fc face 	bl	8000d58 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80047bc:	2100      	movs	r1, #0
 80047be:	2050      	movs	r0, #80	; 0x50
 80047c0:	f7fc faca 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80047c4:	21ef      	movs	r1, #239	; 0xef
 80047c6:	2051      	movs	r0, #81	; 0x51
 80047c8:	f7fc fac6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80047cc:	2100      	movs	r1, #0
 80047ce:	2052      	movs	r0, #82	; 0x52
 80047d0:	f7fc fac2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80047d4:	f240 113f 	movw	r1, #319	; 0x13f
 80047d8:	2053      	movs	r0, #83	; 0x53
 80047da:	f7fc fabd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80047de:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80047e2:	2060      	movs	r0, #96	; 0x60
 80047e4:	f7fc fab8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80047e8:	2101      	movs	r1, #1
 80047ea:	2061      	movs	r0, #97	; 0x61
 80047ec:	f7fc fab4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80047f0:	2100      	movs	r1, #0
 80047f2:	206a      	movs	r0, #106	; 0x6a
 80047f4:	f7fc fab0 	bl	8000d58 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80047f8:	2100      	movs	r1, #0
 80047fa:	2080      	movs	r0, #128	; 0x80
 80047fc:	f7fc faac 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004800:	2100      	movs	r1, #0
 8004802:	2081      	movs	r0, #129	; 0x81
 8004804:	f7fc faa8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004808:	2100      	movs	r1, #0
 800480a:	2082      	movs	r0, #130	; 0x82
 800480c:	f7fc faa4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004810:	2100      	movs	r1, #0
 8004812:	2083      	movs	r0, #131	; 0x83
 8004814:	f7fc faa0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004818:	2100      	movs	r1, #0
 800481a:	2084      	movs	r0, #132	; 0x84
 800481c:	f7fc fa9c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004820:	2100      	movs	r1, #0
 8004822:	2085      	movs	r0, #133	; 0x85
 8004824:	f7fc fa98 	bl	8000d58 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004828:	2110      	movs	r1, #16
 800482a:	2090      	movs	r0, #144	; 0x90
 800482c:	f7fc fa94 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004830:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004834:	2092      	movs	r0, #146	; 0x92
 8004836:	f7fc fa8f 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 800483a:	f240 1133 	movw	r1, #307	; 0x133
 800483e:	2007      	movs	r0, #7
 8004840:	f7fc fa8a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8004844:	2122      	movs	r1, #34	; 0x22
 8004846:	2000      	movs	r0, #0
 8004848:	f7fc fa86 	bl	8000d58 <LCD_WriteReg>
 800484c:	f001 bc3a 	b.w	80060c4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004850:	4b7d      	ldr	r3, [pc, #500]	; (8004a48 <LCD_Init+0x27b8>)
 8004852:	889b      	ldrh	r3, [r3, #4]
 8004854:	f249 3228 	movw	r2, #37672	; 0x9328
 8004858:	4293      	cmp	r3, r2
 800485a:	f040 80f7 	bne.w	8004a4c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800485e:	f241 018f 	movw	r1, #4239	; 0x108f
 8004862:	20ec      	movs	r0, #236	; 0xec
 8004864:	f7fc fa78 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004868:	f241 2134 	movw	r1, #4660	; 0x1234
 800486c:	20ef      	movs	r0, #239	; 0xef
 800486e:	f7fc fa73 	bl	8000d58 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004876:	2001      	movs	r0, #1
 8004878:	f7fc fa6e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800487c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004880:	2002      	movs	r0, #2
 8004882:	f7fc fa69 	bl	8000d58 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004886:	f241 0130 	movw	r1, #4144	; 0x1030
 800488a:	2003      	movs	r0, #3
 800488c:	f7fc fa64 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004890:	2100      	movs	r1, #0
 8004892:	2004      	movs	r0, #4
 8004894:	f7fc fa60 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004898:	f240 2102 	movw	r1, #514	; 0x202
 800489c:	2008      	movs	r0, #8
 800489e:	f7fc fa5b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80048a2:	2100      	movs	r1, #0
 80048a4:	2009      	movs	r0, #9
 80048a6:	f7fc fa57 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80048aa:	2100      	movs	r1, #0
 80048ac:	200a      	movs	r0, #10
 80048ae:	f7fc fa53 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80048b2:	2101      	movs	r1, #1
 80048b4:	200c      	movs	r0, #12
 80048b6:	f7fc fa4f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80048ba:	2100      	movs	r1, #0
 80048bc:	200d      	movs	r0, #13
 80048be:	f7fc fa4b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80048c2:	2100      	movs	r1, #0
 80048c4:	200f      	movs	r0, #15
 80048c6:	f7fc fa47 	bl	8000d58 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80048ca:	2100      	movs	r1, #0
 80048cc:	2010      	movs	r0, #16
 80048ce:	f7fc fa43 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80048d2:	2107      	movs	r1, #7
 80048d4:	2011      	movs	r0, #17
 80048d6:	f7fc fa3f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80048da:	2100      	movs	r1, #0
 80048dc:	2012      	movs	r0, #18
 80048de:	f7fc fa3b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80048e2:	2100      	movs	r1, #0
 80048e4:	2013      	movs	r0, #19
 80048e6:	f7fc fa37 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80048ea:	2101      	movs	r1, #1
 80048ec:	2007      	movs	r0, #7
 80048ee:	f7fc fa33 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 80048f2:	2032      	movs	r0, #50	; 0x32
 80048f4:	f002 fbe6 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80048f8:	f241 4190 	movw	r1, #5264	; 0x1490
 80048fc:	2010      	movs	r0, #16
 80048fe:	f7fc fa2b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004902:	f240 2127 	movw	r1, #551	; 0x227
 8004906:	2011      	movs	r0, #17
 8004908:	f7fc fa26 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 800490c:	2032      	movs	r0, #50	; 0x32
 800490e:	f002 fbd9 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004912:	218a      	movs	r1, #138	; 0x8a
 8004914:	2012      	movs	r0, #18
 8004916:	f7fc fa1f 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 800491a:	2032      	movs	r0, #50	; 0x32
 800491c:	f002 fbd2 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004920:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004924:	2013      	movs	r0, #19
 8004926:	f7fc fa17 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 800492a:	2106      	movs	r1, #6
 800492c:	2029      	movs	r0, #41	; 0x29
 800492e:	f7fc fa13 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8004932:	210d      	movs	r1, #13
 8004934:	202b      	movs	r0, #43	; 0x2b
 8004936:	f7fc fa0f 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 800493a:	2032      	movs	r0, #50	; 0x32
 800493c:	f002 fbc2 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004940:	2100      	movs	r1, #0
 8004942:	2020      	movs	r0, #32
 8004944:	f7fc fa08 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004948:	2100      	movs	r1, #0
 800494a:	2021      	movs	r0, #33	; 0x21
 800494c:	f7fc fa04 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 8004950:	2032      	movs	r0, #50	; 0x32
 8004952:	f002 fbb7 	bl	80070c4 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004956:	2100      	movs	r1, #0
 8004958:	2030      	movs	r0, #48	; 0x30
 800495a:	f7fc f9fd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 800495e:	f240 6104 	movw	r1, #1540	; 0x604
 8004962:	2031      	movs	r0, #49	; 0x31
 8004964:	f7fc f9f8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004968:	f240 3105 	movw	r1, #773	; 0x305
 800496c:	2032      	movs	r0, #50	; 0x32
 800496e:	f7fc f9f3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004972:	2100      	movs	r1, #0
 8004974:	2035      	movs	r0, #53	; 0x35
 8004976:	f7fc f9ef 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800497a:	f640 4109 	movw	r1, #3081	; 0xc09
 800497e:	2036      	movs	r0, #54	; 0x36
 8004980:	f7fc f9ea 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004984:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004988:	2037      	movs	r0, #55	; 0x37
 800498a:	f7fc f9e5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800498e:	f240 3101 	movw	r1, #769	; 0x301
 8004992:	2038      	movs	r0, #56	; 0x38
 8004994:	f7fc f9e0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004998:	f240 7107 	movw	r1, #1799	; 0x707
 800499c:	2039      	movs	r0, #57	; 0x39
 800499e:	f7fc f9db 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80049a2:	2100      	movs	r1, #0
 80049a4:	203c      	movs	r0, #60	; 0x3c
 80049a6:	f7fc f9d7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80049aa:	f640 210a 	movw	r1, #2570	; 0xa0a
 80049ae:	203d      	movs	r0, #61	; 0x3d
 80049b0:	f7fc f9d2 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 80049b4:	2032      	movs	r0, #50	; 0x32
 80049b6:	f002 fb85 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80049ba:	2100      	movs	r1, #0
 80049bc:	2050      	movs	r0, #80	; 0x50
 80049be:	f7fc f9cb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80049c2:	21ef      	movs	r1, #239	; 0xef
 80049c4:	2051      	movs	r0, #81	; 0x51
 80049c6:	f7fc f9c7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80049ca:	2100      	movs	r1, #0
 80049cc:	2052      	movs	r0, #82	; 0x52
 80049ce:	f7fc f9c3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80049d2:	f240 113f 	movw	r1, #319	; 0x13f
 80049d6:	2053      	movs	r0, #83	; 0x53
 80049d8:	f7fc f9be 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80049dc:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80049e0:	2060      	movs	r0, #96	; 0x60
 80049e2:	f7fc f9b9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80049e6:	2101      	movs	r1, #1
 80049e8:	2061      	movs	r0, #97	; 0x61
 80049ea:	f7fc f9b5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80049ee:	2100      	movs	r1, #0
 80049f0:	206a      	movs	r0, #106	; 0x6a
 80049f2:	f7fc f9b1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80049f6:	2100      	movs	r1, #0
 80049f8:	2080      	movs	r0, #128	; 0x80
 80049fa:	f7fc f9ad 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80049fe:	2100      	movs	r1, #0
 8004a00:	2081      	movs	r0, #129	; 0x81
 8004a02:	f7fc f9a9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004a06:	2100      	movs	r1, #0
 8004a08:	2082      	movs	r0, #130	; 0x82
 8004a0a:	f7fc f9a5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2083      	movs	r0, #131	; 0x83
 8004a12:	f7fc f9a1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004a16:	2100      	movs	r1, #0
 8004a18:	2084      	movs	r0, #132	; 0x84
 8004a1a:	f7fc f99d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004a1e:	2100      	movs	r1, #0
 8004a20:	2085      	movs	r0, #133	; 0x85
 8004a22:	f7fc f999 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8004a26:	2110      	movs	r1, #16
 8004a28:	2090      	movs	r0, #144	; 0x90
 8004a2a:	f7fc f995 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004a2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a32:	2092      	movs	r0, #146	; 0x92
 8004a34:	f7fc f990 	bl	8000d58 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004a38:	f240 1133 	movw	r1, #307	; 0x133
 8004a3c:	2007      	movs	r0, #7
 8004a3e:	f7fc f98b 	bl	8000d58 <LCD_WriteReg>
 8004a42:	f001 bb3f 	b.w	80060c4 <LCD_Init+0x3e34>
 8004a46:	bf00      	nop
 8004a48:	20000714 	.word	0x20000714
	} else if (lcddev.id == 0x9320) //测试OK.
 8004a4c:	4bce      	ldr	r3, [pc, #824]	; (8004d88 <LCD_Init+0x2af8>)
 8004a4e:	889b      	ldrh	r3, [r3, #4]
 8004a50:	f249 3220 	movw	r2, #37664	; 0x9320
 8004a54:	4293      	cmp	r3, r2
 8004a56:	f040 80ad 	bne.w	8004bb4 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f7fc f97b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a66:	2001      	movs	r0, #1
 8004a68:	f7fc f976 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004a6c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a70:	2002      	movs	r0, #2
 8004a72:	f7fc f971 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004a76:	f241 0130 	movw	r1, #4144	; 0x1030
 8004a7a:	2003      	movs	r0, #3
 8004a7c:	f7fc f96c 	bl	8000d58 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004a80:	2100      	movs	r1, #0
 8004a82:	2004      	movs	r0, #4
 8004a84:	f7fc f968 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004a88:	f240 2102 	movw	r1, #514	; 0x202
 8004a8c:	2008      	movs	r0, #8
 8004a8e:	f7fc f963 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004a92:	2100      	movs	r1, #0
 8004a94:	2009      	movs	r0, #9
 8004a96:	f7fc f95f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	200a      	movs	r0, #10
 8004a9e:	f7fc f95b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	200c      	movs	r0, #12
 8004aa6:	f7fc f957 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004aaa:	2100      	movs	r1, #0
 8004aac:	200d      	movs	r0, #13
 8004aae:	f7fc f953 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	200f      	movs	r0, #15
 8004ab6:	f7fc f94f 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 8004aba:	2032      	movs	r0, #50	; 0x32
 8004abc:	f002 fb02 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004ac0:	f240 1101 	movw	r1, #257	; 0x101
 8004ac4:	2007      	movs	r0, #7
 8004ac6:	f7fc f947 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 8004aca:	2032      	movs	r0, #50	; 0x32
 8004acc:	f002 fafa 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004ad0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004ad4:	2010      	movs	r0, #16
 8004ad6:	f7fc f93f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004ada:	2107      	movs	r1, #7
 8004adc:	2011      	movs	r0, #17
 8004ade:	f7fc f93b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004ae2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004ae6:	2012      	movs	r0, #18
 8004ae8:	f7fc f936 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004aec:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004af0:	2013      	movs	r0, #19
 8004af2:	f7fc f931 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8004af6:	2100      	movs	r1, #0
 8004af8:	2029      	movs	r0, #41	; 0x29
 8004afa:	f7fc f92d 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004afe:	f244 0110 	movw	r1, #16400	; 0x4010
 8004b02:	202b      	movs	r0, #43	; 0x2b
 8004b04:	f7fc f928 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004b08:	2100      	movs	r1, #0
 8004b0a:	2050      	movs	r0, #80	; 0x50
 8004b0c:	f7fc f924 	bl	8000d58 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004b10:	21ef      	movs	r1, #239	; 0xef
 8004b12:	2051      	movs	r0, #81	; 0x51
 8004b14:	f7fc f920 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004b18:	2100      	movs	r1, #0
 8004b1a:	2052      	movs	r0, #82	; 0x52
 8004b1c:	f7fc f91c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004b20:	f240 113f 	movw	r1, #319	; 0x13f
 8004b24:	2053      	movs	r0, #83	; 0x53
 8004b26:	f7fc f917 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004b2a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b2e:	2060      	movs	r0, #96	; 0x60
 8004b30:	f7fc f912 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004b34:	2101      	movs	r1, #1
 8004b36:	2061      	movs	r0, #97	; 0x61
 8004b38:	f7fc f90e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	206a      	movs	r0, #106	; 0x6a
 8004b40:	f7fc f90a 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004b44:	2100      	movs	r1, #0
 8004b46:	2080      	movs	r0, #128	; 0x80
 8004b48:	f7fc f906 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	2081      	movs	r0, #129	; 0x81
 8004b50:	f7fc f902 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004b54:	2100      	movs	r1, #0
 8004b56:	2082      	movs	r0, #130	; 0x82
 8004b58:	f7fc f8fe 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	2083      	movs	r0, #131	; 0x83
 8004b60:	f7fc f8fa 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004b64:	2100      	movs	r1, #0
 8004b66:	2084      	movs	r0, #132	; 0x84
 8004b68:	f7fc f8f6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	2085      	movs	r0, #133	; 0x85
 8004b70:	f7fc f8f2 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004b74:	2110      	movs	r1, #16
 8004b76:	2090      	movs	r0, #144	; 0x90
 8004b78:	f7fc f8ee 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	2092      	movs	r0, #146	; 0x92
 8004b80:	f7fc f8ea 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004b84:	2101      	movs	r1, #1
 8004b86:	2093      	movs	r0, #147	; 0x93
 8004b88:	f7fc f8e6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004b8c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004b90:	2095      	movs	r0, #149	; 0x95
 8004b92:	f7fc f8e1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004b96:	2100      	movs	r1, #0
 8004b98:	2097      	movs	r0, #151	; 0x97
 8004b9a:	f7fc f8dd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	2098      	movs	r0, #152	; 0x98
 8004ba2:	f7fc f8d9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004ba6:	f240 1173 	movw	r1, #371	; 0x173
 8004baa:	2007      	movs	r0, #7
 8004bac:	f7fc f8d4 	bl	8000d58 <LCD_WriteReg>
 8004bb0:	f001 ba88 	b.w	80060c4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004bb4:	4b74      	ldr	r3, [pc, #464]	; (8004d88 <LCD_Init+0x2af8>)
 8004bb6:	889b      	ldrh	r3, [r3, #4]
 8004bb8:	f249 3231 	movw	r2, #37681	; 0x9331
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	f040 80e5 	bne.w	8004d8c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004bc2:	f241 0114 	movw	r1, #4116	; 0x1014
 8004bc6:	20e7      	movs	r0, #231	; 0xe7
 8004bc8:	f7fc f8c6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f7fc f8c1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bda:	2002      	movs	r0, #2
 8004bdc:	f7fc f8bc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004be0:	f241 0138 	movw	r1, #4152	; 0x1038
 8004be4:	2003      	movs	r0, #3
 8004be6:	f7fc f8b7 	bl	8000d58 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004bea:	f240 2102 	movw	r1, #514	; 0x202
 8004bee:	2008      	movs	r0, #8
 8004bf0:	f7fc f8b2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2009      	movs	r0, #9
 8004bf8:	f7fc f8ae 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	200a      	movs	r0, #10
 8004c00:	f7fc f8aa 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004c04:	2100      	movs	r1, #0
 8004c06:	200c      	movs	r0, #12
 8004c08:	f7fc f8a6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	200d      	movs	r0, #13
 8004c10:	f7fc f8a2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004c14:	2100      	movs	r1, #0
 8004c16:	200f      	movs	r0, #15
 8004c18:	f7fc f89e 	bl	8000d58 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	2010      	movs	r0, #16
 8004c20:	f7fc f89a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004c24:	2107      	movs	r1, #7
 8004c26:	2011      	movs	r0, #17
 8004c28:	f7fc f896 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	2012      	movs	r0, #18
 8004c30:	f7fc f892 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004c34:	2100      	movs	r1, #0
 8004c36:	2013      	movs	r0, #19
 8004c38:	f7fc f88e 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004c3c:	20c8      	movs	r0, #200	; 0xc8
 8004c3e:	f002 fa41 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004c42:	f241 6190 	movw	r1, #5776	; 0x1690
 8004c46:	2010      	movs	r0, #16
 8004c48:	f7fc f886 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004c4c:	f240 2127 	movw	r1, #551	; 0x227
 8004c50:	2011      	movs	r0, #17
 8004c52:	f7fc f881 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004c56:	2032      	movs	r0, #50	; 0x32
 8004c58:	f002 fa34 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004c5c:	210c      	movs	r1, #12
 8004c5e:	2012      	movs	r0, #18
 8004c60:	f7fc f87a 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004c64:	2032      	movs	r0, #50	; 0x32
 8004c66:	f002 fa2d 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004c6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c6e:	2013      	movs	r0, #19
 8004c70:	f7fc f872 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004c74:	2111      	movs	r1, #17
 8004c76:	2029      	movs	r0, #41	; 0x29
 8004c78:	f7fc f86e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004c7c:	210b      	movs	r1, #11
 8004c7e:	202b      	movs	r0, #43	; 0x2b
 8004c80:	f7fc f86a 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004c84:	2032      	movs	r0, #50	; 0x32
 8004c86:	f002 fa1d 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	2020      	movs	r0, #32
 8004c8e:	f7fc f863 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004c92:	f240 113f 	movw	r1, #319	; 0x13f
 8004c96:	2021      	movs	r0, #33	; 0x21
 8004c98:	f7fc f85e 	bl	8000d58 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	2030      	movs	r0, #48	; 0x30
 8004ca0:	f7fc f85a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004ca4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004ca8:	2031      	movs	r0, #49	; 0x31
 8004caa:	f7fc f855 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004cae:	2100      	movs	r1, #0
 8004cb0:	2032      	movs	r0, #50	; 0x32
 8004cb2:	f7fc f851 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004cb6:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004cba:	2035      	movs	r0, #53	; 0x35
 8004cbc:	f7fc f84c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004cc0:	f241 610a 	movw	r1, #5642	; 0x160a
 8004cc4:	2036      	movs	r0, #54	; 0x36
 8004cc6:	f7fc f847 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004cca:	f240 7107 	movw	r1, #1799	; 0x707
 8004cce:	2037      	movs	r0, #55	; 0x37
 8004cd0:	f7fc f842 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004cd4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004cd8:	2038      	movs	r0, #56	; 0x38
 8004cda:	f7fc f83d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004cde:	f240 7107 	movw	r1, #1799	; 0x707
 8004ce2:	2039      	movs	r0, #57	; 0x39
 8004ce4:	f7fc f838 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004ce8:	f240 4102 	movw	r1, #1026	; 0x402
 8004cec:	203c      	movs	r0, #60	; 0x3c
 8004cee:	f7fc f833 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004cf2:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004cf6:	203d      	movs	r0, #61	; 0x3d
 8004cf8:	f7fc f82e 	bl	8000d58 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	2050      	movs	r0, #80	; 0x50
 8004d00:	f7fc f82a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004d04:	21ef      	movs	r1, #239	; 0xef
 8004d06:	2051      	movs	r0, #81	; 0x51
 8004d08:	f7fc f826 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2052      	movs	r0, #82	; 0x52
 8004d10:	f7fc f822 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004d14:	f240 113f 	movw	r1, #319	; 0x13f
 8004d18:	2053      	movs	r0, #83	; 0x53
 8004d1a:	f7fc f81d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004d1e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d22:	2060      	movs	r0, #96	; 0x60
 8004d24:	f7fc f818 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004d28:	2101      	movs	r1, #1
 8004d2a:	2061      	movs	r0, #97	; 0x61
 8004d2c:	f7fc f814 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004d30:	2100      	movs	r1, #0
 8004d32:	206a      	movs	r0, #106	; 0x6a
 8004d34:	f7fc f810 	bl	8000d58 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004d38:	2100      	movs	r1, #0
 8004d3a:	2080      	movs	r0, #128	; 0x80
 8004d3c:	f7fc f80c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004d40:	2100      	movs	r1, #0
 8004d42:	2081      	movs	r0, #129	; 0x81
 8004d44:	f7fc f808 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004d48:	2100      	movs	r1, #0
 8004d4a:	2082      	movs	r0, #130	; 0x82
 8004d4c:	f7fc f804 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004d50:	2100      	movs	r1, #0
 8004d52:	2083      	movs	r0, #131	; 0x83
 8004d54:	f7fc f800 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004d58:	2100      	movs	r1, #0
 8004d5a:	2084      	movs	r0, #132	; 0x84
 8004d5c:	f7fb fffc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004d60:	2100      	movs	r1, #0
 8004d62:	2085      	movs	r0, #133	; 0x85
 8004d64:	f7fb fff8 	bl	8000d58 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004d68:	2110      	movs	r1, #16
 8004d6a:	2090      	movs	r0, #144	; 0x90
 8004d6c:	f7fb fff4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004d70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d74:	2092      	movs	r0, #146	; 0x92
 8004d76:	f7fb ffef 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004d7a:	f240 1133 	movw	r1, #307	; 0x133
 8004d7e:	2007      	movs	r0, #7
 8004d80:	f7fb ffea 	bl	8000d58 <LCD_WriteReg>
 8004d84:	f001 b99e 	b.w	80060c4 <LCD_Init+0x3e34>
 8004d88:	20000714 	.word	0x20000714
	} else if (lcddev.id == 0x5408) {
 8004d8c:	4be2      	ldr	r3, [pc, #904]	; (8005118 <LCD_Init+0x2e88>)
 8004d8e:	889b      	ldrh	r3, [r3, #4]
 8004d90:	f245 4208 	movw	r2, #21512	; 0x5408
 8004d94:	4293      	cmp	r3, r2
 8004d96:	f040 80a3 	bne.w	8004ee0 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d9e:	2001      	movs	r0, #1
 8004da0:	f7fb ffda 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004da4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004da8:	2002      	movs	r0, #2
 8004daa:	f7fb ffd5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004dae:	f241 0130 	movw	r1, #4144	; 0x1030
 8004db2:	2003      	movs	r0, #3
 8004db4:	f7fb ffd0 	bl	8000d58 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004db8:	2100      	movs	r1, #0
 8004dba:	2004      	movs	r0, #4
 8004dbc:	f7fb ffcc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004dc0:	f240 2107 	movw	r1, #519	; 0x207
 8004dc4:	2008      	movs	r0, #8
 8004dc6:	f7fb ffc7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004dca:	2100      	movs	r1, #0
 8004dcc:	2009      	movs	r0, #9
 8004dce:	f7fb ffc3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	200a      	movs	r0, #10
 8004dd6:	f7fb ffbf 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004dda:	2100      	movs	r1, #0
 8004ddc:	200c      	movs	r0, #12
 8004dde:	f7fb ffbb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004de2:	2100      	movs	r1, #0
 8004de4:	200d      	movs	r0, #13
 8004de6:	f7fb ffb7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004dea:	2100      	movs	r1, #0
 8004dec:	200f      	movs	r0, #15
 8004dee:	f7fb ffb3 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 8004df2:	2014      	movs	r0, #20
 8004df4:	f002 f966 	bl	80070c4 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004df8:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004dfc:	2010      	movs	r0, #16
 8004dfe:	f7fb ffab 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004e02:	2101      	movs	r1, #1
 8004e04:	2011      	movs	r0, #17
 8004e06:	f7fb ffa7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	2017      	movs	r0, #23
 8004e0e:	f7fb ffa3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004e12:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004e16:	2012      	movs	r0, #18
 8004e18:	f7fb ff9e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e20:	2013      	movs	r0, #19
 8004e22:	f7fb ff99 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004e26:	2109      	movs	r1, #9
 8004e28:	2029      	movs	r0, #41	; 0x29
 8004e2a:	f7fb ff95 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004e2e:	2109      	movs	r1, #9
 8004e30:	202a      	movs	r0, #42	; 0x2a
 8004e32:	f7fb ff91 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004e36:	2100      	movs	r1, #0
 8004e38:	20a4      	movs	r0, #164	; 0xa4
 8004e3a:	f7fb ff8d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004e3e:	2100      	movs	r1, #0
 8004e40:	2050      	movs	r0, #80	; 0x50
 8004e42:	f7fb ff89 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004e46:	21ef      	movs	r1, #239	; 0xef
 8004e48:	2051      	movs	r0, #81	; 0x51
 8004e4a:	f7fb ff85 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004e4e:	2100      	movs	r1, #0
 8004e50:	2052      	movs	r0, #82	; 0x52
 8004e52:	f7fb ff81 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004e56:	f240 113f 	movw	r1, #319	; 0x13f
 8004e5a:	2053      	movs	r0, #83	; 0x53
 8004e5c:	f7fb ff7c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004e60:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e64:	2060      	movs	r0, #96	; 0x60
 8004e66:	f7fb ff77 	bl	8000d58 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	2061      	movs	r0, #97	; 0x61
 8004e6e:	f7fb ff73 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004e72:	2100      	movs	r1, #0
 8004e74:	206a      	movs	r0, #106	; 0x6a
 8004e76:	f7fb ff6f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2080      	movs	r0, #128	; 0x80
 8004e7e:	f7fb ff6b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004e82:	2100      	movs	r1, #0
 8004e84:	2081      	movs	r0, #129	; 0x81
 8004e86:	f7fb ff67 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	2082      	movs	r0, #130	; 0x82
 8004e8e:	f7fb ff63 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004e92:	2100      	movs	r1, #0
 8004e94:	2083      	movs	r0, #131	; 0x83
 8004e96:	f7fb ff5f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	2084      	movs	r0, #132	; 0x84
 8004e9e:	f7fb ff5b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	2085      	movs	r0, #133	; 0x85
 8004ea6:	f7fb ff57 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004eaa:	2113      	movs	r1, #19
 8004eac:	2090      	movs	r0, #144	; 0x90
 8004eae:	f7fb ff53 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	2092      	movs	r0, #146	; 0x92
 8004eb6:	f7fb ff4f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004eba:	2103      	movs	r1, #3
 8004ebc:	2093      	movs	r0, #147	; 0x93
 8004ebe:	f7fb ff4b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004ec2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004ec6:	2095      	movs	r0, #149	; 0x95
 8004ec8:	f7fb ff46 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004ecc:	f240 1173 	movw	r1, #371	; 0x173
 8004ed0:	2007      	movs	r0, #7
 8004ed2:	f7fb ff41 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 8004ed6:	2032      	movs	r0, #50	; 0x32
 8004ed8:	f002 f8f4 	bl	80070c4 <HAL_Delay>
 8004edc:	f001 b8f2 	b.w	80060c4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004ee0:	4b8d      	ldr	r3, [pc, #564]	; (8005118 <LCD_Init+0x2e88>)
 8004ee2:	889b      	ldrh	r3, [r3, #4]
 8004ee4:	f241 5205 	movw	r2, #5381	; 0x1505
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	f040 8117 	bne.w	800511c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004eee:	2100      	movs	r1, #0
 8004ef0:	2007      	movs	r0, #7
 8004ef2:	f7fb ff31 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 8004ef6:	2032      	movs	r0, #50	; 0x32
 8004ef8:	f002 f8e4 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004efc:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004f00:	2012      	movs	r0, #18
 8004f02:	f7fb ff29 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004f06:	2101      	movs	r1, #1
 8004f08:	20a4      	movs	r0, #164	; 0xa4
 8004f0a:	f7fb ff25 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004f0e:	210f      	movs	r1, #15
 8004f10:	2008      	movs	r0, #8
 8004f12:	f7fb ff21 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004f16:	2108      	movs	r1, #8
 8004f18:	200a      	movs	r0, #10
 8004f1a:	f7fb ff1d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004f1e:	2108      	movs	r1, #8
 8004f20:	200d      	movs	r0, #13
 8004f22:	f7fb ff19 	bl	8000d58 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004f26:	f240 7107 	movw	r1, #1799	; 0x707
 8004f2a:	2030      	movs	r0, #48	; 0x30
 8004f2c:	f7fb ff14 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004f30:	2107      	movs	r1, #7
 8004f32:	2031      	movs	r0, #49	; 0x31
 8004f34:	f7fb ff10 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004f38:	f240 6103 	movw	r1, #1539	; 0x603
 8004f3c:	2032      	movs	r0, #50	; 0x32
 8004f3e:	f7fb ff0b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004f42:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f46:	2033      	movs	r0, #51	; 0x33
 8004f48:	f7fb ff06 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004f4c:	f240 2102 	movw	r1, #514	; 0x202
 8004f50:	2034      	movs	r0, #52	; 0x34
 8004f52:	f7fb ff01 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004f56:	2102      	movs	r1, #2
 8004f58:	2035      	movs	r0, #53	; 0x35
 8004f5a:	f7fb fefd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004f5e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004f62:	2036      	movs	r0, #54	; 0x36
 8004f64:	f7fb fef8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004f68:	f240 7107 	movw	r1, #1799	; 0x707
 8004f6c:	2037      	movs	r0, #55	; 0x37
 8004f6e:	f7fb fef3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004f72:	2100      	movs	r1, #0
 8004f74:	2038      	movs	r0, #56	; 0x38
 8004f76:	f7fb feef 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	2039      	movs	r0, #57	; 0x39
 8004f7e:	f7fb feeb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004f82:	f240 7107 	movw	r1, #1799	; 0x707
 8004f86:	203a      	movs	r0, #58	; 0x3a
 8004f88:	f7fb fee6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	203b      	movs	r0, #59	; 0x3b
 8004f90:	f7fb fee2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004f94:	2107      	movs	r1, #7
 8004f96:	203c      	movs	r0, #60	; 0x3c
 8004f98:	f7fb fede 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	203d      	movs	r0, #61	; 0x3d
 8004fa0:	f7fb feda 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 8004fa4:	2032      	movs	r0, #50	; 0x32
 8004fa6:	f002 f88d 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004faa:	2101      	movs	r1, #1
 8004fac:	2007      	movs	r0, #7
 8004fae:	f7fb fed3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	2017      	movs	r0, #23
 8004fb6:	f7fb fecf 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(50);
 8004fba:	2032      	movs	r0, #50	; 0x32
 8004fbc:	f002 f882 	bl	80070c4 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004fc0:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004fc4:	2010      	movs	r0, #16
 8004fc6:	f7fb fec7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004fca:	f240 2117 	movw	r1, #535	; 0x217
 8004fce:	2011      	movs	r0, #17
 8004fd0:	f7fb fec2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004fd4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004fd8:	2012      	movs	r0, #18
 8004fda:	f7fb febd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004fde:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004fe2:	2013      	movs	r0, #19
 8004fe4:	f7fb feb8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004fe8:	2100      	movs	r1, #0
 8004fea:	202a      	movs	r0, #42	; 0x2a
 8004fec:	f7fb feb4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004ff0:	210a      	movs	r1, #10
 8004ff2:	2029      	movs	r0, #41	; 0x29
 8004ff4:	f7fb feb0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004ff8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004ffc:	2012      	movs	r0, #18
 8004ffe:	f7fb feab 	bl	8000d58 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8005002:	2100      	movs	r1, #0
 8005004:	2050      	movs	r0, #80	; 0x50
 8005006:	f7fb fea7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800500a:	21ef      	movs	r1, #239	; 0xef
 800500c:	2051      	movs	r0, #81	; 0x51
 800500e:	f7fb fea3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005012:	2100      	movs	r1, #0
 8005014:	2052      	movs	r0, #82	; 0x52
 8005016:	f7fb fe9f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800501a:	f240 113f 	movw	r1, #319	; 0x13f
 800501e:	2053      	movs	r0, #83	; 0x53
 8005020:	f7fb fe9a 	bl	8000d58 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8005024:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005028:	2060      	movs	r0, #96	; 0x60
 800502a:	f7fb fe95 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800502e:	2101      	movs	r1, #1
 8005030:	2061      	movs	r0, #97	; 0x61
 8005032:	f7fb fe91 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005036:	2100      	movs	r1, #0
 8005038:	206a      	movs	r0, #106	; 0x6a
 800503a:	f7fb fe8d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800503e:	2100      	movs	r1, #0
 8005040:	2080      	movs	r0, #128	; 0x80
 8005042:	f7fb fe89 	bl	8000d58 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8005046:	2100      	movs	r1, #0
 8005048:	2081      	movs	r0, #129	; 0x81
 800504a:	f7fb fe85 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800504e:	2100      	movs	r1, #0
 8005050:	2082      	movs	r0, #130	; 0x82
 8005052:	f7fb fe81 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005056:	2100      	movs	r1, #0
 8005058:	2083      	movs	r0, #131	; 0x83
 800505a:	f7fb fe7d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800505e:	2100      	movs	r1, #0
 8005060:	2084      	movs	r0, #132	; 0x84
 8005062:	f7fb fe79 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005066:	2100      	movs	r1, #0
 8005068:	2085      	movs	r0, #133	; 0x85
 800506a:	f7fb fe75 	bl	8000d58 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 800506e:	2113      	movs	r1, #19
 8005070:	2090      	movs	r0, #144	; 0x90
 8005072:	f7fb fe71 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005076:	f44f 7140 	mov.w	r1, #768	; 0x300
 800507a:	2092      	movs	r0, #146	; 0x92
 800507c:	f7fb fe6c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8005080:	2105      	movs	r1, #5
 8005082:	2093      	movs	r0, #147	; 0x93
 8005084:	f7fb fe68 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8005088:	2100      	movs	r1, #0
 800508a:	2095      	movs	r0, #149	; 0x95
 800508c:	f7fb fe64 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8005090:	2100      	movs	r1, #0
 8005092:	2097      	movs	r0, #151	; 0x97
 8005094:	f7fb fe60 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8005098:	2100      	movs	r1, #0
 800509a:	2098      	movs	r0, #152	; 0x98
 800509c:	f7fb fe5c 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 80050a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050a4:	2001      	movs	r0, #1
 80050a6:	f7fb fe57 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80050aa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80050ae:	2002      	movs	r0, #2
 80050b0:	f7fb fe52 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80050b4:	f241 0138 	movw	r1, #4152	; 0x1038
 80050b8:	2003      	movs	r0, #3
 80050ba:	f7fb fe4d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80050be:	2100      	movs	r1, #0
 80050c0:	2004      	movs	r0, #4
 80050c2:	f7fb fe49 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80050c6:	2100      	movs	r1, #0
 80050c8:	200c      	movs	r0, #12
 80050ca:	f7fb fe45 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80050ce:	2100      	movs	r1, #0
 80050d0:	200f      	movs	r0, #15
 80050d2:	f7fb fe41 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 80050d6:	2100      	movs	r1, #0
 80050d8:	2020      	movs	r0, #32
 80050da:	f7fb fe3d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80050de:	2100      	movs	r1, #0
 80050e0:	2021      	movs	r0, #33	; 0x21
 80050e2:	f7fb fe39 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 80050e6:	2121      	movs	r1, #33	; 0x21
 80050e8:	2007      	movs	r0, #7
 80050ea:	f7fb fe35 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 80050ee:	2014      	movs	r0, #20
 80050f0:	f001 ffe8 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80050f4:	2161      	movs	r1, #97	; 0x61
 80050f6:	2007      	movs	r0, #7
 80050f8:	f7fb fe2e 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 80050fc:	2014      	movs	r0, #20
 80050fe:	f001 ffe1 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8005102:	f240 1173 	movw	r1, #371	; 0x173
 8005106:	2007      	movs	r0, #7
 8005108:	f7fb fe26 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 800510c:	2014      	movs	r0, #20
 800510e:	f001 ffd9 	bl	80070c4 <HAL_Delay>
 8005112:	f000 bfd7 	b.w	80060c4 <LCD_Init+0x3e34>
 8005116:	bf00      	nop
 8005118:	20000714 	.word	0x20000714
	} else if (lcddev.id == 0xB505) {
 800511c:	4bf0      	ldr	r3, [pc, #960]	; (80054e0 <LCD_Init+0x3250>)
 800511e:	889b      	ldrh	r3, [r3, #4]
 8005120:	f24b 5205 	movw	r2, #46341	; 0xb505
 8005124:	4293      	cmp	r3, r2
 8005126:	f040 8103 	bne.w	8005330 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 800512a:	2100      	movs	r1, #0
 800512c:	2000      	movs	r0, #0
 800512e:	f7fb fe13 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005132:	2100      	movs	r1, #0
 8005134:	2000      	movs	r0, #0
 8005136:	f7fb fe0f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800513a:	2100      	movs	r1, #0
 800513c:	2000      	movs	r0, #0
 800513e:	f7fb fe0b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005142:	2100      	movs	r1, #0
 8005144:	2000      	movs	r0, #0
 8005146:	f7fb fe07 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 800514a:	2101      	movs	r1, #1
 800514c:	20a4      	movs	r0, #164	; 0xa4
 800514e:	f7fb fe03 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 8005152:	2014      	movs	r0, #20
 8005154:	f001 ffb6 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005158:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800515c:	2060      	movs	r0, #96	; 0x60
 800515e:	f7fb fdfb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005162:	f240 2102 	movw	r1, #514	; 0x202
 8005166:	2008      	movs	r0, #8
 8005168:	f7fb fdf6 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 800516c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005170:	2030      	movs	r0, #48	; 0x30
 8005172:	f7fb fdf1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8005176:	f243 7115 	movw	r1, #14101	; 0x3715
 800517a:	2031      	movs	r0, #49	; 0x31
 800517c:	f7fb fdec 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8005180:	f240 6104 	movw	r1, #1540	; 0x604
 8005184:	2032      	movs	r0, #50	; 0x32
 8005186:	f7fb fde7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 800518a:	f640 6116 	movw	r1, #3606	; 0xe16
 800518e:	2033      	movs	r0, #51	; 0x33
 8005190:	f7fb fde2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8005194:	f242 2111 	movw	r1, #8721	; 0x2211
 8005198:	2034      	movs	r0, #52	; 0x34
 800519a:	f7fb fddd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 800519e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80051a2:	2035      	movs	r0, #53	; 0x35
 80051a4:	f7fb fdd8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 80051a8:	f248 5107 	movw	r1, #34055	; 0x8507
 80051ac:	2036      	movs	r0, #54	; 0x36
 80051ae:	f7fb fdd3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 80051b2:	f241 4107 	movw	r1, #5127	; 0x1407
 80051b6:	2037      	movs	r0, #55	; 0x37
 80051b8:	f7fb fdce 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 80051bc:	f241 4103 	movw	r1, #5123	; 0x1403
 80051c0:	2038      	movs	r0, #56	; 0x38
 80051c2:	f7fb fdc9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 80051c6:	2120      	movs	r1, #32
 80051c8:	2039      	movs	r0, #57	; 0x39
 80051ca:	f7fb fdc5 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80051ce:	211a      	movs	r1, #26
 80051d0:	2090      	movs	r0, #144	; 0x90
 80051d2:	f7fb fdc1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80051d6:	2100      	movs	r1, #0
 80051d8:	2010      	movs	r0, #16
 80051da:	f7fb fdbd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80051de:	2107      	movs	r1, #7
 80051e0:	2011      	movs	r0, #17
 80051e2:	f7fb fdb9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80051e6:	2100      	movs	r1, #0
 80051e8:	2012      	movs	r0, #18
 80051ea:	f7fb fdb5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80051ee:	2100      	movs	r1, #0
 80051f0:	2013      	movs	r0, #19
 80051f2:	f7fb fdb1 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 80051f6:	2014      	movs	r0, #20
 80051f8:	f001 ff64 	bl	80070c4 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80051fc:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005200:	2010      	movs	r0, #16
 8005202:	f7fb fda9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8005206:	f240 1137 	movw	r1, #311	; 0x137
 800520a:	2011      	movs	r0, #17
 800520c:	f7fb fda4 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 8005210:	2014      	movs	r0, #20
 8005212:	f001 ff57 	bl	80070c4 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8005216:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800521a:	2012      	movs	r0, #18
 800521c:	f7fb fd9c 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 8005220:	2014      	movs	r0, #20
 8005222:	f001 ff4f 	bl	80070c4 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8005226:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800522a:	2013      	movs	r0, #19
 800522c:	f7fb fd94 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005230:	2180      	movs	r1, #128	; 0x80
 8005232:	202a      	movs	r0, #42	; 0x2a
 8005234:	f7fb fd90 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005238:	2148      	movs	r1, #72	; 0x48
 800523a:	2029      	movs	r0, #41	; 0x29
 800523c:	f7fb fd8c 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 8005240:	2014      	movs	r0, #20
 8005242:	f001 ff3f 	bl	80070c4 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8005246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800524a:	2001      	movs	r0, #1
 800524c:	f7fb fd84 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005250:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005254:	2002      	movs	r0, #2
 8005256:	f7fb fd7f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800525a:	f241 0138 	movw	r1, #4152	; 0x1038
 800525e:	2003      	movs	r0, #3
 8005260:	f7fb fd7a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005264:	f240 2102 	movw	r1, #514	; 0x202
 8005268:	2008      	movs	r0, #8
 800526a:	f7fb fd75 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 800526e:	2100      	movs	r1, #0
 8005270:	200a      	movs	r0, #10
 8005272:	f7fb fd71 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8005276:	2100      	movs	r1, #0
 8005278:	200c      	movs	r0, #12
 800527a:	f7fb fd6d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 800527e:	2100      	movs	r1, #0
 8005280:	200d      	movs	r0, #13
 8005282:	f7fb fd69 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8005286:	2130      	movs	r1, #48	; 0x30
 8005288:	200e      	movs	r0, #14
 800528a:	f7fb fd65 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800528e:	2100      	movs	r1, #0
 8005290:	2050      	movs	r0, #80	; 0x50
 8005292:	f7fb fd61 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8005296:	21ef      	movs	r1, #239	; 0xef
 8005298:	2051      	movs	r0, #81	; 0x51
 800529a:	f7fb fd5d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800529e:	2100      	movs	r1, #0
 80052a0:	2052      	movs	r0, #82	; 0x52
 80052a2:	f7fb fd59 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 80052a6:	f240 113f 	movw	r1, #319	; 0x13f
 80052aa:	2053      	movs	r0, #83	; 0x53
 80052ac:	f7fb fd54 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 80052b0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80052b4:	2060      	movs	r0, #96	; 0x60
 80052b6:	f7fb fd4f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80052ba:	2101      	movs	r1, #1
 80052bc:	2061      	movs	r0, #97	; 0x61
 80052be:	f7fb fd4b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80052c2:	2100      	movs	r1, #0
 80052c4:	206a      	movs	r0, #106	; 0x6a
 80052c6:	f7fb fd47 	bl	8000d58 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 80052ca:	2111      	movs	r1, #17
 80052cc:	2090      	movs	r0, #144	; 0x90
 80052ce:	f7fb fd43 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80052d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052d6:	2092      	movs	r0, #146	; 0x92
 80052d8:	f7fb fd3e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 80052dc:	f240 4102 	movw	r1, #1026	; 0x402
 80052e0:	2093      	movs	r0, #147	; 0x93
 80052e2:	f7fb fd39 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80052e6:	2102      	movs	r1, #2
 80052e8:	2094      	movs	r0, #148	; 0x94
 80052ea:	f7fb fd35 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 80052ee:	2014      	movs	r0, #20
 80052f0:	f001 fee8 	bl	80070c4 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80052f4:	2101      	movs	r1, #1
 80052f6:	2007      	movs	r0, #7
 80052f8:	f7fb fd2e 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 80052fc:	2014      	movs	r0, #20
 80052fe:	f001 fee1 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8005302:	2161      	movs	r1, #97	; 0x61
 8005304:	2007      	movs	r0, #7
 8005306:	f7fb fd27 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 800530a:	f240 1173 	movw	r1, #371	; 0x173
 800530e:	2007      	movs	r0, #7
 8005310:	f7fb fd22 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8005314:	2100      	movs	r1, #0
 8005316:	2020      	movs	r0, #32
 8005318:	f7fb fd1e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800531c:	2100      	movs	r1, #0
 800531e:	2021      	movs	r0, #33	; 0x21
 8005320:	f7fb fd1a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8005324:	2122      	movs	r1, #34	; 0x22
 8005326:	2000      	movs	r0, #0
 8005328:	f7fb fd16 	bl	8000d58 <LCD_WriteReg>
 800532c:	f000 beca 	b.w	80060c4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005330:	4b6b      	ldr	r3, [pc, #428]	; (80054e0 <LCD_Init+0x3250>)
 8005332:	889b      	ldrh	r3, [r3, #4]
 8005334:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005338:	4293      	cmp	r3, r2
 800533a:	f040 80d3 	bne.w	80054e4 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 800533e:	2100      	movs	r1, #0
 8005340:	2000      	movs	r0, #0
 8005342:	f7fb fd09 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005346:	2100      	movs	r1, #0
 8005348:	2000      	movs	r0, #0
 800534a:	f7fb fd05 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 800534e:	2014      	movs	r0, #20
 8005350:	f001 feb8 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8005354:	2100      	movs	r1, #0
 8005356:	2000      	movs	r0, #0
 8005358:	f7fb fcfe 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800535c:	2100      	movs	r1, #0
 800535e:	2000      	movs	r0, #0
 8005360:	f7fb fcfa 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005364:	2100      	movs	r1, #0
 8005366:	2000      	movs	r0, #0
 8005368:	f7fb fcf6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800536c:	2100      	movs	r1, #0
 800536e:	2000      	movs	r0, #0
 8005370:	f7fb fcf2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8005374:	2101      	movs	r1, #1
 8005376:	20a4      	movs	r0, #164	; 0xa4
 8005378:	f7fb fcee 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 800537c:	2014      	movs	r0, #20
 800537e:	f001 fea1 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005382:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005386:	2060      	movs	r0, #96	; 0x60
 8005388:	f7fb fce6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800538c:	f640 0106 	movw	r1, #2054	; 0x806
 8005390:	2008      	movs	r0, #8
 8005392:	f7fb fce1 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8005396:	f240 7103 	movw	r1, #1795	; 0x703
 800539a:	2030      	movs	r0, #48	; 0x30
 800539c:	f7fb fcdc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 80053a0:	2101      	movs	r1, #1
 80053a2:	2031      	movs	r0, #49	; 0x31
 80053a4:	f7fb fcd8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 80053a8:	2104      	movs	r1, #4
 80053aa:	2032      	movs	r0, #50	; 0x32
 80053ac:	f7fb fcd4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 80053b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80053b4:	2033      	movs	r0, #51	; 0x33
 80053b6:	f7fb fccf 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80053ba:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053be:	2034      	movs	r0, #52	; 0x34
 80053c0:	f7fb fcca 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80053c4:	f240 1103 	movw	r1, #259	; 0x103
 80053c8:	2035      	movs	r0, #53	; 0x35
 80053ca:	f7fb fcc5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80053ce:	211f      	movs	r1, #31
 80053d0:	2036      	movs	r0, #54	; 0x36
 80053d2:	f7fb fcc1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80053d6:	f240 7103 	movw	r1, #1795	; 0x703
 80053da:	2037      	movs	r0, #55	; 0x37
 80053dc:	f7fb fcbc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80053e0:	2101      	movs	r1, #1
 80053e2:	2038      	movs	r0, #56	; 0x38
 80053e4:	f7fb fcb8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80053e8:	2104      	movs	r1, #4
 80053ea:	2039      	movs	r0, #57	; 0x39
 80053ec:	f7fb fcb4 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80053f0:	2115      	movs	r1, #21
 80053f2:	2090      	movs	r0, #144	; 0x90
 80053f4:	f7fb fcb0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80053f8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80053fc:	2010      	movs	r0, #16
 80053fe:	f7fb fcab 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8005402:	f240 2147 	movw	r1, #583	; 0x247
 8005406:	2011      	movs	r0, #17
 8005408:	f7fb fca6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800540c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005410:	2012      	movs	r0, #18
 8005412:	f7fb fca1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005416:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800541a:	2013      	movs	r0, #19
 800541c:	f7fb fc9c 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(120);
 8005420:	2078      	movs	r0, #120	; 0x78
 8005422:	f001 fe4f 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800542a:	2001      	movs	r0, #1
 800542c:	f7fb fc94 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005434:	2002      	movs	r0, #2
 8005436:	f7fb fc8f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800543a:	f241 0130 	movw	r1, #4144	; 0x1030
 800543e:	2003      	movs	r0, #3
 8005440:	f7fb fc8a 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005444:	2108      	movs	r1, #8
 8005446:	200a      	movs	r0, #10
 8005448:	f7fb fc86 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800544c:	2100      	movs	r1, #0
 800544e:	200c      	movs	r0, #12
 8005450:	f7fb fc82 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005454:	2120      	movs	r1, #32
 8005456:	200e      	movs	r0, #14
 8005458:	f7fb fc7e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800545c:	2100      	movs	r1, #0
 800545e:	200f      	movs	r0, #15
 8005460:	f7fb fc7a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005464:	2100      	movs	r1, #0
 8005466:	2020      	movs	r0, #32
 8005468:	f7fb fc76 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800546c:	2100      	movs	r1, #0
 800546e:	2021      	movs	r0, #33	; 0x21
 8005470:	f7fb fc72 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005474:	213d      	movs	r1, #61	; 0x3d
 8005476:	202a      	movs	r0, #42	; 0x2a
 8005478:	f7fb fc6e 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(20);
 800547c:	2014      	movs	r0, #20
 800547e:	f001 fe21 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005482:	212d      	movs	r1, #45	; 0x2d
 8005484:	2029      	movs	r0, #41	; 0x29
 8005486:	f7fb fc67 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800548a:	2100      	movs	r1, #0
 800548c:	2050      	movs	r0, #80	; 0x50
 800548e:	f7fb fc63 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005492:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005496:	2051      	movs	r0, #81	; 0x51
 8005498:	f7fb fc5e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800549c:	2100      	movs	r1, #0
 800549e:	2052      	movs	r0, #82	; 0x52
 80054a0:	f7fb fc5a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80054a4:	f240 113f 	movw	r1, #319	; 0x13f
 80054a8:	2053      	movs	r0, #83	; 0x53
 80054aa:	f7fb fc55 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80054ae:	2100      	movs	r1, #0
 80054b0:	2061      	movs	r0, #97	; 0x61
 80054b2:	f7fb fc51 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80054b6:	2100      	movs	r1, #0
 80054b8:	206a      	movs	r0, #106	; 0x6a
 80054ba:	f7fb fc4d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80054be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80054c2:	2092      	movs	r0, #146	; 0x92
 80054c4:	f7fb fc48 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80054c8:	2105      	movs	r1, #5
 80054ca:	2093      	movs	r0, #147	; 0x93
 80054cc:	f7fb fc44 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80054d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054d4:	2007      	movs	r0, #7
 80054d6:	f7fb fc3f 	bl	8000d58 <LCD_WriteReg>
 80054da:	f000 bdf3 	b.w	80060c4 <LCD_Init+0x3e34>
 80054de:	bf00      	nop
 80054e0:	20000714 	.word	0x20000714
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80054e4:	4bc2      	ldr	r3, [pc, #776]	; (80057f0 <LCD_Init+0x3560>)
 80054e6:	889b      	ldrh	r3, [r3, #4]
 80054e8:	f648 1289 	movw	r2, #35209	; 0x8989
 80054ec:	4293      	cmp	r3, r2
 80054ee:	f040 80bc 	bne.w	800566a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80054f2:	2101      	movs	r1, #1
 80054f4:	2000      	movs	r0, #0
 80054f6:	f7fb fc2f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80054fa:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80054fe:	2003      	movs	r0, #3
 8005500:	f7fb fc2a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005504:	2100      	movs	r1, #0
 8005506:	200c      	movs	r0, #12
 8005508:	f7fb fc26 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 800550c:	f640 010c 	movw	r1, #2060	; 0x80c
 8005510:	200d      	movs	r0, #13
 8005512:	f7fb fc21 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8005516:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 800551a:	200e      	movs	r0, #14
 800551c:	f7fb fc1c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005520:	21b0      	movs	r1, #176	; 0xb0
 8005522:	201e      	movs	r0, #30
 8005524:	f7fb fc18 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005528:	f642 313f 	movw	r1, #11071	; 0x2b3f
 800552c:	2001      	movs	r0, #1
 800552e:	f7fb fc13 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8005532:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005536:	2002      	movs	r0, #2
 8005538:	f7fb fc0e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800553c:	2100      	movs	r1, #0
 800553e:	2010      	movs	r0, #16
 8005540:	f7fb fc0a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8005544:	f246 0178 	movw	r1, #24696	; 0x6078
 8005548:	2011      	movs	r0, #17
 800554a:	f7fb fc05 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 800554e:	2100      	movs	r1, #0
 8005550:	2005      	movs	r0, #5
 8005552:	f7fb fc01 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005556:	2100      	movs	r1, #0
 8005558:	2006      	movs	r0, #6
 800555a:	f7fb fbfd 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800555e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8005562:	2016      	movs	r0, #22
 8005564:	f7fb fbf8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005568:	2103      	movs	r1, #3
 800556a:	2017      	movs	r0, #23
 800556c:	f7fb fbf4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005570:	f240 2133 	movw	r1, #563	; 0x233
 8005574:	2007      	movs	r0, #7
 8005576:	f7fb fbef 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800557a:	2100      	movs	r1, #0
 800557c:	200b      	movs	r0, #11
 800557e:	f7fb fbeb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005582:	2100      	movs	r1, #0
 8005584:	200f      	movs	r0, #15
 8005586:	f7fb fbe7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800558a:	2100      	movs	r1, #0
 800558c:	2041      	movs	r0, #65	; 0x41
 800558e:	f7fb fbe3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005592:	2100      	movs	r1, #0
 8005594:	2042      	movs	r0, #66	; 0x42
 8005596:	f7fb fbdf 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800559a:	2100      	movs	r1, #0
 800559c:	2048      	movs	r0, #72	; 0x48
 800559e:	f7fb fbdb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 80055a2:	f240 113f 	movw	r1, #319	; 0x13f
 80055a6:	2049      	movs	r0, #73	; 0x49
 80055a8:	f7fb fbd6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 80055ac:	2100      	movs	r1, #0
 80055ae:	204a      	movs	r0, #74	; 0x4a
 80055b0:	f7fb fbd2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 80055b4:	2100      	movs	r1, #0
 80055b6:	204b      	movs	r0, #75	; 0x4b
 80055b8:	f7fb fbce 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80055bc:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80055c0:	2044      	movs	r0, #68	; 0x44
 80055c2:	f7fb fbc9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80055c6:	2100      	movs	r1, #0
 80055c8:	2045      	movs	r0, #69	; 0x45
 80055ca:	f7fb fbc5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80055ce:	f240 113f 	movw	r1, #319	; 0x13f
 80055d2:	2046      	movs	r0, #70	; 0x46
 80055d4:	f7fb fbc0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80055d8:	f240 7107 	movw	r1, #1799	; 0x707
 80055dc:	2030      	movs	r0, #48	; 0x30
 80055de:	f7fb fbbb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80055e2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80055e6:	2031      	movs	r0, #49	; 0x31
 80055e8:	f7fb fbb6 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80055ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80055f0:	2032      	movs	r0, #50	; 0x32
 80055f2:	f7fb fbb1 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80055f6:	f240 5102 	movw	r1, #1282	; 0x502
 80055fa:	2033      	movs	r0, #51	; 0x33
 80055fc:	f7fb fbac 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005600:	f240 5107 	movw	r1, #1287	; 0x507
 8005604:	2034      	movs	r0, #52	; 0x34
 8005606:	f7fb fba7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800560a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800560e:	2035      	movs	r0, #53	; 0x35
 8005610:	f7fb fba2 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8005614:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005618:	2036      	movs	r0, #54	; 0x36
 800561a:	f7fb fb9d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 800561e:	f240 5102 	movw	r1, #1282	; 0x502
 8005622:	2037      	movs	r0, #55	; 0x37
 8005624:	f7fb fb98 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005628:	f240 3102 	movw	r1, #770	; 0x302
 800562c:	203a      	movs	r0, #58	; 0x3a
 800562e:	f7fb fb93 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8005632:	f240 3102 	movw	r1, #770	; 0x302
 8005636:	203b      	movs	r0, #59	; 0x3b
 8005638:	f7fb fb8e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 800563c:	2100      	movs	r1, #0
 800563e:	2023      	movs	r0, #35	; 0x23
 8005640:	f7fb fb8a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8005644:	2100      	movs	r1, #0
 8005646:	2024      	movs	r0, #36	; 0x24
 8005648:	f7fb fb86 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 800564c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005650:	2025      	movs	r0, #37	; 0x25
 8005652:	f7fb fb81 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005656:	2100      	movs	r1, #0
 8005658:	204f      	movs	r0, #79	; 0x4f
 800565a:	f7fb fb7d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 800565e:	2100      	movs	r1, #0
 8005660:	204e      	movs	r0, #78	; 0x4e
 8005662:	f7fb fb79 	bl	8000d58 <LCD_WriteReg>
 8005666:	f000 bd2d 	b.w	80060c4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 800566a:	4b61      	ldr	r3, [pc, #388]	; (80057f0 <LCD_Init+0x3560>)
 800566c:	889b      	ldrh	r3, [r3, #4]
 800566e:	f244 5231 	movw	r2, #17713	; 0x4531
 8005672:	4293      	cmp	r3, r2
 8005674:	f040 80be 	bne.w	80057f4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005678:	2101      	movs	r1, #1
 800567a:	2000      	movs	r0, #0
 800567c:	f7fb fb6c 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(10);
 8005680:	200a      	movs	r0, #10
 8005682:	f001 fd1f 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005686:	f241 6128 	movw	r1, #5672	; 0x1628
 800568a:	2010      	movs	r0, #16
 800568c:	f7fb fb64 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005690:	210e      	movs	r1, #14
 8005692:	2012      	movs	r0, #18
 8005694:	f7fb fb60 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005698:	f640 2139 	movw	r1, #2617	; 0xa39
 800569c:	2013      	movs	r0, #19
 800569e:	f7fb fb5b 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(10);
 80056a2:	200a      	movs	r0, #10
 80056a4:	f001 fd0e 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 80056a8:	2140      	movs	r1, #64	; 0x40
 80056aa:	2011      	movs	r0, #17
 80056ac:	f7fb fb54 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80056b0:	2150      	movs	r1, #80	; 0x50
 80056b2:	2015      	movs	r0, #21
 80056b4:	f7fb fb50 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(10);
 80056b8:	200a      	movs	r0, #10
 80056ba:	f001 fd03 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80056be:	211e      	movs	r1, #30
 80056c0:	2012      	movs	r0, #18
 80056c2:	f7fb fb49 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(10);
 80056c6:	200a      	movs	r0, #10
 80056c8:	f001 fcfc 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80056cc:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80056d0:	2010      	movs	r0, #16
 80056d2:	f7fb fb41 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80056d6:	f642 2139 	movw	r1, #10809	; 0x2a39
 80056da:	2013      	movs	r0, #19
 80056dc:	f7fb fb3c 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(10);
 80056e0:	200a      	movs	r0, #10
 80056e2:	f001 fcef 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80056e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056ea:	2001      	movs	r0, #1
 80056ec:	f7fb fb34 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80056f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80056f4:	2002      	movs	r0, #2
 80056f6:	f7fb fb2f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80056fa:	f241 0138 	movw	r1, #4152	; 0x1038
 80056fe:	2003      	movs	r0, #3
 8005700:	f7fb fb2a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005704:	f240 2102 	movw	r1, #514	; 0x202
 8005708:	2008      	movs	r0, #8
 800570a:	f7fb fb25 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800570e:	2108      	movs	r1, #8
 8005710:	200a      	movs	r0, #10
 8005712:	f7fb fb21 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005716:	2100      	movs	r1, #0
 8005718:	2030      	movs	r0, #48	; 0x30
 800571a:	f7fb fb1d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800571e:	f240 4102 	movw	r1, #1026	; 0x402
 8005722:	2031      	movs	r0, #49	; 0x31
 8005724:	f7fb fb18 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005728:	f44f 7183 	mov.w	r1, #262	; 0x106
 800572c:	2032      	movs	r0, #50	; 0x32
 800572e:	f7fb fb13 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8005732:	f240 5103 	movw	r1, #1283	; 0x503
 8005736:	2033      	movs	r0, #51	; 0x33
 8005738:	f7fb fb0e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 800573c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005740:	2034      	movs	r0, #52	; 0x34
 8005742:	f7fb fb09 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8005746:	f240 3101 	movw	r1, #769	; 0x301
 800574a:	2035      	movs	r0, #53	; 0x35
 800574c:	f7fb fb04 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005750:	f240 7107 	movw	r1, #1799	; 0x707
 8005754:	2036      	movs	r0, #54	; 0x36
 8005756:	f7fb faff 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800575a:	f240 3105 	movw	r1, #773	; 0x305
 800575e:	2037      	movs	r0, #55	; 0x37
 8005760:	f7fb fafa 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005764:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005768:	2038      	movs	r0, #56	; 0x38
 800576a:	f7fb faf5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 800576e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005772:	2039      	movs	r0, #57	; 0x39
 8005774:	f7fb faf0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005778:	2102      	movs	r1, #2
 800577a:	2041      	movs	r0, #65	; 0x41
 800577c:	f7fb faec 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005780:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005784:	2060      	movs	r0, #96	; 0x60
 8005786:	f7fb fae7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800578a:	2101      	movs	r1, #1
 800578c:	2061      	movs	r0, #97	; 0x61
 800578e:	f7fb fae3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005792:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005796:	2090      	movs	r0, #144	; 0x90
 8005798:	f7fb fade 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800579c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80057a0:	2092      	movs	r0, #146	; 0x92
 80057a2:	f7fb fad9 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80057a6:	2104      	movs	r1, #4
 80057a8:	2093      	movs	r0, #147	; 0x93
 80057aa:	f7fb fad5 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80057ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057b2:	20a0      	movs	r0, #160	; 0xa0
 80057b4:	f7fb fad0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80057b8:	2101      	movs	r1, #1
 80057ba:	2007      	movs	r0, #7
 80057bc:	f7fb facc 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80057c0:	2121      	movs	r1, #33	; 0x21
 80057c2:	2007      	movs	r0, #7
 80057c4:	f7fb fac8 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80057c8:	2123      	movs	r1, #35	; 0x23
 80057ca:	2007      	movs	r0, #7
 80057cc:	f7fb fac4 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80057d0:	2133      	movs	r1, #51	; 0x33
 80057d2:	2007      	movs	r0, #7
 80057d4:	f7fb fac0 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80057d8:	f240 1133 	movw	r1, #307	; 0x133
 80057dc:	2007      	movs	r0, #7
 80057de:	f7fb fabb 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80057e2:	2100      	movs	r1, #0
 80057e4:	20a0      	movs	r0, #160	; 0xa0
 80057e6:	f7fb fab7 	bl	8000d58 <LCD_WriteReg>
 80057ea:	f000 bc6b 	b.w	80060c4 <LCD_Init+0x3e34>
 80057ee:	bf00      	nop
 80057f0:	20000714 	.word	0x20000714
	} else if (lcddev.id == 0x4535) {
 80057f4:	4b5b      	ldr	r3, [pc, #364]	; (8005964 <LCD_Init+0x36d4>)
 80057f6:	889b      	ldrh	r3, [r3, #4]
 80057f8:	f244 5235 	movw	r2, #17717	; 0x4535
 80057fc:	4293      	cmp	r3, r2
 80057fe:	f040 80b3 	bne.w	8005968 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005802:	2130      	movs	r1, #48	; 0x30
 8005804:	2015      	movs	r0, #21
 8005806:	f7fb faa7 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800580a:	2110      	movs	r1, #16
 800580c:	209a      	movs	r0, #154	; 0x9a
 800580e:	f7fb faa3 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005812:	2120      	movs	r1, #32
 8005814:	2011      	movs	r0, #17
 8005816:	f7fb fa9f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800581a:	f243 4128 	movw	r1, #13352	; 0x3428
 800581e:	2010      	movs	r0, #16
 8005820:	f7fb fa9a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8005824:	2102      	movs	r1, #2
 8005826:	2012      	movs	r0, #18
 8005828:	f7fb fa96 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 800582c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005830:	2013      	movs	r0, #19
 8005832:	f7fb fa91 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(40);
 8005836:	2028      	movs	r0, #40	; 0x28
 8005838:	f001 fc44 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 800583c:	2112      	movs	r1, #18
 800583e:	2012      	movs	r0, #18
 8005840:	f7fb fa8a 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(40);
 8005844:	2028      	movs	r0, #40	; 0x28
 8005846:	f001 fc3d 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 800584a:	f243 4120 	movw	r1, #13344	; 0x3420
 800584e:	2010      	movs	r0, #16
 8005850:	f7fb fa82 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005854:	f243 0138 	movw	r1, #12344	; 0x3038
 8005858:	2013      	movs	r0, #19
 800585a:	f7fb fa7d 	bl	8000d58 <LCD_WriteReg>
		HAL_Delay(70);
 800585e:	2046      	movs	r0, #70	; 0x46
 8005860:	f001 fc30 	bl	80070c4 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005864:	2100      	movs	r1, #0
 8005866:	2030      	movs	r0, #48	; 0x30
 8005868:	f7fb fa76 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800586c:	f240 4102 	movw	r1, #1026	; 0x402
 8005870:	2031      	movs	r0, #49	; 0x31
 8005872:	f7fb fa71 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005876:	f240 3107 	movw	r1, #775	; 0x307
 800587a:	2032      	movs	r0, #50	; 0x32
 800587c:	f7fb fa6c 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005880:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005884:	2033      	movs	r0, #51	; 0x33
 8005886:	f7fb fa67 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800588a:	2104      	movs	r1, #4
 800588c:	2034      	movs	r0, #52	; 0x34
 800588e:	f7fb fa63 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005892:	f240 4101 	movw	r1, #1025	; 0x401
 8005896:	2035      	movs	r0, #53	; 0x35
 8005898:	f7fb fa5e 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800589c:	f240 7107 	movw	r1, #1799	; 0x707
 80058a0:	2036      	movs	r0, #54	; 0x36
 80058a2:	f7fb fa59 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80058a6:	f240 3105 	movw	r1, #773	; 0x305
 80058aa:	2037      	movs	r0, #55	; 0x37
 80058ac:	f7fb fa54 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80058b0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80058b4:	2038      	movs	r0, #56	; 0x38
 80058b6:	f7fb fa4f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80058ba:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80058be:	2039      	movs	r0, #57	; 0x39
 80058c0:	f7fb fa4a 	bl	8000d58 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80058c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058c8:	2001      	movs	r0, #1
 80058ca:	f7fb fa45 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80058ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80058d2:	2002      	movs	r0, #2
 80058d4:	f7fb fa40 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80058d8:	f241 0130 	movw	r1, #4144	; 0x1030
 80058dc:	2003      	movs	r0, #3
 80058de:	f7fb fa3b 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80058e2:	f640 0108 	movw	r1, #2056	; 0x808
 80058e6:	2008      	movs	r0, #8
 80058e8:	f7fb fa36 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80058ec:	2108      	movs	r1, #8
 80058ee:	200a      	movs	r0, #10
 80058f0:	f7fb fa32 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80058f4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80058f8:	2060      	movs	r0, #96	; 0x60
 80058fa:	f7fb fa2d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80058fe:	2101      	movs	r1, #1
 8005900:	2061      	movs	r0, #97	; 0x61
 8005902:	f7fb fa29 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005906:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800590a:	2090      	movs	r0, #144	; 0x90
 800590c:	f7fb fa24 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005914:	2092      	movs	r0, #146	; 0x92
 8005916:	f7fb fa1f 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800591a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800591e:	2093      	movs	r0, #147	; 0x93
 8005920:	f7fb fa1a 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8005924:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005928:	20a0      	movs	r0, #160	; 0xa0
 800592a:	f7fb fa15 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 800592e:	2110      	movs	r1, #16
 8005930:	20a3      	movs	r0, #163	; 0xa3
 8005932:	f7fb fa11 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005936:	2101      	movs	r1, #1
 8005938:	2007      	movs	r0, #7
 800593a:	f7fb fa0d 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 800593e:	2121      	movs	r1, #33	; 0x21
 8005940:	2007      	movs	r0, #7
 8005942:	f7fb fa09 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005946:	2123      	movs	r1, #35	; 0x23
 8005948:	2007      	movs	r0, #7
 800594a:	f7fb fa05 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 800594e:	2133      	movs	r1, #51	; 0x33
 8005950:	2007      	movs	r0, #7
 8005952:	f7fb fa01 	bl	8000d58 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005956:	f240 1133 	movw	r1, #307	; 0x133
 800595a:	2007      	movs	r0, #7
 800595c:	f7fb f9fc 	bl	8000d58 <LCD_WriteReg>
 8005960:	e3b0      	b.n	80060c4 <LCD_Init+0x3e34>
 8005962:	bf00      	nop
 8005964:	20000714 	.word	0x20000714
	} else if (lcddev.id == 0X1963) {
 8005968:	4ba8      	ldr	r3, [pc, #672]	; (8005c0c <LCD_Init+0x397c>)
 800596a:	889b      	ldrh	r3, [r3, #4]
 800596c:	f641 1263 	movw	r2, #6499	; 0x1963
 8005970:	4293      	cmp	r3, r2
 8005972:	f040 83a7 	bne.w	80060c4 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005976:	20e2      	movs	r0, #226	; 0xe2
 8005978:	f7fb f962 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800597c:	4ba4      	ldr	r3, [pc, #656]	; (8005c10 <LCD_Init+0x3980>)
 800597e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005982:	611a      	str	r2, [r3, #16]
 8005984:	4ba2      	ldr	r3, [pc, #648]	; (8005c10 <LCD_Init+0x3980>)
 8005986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598a:	615a      	str	r2, [r3, #20]
 800598c:	4ba1      	ldr	r3, [pc, #644]	; (8005c14 <LCD_Init+0x3984>)
 800598e:	221d      	movs	r2, #29
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	4b9f      	ldr	r3, [pc, #636]	; (8005c10 <LCD_Init+0x3980>)
 8005994:	2280      	movs	r2, #128	; 0x80
 8005996:	615a      	str	r2, [r3, #20]
 8005998:	4b9d      	ldr	r3, [pc, #628]	; (8005c10 <LCD_Init+0x3980>)
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	611a      	str	r2, [r3, #16]
 800599e:	4b9c      	ldr	r3, [pc, #624]	; (8005c10 <LCD_Init+0x3980>)
 80059a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80059a6:	4b9a      	ldr	r3, [pc, #616]	; (8005c10 <LCD_Init+0x3980>)
 80059a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ac:	611a      	str	r2, [r3, #16]
 80059ae:	4b98      	ldr	r3, [pc, #608]	; (8005c10 <LCD_Init+0x3980>)
 80059b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b4:	615a      	str	r2, [r3, #20]
 80059b6:	4b97      	ldr	r3, [pc, #604]	; (8005c14 <LCD_Init+0x3984>)
 80059b8:	2202      	movs	r2, #2
 80059ba:	60da      	str	r2, [r3, #12]
 80059bc:	4b94      	ldr	r3, [pc, #592]	; (8005c10 <LCD_Init+0x3980>)
 80059be:	2280      	movs	r2, #128	; 0x80
 80059c0:	615a      	str	r2, [r3, #20]
 80059c2:	4b93      	ldr	r3, [pc, #588]	; (8005c10 <LCD_Init+0x3980>)
 80059c4:	2280      	movs	r2, #128	; 0x80
 80059c6:	611a      	str	r2, [r3, #16]
 80059c8:	4b91      	ldr	r3, [pc, #580]	; (8005c10 <LCD_Init+0x3980>)
 80059ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80059d0:	4b8f      	ldr	r3, [pc, #572]	; (8005c10 <LCD_Init+0x3980>)
 80059d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d6:	611a      	str	r2, [r3, #16]
 80059d8:	4b8d      	ldr	r3, [pc, #564]	; (8005c10 <LCD_Init+0x3980>)
 80059da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059de:	615a      	str	r2, [r3, #20]
 80059e0:	4b8c      	ldr	r3, [pc, #560]	; (8005c14 <LCD_Init+0x3984>)
 80059e2:	2204      	movs	r2, #4
 80059e4:	60da      	str	r2, [r3, #12]
 80059e6:	4b8a      	ldr	r3, [pc, #552]	; (8005c10 <LCD_Init+0x3980>)
 80059e8:	2280      	movs	r2, #128	; 0x80
 80059ea:	615a      	str	r2, [r3, #20]
 80059ec:	4b88      	ldr	r3, [pc, #544]	; (8005c10 <LCD_Init+0x3980>)
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	611a      	str	r2, [r3, #16]
 80059f2:	4b87      	ldr	r3, [pc, #540]	; (8005c10 <LCD_Init+0x3980>)
 80059f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80059fa:	2001      	movs	r0, #1
 80059fc:	f001 fb62 	bl	80070c4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005a00:	20e0      	movs	r0, #224	; 0xe0
 8005a02:	f7fb f91d 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005a06:	4b82      	ldr	r3, [pc, #520]	; (8005c10 <LCD_Init+0x3980>)
 8005a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a0c:	611a      	str	r2, [r3, #16]
 8005a0e:	4b80      	ldr	r3, [pc, #512]	; (8005c10 <LCD_Init+0x3980>)
 8005a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a14:	615a      	str	r2, [r3, #20]
 8005a16:	4b7f      	ldr	r3, [pc, #508]	; (8005c14 <LCD_Init+0x3984>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	60da      	str	r2, [r3, #12]
 8005a1c:	4b7c      	ldr	r3, [pc, #496]	; (8005c10 <LCD_Init+0x3980>)
 8005a1e:	2280      	movs	r2, #128	; 0x80
 8005a20:	615a      	str	r2, [r3, #20]
 8005a22:	4b7b      	ldr	r3, [pc, #492]	; (8005c10 <LCD_Init+0x3980>)
 8005a24:	2280      	movs	r2, #128	; 0x80
 8005a26:	611a      	str	r2, [r3, #16]
 8005a28:	4b79      	ldr	r3, [pc, #484]	; (8005c10 <LCD_Init+0x3980>)
 8005a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2e:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005a30:	200a      	movs	r0, #10
 8005a32:	f001 fb47 	bl	80070c4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005a36:	20e0      	movs	r0, #224	; 0xe0
 8005a38:	f7fb f902 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005a3c:	4b74      	ldr	r3, [pc, #464]	; (8005c10 <LCD_Init+0x3980>)
 8005a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a42:	611a      	str	r2, [r3, #16]
 8005a44:	4b72      	ldr	r3, [pc, #456]	; (8005c10 <LCD_Init+0x3980>)
 8005a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a4a:	615a      	str	r2, [r3, #20]
 8005a4c:	4b71      	ldr	r3, [pc, #452]	; (8005c14 <LCD_Init+0x3984>)
 8005a4e:	2203      	movs	r2, #3
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	4b6f      	ldr	r3, [pc, #444]	; (8005c10 <LCD_Init+0x3980>)
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	615a      	str	r2, [r3, #20]
 8005a58:	4b6d      	ldr	r3, [pc, #436]	; (8005c10 <LCD_Init+0x3980>)
 8005a5a:	2280      	movs	r2, #128	; 0x80
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	4b6c      	ldr	r3, [pc, #432]	; (8005c10 <LCD_Init+0x3980>)
 8005a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a64:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005a66:	200c      	movs	r0, #12
 8005a68:	f001 fb2c 	bl	80070c4 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	f7fb f8e7 	bl	8000c40 <LCD_WR_REG>
		HAL_Delay(10);
 8005a72:	200a      	movs	r0, #10
 8005a74:	f001 fb26 	bl	80070c4 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005a78:	20e6      	movs	r0, #230	; 0xe6
 8005a7a:	f7fb f8e1 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005a7e:	4b64      	ldr	r3, [pc, #400]	; (8005c10 <LCD_Init+0x3980>)
 8005a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a84:	611a      	str	r2, [r3, #16]
 8005a86:	4b62      	ldr	r3, [pc, #392]	; (8005c10 <LCD_Init+0x3980>)
 8005a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8c:	615a      	str	r2, [r3, #20]
 8005a8e:	4b61      	ldr	r3, [pc, #388]	; (8005c14 <LCD_Init+0x3984>)
 8005a90:	222f      	movs	r2, #47	; 0x2f
 8005a92:	60da      	str	r2, [r3, #12]
 8005a94:	4b5e      	ldr	r3, [pc, #376]	; (8005c10 <LCD_Init+0x3980>)
 8005a96:	2280      	movs	r2, #128	; 0x80
 8005a98:	615a      	str	r2, [r3, #20]
 8005a9a:	4b5d      	ldr	r3, [pc, #372]	; (8005c10 <LCD_Init+0x3980>)
 8005a9c:	2280      	movs	r2, #128	; 0x80
 8005a9e:	611a      	str	r2, [r3, #16]
 8005aa0:	4b5b      	ldr	r3, [pc, #364]	; (8005c10 <LCD_Init+0x3980>)
 8005aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005aa8:	4b59      	ldr	r3, [pc, #356]	; (8005c10 <LCD_Init+0x3980>)
 8005aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aae:	611a      	str	r2, [r3, #16]
 8005ab0:	4b57      	ldr	r3, [pc, #348]	; (8005c10 <LCD_Init+0x3980>)
 8005ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab6:	615a      	str	r2, [r3, #20]
 8005ab8:	4b56      	ldr	r3, [pc, #344]	; (8005c14 <LCD_Init+0x3984>)
 8005aba:	22ff      	movs	r2, #255	; 0xff
 8005abc:	60da      	str	r2, [r3, #12]
 8005abe:	4b54      	ldr	r3, [pc, #336]	; (8005c10 <LCD_Init+0x3980>)
 8005ac0:	2280      	movs	r2, #128	; 0x80
 8005ac2:	615a      	str	r2, [r3, #20]
 8005ac4:	4b52      	ldr	r3, [pc, #328]	; (8005c10 <LCD_Init+0x3980>)
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	611a      	str	r2, [r3, #16]
 8005aca:	4b51      	ldr	r3, [pc, #324]	; (8005c10 <LCD_Init+0x3980>)
 8005acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005ad2:	4b4f      	ldr	r3, [pc, #316]	; (8005c10 <LCD_Init+0x3980>)
 8005ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ad8:	611a      	str	r2, [r3, #16]
 8005ada:	4b4d      	ldr	r3, [pc, #308]	; (8005c10 <LCD_Init+0x3980>)
 8005adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae0:	615a      	str	r2, [r3, #20]
 8005ae2:	4b4c      	ldr	r3, [pc, #304]	; (8005c14 <LCD_Init+0x3984>)
 8005ae4:	22ff      	movs	r2, #255	; 0xff
 8005ae6:	60da      	str	r2, [r3, #12]
 8005ae8:	4b49      	ldr	r3, [pc, #292]	; (8005c10 <LCD_Init+0x3980>)
 8005aea:	2280      	movs	r2, #128	; 0x80
 8005aec:	615a      	str	r2, [r3, #20]
 8005aee:	4b48      	ldr	r3, [pc, #288]	; (8005c10 <LCD_Init+0x3980>)
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	611a      	str	r2, [r3, #16]
 8005af4:	4b46      	ldr	r3, [pc, #280]	; (8005c10 <LCD_Init+0x3980>)
 8005af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005afc:	20b0      	movs	r0, #176	; 0xb0
 8005afe:	f7fb f89f 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005b02:	4b43      	ldr	r3, [pc, #268]	; (8005c10 <LCD_Init+0x3980>)
 8005b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b08:	611a      	str	r2, [r3, #16]
 8005b0a:	4b41      	ldr	r3, [pc, #260]	; (8005c10 <LCD_Init+0x3980>)
 8005b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b10:	615a      	str	r2, [r3, #20]
 8005b12:	4b40      	ldr	r3, [pc, #256]	; (8005c14 <LCD_Init+0x3984>)
 8005b14:	2220      	movs	r2, #32
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	4b3d      	ldr	r3, [pc, #244]	; (8005c10 <LCD_Init+0x3980>)
 8005b1a:	2280      	movs	r2, #128	; 0x80
 8005b1c:	615a      	str	r2, [r3, #20]
 8005b1e:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <LCD_Init+0x3980>)
 8005b20:	2280      	movs	r2, #128	; 0x80
 8005b22:	611a      	str	r2, [r3, #16]
 8005b24:	4b3a      	ldr	r3, [pc, #232]	; (8005c10 <LCD_Init+0x3980>)
 8005b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005b2c:	4b38      	ldr	r3, [pc, #224]	; (8005c10 <LCD_Init+0x3980>)
 8005b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b32:	611a      	str	r2, [r3, #16]
 8005b34:	4b36      	ldr	r3, [pc, #216]	; (8005c10 <LCD_Init+0x3980>)
 8005b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3a:	615a      	str	r2, [r3, #20]
 8005b3c:	4b35      	ldr	r3, [pc, #212]	; (8005c14 <LCD_Init+0x3984>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	4b33      	ldr	r3, [pc, #204]	; (8005c10 <LCD_Init+0x3980>)
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	615a      	str	r2, [r3, #20]
 8005b48:	4b31      	ldr	r3, [pc, #196]	; (8005c10 <LCD_Init+0x3980>)
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	611a      	str	r2, [r3, #16]
 8005b4e:	4b30      	ldr	r3, [pc, #192]	; (8005c10 <LCD_Init+0x3980>)
 8005b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b54:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <LCD_Init+0x3980>)
 8005b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b5c:	611a      	str	r2, [r3, #16]
 8005b5e:	4b2c      	ldr	r3, [pc, #176]	; (8005c10 <LCD_Init+0x3980>)
 8005b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b64:	615a      	str	r2, [r3, #20]
 8005b66:	4b2b      	ldr	r3, [pc, #172]	; (8005c14 <LCD_Init+0x3984>)
 8005b68:	2203      	movs	r2, #3
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	4b28      	ldr	r3, [pc, #160]	; (8005c10 <LCD_Init+0x3980>)
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	615a      	str	r2, [r3, #20]
 8005b72:	4b27      	ldr	r3, [pc, #156]	; (8005c10 <LCD_Init+0x3980>)
 8005b74:	2280      	movs	r2, #128	; 0x80
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	4b25      	ldr	r3, [pc, #148]	; (8005c10 <LCD_Init+0x3980>)
 8005b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005b80:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <LCD_Init+0x3980>)
 8005b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b86:	611a      	str	r2, [r3, #16]
 8005b88:	4b21      	ldr	r3, [pc, #132]	; (8005c10 <LCD_Init+0x3980>)
 8005b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8e:	615a      	str	r2, [r3, #20]
 8005b90:	4b20      	ldr	r3, [pc, #128]	; (8005c14 <LCD_Init+0x3984>)
 8005b92:	f240 321f 	movw	r2, #799	; 0x31f
 8005b96:	60da      	str	r2, [r3, #12]
 8005b98:	4b1d      	ldr	r3, [pc, #116]	; (8005c10 <LCD_Init+0x3980>)
 8005b9a:	2280      	movs	r2, #128	; 0x80
 8005b9c:	615a      	str	r2, [r3, #20]
 8005b9e:	4b1c      	ldr	r3, [pc, #112]	; (8005c10 <LCD_Init+0x3980>)
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	611a      	str	r2, [r3, #16]
 8005ba4:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <LCD_Init+0x3980>)
 8005ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005baa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005bac:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <LCD_Init+0x3980>)
 8005bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bb2:	611a      	str	r2, [r3, #16]
 8005bb4:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <LCD_Init+0x3980>)
 8005bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bba:	615a      	str	r2, [r3, #20]
 8005bbc:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <LCD_Init+0x3984>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	60da      	str	r2, [r3, #12]
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <LCD_Init+0x3980>)
 8005bc4:	2280      	movs	r2, #128	; 0x80
 8005bc6:	615a      	str	r2, [r3, #20]
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <LCD_Init+0x3980>)
 8005bca:	2280      	movs	r2, #128	; 0x80
 8005bcc:	611a      	str	r2, [r3, #16]
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <LCD_Init+0x3980>)
 8005bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005bd6:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <LCD_Init+0x3980>)
 8005bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bdc:	611a      	str	r2, [r3, #16]
 8005bde:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <LCD_Init+0x3980>)
 8005be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be4:	615a      	str	r2, [r3, #20]
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <LCD_Init+0x3984>)
 8005be8:	f240 12df 	movw	r2, #479	; 0x1df
 8005bec:	60da      	str	r2, [r3, #12]
 8005bee:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <LCD_Init+0x3980>)
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	615a      	str	r2, [r3, #20]
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <LCD_Init+0x3980>)
 8005bf6:	2280      	movs	r2, #128	; 0x80
 8005bf8:	611a      	str	r2, [r3, #16]
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <LCD_Init+0x3980>)
 8005bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c00:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005c02:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <LCD_Init+0x3980>)
 8005c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c08:	e006      	b.n	8005c18 <LCD_Init+0x3988>
 8005c0a:	bf00      	nop
 8005c0c:	20000714 	.word	0x20000714
 8005c10:	40011000 	.word	0x40011000
 8005c14:	40010c00 	.word	0x40010c00
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	4ba3      	ldr	r3, [pc, #652]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c20:	615a      	str	r2, [r3, #20]
 8005c22:	4ba2      	ldr	r3, [pc, #648]	; (8005eac <LCD_Init+0x3c1c>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	60da      	str	r2, [r3, #12]
 8005c28:	4b9f      	ldr	r3, [pc, #636]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c2a:	2280      	movs	r2, #128	; 0x80
 8005c2c:	615a      	str	r2, [r3, #20]
 8005c2e:	4b9e      	ldr	r3, [pc, #632]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	611a      	str	r2, [r3, #16]
 8005c34:	4b9c      	ldr	r3, [pc, #624]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005c3c:	20b4      	movs	r0, #180	; 0xb4
 8005c3e:	f7fa ffff 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005c42:	4b99      	ldr	r3, [pc, #612]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c48:	611a      	str	r2, [r3, #16]
 8005c4a:	4b97      	ldr	r3, [pc, #604]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c50:	615a      	str	r2, [r3, #20]
 8005c52:	4b96      	ldr	r3, [pc, #600]	; (8005eac <LCD_Init+0x3c1c>)
 8005c54:	2204      	movs	r2, #4
 8005c56:	60da      	str	r2, [r3, #12]
 8005c58:	4b93      	ldr	r3, [pc, #588]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c5a:	2280      	movs	r2, #128	; 0x80
 8005c5c:	615a      	str	r2, [r3, #20]
 8005c5e:	4b92      	ldr	r3, [pc, #584]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c60:	2280      	movs	r2, #128	; 0x80
 8005c62:	611a      	str	r2, [r3, #16]
 8005c64:	4b90      	ldr	r3, [pc, #576]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005c6c:	4b8e      	ldr	r3, [pc, #568]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c72:	611a      	str	r2, [r3, #16]
 8005c74:	4b8c      	ldr	r3, [pc, #560]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c7a:	615a      	str	r2, [r3, #20]
 8005c7c:	4b8b      	ldr	r3, [pc, #556]	; (8005eac <LCD_Init+0x3c1c>)
 8005c7e:	f240 421f 	movw	r2, #1055	; 0x41f
 8005c82:	60da      	str	r2, [r3, #12]
 8005c84:	4b88      	ldr	r3, [pc, #544]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c86:	2280      	movs	r2, #128	; 0x80
 8005c88:	615a      	str	r2, [r3, #20]
 8005c8a:	4b87      	ldr	r3, [pc, #540]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c8c:	2280      	movs	r2, #128	; 0x80
 8005c8e:	611a      	str	r2, [r3, #16]
 8005c90:	4b85      	ldr	r3, [pc, #532]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c96:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005c98:	4b83      	ldr	r3, [pc, #524]	; (8005ea8 <LCD_Init+0x3c18>)
 8005c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c9e:	611a      	str	r2, [r3, #16]
 8005ca0:	4b81      	ldr	r3, [pc, #516]	; (8005ea8 <LCD_Init+0x3c18>)
 8005ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca6:	615a      	str	r2, [r3, #20]
 8005ca8:	4b80      	ldr	r3, [pc, #512]	; (8005eac <LCD_Init+0x3c1c>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	4b7e      	ldr	r3, [pc, #504]	; (8005ea8 <LCD_Init+0x3c18>)
 8005cb0:	2280      	movs	r2, #128	; 0x80
 8005cb2:	615a      	str	r2, [r3, #20]
 8005cb4:	4b7c      	ldr	r3, [pc, #496]	; (8005ea8 <LCD_Init+0x3c18>)
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	611a      	str	r2, [r3, #16]
 8005cba:	4b7b      	ldr	r3, [pc, #492]	; (8005ea8 <LCD_Init+0x3c18>)
 8005cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005cc2:	4b79      	ldr	r3, [pc, #484]	; (8005ea8 <LCD_Init+0x3c18>)
 8005cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cc8:	611a      	str	r2, [r3, #16]
 8005cca:	4b77      	ldr	r3, [pc, #476]	; (8005ea8 <LCD_Init+0x3c18>)
 8005ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd0:	615a      	str	r2, [r3, #20]
 8005cd2:	4b76      	ldr	r3, [pc, #472]	; (8005eac <LCD_Init+0x3c1c>)
 8005cd4:	222e      	movs	r2, #46	; 0x2e
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	4b73      	ldr	r3, [pc, #460]	; (8005ea8 <LCD_Init+0x3c18>)
 8005cda:	2280      	movs	r2, #128	; 0x80
 8005cdc:	615a      	str	r2, [r3, #20]
 8005cde:	4b72      	ldr	r3, [pc, #456]	; (8005ea8 <LCD_Init+0x3c18>)
 8005ce0:	2280      	movs	r2, #128	; 0x80
 8005ce2:	611a      	str	r2, [r3, #16]
 8005ce4:	4b70      	ldr	r3, [pc, #448]	; (8005ea8 <LCD_Init+0x3c18>)
 8005ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005cec:	4b6e      	ldr	r3, [pc, #440]	; (8005ea8 <LCD_Init+0x3c18>)
 8005cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf2:	611a      	str	r2, [r3, #16]
 8005cf4:	4b6c      	ldr	r3, [pc, #432]	; (8005ea8 <LCD_Init+0x3c18>)
 8005cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfa:	615a      	str	r2, [r3, #20]
 8005cfc:	4b6b      	ldr	r3, [pc, #428]	; (8005eac <LCD_Init+0x3c1c>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	4b69      	ldr	r3, [pc, #420]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d04:	2280      	movs	r2, #128	; 0x80
 8005d06:	615a      	str	r2, [r3, #20]
 8005d08:	4b67      	ldr	r3, [pc, #412]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	611a      	str	r2, [r3, #16]
 8005d0e:	4b66      	ldr	r3, [pc, #408]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d14:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d16:	4b64      	ldr	r3, [pc, #400]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d1c:	611a      	str	r2, [r3, #16]
 8005d1e:	4b62      	ldr	r3, [pc, #392]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d24:	615a      	str	r2, [r3, #20]
 8005d26:	4b61      	ldr	r3, [pc, #388]	; (8005eac <LCD_Init+0x3c1c>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	60da      	str	r2, [r3, #12]
 8005d2c:	4b5e      	ldr	r3, [pc, #376]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d2e:	2280      	movs	r2, #128	; 0x80
 8005d30:	615a      	str	r2, [r3, #20]
 8005d32:	4b5d      	ldr	r3, [pc, #372]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	611a      	str	r2, [r3, #16]
 8005d38:	4b5b      	ldr	r3, [pc, #364]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d3e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d40:	4b59      	ldr	r3, [pc, #356]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d46:	611a      	str	r2, [r3, #16]
 8005d48:	4b57      	ldr	r3, [pc, #348]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4e:	615a      	str	r2, [r3, #20]
 8005d50:	4b56      	ldr	r3, [pc, #344]	; (8005eac <LCD_Init+0x3c1c>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	60da      	str	r2, [r3, #12]
 8005d56:	4b54      	ldr	r3, [pc, #336]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d58:	2280      	movs	r2, #128	; 0x80
 8005d5a:	615a      	str	r2, [r3, #20]
 8005d5c:	4b52      	ldr	r3, [pc, #328]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d5e:	2280      	movs	r2, #128	; 0x80
 8005d60:	611a      	str	r2, [r3, #16]
 8005d62:	4b51      	ldr	r3, [pc, #324]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d68:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d70:	611a      	str	r2, [r3, #16]
 8005d72:	4b4d      	ldr	r3, [pc, #308]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d78:	615a      	str	r2, [r3, #20]
 8005d7a:	4b4c      	ldr	r3, [pc, #304]	; (8005eac <LCD_Init+0x3c1c>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	60da      	str	r2, [r3, #12]
 8005d80:	4b49      	ldr	r3, [pc, #292]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d82:	2280      	movs	r2, #128	; 0x80
 8005d84:	615a      	str	r2, [r3, #20]
 8005d86:	4b48      	ldr	r3, [pc, #288]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d88:	2280      	movs	r2, #128	; 0x80
 8005d8a:	611a      	str	r2, [r3, #16]
 8005d8c:	4b46      	ldr	r3, [pc, #280]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d92:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005d94:	20b6      	movs	r0, #182	; 0xb6
 8005d96:	f7fa ff53 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005d9a:	4b43      	ldr	r3, [pc, #268]	; (8005ea8 <LCD_Init+0x3c18>)
 8005d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005da0:	611a      	str	r2, [r3, #16]
 8005da2:	4b41      	ldr	r3, [pc, #260]	; (8005ea8 <LCD_Init+0x3c18>)
 8005da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da8:	615a      	str	r2, [r3, #20]
 8005daa:	4b40      	ldr	r3, [pc, #256]	; (8005eac <LCD_Init+0x3c1c>)
 8005dac:	2202      	movs	r2, #2
 8005dae:	60da      	str	r2, [r3, #12]
 8005db0:	4b3d      	ldr	r3, [pc, #244]	; (8005ea8 <LCD_Init+0x3c18>)
 8005db2:	2280      	movs	r2, #128	; 0x80
 8005db4:	615a      	str	r2, [r3, #20]
 8005db6:	4b3c      	ldr	r3, [pc, #240]	; (8005ea8 <LCD_Init+0x3c18>)
 8005db8:	2280      	movs	r2, #128	; 0x80
 8005dba:	611a      	str	r2, [r3, #16]
 8005dbc:	4b3a      	ldr	r3, [pc, #232]	; (8005ea8 <LCD_Init+0x3c18>)
 8005dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005dc4:	4b38      	ldr	r3, [pc, #224]	; (8005ea8 <LCD_Init+0x3c18>)
 8005dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dca:	611a      	str	r2, [r3, #16]
 8005dcc:	4b36      	ldr	r3, [pc, #216]	; (8005ea8 <LCD_Init+0x3c18>)
 8005dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd2:	615a      	str	r2, [r3, #20]
 8005dd4:	4b35      	ldr	r3, [pc, #212]	; (8005eac <LCD_Init+0x3c1c>)
 8005dd6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005dda:	60da      	str	r2, [r3, #12]
 8005ddc:	4b32      	ldr	r3, [pc, #200]	; (8005ea8 <LCD_Init+0x3c18>)
 8005dde:	2280      	movs	r2, #128	; 0x80
 8005de0:	615a      	str	r2, [r3, #20]
 8005de2:	4b31      	ldr	r3, [pc, #196]	; (8005ea8 <LCD_Init+0x3c18>)
 8005de4:	2280      	movs	r2, #128	; 0x80
 8005de6:	611a      	str	r2, [r3, #16]
 8005de8:	4b2f      	ldr	r3, [pc, #188]	; (8005ea8 <LCD_Init+0x3c18>)
 8005dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005df0:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <LCD_Init+0x3c18>)
 8005df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005df6:	611a      	str	r2, [r3, #16]
 8005df8:	4b2b      	ldr	r3, [pc, #172]	; (8005ea8 <LCD_Init+0x3c18>)
 8005dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dfe:	615a      	str	r2, [r3, #20]
 8005e00:	4b2a      	ldr	r3, [pc, #168]	; (8005eac <LCD_Init+0x3c1c>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e08:	2280      	movs	r2, #128	; 0x80
 8005e0a:	615a      	str	r2, [r3, #20]
 8005e0c:	4b26      	ldr	r3, [pc, #152]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e0e:	2280      	movs	r2, #128	; 0x80
 8005e10:	611a      	str	r2, [r3, #16]
 8005e12:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e18:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005e1a:	4b23      	ldr	r3, [pc, #140]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e20:	611a      	str	r2, [r3, #16]
 8005e22:	4b21      	ldr	r3, [pc, #132]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e28:	615a      	str	r2, [r3, #20]
 8005e2a:	4b20      	ldr	r3, [pc, #128]	; (8005eac <LCD_Init+0x3c1c>)
 8005e2c:	2217      	movs	r2, #23
 8005e2e:	60da      	str	r2, [r3, #12]
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e32:	2280      	movs	r2, #128	; 0x80
 8005e34:	615a      	str	r2, [r3, #20]
 8005e36:	4b1c      	ldr	r3, [pc, #112]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e38:	2280      	movs	r2, #128	; 0x80
 8005e3a:	611a      	str	r2, [r3, #16]
 8005e3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005e44:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e4a:	611a      	str	r2, [r3, #16]
 8005e4c:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e52:	615a      	str	r2, [r3, #20]
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <LCD_Init+0x3c1c>)
 8005e56:	2215      	movs	r2, #21
 8005e58:	60da      	str	r2, [r3, #12]
 8005e5a:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e5c:	2280      	movs	r2, #128	; 0x80
 8005e5e:	615a      	str	r2, [r3, #20]
 8005e60:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	611a      	str	r2, [r3, #16]
 8005e66:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e6c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e74:	611a      	str	r2, [r3, #16]
 8005e76:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7c:	615a      	str	r2, [r3, #20]
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <LCD_Init+0x3c1c>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	60da      	str	r2, [r3, #12]
 8005e84:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e86:	2280      	movs	r2, #128	; 0x80
 8005e88:	615a      	str	r2, [r3, #20]
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e8c:	2280      	movs	r2, #128	; 0x80
 8005e8e:	611a      	str	r2, [r3, #16]
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e96:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005e98:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <LCD_Init+0x3c18>)
 8005e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e9e:	611a      	str	r2, [r3, #16]
 8005ea0:	4b01      	ldr	r3, [pc, #4]	; (8005ea8 <LCD_Init+0x3c18>)
 8005ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea6:	e003      	b.n	8005eb0 <LCD_Init+0x3c20>
 8005ea8:	40011000 	.word	0x40011000
 8005eac:	40010c00 	.word	0x40010c00
 8005eb0:	615a      	str	r2, [r3, #20]
 8005eb2:	4b8b      	ldr	r3, [pc, #556]	; (80060e0 <LCD_Init+0x3e50>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	60da      	str	r2, [r3, #12]
 8005eb8:	4b8a      	ldr	r3, [pc, #552]	; (80060e4 <LCD_Init+0x3e54>)
 8005eba:	2280      	movs	r2, #128	; 0x80
 8005ebc:	615a      	str	r2, [r3, #20]
 8005ebe:	4b89      	ldr	r3, [pc, #548]	; (80060e4 <LCD_Init+0x3e54>)
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	611a      	str	r2, [r3, #16]
 8005ec4:	4b87      	ldr	r3, [pc, #540]	; (80060e4 <LCD_Init+0x3e54>)
 8005ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eca:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005ecc:	20f0      	movs	r0, #240	; 0xf0
 8005ece:	f7fa feb7 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005ed2:	4b84      	ldr	r3, [pc, #528]	; (80060e4 <LCD_Init+0x3e54>)
 8005ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ed8:	611a      	str	r2, [r3, #16]
 8005eda:	4b82      	ldr	r3, [pc, #520]	; (80060e4 <LCD_Init+0x3e54>)
 8005edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee0:	615a      	str	r2, [r3, #20]
 8005ee2:	4b7f      	ldr	r3, [pc, #508]	; (80060e0 <LCD_Init+0x3e50>)
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	60da      	str	r2, [r3, #12]
 8005ee8:	4b7e      	ldr	r3, [pc, #504]	; (80060e4 <LCD_Init+0x3e54>)
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	615a      	str	r2, [r3, #20]
 8005eee:	4b7d      	ldr	r3, [pc, #500]	; (80060e4 <LCD_Init+0x3e54>)
 8005ef0:	2280      	movs	r2, #128	; 0x80
 8005ef2:	611a      	str	r2, [r3, #16]
 8005ef4:	4b7b      	ldr	r3, [pc, #492]	; (80060e4 <LCD_Init+0x3e54>)
 8005ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005efa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005efc:	2029      	movs	r0, #41	; 0x29
 8005efe:	f7fa fe9f 	bl	8000c40 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005f02:	20d0      	movs	r0, #208	; 0xd0
 8005f04:	f7fa fe9c 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005f08:	4b76      	ldr	r3, [pc, #472]	; (80060e4 <LCD_Init+0x3e54>)
 8005f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f0e:	611a      	str	r2, [r3, #16]
 8005f10:	4b74      	ldr	r3, [pc, #464]	; (80060e4 <LCD_Init+0x3e54>)
 8005f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f16:	615a      	str	r2, [r3, #20]
 8005f18:	4b71      	ldr	r3, [pc, #452]	; (80060e0 <LCD_Init+0x3e50>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	4b71      	ldr	r3, [pc, #452]	; (80060e4 <LCD_Init+0x3e54>)
 8005f20:	2280      	movs	r2, #128	; 0x80
 8005f22:	615a      	str	r2, [r3, #20]
 8005f24:	4b6f      	ldr	r3, [pc, #444]	; (80060e4 <LCD_Init+0x3e54>)
 8005f26:	2280      	movs	r2, #128	; 0x80
 8005f28:	611a      	str	r2, [r3, #16]
 8005f2a:	4b6e      	ldr	r3, [pc, #440]	; (80060e4 <LCD_Init+0x3e54>)
 8005f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f30:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005f32:	20be      	movs	r0, #190	; 0xbe
 8005f34:	f7fa fe84 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005f38:	4b6a      	ldr	r3, [pc, #424]	; (80060e4 <LCD_Init+0x3e54>)
 8005f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f3e:	611a      	str	r2, [r3, #16]
 8005f40:	4b68      	ldr	r3, [pc, #416]	; (80060e4 <LCD_Init+0x3e54>)
 8005f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f46:	615a      	str	r2, [r3, #20]
 8005f48:	4b65      	ldr	r3, [pc, #404]	; (80060e0 <LCD_Init+0x3e50>)
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	60da      	str	r2, [r3, #12]
 8005f4e:	4b65      	ldr	r3, [pc, #404]	; (80060e4 <LCD_Init+0x3e54>)
 8005f50:	2280      	movs	r2, #128	; 0x80
 8005f52:	615a      	str	r2, [r3, #20]
 8005f54:	4b63      	ldr	r3, [pc, #396]	; (80060e4 <LCD_Init+0x3e54>)
 8005f56:	2280      	movs	r2, #128	; 0x80
 8005f58:	611a      	str	r2, [r3, #16]
 8005f5a:	4b62      	ldr	r3, [pc, #392]	; (80060e4 <LCD_Init+0x3e54>)
 8005f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f60:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005f62:	4b60      	ldr	r3, [pc, #384]	; (80060e4 <LCD_Init+0x3e54>)
 8005f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f68:	611a      	str	r2, [r3, #16]
 8005f6a:	4b5e      	ldr	r3, [pc, #376]	; (80060e4 <LCD_Init+0x3e54>)
 8005f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f70:	615a      	str	r2, [r3, #20]
 8005f72:	4b5b      	ldr	r3, [pc, #364]	; (80060e0 <LCD_Init+0x3e50>)
 8005f74:	22fe      	movs	r2, #254	; 0xfe
 8005f76:	60da      	str	r2, [r3, #12]
 8005f78:	4b5a      	ldr	r3, [pc, #360]	; (80060e4 <LCD_Init+0x3e54>)
 8005f7a:	2280      	movs	r2, #128	; 0x80
 8005f7c:	615a      	str	r2, [r3, #20]
 8005f7e:	4b59      	ldr	r3, [pc, #356]	; (80060e4 <LCD_Init+0x3e54>)
 8005f80:	2280      	movs	r2, #128	; 0x80
 8005f82:	611a      	str	r2, [r3, #16]
 8005f84:	4b57      	ldr	r3, [pc, #348]	; (80060e4 <LCD_Init+0x3e54>)
 8005f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f8a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005f8c:	4b55      	ldr	r3, [pc, #340]	; (80060e4 <LCD_Init+0x3e54>)
 8005f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f92:	611a      	str	r2, [r3, #16]
 8005f94:	4b53      	ldr	r3, [pc, #332]	; (80060e4 <LCD_Init+0x3e54>)
 8005f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f9a:	615a      	str	r2, [r3, #20]
 8005f9c:	4b50      	ldr	r3, [pc, #320]	; (80060e0 <LCD_Init+0x3e50>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	60da      	str	r2, [r3, #12]
 8005fa2:	4b50      	ldr	r3, [pc, #320]	; (80060e4 <LCD_Init+0x3e54>)
 8005fa4:	2280      	movs	r2, #128	; 0x80
 8005fa6:	615a      	str	r2, [r3, #20]
 8005fa8:	4b4e      	ldr	r3, [pc, #312]	; (80060e4 <LCD_Init+0x3e54>)
 8005faa:	2280      	movs	r2, #128	; 0x80
 8005fac:	611a      	str	r2, [r3, #16]
 8005fae:	4b4d      	ldr	r3, [pc, #308]	; (80060e4 <LCD_Init+0x3e54>)
 8005fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005fb6:	4b4b      	ldr	r3, [pc, #300]	; (80060e4 <LCD_Init+0x3e54>)
 8005fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fbc:	611a      	str	r2, [r3, #16]
 8005fbe:	4b49      	ldr	r3, [pc, #292]	; (80060e4 <LCD_Init+0x3e54>)
 8005fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc4:	615a      	str	r2, [r3, #20]
 8005fc6:	4b46      	ldr	r3, [pc, #280]	; (80060e0 <LCD_Init+0x3e50>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	60da      	str	r2, [r3, #12]
 8005fcc:	4b45      	ldr	r3, [pc, #276]	; (80060e4 <LCD_Init+0x3e54>)
 8005fce:	2280      	movs	r2, #128	; 0x80
 8005fd0:	615a      	str	r2, [r3, #20]
 8005fd2:	4b44      	ldr	r3, [pc, #272]	; (80060e4 <LCD_Init+0x3e54>)
 8005fd4:	2280      	movs	r2, #128	; 0x80
 8005fd6:	611a      	str	r2, [r3, #16]
 8005fd8:	4b42      	ldr	r3, [pc, #264]	; (80060e4 <LCD_Init+0x3e54>)
 8005fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fde:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005fe0:	4b40      	ldr	r3, [pc, #256]	; (80060e4 <LCD_Init+0x3e54>)
 8005fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fe6:	611a      	str	r2, [r3, #16]
 8005fe8:	4b3e      	ldr	r3, [pc, #248]	; (80060e4 <LCD_Init+0x3e54>)
 8005fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fee:	615a      	str	r2, [r3, #20]
 8005ff0:	4b3b      	ldr	r3, [pc, #236]	; (80060e0 <LCD_Init+0x3e50>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	60da      	str	r2, [r3, #12]
 8005ff6:	4b3b      	ldr	r3, [pc, #236]	; (80060e4 <LCD_Init+0x3e54>)
 8005ff8:	2280      	movs	r2, #128	; 0x80
 8005ffa:	615a      	str	r2, [r3, #20]
 8005ffc:	4b39      	ldr	r3, [pc, #228]	; (80060e4 <LCD_Init+0x3e54>)
 8005ffe:	2280      	movs	r2, #128	; 0x80
 8006000:	611a      	str	r2, [r3, #16]
 8006002:	4b38      	ldr	r3, [pc, #224]	; (80060e4 <LCD_Init+0x3e54>)
 8006004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006008:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 800600a:	4b36      	ldr	r3, [pc, #216]	; (80060e4 <LCD_Init+0x3e54>)
 800600c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006010:	611a      	str	r2, [r3, #16]
 8006012:	4b34      	ldr	r3, [pc, #208]	; (80060e4 <LCD_Init+0x3e54>)
 8006014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006018:	615a      	str	r2, [r3, #20]
 800601a:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <LCD_Init+0x3e50>)
 800601c:	2200      	movs	r2, #0
 800601e:	60da      	str	r2, [r3, #12]
 8006020:	4b30      	ldr	r3, [pc, #192]	; (80060e4 <LCD_Init+0x3e54>)
 8006022:	2280      	movs	r2, #128	; 0x80
 8006024:	615a      	str	r2, [r3, #20]
 8006026:	4b2f      	ldr	r3, [pc, #188]	; (80060e4 <LCD_Init+0x3e54>)
 8006028:	2280      	movs	r2, #128	; 0x80
 800602a:	611a      	str	r2, [r3, #16]
 800602c:	4b2d      	ldr	r3, [pc, #180]	; (80060e4 <LCD_Init+0x3e54>)
 800602e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006032:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8006034:	20b8      	movs	r0, #184	; 0xb8
 8006036:	f7fa fe03 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 800603a:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <LCD_Init+0x3e54>)
 800603c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006040:	611a      	str	r2, [r3, #16]
 8006042:	4b28      	ldr	r3, [pc, #160]	; (80060e4 <LCD_Init+0x3e54>)
 8006044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006048:	615a      	str	r2, [r3, #20]
 800604a:	4b25      	ldr	r3, [pc, #148]	; (80060e0 <LCD_Init+0x3e50>)
 800604c:	2203      	movs	r2, #3
 800604e:	60da      	str	r2, [r3, #12]
 8006050:	4b24      	ldr	r3, [pc, #144]	; (80060e4 <LCD_Init+0x3e54>)
 8006052:	2280      	movs	r2, #128	; 0x80
 8006054:	615a      	str	r2, [r3, #20]
 8006056:	4b23      	ldr	r3, [pc, #140]	; (80060e4 <LCD_Init+0x3e54>)
 8006058:	2280      	movs	r2, #128	; 0x80
 800605a:	611a      	str	r2, [r3, #16]
 800605c:	4b21      	ldr	r3, [pc, #132]	; (80060e4 <LCD_Init+0x3e54>)
 800605e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006062:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8006064:	4b1f      	ldr	r3, [pc, #124]	; (80060e4 <LCD_Init+0x3e54>)
 8006066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800606a:	611a      	str	r2, [r3, #16]
 800606c:	4b1d      	ldr	r3, [pc, #116]	; (80060e4 <LCD_Init+0x3e54>)
 800606e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006072:	615a      	str	r2, [r3, #20]
 8006074:	4b1a      	ldr	r3, [pc, #104]	; (80060e0 <LCD_Init+0x3e50>)
 8006076:	2201      	movs	r2, #1
 8006078:	60da      	str	r2, [r3, #12]
 800607a:	4b1a      	ldr	r3, [pc, #104]	; (80060e4 <LCD_Init+0x3e54>)
 800607c:	2280      	movs	r2, #128	; 0x80
 800607e:	615a      	str	r2, [r3, #20]
 8006080:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <LCD_Init+0x3e54>)
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	611a      	str	r2, [r3, #16]
 8006086:	4b17      	ldr	r3, [pc, #92]	; (80060e4 <LCD_Init+0x3e54>)
 8006088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800608c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 800608e:	20ba      	movs	r0, #186	; 0xba
 8006090:	f7fa fdd6 	bl	8000c40 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8006094:	4b13      	ldr	r3, [pc, #76]	; (80060e4 <LCD_Init+0x3e54>)
 8006096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800609a:	611a      	str	r2, [r3, #16]
 800609c:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <LCD_Init+0x3e54>)
 800609e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a2:	615a      	str	r2, [r3, #20]
 80060a4:	4b0e      	ldr	r3, [pc, #56]	; (80060e0 <LCD_Init+0x3e50>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <LCD_Init+0x3e54>)
 80060ac:	2280      	movs	r2, #128	; 0x80
 80060ae:	615a      	str	r2, [r3, #20]
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <LCD_Init+0x3e54>)
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	611a      	str	r2, [r3, #16]
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <LCD_Init+0x3e54>)
 80060b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060bc:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 80060be:	2064      	movs	r0, #100	; 0x64
 80060c0:	f7fb ff36 	bl	8001f30 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 80060c4:	2000      	movs	r0, #0
 80060c6:	f7fb ffd7 	bl	8002078 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 80060ca:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <LCD_Init+0x3e58>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 80060d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80060d4:	f000 f80a 	bl	80060ec <LCD_Clear>
}
 80060d8:	bf00      	nop
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40010c00 	.word	0x40010c00
 80060e4:	40011000 	.word	0x40011000
 80060e8:	422201a8 	.word	0x422201a8

080060ec <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 80060fa:	4b2a      	ldr	r3, [pc, #168]	; (80061a4 <LCD_Clear+0xb8>)
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8006100:	4b28      	ldr	r3, [pc, #160]	; (80061a4 <LCD_Clear+0xb8>)
 8006102:	885b      	ldrh	r3, [r3, #2]
 8006104:	461a      	mov	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 800610e:	4b25      	ldr	r3, [pc, #148]	; (80061a4 <LCD_Clear+0xb8>)
 8006110:	889b      	ldrh	r3, [r3, #4]
 8006112:	f646 0204 	movw	r2, #26628	; 0x6804
 8006116:	4293      	cmp	r3, r2
 8006118:	d11a      	bne.n	8006150 <LCD_Clear+0x64>
 800611a:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <LCD_Clear+0xb8>)
 800611c:	799b      	ldrb	r3, [r3, #6]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d116      	bne.n	8006150 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8006122:	4b20      	ldr	r3, [pc, #128]	; (80061a4 <LCD_Clear+0xb8>)
 8006124:	2200      	movs	r2, #0
 8006126:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006128:	4b1e      	ldr	r3, [pc, #120]	; (80061a4 <LCD_Clear+0xb8>)
 800612a:	222a      	movs	r2, #42	; 0x2a
 800612c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 800612e:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <LCD_Clear+0xb8>)
 8006130:	222b      	movs	r2, #43	; 0x2b
 8006132:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8006134:	2100      	movs	r1, #0
 8006136:	2000      	movs	r0, #0
 8006138:	f7fa fe54 	bl	8000de4 <LCD_SetCursor>
		lcddev.dir = 1;
 800613c:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <LCD_Clear+0xb8>)
 800613e:	2201      	movs	r2, #1
 8006140:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8006142:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <LCD_Clear+0xb8>)
 8006144:	222b      	movs	r2, #43	; 0x2b
 8006146:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006148:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <LCD_Clear+0xb8>)
 800614a:	222a      	movs	r2, #42	; 0x2a
 800614c:	819a      	strh	r2, [r3, #12]
 800614e:	e003      	b.n	8006158 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8006150:	2100      	movs	r1, #0
 8006152:	2000      	movs	r0, #0
 8006154:	f7fa fe46 	bl	8000de4 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8006158:	f7fa fe38 	bl	8000dcc <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e017      	b.n	8006192 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <LCD_Clear+0xbc>)
 8006164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006168:	611a      	str	r2, [r3, #16]
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <LCD_Clear+0xbc>)
 800616c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006170:	615a      	str	r2, [r3, #20]
 8006172:	4a0e      	ldr	r2, [pc, #56]	; (80061ac <LCD_Clear+0xc0>)
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	60d3      	str	r3, [r2, #12]
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <LCD_Clear+0xbc>)
 800617a:	2280      	movs	r2, #128	; 0x80
 800617c:	615a      	str	r2, [r3, #20]
 800617e:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <LCD_Clear+0xbc>)
 8006180:	2280      	movs	r2, #128	; 0x80
 8006182:	611a      	str	r2, [r3, #16]
 8006184:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <LCD_Clear+0xbc>)
 8006186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800618a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3301      	adds	r3, #1
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	429a      	cmp	r2, r3
 8006198:	d3e3      	bcc.n	8006162 <LCD_Clear+0x76>
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000714 	.word	0x20000714
 80061a8:	40011000 	.word	0x40011000
 80061ac:	40010c00 	.word	0x40010c00

080061b0 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	b08d      	sub	sp, #52	; 0x34
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	4611      	mov	r1, r2
 80061bc:	461a      	mov	r2, r3
 80061be:	4623      	mov	r3, r4
 80061c0:	80fb      	strh	r3, [r7, #6]
 80061c2:	4603      	mov	r3, r0
 80061c4:	80bb      	strh	r3, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	807b      	strh	r3, [r7, #2]
 80061ca:	4613      	mov	r3, r2
 80061cc:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 80061ce:	2300      	movs	r3, #0
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d2:	2300      	movs	r3, #0
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 80061de:	883a      	ldrh	r2, [r7, #0]
 80061e0:	88bb      	ldrh	r3, [r7, #4]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 80061ea:	88bb      	ldrh	r3, [r7, #4]
 80061ec:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	dd02      	ble.n	80061fa <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 80061f4:	2301      	movs	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e00b      	b.n	8006212 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e005      	b.n	8006212 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8006206:	f04f 33ff 	mov.w	r3, #4294967295
 800620a:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	425b      	negs	r3, r3
 8006210:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dd02      	ble.n	800621e <LCD_DrawLine+0x6e>
		incy = 1;
 8006218:	2301      	movs	r3, #1
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	e00b      	b.n	8006236 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	e005      	b.n	8006236 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 800622a:	f04f 33ff 	mov.w	r3, #4294967295
 800622e:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	425b      	negs	r3, r3
 8006234:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	429a      	cmp	r2, r3
 800623c:	dd02      	ble.n	8006244 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	e001      	b.n	8006248 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8006248:	2300      	movs	r3, #0
 800624a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800624c:	e02a      	b.n	80062a4 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	b29b      	uxth	r3, r3
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	b292      	uxth	r2, r2
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f7fb fba1 	bl	80019a0 <LCD_DrawPoint>
		xerr += delta_x;
 800625e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	4413      	add	r3, r2
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8006266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 800626e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	429a      	cmp	r2, r3
 8006274:	dd07      	ble.n	8006286 <LCD_DrawLine+0xd6>
			xerr -= distance;
 8006276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	4413      	add	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8006286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	429a      	cmp	r2, r3
 800628c:	dd07      	ble.n	800629e <LCD_DrawLine+0xee>
			yerr -= distance;
 800628e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 800629e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062a0:	3301      	adds	r3, #1
 80062a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	3301      	adds	r3, #1
 80062aa:	429a      	cmp	r2, r3
 80062ac:	ddcf      	ble.n	800624e <LCD_DrawLine+0x9e>
		}
	}
}
 80062ae:	bf00      	nop
 80062b0:	3734      	adds	r7, #52	; 0x34
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd90      	pop	{r4, r7, pc}

080062b6 <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80062b6:	b590      	push	{r4, r7, lr}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	4604      	mov	r4, r0
 80062be:	4608      	mov	r0, r1
 80062c0:	4611      	mov	r1, r2
 80062c2:	461a      	mov	r2, r3
 80062c4:	4623      	mov	r3, r4
 80062c6:	80fb      	strh	r3, [r7, #6]
 80062c8:	4603      	mov	r3, r0
 80062ca:	80bb      	strh	r3, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	807b      	strh	r3, [r7, #2]
 80062d0:	4613      	mov	r3, r2
 80062d2:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 80062d4:	88bb      	ldrh	r3, [r7, #4]
 80062d6:	887a      	ldrh	r2, [r7, #2]
 80062d8:	88b9      	ldrh	r1, [r7, #4]
 80062da:	88f8      	ldrh	r0, [r7, #6]
 80062dc:	f7ff ff68 	bl	80061b0 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 80062e0:	883b      	ldrh	r3, [r7, #0]
 80062e2:	88fa      	ldrh	r2, [r7, #6]
 80062e4:	88b9      	ldrh	r1, [r7, #4]
 80062e6:	88f8      	ldrh	r0, [r7, #6]
 80062e8:	f7ff ff62 	bl	80061b0 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 80062ec:	883b      	ldrh	r3, [r7, #0]
 80062ee:	887a      	ldrh	r2, [r7, #2]
 80062f0:	8839      	ldrh	r1, [r7, #0]
 80062f2:	88f8      	ldrh	r0, [r7, #6]
 80062f4:	f7ff ff5c 	bl	80061b0 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 80062f8:	883b      	ldrh	r3, [r7, #0]
 80062fa:	887a      	ldrh	r2, [r7, #2]
 80062fc:	88b9      	ldrh	r1, [r7, #4]
 80062fe:	8878      	ldrh	r0, [r7, #2]
 8006300:	f7ff ff56 	bl	80061b0 <LCD_DrawLine>
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bd90      	pop	{r4, r7, pc}

0800630c <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	4604      	mov	r4, r0
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	4623      	mov	r3, r4
 800631c:	80fb      	strh	r3, [r7, #6]
 800631e:	4603      	mov	r3, r0
 8006320:	80bb      	strh	r3, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
 8006326:	4613      	mov	r3, r2
 8006328:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800632a:	88bb      	ldrh	r3, [r7, #4]
 800632c:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 800632e:	78bb      	ldrb	r3, [r7, #2]
 8006330:	08db      	lsrs	r3, r3, #3
 8006332:	b2db      	uxtb	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	78bb      	ldrb	r3, [r7, #2]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	bf14      	ite	ne
 8006342:	2301      	movne	r3, #1
 8006344:	2300      	moveq	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	4413      	add	r3, r2
 800634a:	b2db      	uxtb	r3, r3
 800634c:	78ba      	ldrb	r2, [r7, #2]
 800634e:	0852      	lsrs	r2, r2, #1
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	fb02 f303 	mul.w	r3, r2, r3
 8006356:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	3b20      	subs	r3, #32
 800635c:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 800635e:	2300      	movs	r3, #0
 8006360:	737b      	strb	r3, [r7, #13]
 8006362:	e069      	b.n	8006438 <LCD_ShowChar+0x12c>
		if (size == 12)
 8006364:	78bb      	ldrb	r3, [r7, #2]
 8006366:	2b0c      	cmp	r3, #12
 8006368:	d10b      	bne.n	8006382 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	7b79      	ldrb	r1, [r7, #13]
 800636e:	4838      	ldr	r0, [pc, #224]	; (8006450 <LCD_ShowChar+0x144>)
 8006370:	4613      	mov	r3, r2
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4403      	add	r3, r0
 800637a:	440b      	add	r3, r1
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	73fb      	strb	r3, [r7, #15]
 8006380:	e019      	b.n	80063b6 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8006382:	78bb      	ldrb	r3, [r7, #2]
 8006384:	2b10      	cmp	r3, #16
 8006386:	d108      	bne.n	800639a <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	7b7b      	ldrb	r3, [r7, #13]
 800638c:	4931      	ldr	r1, [pc, #196]	; (8006454 <LCD_ShowChar+0x148>)
 800638e:	0112      	lsls	r2, r2, #4
 8006390:	440a      	add	r2, r1
 8006392:	4413      	add	r3, r2
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	73fb      	strb	r3, [r7, #15]
 8006398:	e00d      	b.n	80063b6 <LCD_ShowChar+0xaa>
		else if (size == 24)
 800639a:	78bb      	ldrb	r3, [r7, #2]
 800639c:	2b18      	cmp	r3, #24
 800639e:	d150      	bne.n	8006442 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	7b79      	ldrb	r1, [r7, #13]
 80063a4:	482c      	ldr	r0, [pc, #176]	; (8006458 <LCD_ShowChar+0x14c>)
 80063a6:	4613      	mov	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4403      	add	r3, r0
 80063b0:	440b      	add	r3, r1
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80063b6:	2300      	movs	r3, #0
 80063b8:	73bb      	strb	r3, [r7, #14]
 80063ba:	e035      	b.n	8006428 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 80063bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da07      	bge.n	80063d4 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 80063c4:	4b25      	ldr	r3, [pc, #148]	; (800645c <LCD_ShowChar+0x150>)
 80063c6:	881a      	ldrh	r2, [r3, #0]
 80063c8:	88b9      	ldrh	r1, [r7, #4]
 80063ca:	88fb      	ldrh	r3, [r7, #6]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fb fb17 	bl	8001a00 <LCD_Fast_DrawPoint>
 80063d2:	e00a      	b.n	80063ea <LCD_ShowChar+0xde>
			else if (mode == 0)
 80063d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <LCD_ShowChar+0x154>)
 80063de:	881a      	ldrh	r2, [r3, #0]
 80063e0:	88b9      	ldrh	r1, [r7, #4]
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fb fb0b 	bl	8001a00 <LCD_Fast_DrawPoint>
			temp <<= 1;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
			y++;
 80063f0:	88bb      	ldrh	r3, [r7, #4]
 80063f2:	3301      	adds	r3, #1
 80063f4:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 80063f6:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <LCD_ShowChar+0x158>)
 80063f8:	885b      	ldrh	r3, [r3, #2]
 80063fa:	88ba      	ldrh	r2, [r7, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d222      	bcs.n	8006446 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006400:	88ba      	ldrh	r2, [r7, #4]
 8006402:	897b      	ldrh	r3, [r7, #10]
 8006404:	1ad2      	subs	r2, r2, r3
 8006406:	78bb      	ldrb	r3, [r7, #2]
 8006408:	429a      	cmp	r2, r3
 800640a:	d10a      	bne.n	8006422 <LCD_ShowChar+0x116>
				y = y0;
 800640c:	897b      	ldrh	r3, [r7, #10]
 800640e:	80bb      	strh	r3, [r7, #4]
				x++;
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	3301      	adds	r3, #1
 8006414:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8006416:	4b13      	ldr	r3, [pc, #76]	; (8006464 <LCD_ShowChar+0x158>)
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	429a      	cmp	r2, r3
 800641e:	d307      	bcc.n	8006430 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006420:	e012      	b.n	8006448 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	3301      	adds	r3, #1
 8006426:	73bb      	strb	r3, [r7, #14]
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	2b07      	cmp	r3, #7
 800642c:	d9c6      	bls.n	80063bc <LCD_ShowChar+0xb0>
 800642e:	e000      	b.n	8006432 <LCD_ShowChar+0x126>
				break;
 8006430:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8006432:	7b7b      	ldrb	r3, [r7, #13]
 8006434:	3301      	adds	r3, #1
 8006436:	737b      	strb	r3, [r7, #13]
 8006438:	7b7a      	ldrb	r2, [r7, #13]
 800643a:	7a7b      	ldrb	r3, [r7, #9]
 800643c:	429a      	cmp	r2, r3
 800643e:	d391      	bcc.n	8006364 <LCD_ShowChar+0x58>
 8006440:	e002      	b.n	8006448 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8006442:	bf00      	nop
 8006444:	e000      	b.n	8006448 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8006446:	bf00      	nop
			}
		}
	}
}
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	bd90      	pop	{r4, r7, pc}
 800644e:	bf00      	nop
 8006450:	0800b558 	.word	0x0800b558
 8006454:	0800b9cc 	.word	0x0800b9cc
 8006458:	0800bfbc 	.word	0x0800bfbc
 800645c:	200001fc 	.word	0x200001fc
 8006460:	20000000 	.word	0x20000000
 8006464:	20000714 	.word	0x20000714

08006468 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8006468:	b590      	push	{r4, r7, lr}
 800646a:	b087      	sub	sp, #28
 800646c:	af02      	add	r7, sp, #8
 800646e:	4604      	mov	r4, r0
 8006470:	4608      	mov	r0, r1
 8006472:	4611      	mov	r1, r2
 8006474:	461a      	mov	r2, r3
 8006476:	4623      	mov	r3, r4
 8006478:	80fb      	strh	r3, [r7, #6]
 800647a:	4603      	mov	r3, r0
 800647c:	80bb      	strh	r3, [r7, #4]
 800647e:	460b      	mov	r3, r1
 8006480:	807b      	strh	r3, [r7, #2]
 8006482:	4613      	mov	r3, r2
 8006484:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	73fb      	strb	r3, [r7, #15]
	width += x;
 800648a:	887a      	ldrh	r2, [r7, #2]
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	4413      	add	r3, r2
 8006490:	807b      	strh	r3, [r7, #2]
	height += y;
 8006492:	883a      	ldrh	r2, [r7, #0]
 8006494:	88bb      	ldrh	r3, [r7, #4]
 8006496:	4413      	add	r3, r2
 8006498:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800649a:	e025      	b.n	80064e8 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 800649c:	88fa      	ldrh	r2, [r7, #6]
 800649e:	887b      	ldrh	r3, [r7, #2]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d307      	bcc.n	80064b4 <LCD_ShowString+0x4c>
			x = x0;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	80fb      	strh	r3, [r7, #6]
			y += size;
 80064a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	88bb      	ldrh	r3, [r7, #4]
 80064b0:	4413      	add	r3, r2
 80064b2:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 80064b4:	88ba      	ldrh	r2, [r7, #4]
 80064b6:	883b      	ldrh	r3, [r7, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d21e      	bcs.n	80064fa <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	781a      	ldrb	r2, [r3, #0]
 80064c0:	f897 4020 	ldrb.w	r4, [r7, #32]
 80064c4:	88b9      	ldrh	r1, [r7, #4]
 80064c6:	88f8      	ldrh	r0, [r7, #6]
 80064c8:	2300      	movs	r3, #0
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4623      	mov	r3, r4
 80064ce:	f7ff ff1d 	bl	800630c <LCD_ShowChar>
		x += size / 2;
 80064d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	b29a      	uxth	r2, r3
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	4413      	add	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
		p++;
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	3301      	adds	r3, #1
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b7e      	cmp	r3, #126	; 0x7e
 80064ee:	d805      	bhi.n	80064fc <LCD_ShowString+0x94>
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b1f      	cmp	r3, #31
 80064f6:	d8d1      	bhi.n	800649c <LCD_ShowString+0x34>
	}
}
 80064f8:	e000      	b.n	80064fc <LCD_ShowString+0x94>
			break;	//退出
 80064fa:	bf00      	nop
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	bd90      	pop	{r4, r7, pc}
 8006504:	0000      	movs	r0, r0
	...

08006508 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006508:	b590      	push	{r4, r7, lr}
 800650a:	b097      	sub	sp, #92	; 0x5c
 800650c:	af02      	add	r7, sp, #8
 800650e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a65      	ldr	r2, [pc, #404]	; (80066ac <HAL_UART_RxCpltCallback+0x1a4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	f040 8317 	bne.w	8006b4a <HAL_UART_RxCpltCallback+0x642>
		static unsigned char f[25] = { 0 };
		static unsigned char g[25] = { 0 };
		static unsigned char h[25] = { 0 };
		static unsigned char i[25] = { 0 };
		static unsigned char color[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		if (rxBuffer[0] == '\n') {
 800651c:	4b64      	ldr	r3, [pc, #400]	; (80066b0 <HAL_UART_RxCpltCallback+0x1a8>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b0a      	cmp	r3, #10
 8006522:	f040 8305 	bne.w	8006b30 <HAL_UART_RxCpltCallback+0x628>
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 8006526:	4b63      	ldr	r3, [pc, #396]	; (80066b4 <HAL_UART_RxCpltCallback+0x1ac>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	b29a      	uxth	r2, r3
 800652c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006530:	4961      	ldr	r1, [pc, #388]	; (80066b8 <HAL_UART_RxCpltCallback+0x1b0>)
 8006532:	4862      	ldr	r0, [pc, #392]	; (80066bc <HAL_UART_RxCpltCallback+0x1b4>)
 8006534:	f002 fb91 	bl	8008c5a <HAL_UART_Transmit>

			int p = uLength / 24+1;
 8006538:	4b5e      	ldr	r3, [pc, #376]	; (80066b4 <HAL_UART_RxCpltCallback+0x1ac>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	4a60      	ldr	r2, [pc, #384]	; (80066c0 <HAL_UART_RxCpltCallback+0x1b8>)
 800653e:	fba2 2303 	umull	r2, r3, r2, r3
 8006542:	091b      	lsrs	r3, r3, #4
 8006544:	b2db      	uxtb	r3, r3
 8006546:	3301      	adds	r3, #1
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
			int l = uLength % 24;
 800654a:	4b5a      	ldr	r3, [pc, #360]	; (80066b4 <HAL_UART_RxCpltCallback+0x1ac>)
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	4b5c      	ldr	r3, [pc, #368]	; (80066c0 <HAL_UART_RxCpltCallback+0x1b8>)
 8006550:	fba3 1302 	umull	r1, r3, r3, r2
 8006554:	0919      	lsrs	r1, r3, #4
 8006556:	460b      	mov	r3, r1
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	440b      	add	r3, r1
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	b2db      	uxtb	r3, r3
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
			for (int m = 0; m < p; m++) {
 8006564:	2300      	movs	r3, #0
 8006566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006568:	e0d3      	b.n	8006712 <HAL_UART_RxCpltCallback+0x20a>
				for (int k = 0; k < 25; k++) {
 800656a:	2300      	movs	r3, #0
 800656c:	64bb      	str	r3, [r7, #72]	; 0x48
 800656e:	e04a      	b.n	8006606 <HAL_UART_RxCpltCallback+0xfe>
					a[k] = b[k];
 8006570:	4a54      	ldr	r2, [pc, #336]	; (80066c4 <HAL_UART_RxCpltCallback+0x1bc>)
 8006572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006574:	4413      	add	r3, r2
 8006576:	7819      	ldrb	r1, [r3, #0]
 8006578:	4a53      	ldr	r2, [pc, #332]	; (80066c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800657a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657c:	4413      	add	r3, r2
 800657e:	460a      	mov	r2, r1
 8006580:	701a      	strb	r2, [r3, #0]
					b[k] = c[k];
 8006582:	4a52      	ldr	r2, [pc, #328]	; (80066cc <HAL_UART_RxCpltCallback+0x1c4>)
 8006584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006586:	4413      	add	r3, r2
 8006588:	7819      	ldrb	r1, [r3, #0]
 800658a:	4a4e      	ldr	r2, [pc, #312]	; (80066c4 <HAL_UART_RxCpltCallback+0x1bc>)
 800658c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800658e:	4413      	add	r3, r2
 8006590:	460a      	mov	r2, r1
 8006592:	701a      	strb	r2, [r3, #0]
					c[k] = d[k];
 8006594:	4a4e      	ldr	r2, [pc, #312]	; (80066d0 <HAL_UART_RxCpltCallback+0x1c8>)
 8006596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006598:	4413      	add	r3, r2
 800659a:	7819      	ldrb	r1, [r3, #0]
 800659c:	4a4b      	ldr	r2, [pc, #300]	; (80066cc <HAL_UART_RxCpltCallback+0x1c4>)
 800659e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a0:	4413      	add	r3, r2
 80065a2:	460a      	mov	r2, r1
 80065a4:	701a      	strb	r2, [r3, #0]
					d[k] = e[k];
 80065a6:	4a4b      	ldr	r2, [pc, #300]	; (80066d4 <HAL_UART_RxCpltCallback+0x1cc>)
 80065a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065aa:	4413      	add	r3, r2
 80065ac:	7819      	ldrb	r1, [r3, #0]
 80065ae:	4a48      	ldr	r2, [pc, #288]	; (80066d0 <HAL_UART_RxCpltCallback+0x1c8>)
 80065b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b2:	4413      	add	r3, r2
 80065b4:	460a      	mov	r2, r1
 80065b6:	701a      	strb	r2, [r3, #0]
					e[k] = f[k];
 80065b8:	4a47      	ldr	r2, [pc, #284]	; (80066d8 <HAL_UART_RxCpltCallback+0x1d0>)
 80065ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065bc:	4413      	add	r3, r2
 80065be:	7819      	ldrb	r1, [r3, #0]
 80065c0:	4a44      	ldr	r2, [pc, #272]	; (80066d4 <HAL_UART_RxCpltCallback+0x1cc>)
 80065c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c4:	4413      	add	r3, r2
 80065c6:	460a      	mov	r2, r1
 80065c8:	701a      	strb	r2, [r3, #0]
					f[k] = g[k];
 80065ca:	4a44      	ldr	r2, [pc, #272]	; (80066dc <HAL_UART_RxCpltCallback+0x1d4>)
 80065cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ce:	4413      	add	r3, r2
 80065d0:	7819      	ldrb	r1, [r3, #0]
 80065d2:	4a41      	ldr	r2, [pc, #260]	; (80066d8 <HAL_UART_RxCpltCallback+0x1d0>)
 80065d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d6:	4413      	add	r3, r2
 80065d8:	460a      	mov	r2, r1
 80065da:	701a      	strb	r2, [r3, #0]
					g[k] = h[k];
 80065dc:	4a40      	ldr	r2, [pc, #256]	; (80066e0 <HAL_UART_RxCpltCallback+0x1d8>)
 80065de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e0:	4413      	add	r3, r2
 80065e2:	7819      	ldrb	r1, [r3, #0]
 80065e4:	4a3d      	ldr	r2, [pc, #244]	; (80066dc <HAL_UART_RxCpltCallback+0x1d4>)
 80065e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e8:	4413      	add	r3, r2
 80065ea:	460a      	mov	r2, r1
 80065ec:	701a      	strb	r2, [r3, #0]
					h[k] = i[k];
 80065ee:	4a3d      	ldr	r2, [pc, #244]	; (80066e4 <HAL_UART_RxCpltCallback+0x1dc>)
 80065f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f2:	4413      	add	r3, r2
 80065f4:	7819      	ldrb	r1, [r3, #0]
 80065f6:	4a3a      	ldr	r2, [pc, #232]	; (80066e0 <HAL_UART_RxCpltCallback+0x1d8>)
 80065f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fa:	4413      	add	r3, r2
 80065fc:	460a      	mov	r2, r1
 80065fe:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k < 25; k++) {
 8006600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006602:	3301      	adds	r3, #1
 8006604:	64bb      	str	r3, [r7, #72]	; 0x48
 8006606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006608:	2b18      	cmp	r3, #24
 800660a:	ddb1      	ble.n	8006570 <HAL_UART_RxCpltCallback+0x68>
				}
				if (m==p-1){
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	3b01      	subs	r3, #1
 8006610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006612:	429a      	cmp	r2, r3
 8006614:	d12f      	bne.n	8006676 <HAL_UART_RxCpltCallback+0x16e>
					for (int t=0;t<24-l;t++){
 8006616:	2300      	movs	r3, #0
 8006618:	647b      	str	r3, [r7, #68]	; 0x44
 800661a:	e007      	b.n	800662c <HAL_UART_RxCpltCallback+0x124>
						i[t]='\40';
 800661c:	4a31      	ldr	r2, [pc, #196]	; (80066e4 <HAL_UART_RxCpltCallback+0x1dc>)
 800661e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006620:	4413      	add	r3, r2
 8006622:	2220      	movs	r2, #32
 8006624:	701a      	strb	r2, [r3, #0]
					for (int t=0;t<24-l;t++){
 8006626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006628:	3301      	adds	r3, #1
 800662a:	647b      	str	r3, [r7, #68]	; 0x44
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	f1c3 0318 	rsb	r3, r3, #24
 8006632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006634:	429a      	cmp	r2, r3
 8006636:	dbf1      	blt.n	800661c <HAL_UART_RxCpltCallback+0x114>
					}
					for (int t= 0;t<l;t++){
 8006638:	2300      	movs	r3, #0
 800663a:	643b      	str	r3, [r7, #64]	; 0x40
 800663c:	e013      	b.n	8006666 <HAL_UART_RxCpltCallback+0x15e>
						i[24-l+t]=uRx_Data[t+m*24];
 800663e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006640:	4613      	mov	r3, r2
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	4413      	add	r3, r2
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	461a      	mov	r2, r3
 800664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664c:	441a      	add	r2, r3
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	f1c3 0118 	rsb	r1, r3, #24
 8006654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006656:	440b      	add	r3, r1
 8006658:	4917      	ldr	r1, [pc, #92]	; (80066b8 <HAL_UART_RxCpltCallback+0x1b0>)
 800665a:	5c89      	ldrb	r1, [r1, r2]
 800665c:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <HAL_UART_RxCpltCallback+0x1dc>)
 800665e:	54d1      	strb	r1, [r2, r3]
					for (int t= 0;t<l;t++){
 8006660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006662:	3301      	adds	r3, #1
 8006664:	643b      	str	r3, [r7, #64]	; 0x40
 8006666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	429a      	cmp	r2, r3
 800666c:	dbe7      	blt.n	800663e <HAL_UART_RxCpltCallback+0x136>
					}
					i[24] = 0;
 800666e:	4b1d      	ldr	r3, [pc, #116]	; (80066e4 <HAL_UART_RxCpltCallback+0x1dc>)
 8006670:	2200      	movs	r2, #0
 8006672:	761a      	strb	r2, [r3, #24]
 8006674:	e017      	b.n	80066a6 <HAL_UART_RxCpltCallback+0x19e>
				}else{
					for (int k = 0;k<25;k++){
 8006676:	2300      	movs	r3, #0
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667a:	e011      	b.n	80066a0 <HAL_UART_RxCpltCallback+0x198>
						i[k] = uRx_Data[k+m*24];
 800667c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800667e:	4613      	mov	r3, r2
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	4413      	add	r3, r2
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	461a      	mov	r2, r3
 8006688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668a:	4413      	add	r3, r2
 800668c:	4a0a      	ldr	r2, [pc, #40]	; (80066b8 <HAL_UART_RxCpltCallback+0x1b0>)
 800668e:	5cd1      	ldrb	r1, [r2, r3]
 8006690:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <HAL_UART_RxCpltCallback+0x1dc>)
 8006692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006694:	4413      	add	r3, r2
 8006696:	460a      	mov	r2, r1
 8006698:	701a      	strb	r2, [r3, #0]
					for (int k = 0;k<25;k++){
 800669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669c:	3301      	adds	r3, #1
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a2:	2b18      	cmp	r3, #24
 80066a4:	ddea      	ble.n	800667c <HAL_UART_RxCpltCallback+0x174>
					}
				}
				for (int o = 0; o < 8; o++) {
 80066a6:	2300      	movs	r3, #0
 80066a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80066aa:	e029      	b.n	8006700 <HAL_UART_RxCpltCallback+0x1f8>
 80066ac:	40013800 	.word	0x40013800
 80066b0:	20000794 	.word	0x20000794
 80066b4:	200001fe 	.word	0x200001fe
 80066b8:	20000200 	.word	0x20000200
 80066bc:	20000754 	.word	0x20000754
 80066c0:	aaaaaaab 	.word	0xaaaaaaab
 80066c4:	20000600 	.word	0x20000600
 80066c8:	2000061c 	.word	0x2000061c
 80066cc:	20000638 	.word	0x20000638
 80066d0:	20000654 	.word	0x20000654
 80066d4:	20000670 	.word	0x20000670
 80066d8:	2000068c 	.word	0x2000068c
 80066dc:	200006a8 	.word	0x200006a8
 80066e0:	200006c4 	.word	0x200006c4
 80066e4:	200006e0 	.word	0x200006e0
					color[o] = color[o + 1];
 80066e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ea:	3301      	adds	r3, #1
 80066ec:	4ab0      	ldr	r2, [pc, #704]	; (80069b0 <HAL_UART_RxCpltCallback+0x4a8>)
 80066ee:	5cd1      	ldrb	r1, [r2, r3]
 80066f0:	4aaf      	ldr	r2, [pc, #700]	; (80069b0 <HAL_UART_RxCpltCallback+0x4a8>)
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	4413      	add	r3, r2
 80066f6:	460a      	mov	r2, r1
 80066f8:	701a      	strb	r2, [r3, #0]
				for (int o = 0; o < 8; o++) {
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	3301      	adds	r3, #1
 80066fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	2b07      	cmp	r3, #7
 8006704:	ddf0      	ble.n	80066e8 <HAL_UART_RxCpltCallback+0x1e0>
				}
				color[8] = 0;
 8006706:	4baa      	ldr	r3, [pc, #680]	; (80069b0 <HAL_UART_RxCpltCallback+0x4a8>)
 8006708:	2200      	movs	r2, #0
 800670a:	721a      	strb	r2, [r3, #8]
			for (int m = 0; m < p; m++) {
 800670c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670e:	3301      	adds	r3, #1
 8006710:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	429a      	cmp	r2, r3
 8006718:	f6ff af27 	blt.w	800656a <HAL_UART_RxCpltCallback+0x62>
//			for (int o = 0; o < 8; o++) {
//				color[o] = color[o + 1];
//			}
//			color[8] = 0;

			if (uLength == 12 && uRx_Data[0] == 't' && uRx_Data[1] == 'e'
 800671c:	4ba5      	ldr	r3, [pc, #660]	; (80069b4 <HAL_UART_RxCpltCallback+0x4ac>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b0c      	cmp	r3, #12
 8006722:	f040 810e 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
 8006726:	4ba4      	ldr	r3, [pc, #656]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b74      	cmp	r3, #116	; 0x74
 800672c:	f040 8109 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
 8006730:	4ba1      	ldr	r3, [pc, #644]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b65      	cmp	r3, #101	; 0x65
 8006736:	f040 8104 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
					&& uRx_Data[2] == 'm' && uRx_Data[3] == 'p'
 800673a:	4b9f      	ldr	r3, [pc, #636]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 800673c:	789b      	ldrb	r3, [r3, #2]
 800673e:	2b6d      	cmp	r3, #109	; 0x6d
 8006740:	f040 80ff 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
 8006744:	4b9c      	ldr	r3, [pc, #624]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 8006746:	78db      	ldrb	r3, [r3, #3]
 8006748:	2b70      	cmp	r3, #112	; 0x70
 800674a:	f040 80fa 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
					&& uRx_Data[4] == 'e' && uRx_Data[5] == 'r'
 800674e:	4b9a      	ldr	r3, [pc, #616]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 8006750:	791b      	ldrb	r3, [r3, #4]
 8006752:	2b65      	cmp	r3, #101	; 0x65
 8006754:	f040 80f5 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
 8006758:	4b97      	ldr	r3, [pc, #604]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 800675a:	795b      	ldrb	r3, [r3, #5]
 800675c:	2b72      	cmp	r3, #114	; 0x72
 800675e:	f040 80f0 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
					&& uRx_Data[6] == 'a' && uRx_Data[7] == 't'
 8006762:	4b95      	ldr	r3, [pc, #596]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 8006764:	799b      	ldrb	r3, [r3, #6]
 8006766:	2b61      	cmp	r3, #97	; 0x61
 8006768:	f040 80eb 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
 800676c:	4b92      	ldr	r3, [pc, #584]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 800676e:	79db      	ldrb	r3, [r3, #7]
 8006770:	2b74      	cmp	r3, #116	; 0x74
 8006772:	f040 80e6 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
					&& uRx_Data[8] == 'u' && uRx_Data[9] == 'r'
 8006776:	4b90      	ldr	r3, [pc, #576]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 8006778:	7a1b      	ldrb	r3, [r3, #8]
 800677a:	2b75      	cmp	r3, #117	; 0x75
 800677c:	f040 80e1 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
 8006780:	4b8d      	ldr	r3, [pc, #564]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 8006782:	7a5b      	ldrb	r3, [r3, #9]
 8006784:	2b72      	cmp	r3, #114	; 0x72
 8006786:	f040 80dc 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
					&& uRx_Data[10] == 'e' && uRx_Data[11] == '\r') {
 800678a:	4b8b      	ldr	r3, [pc, #556]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 800678c:	7a9b      	ldrb	r3, [r3, #10]
 800678e:	2b65      	cmp	r3, #101	; 0x65
 8006790:	f040 80d7 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>
 8006794:	4b88      	ldr	r3, [pc, #544]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 8006796:	7adb      	ldrb	r3, [r3, #11]
 8006798:	2b0d      	cmp	r3, #13
 800679a:	f040 80d2 	bne.w	8006942 <HAL_UART_RxCpltCallback+0x43a>

				HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 800679e:	4b85      	ldr	r3, [pc, #532]	; (80069b4 <HAL_UART_RxCpltCallback+0x4ac>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067a8:	4983      	ldr	r1, [pc, #524]	; (80069b8 <HAL_UART_RxCpltCallback+0x4b0>)
 80067aa:	4884      	ldr	r0, [pc, #528]	; (80069bc <HAL_UART_RxCpltCallback+0x4b4>)
 80067ac:	f002 fa55 	bl	8008c5a <HAL_UART_Transmit>

				HAL_ADC_Start(&hadc1);
 80067b0:	4883      	ldr	r0, [pc, #524]	; (80069c0 <HAL_UART_RxCpltCallback+0x4b8>)
 80067b2:	f000 fd93 	bl	80072dc <HAL_ADC_Start>

				HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80067b6:	f04f 31ff 	mov.w	r1, #4294967295
 80067ba:	4881      	ldr	r0, [pc, #516]	; (80069c0 <HAL_UART_RxCpltCallback+0x4b8>)
 80067bc:	f000 fe3c 	bl	8007438 <HAL_ADC_PollForConversion>

				uint16_t raw = HAL_ADC_GetValue(&hadc1);
 80067c0:	487f      	ldr	r0, [pc, #508]	; (80069c0 <HAL_UART_RxCpltCallback+0x4b8>)
 80067c2:	f000 ff33 	bl	800762c <HAL_ADC_GetValue>
 80067c6:	4603      	mov	r3, r0
 80067c8:	847b      	strh	r3, [r7, #34]	; 0x22
				float voltage = (1.43 - (raw * (3.3 / 4096))) / 4.3 + 25;
 80067ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7f9 fe85 	bl	80004dc <__aeabi_i2d>
 80067d2:	a371      	add	r3, pc, #452	; (adr r3, 8006998 <HAL_UART_RxCpltCallback+0x490>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7f9 feea 	bl	80005b0 <__aeabi_dmul>
 80067dc:	4603      	mov	r3, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	461a      	mov	r2, r3
 80067e2:	4623      	mov	r3, r4
 80067e4:	a16e      	add	r1, pc, #440	; (adr r1, 80069a0 <HAL_UART_RxCpltCallback+0x498>)
 80067e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ea:	f7f9 fd29 	bl	8000240 <__aeabi_dsub>
 80067ee:	4603      	mov	r3, r0
 80067f0:	460c      	mov	r4, r1
 80067f2:	4618      	mov	r0, r3
 80067f4:	4621      	mov	r1, r4
 80067f6:	a36c      	add	r3, pc, #432	; (adr r3, 80069a8 <HAL_UART_RxCpltCallback+0x4a0>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f7fa f802 	bl	8000804 <__aeabi_ddiv>
 8006800:	4603      	mov	r3, r0
 8006802:	460c      	mov	r4, r1
 8006804:	4618      	mov	r0, r3
 8006806:	4621      	mov	r1, r4
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	4b6d      	ldr	r3, [pc, #436]	; (80069c4 <HAL_UART_RxCpltCallback+0x4bc>)
 800680e:	f7f9 fd19 	bl	8000244 <__adddf3>
 8006812:	4603      	mov	r3, r0
 8006814:	460c      	mov	r4, r1
 8006816:	4618      	mov	r0, r3
 8006818:	4621      	mov	r1, r4
 800681a:	f7fa f9c1 	bl	8000ba0 <__aeabi_d2f>
 800681e:	4603      	mov	r3, r0
 8006820:	61fb      	str	r3, [r7, #28]

				char msg[20];
				sprintf(msg, "%.6f\r\n", voltage);
 8006822:	69f8      	ldr	r0, [r7, #28]
 8006824:	f7f9 fe6c 	bl	8000500 <__aeabi_f2d>
 8006828:	4603      	mov	r3, r0
 800682a:	460c      	mov	r4, r1
 800682c:	f107 0008 	add.w	r0, r7, #8
 8006830:	461a      	mov	r2, r3
 8006832:	4623      	mov	r3, r4
 8006834:	4964      	ldr	r1, [pc, #400]	; (80069c8 <HAL_UART_RxCpltCallback+0x4c0>)
 8006836:	f003 fa7b 	bl	8009d30 <siprintf>
				HAL_UART_Transmit(&huart1, msg, 9, 0xffff);
 800683a:	f107 0108 	add.w	r1, r7, #8
 800683e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006842:	2209      	movs	r2, #9
 8006844:	485d      	ldr	r0, [pc, #372]	; (80069bc <HAL_UART_RxCpltCallback+0x4b4>)
 8006846:	f002 fa08 	bl	8008c5a <HAL_UART_Transmit>

				for (int k = 0; k < 25; k++) {
 800684a:	2300      	movs	r3, #0
 800684c:	637b      	str	r3, [r7, #52]	; 0x34
 800684e:	e04a      	b.n	80068e6 <HAL_UART_RxCpltCallback+0x3de>
					a[k] = b[k];
 8006850:	4a5e      	ldr	r2, [pc, #376]	; (80069cc <HAL_UART_RxCpltCallback+0x4c4>)
 8006852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006854:	4413      	add	r3, r2
 8006856:	7819      	ldrb	r1, [r3, #0]
 8006858:	4a5d      	ldr	r2, [pc, #372]	; (80069d0 <HAL_UART_RxCpltCallback+0x4c8>)
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	4413      	add	r3, r2
 800685e:	460a      	mov	r2, r1
 8006860:	701a      	strb	r2, [r3, #0]
					b[k] = c[k];
 8006862:	4a5c      	ldr	r2, [pc, #368]	; (80069d4 <HAL_UART_RxCpltCallback+0x4cc>)
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	4413      	add	r3, r2
 8006868:	7819      	ldrb	r1, [r3, #0]
 800686a:	4a58      	ldr	r2, [pc, #352]	; (80069cc <HAL_UART_RxCpltCallback+0x4c4>)
 800686c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686e:	4413      	add	r3, r2
 8006870:	460a      	mov	r2, r1
 8006872:	701a      	strb	r2, [r3, #0]
					c[k] = d[k];
 8006874:	4a58      	ldr	r2, [pc, #352]	; (80069d8 <HAL_UART_RxCpltCallback+0x4d0>)
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	4413      	add	r3, r2
 800687a:	7819      	ldrb	r1, [r3, #0]
 800687c:	4a55      	ldr	r2, [pc, #340]	; (80069d4 <HAL_UART_RxCpltCallback+0x4cc>)
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	4413      	add	r3, r2
 8006882:	460a      	mov	r2, r1
 8006884:	701a      	strb	r2, [r3, #0]
					d[k] = e[k];
 8006886:	4a55      	ldr	r2, [pc, #340]	; (80069dc <HAL_UART_RxCpltCallback+0x4d4>)
 8006888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688a:	4413      	add	r3, r2
 800688c:	7819      	ldrb	r1, [r3, #0]
 800688e:	4a52      	ldr	r2, [pc, #328]	; (80069d8 <HAL_UART_RxCpltCallback+0x4d0>)
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	4413      	add	r3, r2
 8006894:	460a      	mov	r2, r1
 8006896:	701a      	strb	r2, [r3, #0]
					e[k] = f[k];
 8006898:	4a51      	ldr	r2, [pc, #324]	; (80069e0 <HAL_UART_RxCpltCallback+0x4d8>)
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	4413      	add	r3, r2
 800689e:	7819      	ldrb	r1, [r3, #0]
 80068a0:	4a4e      	ldr	r2, [pc, #312]	; (80069dc <HAL_UART_RxCpltCallback+0x4d4>)
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	4413      	add	r3, r2
 80068a6:	460a      	mov	r2, r1
 80068a8:	701a      	strb	r2, [r3, #0]
					f[k] = g[k];
 80068aa:	4a4e      	ldr	r2, [pc, #312]	; (80069e4 <HAL_UART_RxCpltCallback+0x4dc>)
 80068ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ae:	4413      	add	r3, r2
 80068b0:	7819      	ldrb	r1, [r3, #0]
 80068b2:	4a4b      	ldr	r2, [pc, #300]	; (80069e0 <HAL_UART_RxCpltCallback+0x4d8>)
 80068b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b6:	4413      	add	r3, r2
 80068b8:	460a      	mov	r2, r1
 80068ba:	701a      	strb	r2, [r3, #0]
					g[k] = h[k];
 80068bc:	4a4a      	ldr	r2, [pc, #296]	; (80069e8 <HAL_UART_RxCpltCallback+0x4e0>)
 80068be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c0:	4413      	add	r3, r2
 80068c2:	7819      	ldrb	r1, [r3, #0]
 80068c4:	4a47      	ldr	r2, [pc, #284]	; (80069e4 <HAL_UART_RxCpltCallback+0x4dc>)
 80068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c8:	4413      	add	r3, r2
 80068ca:	460a      	mov	r2, r1
 80068cc:	701a      	strb	r2, [r3, #0]
					h[k] = i[k];
 80068ce:	4a47      	ldr	r2, [pc, #284]	; (80069ec <HAL_UART_RxCpltCallback+0x4e4>)
 80068d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d2:	4413      	add	r3, r2
 80068d4:	7819      	ldrb	r1, [r3, #0]
 80068d6:	4a44      	ldr	r2, [pc, #272]	; (80069e8 <HAL_UART_RxCpltCallback+0x4e0>)
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	4413      	add	r3, r2
 80068dc:	460a      	mov	r2, r1
 80068de:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k < 25; k++) {
 80068e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e2:	3301      	adds	r3, #1
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	2b18      	cmp	r3, #24
 80068ea:	ddb1      	ble.n	8006850 <HAL_UART_RxCpltCallback+0x348>
				}

				for (int k = 0; k < 9; k++) {
 80068ec:	2300      	movs	r3, #0
 80068ee:	633b      	str	r3, [r7, #48]	; 0x30
 80068f0:	e00c      	b.n	800690c <HAL_UART_RxCpltCallback+0x404>
					i[k] = msg[k];
 80068f2:	f107 0208 	add.w	r2, r7, #8
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	4413      	add	r3, r2
 80068fa:	7819      	ldrb	r1, [r3, #0]
 80068fc:	4a3b      	ldr	r2, [pc, #236]	; (80069ec <HAL_UART_RxCpltCallback+0x4e4>)
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	4413      	add	r3, r2
 8006902:	460a      	mov	r2, r1
 8006904:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k < 9; k++) {
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	3301      	adds	r3, #1
 800690a:	633b      	str	r3, [r7, #48]	; 0x30
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	2b08      	cmp	r3, #8
 8006910:	ddef      	ble.n	80068f2 <HAL_UART_RxCpltCallback+0x3ea>
				}
				i[9] = 0;
 8006912:	4b36      	ldr	r3, [pc, #216]	; (80069ec <HAL_UART_RxCpltCallback+0x4e4>)
 8006914:	2200      	movs	r2, #0
 8006916:	725a      	strb	r2, [r3, #9]
				for (int o = 0; o < 8; o++) {
 8006918:	2300      	movs	r3, #0
 800691a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691c:	e00b      	b.n	8006936 <HAL_UART_RxCpltCallback+0x42e>
					color[o] = color[o + 1];
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	3301      	adds	r3, #1
 8006922:	4a23      	ldr	r2, [pc, #140]	; (80069b0 <HAL_UART_RxCpltCallback+0x4a8>)
 8006924:	5cd1      	ldrb	r1, [r2, r3]
 8006926:	4a22      	ldr	r2, [pc, #136]	; (80069b0 <HAL_UART_RxCpltCallback+0x4a8>)
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	4413      	add	r3, r2
 800692c:	460a      	mov	r2, r1
 800692e:	701a      	strb	r2, [r3, #0]
				for (int o = 0; o < 8; o++) {
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	3301      	adds	r3, #1
 8006934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	2b07      	cmp	r3, #7
 800693a:	ddf0      	ble.n	800691e <HAL_UART_RxCpltCallback+0x416>
				}
				color[8] = 1;
 800693c:	4b1c      	ldr	r3, [pc, #112]	; (80069b0 <HAL_UART_RxCpltCallback+0x4a8>)
 800693e:	2201      	movs	r2, #1
 8006940:	721a      	strb	r2, [r3, #8]
			}

			LCD_Clear(WHITE);
 8006942:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006946:	f7ff fbd1 	bl	80060ec <LCD_Clear>
			POINT_COLOR = BLACK;
 800694a:	4b29      	ldr	r3, [pc, #164]	; (80069f0 <HAL_UART_RxCpltCallback+0x4e8>)
 800694c:	2200      	movs	r2, #0
 800694e:	801a      	strh	r2, [r3, #0]
			LCD_DrawRectangle(20, 30, 220, 300);
 8006950:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006954:	22dc      	movs	r2, #220	; 0xdc
 8006956:	211e      	movs	r1, #30
 8006958:	2014      	movs	r0, #20
 800695a:	f7ff fcac 	bl	80062b6 <LCD_DrawRectangle>
			POINT_COLOR = (color[0] == 0) ? RED : BLUE;
 800695e:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <HAL_UART_RxCpltCallback+0x4a8>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d102      	bne.n	800696c <HAL_UART_RxCpltCallback+0x464>
 8006966:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800696a:	e000      	b.n	800696e <HAL_UART_RxCpltCallback+0x466>
 800696c:	221f      	movs	r2, #31
 800696e:	4b20      	ldr	r3, [pc, #128]	; (80069f0 <HAL_UART_RxCpltCallback+0x4e8>)
 8006970:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(23, 35, 185, 10, 16, (uint8_t*) a);
 8006972:	4b17      	ldr	r3, [pc, #92]	; (80069d0 <HAL_UART_RxCpltCallback+0x4c8>)
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	2310      	movs	r3, #16
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	230a      	movs	r3, #10
 800697c:	22b9      	movs	r2, #185	; 0xb9
 800697e:	2123      	movs	r1, #35	; 0x23
 8006980:	2017      	movs	r0, #23
 8006982:	f7ff fd71 	bl	8006468 <LCD_ShowString>
			POINT_COLOR = (color[1] == 0) ? RED : BLUE;
 8006986:	4b0a      	ldr	r3, [pc, #40]	; (80069b0 <HAL_UART_RxCpltCallback+0x4a8>)
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d132      	bne.n	80069f4 <HAL_UART_RxCpltCallback+0x4ec>
 800698e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006992:	e030      	b.n	80069f6 <HAL_UART_RxCpltCallback+0x4ee>
 8006994:	f3af 8000 	nop.w
 8006998:	66666666 	.word	0x66666666
 800699c:	3f4a6666 	.word	0x3f4a6666
 80069a0:	ae147ae1 	.word	0xae147ae1
 80069a4:	3ff6e147 	.word	0x3ff6e147
 80069a8:	33333333 	.word	0x33333333
 80069ac:	40113333 	.word	0x40113333
 80069b0:	200006fc 	.word	0x200006fc
 80069b4:	200001fe 	.word	0x200001fe
 80069b8:	20000200 	.word	0x20000200
 80069bc:	20000754 	.word	0x20000754
 80069c0:	20000724 	.word	0x20000724
 80069c4:	40390000 	.word	0x40390000
 80069c8:	0800b528 	.word	0x0800b528
 80069cc:	20000600 	.word	0x20000600
 80069d0:	2000061c 	.word	0x2000061c
 80069d4:	20000638 	.word	0x20000638
 80069d8:	20000654 	.word	0x20000654
 80069dc:	20000670 	.word	0x20000670
 80069e0:	2000068c 	.word	0x2000068c
 80069e4:	200006a8 	.word	0x200006a8
 80069e8:	200006c4 	.word	0x200006c4
 80069ec:	200006e0 	.word	0x200006e0
 80069f0:	200001fc 	.word	0x200001fc
 80069f4:	221f      	movs	r2, #31
 80069f6:	4b57      	ldr	r3, [pc, #348]	; (8006b54 <HAL_UART_RxCpltCallback+0x64c>)
 80069f8:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(23, 65, 185, 10, 16, (uint8_t*) b);
 80069fa:	4b57      	ldr	r3, [pc, #348]	; (8006b58 <HAL_UART_RxCpltCallback+0x650>)
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	2310      	movs	r3, #16
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	230a      	movs	r3, #10
 8006a04:	22b9      	movs	r2, #185	; 0xb9
 8006a06:	2141      	movs	r1, #65	; 0x41
 8006a08:	2017      	movs	r0, #23
 8006a0a:	f7ff fd2d 	bl	8006468 <LCD_ShowString>
			POINT_COLOR = (color[2] == 0) ? RED : BLUE;
 8006a0e:	4b53      	ldr	r3, [pc, #332]	; (8006b5c <HAL_UART_RxCpltCallback+0x654>)
 8006a10:	789b      	ldrb	r3, [r3, #2]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d102      	bne.n	8006a1c <HAL_UART_RxCpltCallback+0x514>
 8006a16:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006a1a:	e000      	b.n	8006a1e <HAL_UART_RxCpltCallback+0x516>
 8006a1c:	221f      	movs	r2, #31
 8006a1e:	4b4d      	ldr	r3, [pc, #308]	; (8006b54 <HAL_UART_RxCpltCallback+0x64c>)
 8006a20:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(23, 95, 185, 10, 16, (uint8_t*) c);
 8006a22:	4b4f      	ldr	r3, [pc, #316]	; (8006b60 <HAL_UART_RxCpltCallback+0x658>)
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	2310      	movs	r3, #16
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	230a      	movs	r3, #10
 8006a2c:	22b9      	movs	r2, #185	; 0xb9
 8006a2e:	215f      	movs	r1, #95	; 0x5f
 8006a30:	2017      	movs	r0, #23
 8006a32:	f7ff fd19 	bl	8006468 <LCD_ShowString>
			POINT_COLOR = (color[3] == 0) ? RED : BLUE;
 8006a36:	4b49      	ldr	r3, [pc, #292]	; (8006b5c <HAL_UART_RxCpltCallback+0x654>)
 8006a38:	78db      	ldrb	r3, [r3, #3]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d102      	bne.n	8006a44 <HAL_UART_RxCpltCallback+0x53c>
 8006a3e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006a42:	e000      	b.n	8006a46 <HAL_UART_RxCpltCallback+0x53e>
 8006a44:	221f      	movs	r2, #31
 8006a46:	4b43      	ldr	r3, [pc, #268]	; (8006b54 <HAL_UART_RxCpltCallback+0x64c>)
 8006a48:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(23, 125, 185, 10, 16, (uint8_t*) d);
 8006a4a:	4b46      	ldr	r3, [pc, #280]	; (8006b64 <HAL_UART_RxCpltCallback+0x65c>)
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	2310      	movs	r3, #16
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	230a      	movs	r3, #10
 8006a54:	22b9      	movs	r2, #185	; 0xb9
 8006a56:	217d      	movs	r1, #125	; 0x7d
 8006a58:	2017      	movs	r0, #23
 8006a5a:	f7ff fd05 	bl	8006468 <LCD_ShowString>
			POINT_COLOR = (color[4] == 0) ? RED : BLUE;
 8006a5e:	4b3f      	ldr	r3, [pc, #252]	; (8006b5c <HAL_UART_RxCpltCallback+0x654>)
 8006a60:	791b      	ldrb	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d102      	bne.n	8006a6c <HAL_UART_RxCpltCallback+0x564>
 8006a66:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006a6a:	e000      	b.n	8006a6e <HAL_UART_RxCpltCallback+0x566>
 8006a6c:	221f      	movs	r2, #31
 8006a6e:	4b39      	ldr	r3, [pc, #228]	; (8006b54 <HAL_UART_RxCpltCallback+0x64c>)
 8006a70:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(23, 155, 185, 10, 16, (uint8_t*) e);
 8006a72:	4b3d      	ldr	r3, [pc, #244]	; (8006b68 <HAL_UART_RxCpltCallback+0x660>)
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	2310      	movs	r3, #16
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	230a      	movs	r3, #10
 8006a7c:	22b9      	movs	r2, #185	; 0xb9
 8006a7e:	219b      	movs	r1, #155	; 0x9b
 8006a80:	2017      	movs	r0, #23
 8006a82:	f7ff fcf1 	bl	8006468 <LCD_ShowString>
			POINT_COLOR = (color[5] == 0) ? RED : BLUE;
 8006a86:	4b35      	ldr	r3, [pc, #212]	; (8006b5c <HAL_UART_RxCpltCallback+0x654>)
 8006a88:	795b      	ldrb	r3, [r3, #5]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <HAL_UART_RxCpltCallback+0x58c>
 8006a8e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006a92:	e000      	b.n	8006a96 <HAL_UART_RxCpltCallback+0x58e>
 8006a94:	221f      	movs	r2, #31
 8006a96:	4b2f      	ldr	r3, [pc, #188]	; (8006b54 <HAL_UART_RxCpltCallback+0x64c>)
 8006a98:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(23, 185, 185, 10, 16, (uint8_t*) f);
 8006a9a:	4b34      	ldr	r3, [pc, #208]	; (8006b6c <HAL_UART_RxCpltCallback+0x664>)
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	230a      	movs	r3, #10
 8006aa4:	22b9      	movs	r2, #185	; 0xb9
 8006aa6:	21b9      	movs	r1, #185	; 0xb9
 8006aa8:	2017      	movs	r0, #23
 8006aaa:	f7ff fcdd 	bl	8006468 <LCD_ShowString>
			POINT_COLOR = (color[6] == 0) ? RED : BLUE;
 8006aae:	4b2b      	ldr	r3, [pc, #172]	; (8006b5c <HAL_UART_RxCpltCallback+0x654>)
 8006ab0:	799b      	ldrb	r3, [r3, #6]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d102      	bne.n	8006abc <HAL_UART_RxCpltCallback+0x5b4>
 8006ab6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006aba:	e000      	b.n	8006abe <HAL_UART_RxCpltCallback+0x5b6>
 8006abc:	221f      	movs	r2, #31
 8006abe:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <HAL_UART_RxCpltCallback+0x64c>)
 8006ac0:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(23, 215, 185, 10, 16, (uint8_t*) g);
 8006ac2:	4b2b      	ldr	r3, [pc, #172]	; (8006b70 <HAL_UART_RxCpltCallback+0x668>)
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	2310      	movs	r3, #16
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	230a      	movs	r3, #10
 8006acc:	22b9      	movs	r2, #185	; 0xb9
 8006ace:	21d7      	movs	r1, #215	; 0xd7
 8006ad0:	2017      	movs	r0, #23
 8006ad2:	f7ff fcc9 	bl	8006468 <LCD_ShowString>
			POINT_COLOR = (color[7] == 0) ? RED : BLUE;
 8006ad6:	4b21      	ldr	r3, [pc, #132]	; (8006b5c <HAL_UART_RxCpltCallback+0x654>)
 8006ad8:	79db      	ldrb	r3, [r3, #7]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <HAL_UART_RxCpltCallback+0x5dc>
 8006ade:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006ae2:	e000      	b.n	8006ae6 <HAL_UART_RxCpltCallback+0x5de>
 8006ae4:	221f      	movs	r2, #31
 8006ae6:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <HAL_UART_RxCpltCallback+0x64c>)
 8006ae8:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(23, 245, 185, 10, 16, (uint8_t*) h);
 8006aea:	4b22      	ldr	r3, [pc, #136]	; (8006b74 <HAL_UART_RxCpltCallback+0x66c>)
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	2310      	movs	r3, #16
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	230a      	movs	r3, #10
 8006af4:	22b9      	movs	r2, #185	; 0xb9
 8006af6:	21f5      	movs	r1, #245	; 0xf5
 8006af8:	2017      	movs	r0, #23
 8006afa:	f7ff fcb5 	bl	8006468 <LCD_ShowString>
			POINT_COLOR = (color[8] == 0) ? RED : BLUE;
 8006afe:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <HAL_UART_RxCpltCallback+0x654>)
 8006b00:	7a1b      	ldrb	r3, [r3, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <HAL_UART_RxCpltCallback+0x604>
 8006b06:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006b0a:	e000      	b.n	8006b0e <HAL_UART_RxCpltCallback+0x606>
 8006b0c:	221f      	movs	r2, #31
 8006b0e:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <HAL_UART_RxCpltCallback+0x64c>)
 8006b10:	801a      	strh	r2, [r3, #0]
			LCD_ShowString(23, 275, 185, 10, 16, (uint8_t*) i);
 8006b12:	4b19      	ldr	r3, [pc, #100]	; (8006b78 <HAL_UART_RxCpltCallback+0x670>)
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	2310      	movs	r3, #16
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	230a      	movs	r3, #10
 8006b1c:	22b9      	movs	r2, #185	; 0xb9
 8006b1e:	f240 1113 	movw	r1, #275	; 0x113
 8006b22:	2017      	movs	r0, #23
 8006b24:	f7ff fca0 	bl	8006468 <LCD_ShowString>

			uLength = 0;
 8006b28:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <HAL_UART_RxCpltCallback+0x674>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
			uRx_Data[uLength] = rxBuffer[0];
//			HAL_UART_Transmit(&huart1, rxBuffer[0], 1, 0xffff);
			uLength++;
		}
	}
}
 8006b2e:	e00c      	b.n	8006b4a <HAL_UART_RxCpltCallback+0x642>
			uRx_Data[uLength] = rxBuffer[0];
 8006b30:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <HAL_UART_RxCpltCallback+0x674>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	461a      	mov	r2, r3
 8006b36:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <HAL_UART_RxCpltCallback+0x678>)
 8006b38:	7819      	ldrb	r1, [r3, #0]
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <HAL_UART_RxCpltCallback+0x67c>)
 8006b3c:	5499      	strb	r1, [r3, r2]
			uLength++;
 8006b3e:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <HAL_UART_RxCpltCallback+0x674>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	3301      	adds	r3, #1
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <HAL_UART_RxCpltCallback+0x674>)
 8006b48:	701a      	strb	r2, [r3, #0]
}
 8006b4a:	bf00      	nop
 8006b4c:	3754      	adds	r7, #84	; 0x54
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200001fc 	.word	0x200001fc
 8006b58:	20000600 	.word	0x20000600
 8006b5c:	200006fc 	.word	0x200006fc
 8006b60:	20000638 	.word	0x20000638
 8006b64:	20000654 	.word	0x20000654
 8006b68:	20000670 	.word	0x20000670
 8006b6c:	2000068c 	.word	0x2000068c
 8006b70:	200006a8 	.word	0x200006a8
 8006b74:	200006c4 	.word	0x200006c4
 8006b78:	200006e0 	.word	0x200006e0
 8006b7c:	200001fe 	.word	0x200001fe
 8006b80:	20000794 	.word	0x20000794
 8006b84:	20000200 	.word	0x20000200

08006b88 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8006b8c:	4804      	ldr	r0, [pc, #16]	; (8006ba0 <USART1_IRQHandler+0x18>)
 8006b8e:	f002 f94b 	bl	8008e28 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rxBuffer, 1);
 8006b92:	2201      	movs	r2, #1
 8006b94:	4903      	ldr	r1, [pc, #12]	; (8006ba4 <USART1_IRQHandler+0x1c>)
 8006b96:	4802      	ldr	r0, [pc, #8]	; (8006ba0 <USART1_IRQHandler+0x18>)
 8006b98:	f002 f8f1 	bl	8008d7e <HAL_UART_Receive_IT>
	/* USER CODE END USART1_IRQn 1 */
}
 8006b9c:	bf00      	nop
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000754 	.word	0x20000754
 8006ba4:	20000794 	.word	0x20000794

08006ba8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006bac:	f000 fa28 	bl	8007000 <HAL_Init>

	/* USER CODE BEGIN Init */
	LCD_Init();
 8006bb0:	f7fb fb6e 	bl	8002290 <LCD_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006bb4:	f000 f810 	bl	8006bd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006bb8:	f000 f8d4 	bl	8006d64 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8006bbc:	f000 f8a8 	bl	8006d10 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8006bc0:	f000 f868 	bl	8006c94 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rxBuffer, 1);
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	4902      	ldr	r1, [pc, #8]	; (8006bd0 <main+0x28>)
 8006bc8:	4802      	ldr	r0, [pc, #8]	; (8006bd4 <main+0x2c>)
 8006bca:	f002 f8d8 	bl	8008d7e <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8006bce:	e7fe      	b.n	8006bce <main+0x26>
 8006bd0:	20000794 	.word	0x20000794
 8006bd4:	20000754 	.word	0x20000754

08006bd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b096      	sub	sp, #88	; 0x58
 8006bdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006be2:	2228      	movs	r2, #40	; 0x28
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f002 fc4a 	bl	8009480 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006bec:	f107 031c 	add.w	r3, r7, #28
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8006bfc:	1d3b      	adds	r3, r7, #4
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	605a      	str	r2, [r3, #4]
 8006c04:	609a      	str	r2, [r3, #8]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	611a      	str	r2, [r3, #16]
 8006c0a:	615a      	str	r2, [r3, #20]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006c16:	2300      	movs	r3, #0
 8006c18:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c26:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006c28:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006c2c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006c2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 fa0a 	bl	800804c <HAL_RCC_OscConfig>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <SystemClock_Config+0x6a>
		Error_Handler();
 8006c3e:	f000 f8b3 	bl	8006da8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006c42:	230f      	movs	r3, #15
 8006c44:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c46:	2302      	movs	r3, #2
 8006c48:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006c54:	2300      	movs	r3, #0
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006c58:	f107 031c 	add.w	r3, r7, #28
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 fc74 	bl	800854c <HAL_RCC_ClockConfig>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <SystemClock_Config+0x96>
		Error_Handler();
 8006c6a:	f000 f89d 	bl	8006da8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c76:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 fe02 	bl	8008884 <HAL_RCCEx_PeriphCLKConfig>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <SystemClock_Config+0xb2>
		Error_Handler();
 8006c86:	f000 f88f 	bl	8006da8 <Error_Handler>
	}
}
 8006c8a:	bf00      	nop
 8006c8c:	3758      	adds	r7, #88	; 0x58
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8006ca4:	4b18      	ldr	r3, [pc, #96]	; (8006d08 <MX_ADC1_Init+0x74>)
 8006ca6:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <MX_ADC1_Init+0x78>)
 8006ca8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006caa:	4b17      	ldr	r3, [pc, #92]	; (8006d08 <MX_ADC1_Init+0x74>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8006cb0:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <MX_ADC1_Init+0x74>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006cb6:	4b14      	ldr	r3, [pc, #80]	; (8006d08 <MX_ADC1_Init+0x74>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006cbc:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <MX_ADC1_Init+0x74>)
 8006cbe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8006cc2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006cc4:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <MX_ADC1_Init+0x74>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8006cca:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <MX_ADC1_Init+0x74>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8006cd0:	480d      	ldr	r0, [pc, #52]	; (8006d08 <MX_ADC1_Init+0x74>)
 8006cd2:	f000 fa19 	bl	8007108 <HAL_ADC_Init>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8006cdc:	f000 f864 	bl	8006da8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8006cec:	1d3b      	adds	r3, r7, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4805      	ldr	r0, [pc, #20]	; (8006d08 <MX_ADC1_Init+0x74>)
 8006cf2:	f000 fca7 	bl	8007644 <HAL_ADC_ConfigChannel>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8006cfc:	f000 f854 	bl	8006da8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000724 	.word	0x20000724
 8006d0c:	40012400 	.word	0x40012400

08006d10 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8006d14:	4b11      	ldr	r3, [pc, #68]	; (8006d5c <MX_USART1_UART_Init+0x4c>)
 8006d16:	4a12      	ldr	r2, [pc, #72]	; (8006d60 <MX_USART1_UART_Init+0x50>)
 8006d18:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <MX_USART1_UART_Init+0x4c>)
 8006d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d20:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d22:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <MX_USART1_UART_Init+0x4c>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <MX_USART1_UART_Init+0x4c>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <MX_USART1_UART_Init+0x4c>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8006d34:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <MX_USART1_UART_Init+0x4c>)
 8006d36:	220c      	movs	r2, #12
 8006d38:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <MX_USART1_UART_Init+0x4c>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <MX_USART1_UART_Init+0x4c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8006d46:	4805      	ldr	r0, [pc, #20]	; (8006d5c <MX_USART1_UART_Init+0x4c>)
 8006d48:	f001 ff3a 	bl	8008bc0 <HAL_UART_Init>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8006d52:	f000 f829 	bl	8006da8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8006d56:	bf00      	nop
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000754 	.word	0x20000754
 8006d60:	40013800 	.word	0x40013800

08006d64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006d6a:	4b0e      	ldr	r3, [pc, #56]	; (8006da4 <MX_GPIO_Init+0x40>)
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	4a0d      	ldr	r2, [pc, #52]	; (8006da4 <MX_GPIO_Init+0x40>)
 8006d70:	f043 0320 	orr.w	r3, r3, #32
 8006d74:	6193      	str	r3, [r2, #24]
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <MX_GPIO_Init+0x40>)
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006d82:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <MX_GPIO_Init+0x40>)
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	4a07      	ldr	r2, [pc, #28]	; (8006da4 <MX_GPIO_Init+0x40>)
 8006d88:	f043 0304 	orr.w	r3, r3, #4
 8006d8c:	6193      	str	r3, [r2, #24]
 8006d8e:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <MX_GPIO_Init+0x40>)
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	683b      	ldr	r3, [r7, #0]

}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr
 8006da4:	40021000 	.word	0x40021000

08006da8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8006dac:	bf00      	nop
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006dba:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <HAL_MspInit+0x5c>)
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	4a14      	ldr	r2, [pc, #80]	; (8006e10 <HAL_MspInit+0x5c>)
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	6193      	str	r3, [r2, #24]
 8006dc6:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <HAL_MspInit+0x5c>)
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	60bb      	str	r3, [r7, #8]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <HAL_MspInit+0x5c>)
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	4a0e      	ldr	r2, [pc, #56]	; (8006e10 <HAL_MspInit+0x5c>)
 8006dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ddc:	61d3      	str	r3, [r2, #28]
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <HAL_MspInit+0x5c>)
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de6:	607b      	str	r3, [r7, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006dea:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <HAL_MspInit+0x60>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	4a04      	ldr	r2, [pc, #16]	; (8006e14 <HAL_MspInit+0x60>)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40010000 	.word	0x40010000

08006e18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <HAL_ADC_MspInit+0x34>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d10b      	bne.n	8006e42 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <HAL_ADC_MspInit+0x38>)
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	4a08      	ldr	r2, [pc, #32]	; (8006e50 <HAL_ADC_MspInit+0x38>)
 8006e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e34:	6193      	str	r3, [r2, #24]
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <HAL_ADC_MspInit+0x38>)
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr
 8006e4c:	40012400 	.word	0x40012400
 8006e50:	40021000 	.word	0x40021000

08006e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	605a      	str	r2, [r3, #4]
 8006e66:	609a      	str	r2, [r3, #8]
 8006e68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <HAL_UART_MspInit+0x9c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d139      	bne.n	8006ee8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e74:	4b1f      	ldr	r3, [pc, #124]	; (8006ef4 <HAL_UART_MspInit+0xa0>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <HAL_UART_MspInit+0xa0>)
 8006e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e7e:	6193      	str	r3, [r2, #24]
 8006e80:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <HAL_UART_MspInit+0xa0>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e8c:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <HAL_UART_MspInit+0xa0>)
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	4a18      	ldr	r2, [pc, #96]	; (8006ef4 <HAL_UART_MspInit+0xa0>)
 8006e92:	f043 0304 	orr.w	r3, r3, #4
 8006e96:	6193      	str	r3, [r2, #24]
 8006e98:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <HAL_UART_MspInit+0xa0>)
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eaa:	2302      	movs	r3, #2
 8006eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eb2:	f107 0310 	add.w	r3, r7, #16
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	480f      	ldr	r0, [pc, #60]	; (8006ef8 <HAL_UART_MspInit+0xa4>)
 8006eba:	f000 ff5d 	bl	8007d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ecc:	f107 0310 	add.w	r3, r7, #16
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4809      	ldr	r0, [pc, #36]	; (8006ef8 <HAL_UART_MspInit+0xa4>)
 8006ed4:	f000 ff50 	bl	8007d78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2100      	movs	r1, #0
 8006edc:	2025      	movs	r0, #37	; 0x25
 8006ede:	f000 fe0c 	bl	8007afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006ee2:	2025      	movs	r0, #37	; 0x25
 8006ee4:	f000 fe25 	bl	8007b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006ee8:	bf00      	nop
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40013800 	.word	0x40013800
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	40010800 	.word	0x40010800

08006efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006f00:	bf00      	nop
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f0c:	e7fe      	b.n	8006f0c <HardFault_Handler+0x4>

08006f0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f12:	e7fe      	b.n	8006f12 <MemManage_Handler+0x4>

08006f14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f18:	e7fe      	b.n	8006f18 <BusFault_Handler+0x4>

08006f1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f1e:	e7fe      	b.n	8006f1e <UsageFault_Handler+0x4>

08006f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f30:	bf00      	nop
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr

08006f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f3c:	bf00      	nop
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc80      	pop	{r7}
 8006f42:	4770      	bx	lr

08006f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f48:	f000 f8a0 	bl	800708c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f4c:	bf00      	nop
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006f58:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <_sbrk+0x50>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <_sbrk+0x16>
		heap_end = &end;
 8006f60:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <_sbrk+0x50>)
 8006f62:	4a10      	ldr	r2, [pc, #64]	; (8006fa4 <_sbrk+0x54>)
 8006f64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006f66:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <_sbrk+0x50>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <_sbrk+0x50>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	466a      	mov	r2, sp
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d907      	bls.n	8006f8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006f7a:	f002 fa57 	bl	800942c <__errno>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	230c      	movs	r3, #12
 8006f82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006f84:	f04f 33ff 	mov.w	r3, #4294967295
 8006f88:	e006      	b.n	8006f98 <_sbrk+0x48>
	}

	heap_end += incr;
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <_sbrk+0x50>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4413      	add	r3, r2
 8006f92:	4a03      	ldr	r2, [pc, #12]	; (8006fa0 <_sbrk+0x50>)
 8006f94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20000708 	.word	0x20000708
 8006fa4:	200007b0 	.word	0x200007b0

08006fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006fac:	bf00      	nop
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr

08006fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006fb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006fb6:	e003      	b.n	8006fc0 <LoopCopyDataInit>

08006fb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006fb8:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006fba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006fbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006fbe:	3104      	adds	r1, #4

08006fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006fc0:	480a      	ldr	r0, [pc, #40]	; (8006fec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006fc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006fc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006fc8:	d3f6      	bcc.n	8006fb8 <CopyDataInit>
  ldr r2, =_sbss
 8006fca:	4a0a      	ldr	r2, [pc, #40]	; (8006ff4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006fcc:	e002      	b.n	8006fd4 <LoopFillZerobss>

08006fce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006fce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006fd0:	f842 3b04 	str.w	r3, [r2], #4

08006fd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006fd4:	4b08      	ldr	r3, [pc, #32]	; (8006ff8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006fd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006fd8:	d3f9      	bcc.n	8006fce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006fda:	f7ff ffe5 	bl	8006fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006fde:	f002 fa2b 	bl	8009438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006fe2:	f7ff fde1 	bl	8006ba8 <main>
  bx lr
 8006fe6:	4770      	bx	lr
  ldr r3, =_sidata
 8006fe8:	0800cf98 	.word	0x0800cf98
  ldr r0, =_sdata
 8006fec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006ff0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8006ff4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8006ff8:	200007b0 	.word	0x200007b0

08006ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ffc:	e7fe      	b.n	8006ffc <ADC1_2_IRQHandler>
	...

08007000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007004:	4b08      	ldr	r3, [pc, #32]	; (8007028 <HAL_Init+0x28>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a07      	ldr	r2, [pc, #28]	; (8007028 <HAL_Init+0x28>)
 800700a:	f043 0310 	orr.w	r3, r3, #16
 800700e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007010:	2003      	movs	r0, #3
 8007012:	f000 fd67 	bl	8007ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007016:	2000      	movs	r0, #0
 8007018:	f000 f808 	bl	800702c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800701c:	f7ff feca 	bl	8006db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40022000 	.word	0x40022000

0800702c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007034:	4b12      	ldr	r3, [pc, #72]	; (8007080 <HAL_InitTick+0x54>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4b12      	ldr	r3, [pc, #72]	; (8007084 <HAL_InitTick+0x58>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	4619      	mov	r1, r3
 800703e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007042:	fbb3 f3f1 	udiv	r3, r3, r1
 8007046:	fbb2 f3f3 	udiv	r3, r2, r3
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fd7f 	bl	8007b4e <HAL_SYSTICK_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e00e      	b.n	8007078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b0f      	cmp	r3, #15
 800705e:	d80a      	bhi.n	8007076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007060:	2200      	movs	r2, #0
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	f000 fd47 	bl	8007afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800706c:	4a06      	ldr	r2, [pc, #24]	; (8007088 <HAL_InitTick+0x5c>)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e000      	b.n	8007078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000004 	.word	0x20000004
 8007084:	2000000c 	.word	0x2000000c
 8007088:	20000008 	.word	0x20000008

0800708c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_IncTick+0x1c>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <HAL_IncTick+0x20>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4413      	add	r3, r2
 800709c:	4a03      	ldr	r2, [pc, #12]	; (80070ac <HAL_IncTick+0x20>)
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	bf00      	nop
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr
 80070a8:	2000000c 	.word	0x2000000c
 80070ac:	200007a8 	.word	0x200007a8

080070b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  return uwTick;
 80070b4:	4b02      	ldr	r3, [pc, #8]	; (80070c0 <HAL_GetTick+0x10>)
 80070b6:	681b      	ldr	r3, [r3, #0]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr
 80070c0:	200007a8 	.word	0x200007a8

080070c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070cc:	f7ff fff0 	bl	80070b0 <HAL_GetTick>
 80070d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070dc:	d005      	beq.n	80070ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80070de:	4b09      	ldr	r3, [pc, #36]	; (8007104 <HAL_Delay+0x40>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80070ea:	bf00      	nop
 80070ec:	f7ff ffe0 	bl	80070b0 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d8f7      	bhi.n	80070ec <HAL_Delay+0x28>
  {
  }
}
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	2000000c 	.word	0x2000000c

08007108 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e0ce      	b.n	80072c8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007134:	2b00      	cmp	r3, #0
 8007136:	d109      	bne.n	800714c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fe66 	bl	8006e18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fbc3 	bl	80078d8 <ADC_ConversionStop_Disable>
 8007152:	4603      	mov	r3, r0
 8007154:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b00      	cmp	r3, #0
 8007160:	f040 80a9 	bne.w	80072b6 <HAL_ADC_Init+0x1ae>
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f040 80a5 	bne.w	80072b6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007174:	f023 0302 	bic.w	r3, r3, #2
 8007178:	f043 0202 	orr.w	r2, r3, #2
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4951      	ldr	r1, [pc, #324]	; (80072d0 <HAL_ADC_Init+0x1c8>)
 800718a:	428b      	cmp	r3, r1
 800718c:	d10a      	bne.n	80071a4 <HAL_ADC_Init+0x9c>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007196:	d002      	beq.n	800719e <HAL_ADC_Init+0x96>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	e004      	b.n	80071a8 <HAL_ADC_Init+0xa0>
 800719e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071a2:	e001      	b.n	80071a8 <HAL_ADC_Init+0xa0>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80071a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7b1b      	ldrb	r3, [r3, #12]
 80071ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80071b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c0:	d003      	beq.n	80071ca <HAL_ADC_Init+0xc2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d102      	bne.n	80071d0 <HAL_ADC_Init+0xc8>
 80071ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071ce:	e000      	b.n	80071d2 <HAL_ADC_Init+0xca>
 80071d0:	2300      	movs	r3, #0
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7d1b      	ldrb	r3, [r3, #20]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d119      	bne.n	8007214 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	7b1b      	ldrb	r3, [r3, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	035a      	lsls	r2, r3, #13
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	e00b      	b.n	8007214 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	f043 0201 	orr.w	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	4b29      	ldr	r3, [pc, #164]	; (80072d4 <HAL_ADC_Init+0x1cc>)
 8007230:	4013      	ands	r3, r2
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	430b      	orrs	r3, r1
 800723a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007244:	d003      	beq.n	800724e <HAL_ADC_Init+0x146>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d104      	bne.n	8007258 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	3b01      	subs	r3, #1
 8007254:	051b      	lsls	r3, r3, #20
 8007256:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	430a      	orrs	r2, r1
 800726a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <HAL_ADC_Init+0x1d0>)
 8007274:	4013      	ands	r3, r2
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	429a      	cmp	r2, r3
 800727a:	d10b      	bne.n	8007294 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	f043 0201 	orr.w	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007292:	e018      	b.n	80072c6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f023 0312 	bic.w	r3, r3, #18
 800729c:	f043 0210 	orr.w	r2, r3, #16
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	f043 0201 	orr.w	r2, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80072b4:	e007      	b.n	80072c6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ba:	f043 0210 	orr.w	r2, r3, #16
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40013c00 	.word	0x40013c00
 80072d4:	ffe1f7fd 	.word	0xffe1f7fd
 80072d8:	ff1f0efe 	.word	0xff1f0efe

080072dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_ADC_Start+0x1a>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e098      	b.n	8007428 <HAL_ADC_Start+0x14c>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa98 	bl	8007834 <ADC_Enable>
 8007304:	4603      	mov	r3, r0
 8007306:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f040 8087 	bne.w	800741e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a41      	ldr	r2, [pc, #260]	; (8007430 <HAL_ADC_Start+0x154>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d105      	bne.n	800733a <HAL_ADC_Start+0x5e>
 800732e:	4b41      	ldr	r3, [pc, #260]	; (8007434 <HAL_ADC_Start+0x158>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d115      	bne.n	8007366 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007350:	2b00      	cmp	r3, #0
 8007352:	d026      	beq.n	80073a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800735c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007364:	e01d      	b.n	80073a2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a2f      	ldr	r2, [pc, #188]	; (8007434 <HAL_ADC_Start+0x158>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_ADC_Start+0xaa>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a2b      	ldr	r2, [pc, #172]	; (8007430 <HAL_ADC_Start+0x154>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d10d      	bne.n	80073a2 <HAL_ADC_Start+0xc6>
 8007386:	4b2b      	ldr	r3, [pc, #172]	; (8007434 <HAL_ADC_Start+0x158>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800738e:	2b00      	cmp	r3, #0
 8007390:	d007      	beq.n	80073a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800739a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d006      	beq.n	80073bc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b2:	f023 0206 	bic.w	r2, r3, #6
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80073ba:	e002      	b.n	80073c2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0202 	mvn.w	r2, #2
 80073d2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80073de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80073e2:	d113      	bne.n	800740c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80073e8:	4a11      	ldr	r2, [pc, #68]	; (8007430 <HAL_ADC_Start+0x154>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d105      	bne.n	80073fa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80073ee:	4b11      	ldr	r3, [pc, #68]	; (8007434 <HAL_ADC_Start+0x158>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d108      	bne.n	800740c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007408:	609a      	str	r2, [r3, #8]
 800740a:	e00c      	b.n	8007426 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689a      	ldr	r2, [r3, #8]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800741a:	609a      	str	r2, [r3, #8]
 800741c:	e003      	b.n	8007426 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40012800 	.word	0x40012800
 8007434:	40012400 	.word	0x40012400

08007438 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007438:	b590      	push	{r4, r7, lr}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800744e:	f7ff fe2f 	bl	80070b0 <HAL_GetTick>
 8007452:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	f043 0220 	orr.w	r2, r3, #32
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0c8      	b.n	800760c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007484:	2b00      	cmp	r3, #0
 8007486:	d12a      	bne.n	80074de <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007492:	2b00      	cmp	r3, #0
 8007494:	d123      	bne.n	80074de <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007496:	e01a      	b.n	80074ce <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749e:	d016      	beq.n	80074ce <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <HAL_ADC_PollForConversion+0x7e>
 80074a6:	f7ff fe03 	bl	80070b0 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d20b      	bcs.n	80074ce <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	f043 0204 	orr.w	r2, r3, #4
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e09e      	b.n	800760c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0dd      	beq.n	8007498 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80074dc:	e06c      	b.n	80075b8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80074de:	4b4d      	ldr	r3, [pc, #308]	; (8007614 <HAL_ADC_PollForConversion+0x1dc>)
 80074e0:	681c      	ldr	r4, [r3, #0]
 80074e2:	2002      	movs	r0, #2
 80074e4:	f001 fa84 	bl	80089f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80074e8:	4603      	mov	r3, r0
 80074ea:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6919      	ldr	r1, [r3, #16]
 80074f4:	4b48      	ldr	r3, [pc, #288]	; (8007618 <HAL_ADC_PollForConversion+0x1e0>)
 80074f6:	400b      	ands	r3, r1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d118      	bne.n	800752e <HAL_ADC_PollForConversion+0xf6>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68d9      	ldr	r1, [r3, #12]
 8007502:	4b46      	ldr	r3, [pc, #280]	; (800761c <HAL_ADC_PollForConversion+0x1e4>)
 8007504:	400b      	ands	r3, r1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d111      	bne.n	800752e <HAL_ADC_PollForConversion+0xf6>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6919      	ldr	r1, [r3, #16]
 8007510:	4b43      	ldr	r3, [pc, #268]	; (8007620 <HAL_ADC_PollForConversion+0x1e8>)
 8007512:	400b      	ands	r3, r1
 8007514:	2b00      	cmp	r3, #0
 8007516:	d108      	bne.n	800752a <HAL_ADC_PollForConversion+0xf2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68d9      	ldr	r1, [r3, #12]
 800751e:	4b41      	ldr	r3, [pc, #260]	; (8007624 <HAL_ADC_PollForConversion+0x1ec>)
 8007520:	400b      	ands	r3, r1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_ADC_PollForConversion+0xf2>
 8007526:	2314      	movs	r3, #20
 8007528:	e020      	b.n	800756c <HAL_ADC_PollForConversion+0x134>
 800752a:	2329      	movs	r3, #41	; 0x29
 800752c:	e01e      	b.n	800756c <HAL_ADC_PollForConversion+0x134>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6919      	ldr	r1, [r3, #16]
 8007534:	4b3a      	ldr	r3, [pc, #232]	; (8007620 <HAL_ADC_PollForConversion+0x1e8>)
 8007536:	400b      	ands	r3, r1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d106      	bne.n	800754a <HAL_ADC_PollForConversion+0x112>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68d9      	ldr	r1, [r3, #12]
 8007542:	4b38      	ldr	r3, [pc, #224]	; (8007624 <HAL_ADC_PollForConversion+0x1ec>)
 8007544:	400b      	ands	r3, r1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00d      	beq.n	8007566 <HAL_ADC_PollForConversion+0x12e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6919      	ldr	r1, [r3, #16]
 8007550:	4b35      	ldr	r3, [pc, #212]	; (8007628 <HAL_ADC_PollForConversion+0x1f0>)
 8007552:	400b      	ands	r3, r1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d108      	bne.n	800756a <HAL_ADC_PollForConversion+0x132>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68d9      	ldr	r1, [r3, #12]
 800755e:	4b32      	ldr	r3, [pc, #200]	; (8007628 <HAL_ADC_PollForConversion+0x1f0>)
 8007560:	400b      	ands	r3, r1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_ADC_PollForConversion+0x132>
 8007566:	2354      	movs	r3, #84	; 0x54
 8007568:	e000      	b.n	800756c <HAL_ADC_PollForConversion+0x134>
 800756a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800756c:	fb02 f303 	mul.w	r3, r2, r3
 8007570:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007572:	e01d      	b.n	80075b0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d016      	beq.n	80075aa <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <HAL_ADC_PollForConversion+0x15a>
 8007582:	f7ff fd95 	bl	80070b0 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d20b      	bcs.n	80075aa <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	f043 0204 	orr.w	r2, r3, #4
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e030      	b.n	800760c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3301      	adds	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d8dd      	bhi.n	8007574 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f06f 0212 	mvn.w	r2, #18
 80075c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80075d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80075dc:	d115      	bne.n	800760a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d111      	bne.n	800760a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	f043 0201 	orr.w	r2, r3, #1
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	bd90      	pop	{r4, r7, pc}
 8007614:	20000004 	.word	0x20000004
 8007618:	24924924 	.word	0x24924924
 800761c:	00924924 	.word	0x00924924
 8007620:	12492492 	.word	0x12492492
 8007624:	00492492 	.word	0x00492492
 8007628:	00249249 	.word	0x00249249

0800762c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800763a:	4618      	mov	r0, r3
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr

08007644 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_ADC_ConfigChannel+0x20>
 8007660:	2302      	movs	r3, #2
 8007662:	e0dc      	b.n	800781e <HAL_ADC_ConfigChannel+0x1da>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	2b06      	cmp	r3, #6
 8007672:	d81c      	bhi.n	80076ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	3b05      	subs	r3, #5
 8007686:	221f      	movs	r2, #31
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	43db      	mvns	r3, r3
 800768e:	4019      	ands	r1, r3
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	3b05      	subs	r3, #5
 80076a0:	fa00 f203 	lsl.w	r2, r0, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	635a      	str	r2, [r3, #52]	; 0x34
 80076ac:	e03c      	b.n	8007728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b0c      	cmp	r3, #12
 80076b4:	d81c      	bhi.n	80076f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	3b23      	subs	r3, #35	; 0x23
 80076c8:	221f      	movs	r2, #31
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	43db      	mvns	r3, r3
 80076d0:	4019      	ands	r1, r3
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	3b23      	subs	r3, #35	; 0x23
 80076e2:	fa00 f203 	lsl.w	r2, r0, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	631a      	str	r2, [r3, #48]	; 0x30
 80076ee:	e01b      	b.n	8007728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	3b41      	subs	r3, #65	; 0x41
 8007702:	221f      	movs	r2, #31
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	43db      	mvns	r3, r3
 800770a:	4019      	ands	r1, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	4613      	mov	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	3b41      	subs	r3, #65	; 0x41
 800771c:	fa00 f203 	lsl.w	r2, r0, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b09      	cmp	r3, #9
 800772e:	d91c      	bls.n	800776a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68d9      	ldr	r1, [r3, #12]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	4613      	mov	r3, r2
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	4413      	add	r3, r2
 8007740:	3b1e      	subs	r3, #30
 8007742:	2207      	movs	r2, #7
 8007744:	fa02 f303 	lsl.w	r3, r2, r3
 8007748:	43db      	mvns	r3, r3
 800774a:	4019      	ands	r1, r3
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	6898      	ldr	r0, [r3, #8]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	4413      	add	r3, r2
 800775a:	3b1e      	subs	r3, #30
 800775c:	fa00 f203 	lsl.w	r2, r0, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e019      	b.n	800779e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6919      	ldr	r1, [r3, #16]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	4413      	add	r3, r2
 800777a:	2207      	movs	r2, #7
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	43db      	mvns	r3, r3
 8007782:	4019      	ands	r1, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	6898      	ldr	r0, [r3, #8]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	fa00 f203 	lsl.w	r2, r0, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d003      	beq.n	80077ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80077aa:	2b11      	cmp	r3, #17
 80077ac:	d132      	bne.n	8007814 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a1d      	ldr	r2, [pc, #116]	; (8007828 <HAL_ADC_ConfigChannel+0x1e4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d125      	bne.n	8007804 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d126      	bne.n	8007814 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80077d4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b10      	cmp	r3, #16
 80077dc:	d11a      	bne.n	8007814 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80077de:	4b13      	ldr	r3, [pc, #76]	; (800782c <HAL_ADC_ConfigChannel+0x1e8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a13      	ldr	r2, [pc, #76]	; (8007830 <HAL_ADC_ConfigChannel+0x1ec>)
 80077e4:	fba2 2303 	umull	r2, r3, r2, r3
 80077e8:	0c9a      	lsrs	r2, r3, #18
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80077f4:	e002      	b.n	80077fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1f9      	bne.n	80077f6 <HAL_ADC_ConfigChannel+0x1b2>
 8007802:	e007      	b.n	8007814 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	f043 0220 	orr.w	r2, r3, #32
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr
 8007828:	40012400 	.word	0x40012400
 800782c:	20000004 	.word	0x20000004
 8007830:	431bde83 	.word	0x431bde83

08007834 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b01      	cmp	r3, #1
 8007850:	d039      	beq.n	80078c6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0201 	orr.w	r2, r2, #1
 8007860:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007862:	4b1b      	ldr	r3, [pc, #108]	; (80078d0 <ADC_Enable+0x9c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a1b      	ldr	r2, [pc, #108]	; (80078d4 <ADC_Enable+0xa0>)
 8007868:	fba2 2303 	umull	r2, r3, r2, r3
 800786c:	0c9b      	lsrs	r3, r3, #18
 800786e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007870:	e002      	b.n	8007878 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	3b01      	subs	r3, #1
 8007876:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f9      	bne.n	8007872 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800787e:	f7ff fc17 	bl	80070b0 <HAL_GetTick>
 8007882:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007884:	e018      	b.n	80078b8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007886:	f7ff fc13 	bl	80070b0 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d911      	bls.n	80078b8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007898:	f043 0210 	orr.w	r2, r3, #16
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	f043 0201 	orr.w	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e007      	b.n	80078c8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d1df      	bne.n	8007886 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000004 	.word	0x20000004
 80078d4:	431bde83 	.word	0x431bde83

080078d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d127      	bne.n	8007942 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0201 	bic.w	r2, r2, #1
 8007900:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007902:	f7ff fbd5 	bl	80070b0 <HAL_GetTick>
 8007906:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007908:	e014      	b.n	8007934 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800790a:	f7ff fbd1 	bl	80070b0 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d90d      	bls.n	8007934 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	f043 0210 	orr.w	r2, r3, #16
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	f043 0201 	orr.w	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e007      	b.n	8007944 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b01      	cmp	r3, #1
 8007940:	d0e3      	beq.n	800790a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800795c:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <__NVIC_SetPriorityGrouping+0x44>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007968:	4013      	ands	r3, r2
 800796a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800797c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800797e:	4a04      	ldr	r2, [pc, #16]	; (8007990 <__NVIC_SetPriorityGrouping+0x44>)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	60d3      	str	r3, [r2, #12]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	e000ed00 	.word	0xe000ed00

08007994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007998:	4b04      	ldr	r3, [pc, #16]	; (80079ac <__NVIC_GetPriorityGrouping+0x18>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	0a1b      	lsrs	r3, r3, #8
 800799e:	f003 0307 	and.w	r3, r3, #7
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	e000ed00 	.word	0xe000ed00

080079b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	db0b      	blt.n	80079da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	f003 021f 	and.w	r2, r3, #31
 80079c8:	4906      	ldr	r1, [pc, #24]	; (80079e4 <__NVIC_EnableIRQ+0x34>)
 80079ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	2001      	movs	r0, #1
 80079d2:	fa00 f202 	lsl.w	r2, r0, r2
 80079d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	bc80      	pop	{r7}
 80079e2:	4770      	bx	lr
 80079e4:	e000e100 	.word	0xe000e100

080079e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	6039      	str	r1, [r7, #0]
 80079f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	db0a      	blt.n	8007a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	490c      	ldr	r1, [pc, #48]	; (8007a34 <__NVIC_SetPriority+0x4c>)
 8007a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a06:	0112      	lsls	r2, r2, #4
 8007a08:	b2d2      	uxtb	r2, r2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a10:	e00a      	b.n	8007a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	4908      	ldr	r1, [pc, #32]	; (8007a38 <__NVIC_SetPriority+0x50>)
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	3b04      	subs	r3, #4
 8007a20:	0112      	lsls	r2, r2, #4
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	440b      	add	r3, r1
 8007a26:	761a      	strb	r2, [r3, #24]
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	e000e100 	.word	0xe000e100
 8007a38:	e000ed00 	.word	0xe000ed00

08007a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b089      	sub	sp, #36	; 0x24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f1c3 0307 	rsb	r3, r3, #7
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	bf28      	it	cs
 8007a5a:	2304      	movcs	r3, #4
 8007a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	3304      	adds	r3, #4
 8007a62:	2b06      	cmp	r3, #6
 8007a64:	d902      	bls.n	8007a6c <NVIC_EncodePriority+0x30>
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	3b03      	subs	r3, #3
 8007a6a:	e000      	b.n	8007a6e <NVIC_EncodePriority+0x32>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43da      	mvns	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	401a      	ands	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a84:	f04f 31ff 	mov.w	r1, #4294967295
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8e:	43d9      	mvns	r1, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a94:	4313      	orrs	r3, r2
         );
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3724      	adds	r7, #36	; 0x24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bc80      	pop	{r7}
 8007a9e:	4770      	bx	lr

08007aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ab0:	d301      	bcc.n	8007ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e00f      	b.n	8007ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ab6:	4a0a      	ldr	r2, [pc, #40]	; (8007ae0 <SysTick_Config+0x40>)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007abe:	210f      	movs	r1, #15
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	f7ff ff90 	bl	80079e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <SysTick_Config+0x40>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <SysTick_Config+0x40>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	e000e010 	.word	0xe000e010

08007ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff ff2d 	bl	800794c <__NVIC_SetPriorityGrouping>
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	4603      	mov	r3, r0
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b0c:	f7ff ff42 	bl	8007994 <__NVIC_GetPriorityGrouping>
 8007b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	68b9      	ldr	r1, [r7, #8]
 8007b16:	6978      	ldr	r0, [r7, #20]
 8007b18:	f7ff ff90 	bl	8007a3c <NVIC_EncodePriority>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff ff5f 	bl	80079e8 <__NVIC_SetPriority>
}
 8007b2a:	bf00      	nop
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	4603      	mov	r3, r0
 8007b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff ff35 	bl	80079b0 <__NVIC_EnableIRQ>
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff ffa2 	bl	8007aa0 <SysTick_Config>
 8007b5c:	4603      	mov	r3, r0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d005      	beq.n	8007b8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2204      	movs	r2, #4
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
 8007b88:	e0d6      	b.n	8007d38 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 020e 	bic.w	r2, r2, #14
 8007b98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0201 	bic.w	r2, r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	4b64      	ldr	r3, [pc, #400]	; (8007d44 <HAL_DMA_Abort_IT+0x1dc>)
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d958      	bls.n	8007c68 <HAL_DMA_Abort_IT+0x100>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a63      	ldr	r2, [pc, #396]	; (8007d48 <HAL_DMA_Abort_IT+0x1e0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d04f      	beq.n	8007c60 <HAL_DMA_Abort_IT+0xf8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a61      	ldr	r2, [pc, #388]	; (8007d4c <HAL_DMA_Abort_IT+0x1e4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d048      	beq.n	8007c5c <HAL_DMA_Abort_IT+0xf4>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a60      	ldr	r2, [pc, #384]	; (8007d50 <HAL_DMA_Abort_IT+0x1e8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d040      	beq.n	8007c56 <HAL_DMA_Abort_IT+0xee>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a5e      	ldr	r2, [pc, #376]	; (8007d54 <HAL_DMA_Abort_IT+0x1ec>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d038      	beq.n	8007c50 <HAL_DMA_Abort_IT+0xe8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a5d      	ldr	r2, [pc, #372]	; (8007d58 <HAL_DMA_Abort_IT+0x1f0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d030      	beq.n	8007c4a <HAL_DMA_Abort_IT+0xe2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a5b      	ldr	r2, [pc, #364]	; (8007d5c <HAL_DMA_Abort_IT+0x1f4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d028      	beq.n	8007c44 <HAL_DMA_Abort_IT+0xdc>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a53      	ldr	r2, [pc, #332]	; (8007d44 <HAL_DMA_Abort_IT+0x1dc>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d020      	beq.n	8007c3e <HAL_DMA_Abort_IT+0xd6>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a57      	ldr	r2, [pc, #348]	; (8007d60 <HAL_DMA_Abort_IT+0x1f8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d019      	beq.n	8007c3a <HAL_DMA_Abort_IT+0xd2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a56      	ldr	r2, [pc, #344]	; (8007d64 <HAL_DMA_Abort_IT+0x1fc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d012      	beq.n	8007c36 <HAL_DMA_Abort_IT+0xce>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a54      	ldr	r2, [pc, #336]	; (8007d68 <HAL_DMA_Abort_IT+0x200>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00a      	beq.n	8007c30 <HAL_DMA_Abort_IT+0xc8>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a53      	ldr	r2, [pc, #332]	; (8007d6c <HAL_DMA_Abort_IT+0x204>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d102      	bne.n	8007c2a <HAL_DMA_Abort_IT+0xc2>
 8007c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c28:	e01b      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c2e:	e018      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c34:	e015      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c36:	2310      	movs	r3, #16
 8007c38:	e013      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e011      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c42:	e00e      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c48:	e00b      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c4e:	e008      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c54:	e005      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c5a:	e002      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	e000      	b.n	8007c62 <HAL_DMA_Abort_IT+0xfa>
 8007c60:	2301      	movs	r3, #1
 8007c62:	4a43      	ldr	r2, [pc, #268]	; (8007d70 <HAL_DMA_Abort_IT+0x208>)
 8007c64:	6053      	str	r3, [r2, #4]
 8007c66:	e057      	b.n	8007d18 <HAL_DMA_Abort_IT+0x1b0>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a36      	ldr	r2, [pc, #216]	; (8007d48 <HAL_DMA_Abort_IT+0x1e0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d04f      	beq.n	8007d12 <HAL_DMA_Abort_IT+0x1aa>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a35      	ldr	r2, [pc, #212]	; (8007d4c <HAL_DMA_Abort_IT+0x1e4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d048      	beq.n	8007d0e <HAL_DMA_Abort_IT+0x1a6>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a33      	ldr	r2, [pc, #204]	; (8007d50 <HAL_DMA_Abort_IT+0x1e8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d040      	beq.n	8007d08 <HAL_DMA_Abort_IT+0x1a0>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a32      	ldr	r2, [pc, #200]	; (8007d54 <HAL_DMA_Abort_IT+0x1ec>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d038      	beq.n	8007d02 <HAL_DMA_Abort_IT+0x19a>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a30      	ldr	r2, [pc, #192]	; (8007d58 <HAL_DMA_Abort_IT+0x1f0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d030      	beq.n	8007cfc <HAL_DMA_Abort_IT+0x194>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2f      	ldr	r2, [pc, #188]	; (8007d5c <HAL_DMA_Abort_IT+0x1f4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d028      	beq.n	8007cf6 <HAL_DMA_Abort_IT+0x18e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a26      	ldr	r2, [pc, #152]	; (8007d44 <HAL_DMA_Abort_IT+0x1dc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d020      	beq.n	8007cf0 <HAL_DMA_Abort_IT+0x188>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a2b      	ldr	r2, [pc, #172]	; (8007d60 <HAL_DMA_Abort_IT+0x1f8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d019      	beq.n	8007cec <HAL_DMA_Abort_IT+0x184>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a29      	ldr	r2, [pc, #164]	; (8007d64 <HAL_DMA_Abort_IT+0x1fc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d012      	beq.n	8007ce8 <HAL_DMA_Abort_IT+0x180>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a28      	ldr	r2, [pc, #160]	; (8007d68 <HAL_DMA_Abort_IT+0x200>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00a      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0x17a>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a26      	ldr	r2, [pc, #152]	; (8007d6c <HAL_DMA_Abort_IT+0x204>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d102      	bne.n	8007cdc <HAL_DMA_Abort_IT+0x174>
 8007cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cda:	e01b      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ce0:	e018      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ce6:	e015      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007ce8:	2310      	movs	r3, #16
 8007cea:	e013      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e011      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cf4:	e00e      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007cf6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007cfa:	e00b      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d00:	e008      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d06:	e005      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d0c:	e002      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007d0e:	2310      	movs	r3, #16
 8007d10:	e000      	b.n	8007d14 <HAL_DMA_Abort_IT+0x1ac>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <HAL_DMA_Abort_IT+0x20c>)
 8007d16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	4798      	blx	r3
    } 
  }
  return status;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40020080 	.word	0x40020080
 8007d48:	40020008 	.word	0x40020008
 8007d4c:	4002001c 	.word	0x4002001c
 8007d50:	40020030 	.word	0x40020030
 8007d54:	40020044 	.word	0x40020044
 8007d58:	40020058 	.word	0x40020058
 8007d5c:	4002006c 	.word	0x4002006c
 8007d60:	40020408 	.word	0x40020408
 8007d64:	4002041c 	.word	0x4002041c
 8007d68:	40020430 	.word	0x40020430
 8007d6c:	40020444 	.word	0x40020444
 8007d70:	40020400 	.word	0x40020400
 8007d74:	40020000 	.word	0x40020000

08007d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b08b      	sub	sp, #44	; 0x2c
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d82:	2300      	movs	r3, #0
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007d86:	2300      	movs	r3, #0
 8007d88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d8a:	e133      	b.n	8007ff4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	fa02 f303 	lsl.w	r3, r2, r3
 8007d94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	f040 8122 	bne.w	8007fee <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2b12      	cmp	r3, #18
 8007db0:	d034      	beq.n	8007e1c <HAL_GPIO_Init+0xa4>
 8007db2:	2b12      	cmp	r3, #18
 8007db4:	d80d      	bhi.n	8007dd2 <HAL_GPIO_Init+0x5a>
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d02b      	beq.n	8007e12 <HAL_GPIO_Init+0x9a>
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d804      	bhi.n	8007dc8 <HAL_GPIO_Init+0x50>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d031      	beq.n	8007e26 <HAL_GPIO_Init+0xae>
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d01c      	beq.n	8007e00 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007dc6:	e048      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d043      	beq.n	8007e54 <HAL_GPIO_Init+0xdc>
 8007dcc:	2b11      	cmp	r3, #17
 8007dce:	d01b      	beq.n	8007e08 <HAL_GPIO_Init+0x90>
          break;
 8007dd0:	e043      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007dd2:	4a8f      	ldr	r2, [pc, #572]	; (8008010 <HAL_GPIO_Init+0x298>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d026      	beq.n	8007e26 <HAL_GPIO_Init+0xae>
 8007dd8:	4a8d      	ldr	r2, [pc, #564]	; (8008010 <HAL_GPIO_Init+0x298>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d806      	bhi.n	8007dec <HAL_GPIO_Init+0x74>
 8007dde:	4a8d      	ldr	r2, [pc, #564]	; (8008014 <HAL_GPIO_Init+0x29c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d020      	beq.n	8007e26 <HAL_GPIO_Init+0xae>
 8007de4:	4a8c      	ldr	r2, [pc, #560]	; (8008018 <HAL_GPIO_Init+0x2a0>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01d      	beq.n	8007e26 <HAL_GPIO_Init+0xae>
          break;
 8007dea:	e036      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007dec:	4a8b      	ldr	r2, [pc, #556]	; (800801c <HAL_GPIO_Init+0x2a4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d019      	beq.n	8007e26 <HAL_GPIO_Init+0xae>
 8007df2:	4a8b      	ldr	r2, [pc, #556]	; (8008020 <HAL_GPIO_Init+0x2a8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d016      	beq.n	8007e26 <HAL_GPIO_Init+0xae>
 8007df8:	4a8a      	ldr	r2, [pc, #552]	; (8008024 <HAL_GPIO_Init+0x2ac>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d013      	beq.n	8007e26 <HAL_GPIO_Init+0xae>
          break;
 8007dfe:	e02c      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	623b      	str	r3, [r7, #32]
          break;
 8007e06:	e028      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	623b      	str	r3, [r7, #32]
          break;
 8007e10:	e023      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	3308      	adds	r3, #8
 8007e18:	623b      	str	r3, [r7, #32]
          break;
 8007e1a:	e01e      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	330c      	adds	r3, #12
 8007e22:	623b      	str	r3, [r7, #32]
          break;
 8007e24:	e019      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d102      	bne.n	8007e34 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007e2e:	2304      	movs	r3, #4
 8007e30:	623b      	str	r3, [r7, #32]
          break;
 8007e32:	e012      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d105      	bne.n	8007e48 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	611a      	str	r2, [r3, #16]
          break;
 8007e46:	e008      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007e48:	2308      	movs	r3, #8
 8007e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	615a      	str	r2, [r3, #20]
          break;
 8007e52:	e002      	b.n	8007e5a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007e54:	2300      	movs	r3, #0
 8007e56:	623b      	str	r3, [r7, #32]
          break;
 8007e58:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	2bff      	cmp	r3, #255	; 0xff
 8007e5e:	d801      	bhi.n	8007e64 <HAL_GPIO_Init+0xec>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	e001      	b.n	8007e68 <HAL_GPIO_Init+0xf0>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3304      	adds	r3, #4
 8007e68:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	2bff      	cmp	r3, #255	; 0xff
 8007e6e:	d802      	bhi.n	8007e76 <HAL_GPIO_Init+0xfe>
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	e002      	b.n	8007e7c <HAL_GPIO_Init+0x104>
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	3b08      	subs	r3, #8
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	210f      	movs	r1, #15
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8a:	43db      	mvns	r3, r3
 8007e8c:	401a      	ands	r2, r3
 8007e8e:	6a39      	ldr	r1, [r7, #32]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	fa01 f303 	lsl.w	r3, r1, r3
 8007e96:	431a      	orrs	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 80a2 	beq.w	8007fee <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007eaa:	4b5f      	ldr	r3, [pc, #380]	; (8008028 <HAL_GPIO_Init+0x2b0>)
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	4a5e      	ldr	r2, [pc, #376]	; (8008028 <HAL_GPIO_Init+0x2b0>)
 8007eb0:	f043 0301 	orr.w	r3, r3, #1
 8007eb4:	6193      	str	r3, [r2, #24]
 8007eb6:	4b5c      	ldr	r3, [pc, #368]	; (8008028 <HAL_GPIO_Init+0x2b0>)
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007ec2:	4a5a      	ldr	r2, [pc, #360]	; (800802c <HAL_GPIO_Init+0x2b4>)
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	089b      	lsrs	r3, r3, #2
 8007ec8:	3302      	adds	r3, #2
 8007eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ece:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	220f      	movs	r2, #15
 8007eda:	fa02 f303 	lsl.w	r3, r2, r3
 8007ede:	43db      	mvns	r3, r3
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a51      	ldr	r2, [pc, #324]	; (8008030 <HAL_GPIO_Init+0x2b8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d01f      	beq.n	8007f2e <HAL_GPIO_Init+0x1b6>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a50      	ldr	r2, [pc, #320]	; (8008034 <HAL_GPIO_Init+0x2bc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d019      	beq.n	8007f2a <HAL_GPIO_Init+0x1b2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a4f      	ldr	r2, [pc, #316]	; (8008038 <HAL_GPIO_Init+0x2c0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_GPIO_Init+0x1ae>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a4e      	ldr	r2, [pc, #312]	; (800803c <HAL_GPIO_Init+0x2c4>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00d      	beq.n	8007f22 <HAL_GPIO_Init+0x1aa>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a4d      	ldr	r2, [pc, #308]	; (8008040 <HAL_GPIO_Init+0x2c8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d007      	beq.n	8007f1e <HAL_GPIO_Init+0x1a6>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a4c      	ldr	r2, [pc, #304]	; (8008044 <HAL_GPIO_Init+0x2cc>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d101      	bne.n	8007f1a <HAL_GPIO_Init+0x1a2>
 8007f16:	2305      	movs	r3, #5
 8007f18:	e00a      	b.n	8007f30 <HAL_GPIO_Init+0x1b8>
 8007f1a:	2306      	movs	r3, #6
 8007f1c:	e008      	b.n	8007f30 <HAL_GPIO_Init+0x1b8>
 8007f1e:	2304      	movs	r3, #4
 8007f20:	e006      	b.n	8007f30 <HAL_GPIO_Init+0x1b8>
 8007f22:	2303      	movs	r3, #3
 8007f24:	e004      	b.n	8007f30 <HAL_GPIO_Init+0x1b8>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e002      	b.n	8007f30 <HAL_GPIO_Init+0x1b8>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <HAL_GPIO_Init+0x1b8>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f32:	f002 0203 	and.w	r2, r2, #3
 8007f36:	0092      	lsls	r2, r2, #2
 8007f38:	4093      	lsls	r3, r2
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007f40:	493a      	ldr	r1, [pc, #232]	; (800802c <HAL_GPIO_Init+0x2b4>)
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	089b      	lsrs	r3, r3, #2
 8007f46:	3302      	adds	r3, #2
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d006      	beq.n	8007f68 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007f5a:	4b3b      	ldr	r3, [pc, #236]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	493a      	ldr	r1, [pc, #232]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	600b      	str	r3, [r1, #0]
 8007f66:	e006      	b.n	8007f76 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007f68:	4b37      	ldr	r3, [pc, #220]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	4935      	ldr	r1, [pc, #212]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007f72:	4013      	ands	r3, r2
 8007f74:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d006      	beq.n	8007f90 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007f82:	4b31      	ldr	r3, [pc, #196]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	4930      	ldr	r1, [pc, #192]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	604b      	str	r3, [r1, #4]
 8007f8e:	e006      	b.n	8007f9e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007f90:	4b2d      	ldr	r3, [pc, #180]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	43db      	mvns	r3, r3
 8007f98:	492b      	ldr	r1, [pc, #172]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d006      	beq.n	8007fb8 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007faa:	4b27      	ldr	r3, [pc, #156]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	4926      	ldr	r1, [pc, #152]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	608b      	str	r3, [r1, #8]
 8007fb6:	e006      	b.n	8007fc6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007fb8:	4b23      	ldr	r3, [pc, #140]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	43db      	mvns	r3, r3
 8007fc0:	4921      	ldr	r1, [pc, #132]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d006      	beq.n	8007fe0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007fd2:	4b1d      	ldr	r3, [pc, #116]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	491c      	ldr	r1, [pc, #112]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60cb      	str	r3, [r1, #12]
 8007fde:	e006      	b.n	8007fee <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007fe0:	4b19      	ldr	r3, [pc, #100]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	43db      	mvns	r3, r3
 8007fe8:	4917      	ldr	r1, [pc, #92]	; (8008048 <HAL_GPIO_Init+0x2d0>)
 8007fea:	4013      	ands	r3, r2
 8007fec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f47f aec4 	bne.w	8007d8c <HAL_GPIO_Init+0x14>
  }
}
 8008004:	bf00      	nop
 8008006:	372c      	adds	r7, #44	; 0x2c
 8008008:	46bd      	mov	sp, r7
 800800a:	bc80      	pop	{r7}
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	10210000 	.word	0x10210000
 8008014:	10110000 	.word	0x10110000
 8008018:	10120000 	.word	0x10120000
 800801c:	10310000 	.word	0x10310000
 8008020:	10320000 	.word	0x10320000
 8008024:	10220000 	.word	0x10220000
 8008028:	40021000 	.word	0x40021000
 800802c:	40010000 	.word	0x40010000
 8008030:	40010800 	.word	0x40010800
 8008034:	40010c00 	.word	0x40010c00
 8008038:	40011000 	.word	0x40011000
 800803c:	40011400 	.word	0x40011400
 8008040:	40011800 	.word	0x40011800
 8008044:	40011c00 	.word	0x40011c00
 8008048:	40010400 	.word	0x40010400

0800804c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e26c      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 8087 	beq.w	800817a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800806c:	4b92      	ldr	r3, [pc, #584]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f003 030c 	and.w	r3, r3, #12
 8008074:	2b04      	cmp	r3, #4
 8008076:	d00c      	beq.n	8008092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008078:	4b8f      	ldr	r3, [pc, #572]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f003 030c 	and.w	r3, r3, #12
 8008080:	2b08      	cmp	r3, #8
 8008082:	d112      	bne.n	80080aa <HAL_RCC_OscConfig+0x5e>
 8008084:	4b8c      	ldr	r3, [pc, #560]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008090:	d10b      	bne.n	80080aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008092:	4b89      	ldr	r3, [pc, #548]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d06c      	beq.n	8008178 <HAL_RCC_OscConfig+0x12c>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d168      	bne.n	8008178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e246      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b2:	d106      	bne.n	80080c2 <HAL_RCC_OscConfig+0x76>
 80080b4:	4b80      	ldr	r3, [pc, #512]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a7f      	ldr	r2, [pc, #508]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80080ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	e02e      	b.n	8008120 <HAL_RCC_OscConfig+0xd4>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10c      	bne.n	80080e4 <HAL_RCC_OscConfig+0x98>
 80080ca:	4b7b      	ldr	r3, [pc, #492]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a7a      	ldr	r2, [pc, #488]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80080d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	4b78      	ldr	r3, [pc, #480]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a77      	ldr	r2, [pc, #476]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80080dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	e01d      	b.n	8008120 <HAL_RCC_OscConfig+0xd4>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080ec:	d10c      	bne.n	8008108 <HAL_RCC_OscConfig+0xbc>
 80080ee:	4b72      	ldr	r3, [pc, #456]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a71      	ldr	r2, [pc, #452]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80080f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	4b6f      	ldr	r3, [pc, #444]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a6e      	ldr	r2, [pc, #440]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	e00b      	b.n	8008120 <HAL_RCC_OscConfig+0xd4>
 8008108:	4b6b      	ldr	r3, [pc, #428]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a6a      	ldr	r2, [pc, #424]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 800810e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	4b68      	ldr	r3, [pc, #416]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a67      	ldr	r2, [pc, #412]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 800811a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800811e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d013      	beq.n	8008150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008128:	f7fe ffc2 	bl	80070b0 <HAL_GetTick>
 800812c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008130:	f7fe ffbe 	bl	80070b0 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b64      	cmp	r3, #100	; 0x64
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e1fa      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008142:	4b5d      	ldr	r3, [pc, #372]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0xe4>
 800814e:	e014      	b.n	800817a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008150:	f7fe ffae 	bl	80070b0 <HAL_GetTick>
 8008154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008158:	f7fe ffaa 	bl	80070b0 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b64      	cmp	r3, #100	; 0x64
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e1e6      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800816a:	4b53      	ldr	r3, [pc, #332]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f0      	bne.n	8008158 <HAL_RCC_OscConfig+0x10c>
 8008176:	e000      	b.n	800817a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d063      	beq.n	800824e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008186:	4b4c      	ldr	r3, [pc, #304]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f003 030c 	and.w	r3, r3, #12
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00b      	beq.n	80081aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008192:	4b49      	ldr	r3, [pc, #292]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f003 030c 	and.w	r3, r3, #12
 800819a:	2b08      	cmp	r3, #8
 800819c:	d11c      	bne.n	80081d8 <HAL_RCC_OscConfig+0x18c>
 800819e:	4b46      	ldr	r3, [pc, #280]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d116      	bne.n	80081d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081aa:	4b43      	ldr	r3, [pc, #268]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <HAL_RCC_OscConfig+0x176>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d001      	beq.n	80081c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e1ba      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081c2:	4b3d      	ldr	r3, [pc, #244]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	4939      	ldr	r1, [pc, #228]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081d6:	e03a      	b.n	800824e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d020      	beq.n	8008222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081e0:	4b36      	ldr	r3, [pc, #216]	; (80082bc <HAL_RCC_OscConfig+0x270>)
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e6:	f7fe ff63 	bl	80070b0 <HAL_GetTick>
 80081ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ec:	e008      	b.n	8008200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ee:	f7fe ff5f 	bl	80070b0 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e19b      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008200:	4b2d      	ldr	r3, [pc, #180]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0f0      	beq.n	80081ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800820c:	4b2a      	ldr	r3, [pc, #168]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	4927      	ldr	r1, [pc, #156]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 800821c:	4313      	orrs	r3, r2
 800821e:	600b      	str	r3, [r1, #0]
 8008220:	e015      	b.n	800824e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008222:	4b26      	ldr	r3, [pc, #152]	; (80082bc <HAL_RCC_OscConfig+0x270>)
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008228:	f7fe ff42 	bl	80070b0 <HAL_GetTick>
 800822c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800822e:	e008      	b.n	8008242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008230:	f7fe ff3e 	bl	80070b0 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d901      	bls.n	8008242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e17a      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008242:	4b1d      	ldr	r3, [pc, #116]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f0      	bne.n	8008230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0308 	and.w	r3, r3, #8
 8008256:	2b00      	cmp	r3, #0
 8008258:	d03a      	beq.n	80082d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d019      	beq.n	8008296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008262:	4b17      	ldr	r3, [pc, #92]	; (80082c0 <HAL_RCC_OscConfig+0x274>)
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008268:	f7fe ff22 	bl	80070b0 <HAL_GetTick>
 800826c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008270:	f7fe ff1e 	bl	80070b0 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e15a      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008282:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <HAL_RCC_OscConfig+0x26c>)
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0f0      	beq.n	8008270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800828e:	2001      	movs	r0, #1
 8008290:	f000 fada 	bl	8008848 <RCC_Delay>
 8008294:	e01c      	b.n	80082d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008296:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <HAL_RCC_OscConfig+0x274>)
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800829c:	f7fe ff08 	bl	80070b0 <HAL_GetTick>
 80082a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082a2:	e00f      	b.n	80082c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082a4:	f7fe ff04 	bl	80070b0 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d908      	bls.n	80082c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e140      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
 80082b6:	bf00      	nop
 80082b8:	40021000 	.word	0x40021000
 80082bc:	42420000 	.word	0x42420000
 80082c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082c4:	4b9e      	ldr	r3, [pc, #632]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e9      	bne.n	80082a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 80a6 	beq.w	800842a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082de:	2300      	movs	r3, #0
 80082e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082e2:	4b97      	ldr	r3, [pc, #604]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10d      	bne.n	800830a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ee:	4b94      	ldr	r3, [pc, #592]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	4a93      	ldr	r2, [pc, #588]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80082f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082f8:	61d3      	str	r3, [r2, #28]
 80082fa:	4b91      	ldr	r3, [pc, #580]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008302:	60bb      	str	r3, [r7, #8]
 8008304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008306:	2301      	movs	r3, #1
 8008308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800830a:	4b8e      	ldr	r3, [pc, #568]	; (8008544 <HAL_RCC_OscConfig+0x4f8>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008312:	2b00      	cmp	r3, #0
 8008314:	d118      	bne.n	8008348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008316:	4b8b      	ldr	r3, [pc, #556]	; (8008544 <HAL_RCC_OscConfig+0x4f8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a8a      	ldr	r2, [pc, #552]	; (8008544 <HAL_RCC_OscConfig+0x4f8>)
 800831c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008322:	f7fe fec5 	bl	80070b0 <HAL_GetTick>
 8008326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008328:	e008      	b.n	800833c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800832a:	f7fe fec1 	bl	80070b0 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	2b64      	cmp	r3, #100	; 0x64
 8008336:	d901      	bls.n	800833c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e0fd      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800833c:	4b81      	ldr	r3, [pc, #516]	; (8008544 <HAL_RCC_OscConfig+0x4f8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008344:	2b00      	cmp	r3, #0
 8008346:	d0f0      	beq.n	800832a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d106      	bne.n	800835e <HAL_RCC_OscConfig+0x312>
 8008350:	4b7b      	ldr	r3, [pc, #492]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	4a7a      	ldr	r2, [pc, #488]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	6213      	str	r3, [r2, #32]
 800835c:	e02d      	b.n	80083ba <HAL_RCC_OscConfig+0x36e>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10c      	bne.n	8008380 <HAL_RCC_OscConfig+0x334>
 8008366:	4b76      	ldr	r3, [pc, #472]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	4a75      	ldr	r2, [pc, #468]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 800836c:	f023 0301 	bic.w	r3, r3, #1
 8008370:	6213      	str	r3, [r2, #32]
 8008372:	4b73      	ldr	r3, [pc, #460]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	4a72      	ldr	r2, [pc, #456]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008378:	f023 0304 	bic.w	r3, r3, #4
 800837c:	6213      	str	r3, [r2, #32]
 800837e:	e01c      	b.n	80083ba <HAL_RCC_OscConfig+0x36e>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b05      	cmp	r3, #5
 8008386:	d10c      	bne.n	80083a2 <HAL_RCC_OscConfig+0x356>
 8008388:	4b6d      	ldr	r3, [pc, #436]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	4a6c      	ldr	r2, [pc, #432]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 800838e:	f043 0304 	orr.w	r3, r3, #4
 8008392:	6213      	str	r3, [r2, #32]
 8008394:	4b6a      	ldr	r3, [pc, #424]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	4a69      	ldr	r2, [pc, #420]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	6213      	str	r3, [r2, #32]
 80083a0:	e00b      	b.n	80083ba <HAL_RCC_OscConfig+0x36e>
 80083a2:	4b67      	ldr	r3, [pc, #412]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	4a66      	ldr	r2, [pc, #408]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80083a8:	f023 0301 	bic.w	r3, r3, #1
 80083ac:	6213      	str	r3, [r2, #32]
 80083ae:	4b64      	ldr	r3, [pc, #400]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	4a63      	ldr	r2, [pc, #396]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80083b4:	f023 0304 	bic.w	r3, r3, #4
 80083b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d015      	beq.n	80083ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083c2:	f7fe fe75 	bl	80070b0 <HAL_GetTick>
 80083c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083c8:	e00a      	b.n	80083e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ca:	f7fe fe71 	bl	80070b0 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d8:	4293      	cmp	r3, r2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e0ab      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083e0:	4b57      	ldr	r3, [pc, #348]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0ee      	beq.n	80083ca <HAL_RCC_OscConfig+0x37e>
 80083ec:	e014      	b.n	8008418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083ee:	f7fe fe5f 	bl	80070b0 <HAL_GetTick>
 80083f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083f4:	e00a      	b.n	800840c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083f6:	f7fe fe5b 	bl	80070b0 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	f241 3288 	movw	r2, #5000	; 0x1388
 8008404:	4293      	cmp	r3, r2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e095      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800840c:	4b4c      	ldr	r3, [pc, #304]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1ee      	bne.n	80083f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008418:	7dfb      	ldrb	r3, [r7, #23]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d105      	bne.n	800842a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800841e:	4b48      	ldr	r3, [pc, #288]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	4a47      	ldr	r2, [pc, #284]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8081 	beq.w	8008536 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008434:	4b42      	ldr	r3, [pc, #264]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f003 030c 	and.w	r3, r3, #12
 800843c:	2b08      	cmp	r3, #8
 800843e:	d061      	beq.n	8008504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d146      	bne.n	80084d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008448:	4b3f      	ldr	r3, [pc, #252]	; (8008548 <HAL_RCC_OscConfig+0x4fc>)
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800844e:	f7fe fe2f 	bl	80070b0 <HAL_GetTick>
 8008452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008456:	f7fe fe2b 	bl	80070b0 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e067      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008468:	4b35      	ldr	r3, [pc, #212]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f0      	bne.n	8008456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847c:	d108      	bne.n	8008490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800847e:	4b30      	ldr	r3, [pc, #192]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	492d      	ldr	r1, [pc, #180]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 800848c:	4313      	orrs	r3, r2
 800848e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008490:	4b2b      	ldr	r3, [pc, #172]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a19      	ldr	r1, [r3, #32]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	430b      	orrs	r3, r1
 80084a2:	4927      	ldr	r1, [pc, #156]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084a8:	4b27      	ldr	r3, [pc, #156]	; (8008548 <HAL_RCC_OscConfig+0x4fc>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ae:	f7fe fdff 	bl	80070b0 <HAL_GetTick>
 80084b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084b4:	e008      	b.n	80084c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084b6:	f7fe fdfb 	bl	80070b0 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d901      	bls.n	80084c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e037      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084c8:	4b1d      	ldr	r3, [pc, #116]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d0f0      	beq.n	80084b6 <HAL_RCC_OscConfig+0x46a>
 80084d4:	e02f      	b.n	8008536 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d6:	4b1c      	ldr	r3, [pc, #112]	; (8008548 <HAL_RCC_OscConfig+0x4fc>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084dc:	f7fe fde8 	bl	80070b0 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084e4:	f7fe fde4 	bl	80070b0 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e020      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x498>
 8008502:	e018      	b.n	8008536 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e013      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <HAL_RCC_OscConfig+0x4f4>)
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	429a      	cmp	r2, r3
 8008522:	d106      	bne.n	8008532 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800852e:	429a      	cmp	r2, r3
 8008530:	d001      	beq.n	8008536 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	40021000 	.word	0x40021000
 8008544:	40007000 	.word	0x40007000
 8008548:	42420060 	.word	0x42420060

0800854c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e0d0      	b.n	8008702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008560:	4b6a      	ldr	r3, [pc, #424]	; (800870c <HAL_RCC_ClockConfig+0x1c0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	d910      	bls.n	8008590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800856e:	4b67      	ldr	r3, [pc, #412]	; (800870c <HAL_RCC_ClockConfig+0x1c0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f023 0207 	bic.w	r2, r3, #7
 8008576:	4965      	ldr	r1, [pc, #404]	; (800870c <HAL_RCC_ClockConfig+0x1c0>)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	4313      	orrs	r3, r2
 800857c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800857e:	4b63      	ldr	r3, [pc, #396]	; (800870c <HAL_RCC_ClockConfig+0x1c0>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	429a      	cmp	r2, r3
 800858a:	d001      	beq.n	8008590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e0b8      	b.n	8008702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d020      	beq.n	80085de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085a8:	4b59      	ldr	r3, [pc, #356]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	4a58      	ldr	r2, [pc, #352]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80085ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0308 	and.w	r3, r3, #8
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085c0:	4b53      	ldr	r3, [pc, #332]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4a52      	ldr	r2, [pc, #328]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80085c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80085ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085cc:	4b50      	ldr	r3, [pc, #320]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	494d      	ldr	r1, [pc, #308]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d040      	beq.n	800866c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d107      	bne.n	8008602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085f2:	4b47      	ldr	r3, [pc, #284]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d115      	bne.n	800862a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e07f      	b.n	8008702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d107      	bne.n	800861a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800860a:	4b41      	ldr	r3, [pc, #260]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d109      	bne.n	800862a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e073      	b.n	8008702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800861a:	4b3d      	ldr	r3, [pc, #244]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e06b      	b.n	8008702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800862a:	4b39      	ldr	r3, [pc, #228]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f023 0203 	bic.w	r2, r3, #3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	4936      	ldr	r1, [pc, #216]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 8008638:	4313      	orrs	r3, r2
 800863a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800863c:	f7fe fd38 	bl	80070b0 <HAL_GetTick>
 8008640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008642:	e00a      	b.n	800865a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008644:	f7fe fd34 	bl	80070b0 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008652:	4293      	cmp	r3, r2
 8008654:	d901      	bls.n	800865a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e053      	b.n	8008702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800865a:	4b2d      	ldr	r3, [pc, #180]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f003 020c 	and.w	r2, r3, #12
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	429a      	cmp	r2, r3
 800866a:	d1eb      	bne.n	8008644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800866c:	4b27      	ldr	r3, [pc, #156]	; (800870c <HAL_RCC_ClockConfig+0x1c0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0307 	and.w	r3, r3, #7
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d210      	bcs.n	800869c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <HAL_RCC_ClockConfig+0x1c0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f023 0207 	bic.w	r2, r3, #7
 8008682:	4922      	ldr	r1, [pc, #136]	; (800870c <HAL_RCC_ClockConfig+0x1c0>)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	4313      	orrs	r3, r2
 8008688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800868a:	4b20      	ldr	r3, [pc, #128]	; (800870c <HAL_RCC_ClockConfig+0x1c0>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	429a      	cmp	r2, r3
 8008696:	d001      	beq.n	800869c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e032      	b.n	8008702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d008      	beq.n	80086ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086a8:	4b19      	ldr	r3, [pc, #100]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	4916      	ldr	r1, [pc, #88]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80086c6:	4b12      	ldr	r3, [pc, #72]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	490e      	ldr	r1, [pc, #56]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80086da:	f000 f821 	bl	8008720 <HAL_RCC_GetSysClockFreq>
 80086de:	4601      	mov	r1, r0
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	091b      	lsrs	r3, r3, #4
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	4a0a      	ldr	r2, [pc, #40]	; (8008714 <HAL_RCC_ClockConfig+0x1c8>)
 80086ec:	5cd3      	ldrb	r3, [r2, r3]
 80086ee:	fa21 f303 	lsr.w	r3, r1, r3
 80086f2:	4a09      	ldr	r2, [pc, #36]	; (8008718 <HAL_RCC_ClockConfig+0x1cc>)
 80086f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <HAL_RCC_ClockConfig+0x1d0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fc96 	bl	800702c <HAL_InitTick>

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	40022000 	.word	0x40022000
 8008710:	40021000 	.word	0x40021000
 8008714:	0800cd18 	.word	0x0800cd18
 8008718:	20000004 	.word	0x20000004
 800871c:	20000008 	.word	0x20000008

08008720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008720:	b490      	push	{r4, r7}
 8008722:	b08a      	sub	sp, #40	; 0x28
 8008724:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008726:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008728:	1d3c      	adds	r4, r7, #4
 800872a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800872c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008730:	4b28      	ldr	r3, [pc, #160]	; (80087d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	61fb      	str	r3, [r7, #28]
 800873a:	2300      	movs	r3, #0
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	2300      	movs	r3, #0
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
 8008742:	2300      	movs	r3, #0
 8008744:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800874a:	4b23      	ldr	r3, [pc, #140]	; (80087d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	f003 030c 	and.w	r3, r3, #12
 8008756:	2b04      	cmp	r3, #4
 8008758:	d002      	beq.n	8008760 <HAL_RCC_GetSysClockFreq+0x40>
 800875a:	2b08      	cmp	r3, #8
 800875c:	d003      	beq.n	8008766 <HAL_RCC_GetSysClockFreq+0x46>
 800875e:	e02d      	b.n	80087bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008760:	4b1e      	ldr	r3, [pc, #120]	; (80087dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008762:	623b      	str	r3, [r7, #32]
      break;
 8008764:	e02d      	b.n	80087c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	0c9b      	lsrs	r3, r3, #18
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008772:	4413      	add	r3, r2
 8008774:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008778:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d013      	beq.n	80087ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008784:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	0c5b      	lsrs	r3, r3, #17
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008792:	4413      	add	r3, r2
 8008794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	4a0f      	ldr	r2, [pc, #60]	; (80087dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800879e:	fb02 f203 	mul.w	r2, r2, r3
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
 80087aa:	e004      	b.n	80087b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	4a0c      	ldr	r2, [pc, #48]	; (80087e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80087b0:	fb02 f303 	mul.w	r3, r2, r3
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	623b      	str	r3, [r7, #32]
      break;
 80087ba:	e002      	b.n	80087c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80087bc:	4b07      	ldr	r3, [pc, #28]	; (80087dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80087be:	623b      	str	r3, [r7, #32]
      break;
 80087c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087c2:	6a3b      	ldr	r3, [r7, #32]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3728      	adds	r7, #40	; 0x28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bc90      	pop	{r4, r7}
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	0800b530 	.word	0x0800b530
 80087d4:	0800b540 	.word	0x0800b540
 80087d8:	40021000 	.word	0x40021000
 80087dc:	007a1200 	.word	0x007a1200
 80087e0:	003d0900 	.word	0x003d0900

080087e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087e4:	b480      	push	{r7}
 80087e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087e8:	4b02      	ldr	r3, [pc, #8]	; (80087f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80087ea:	681b      	ldr	r3, [r3, #0]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bc80      	pop	{r7}
 80087f2:	4770      	bx	lr
 80087f4:	20000004 	.word	0x20000004

080087f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80087fc:	f7ff fff2 	bl	80087e4 <HAL_RCC_GetHCLKFreq>
 8008800:	4601      	mov	r1, r0
 8008802:	4b05      	ldr	r3, [pc, #20]	; (8008818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	0a1b      	lsrs	r3, r3, #8
 8008808:	f003 0307 	and.w	r3, r3, #7
 800880c:	4a03      	ldr	r2, [pc, #12]	; (800881c <HAL_RCC_GetPCLK1Freq+0x24>)
 800880e:	5cd3      	ldrb	r3, [r2, r3]
 8008810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008814:	4618      	mov	r0, r3
 8008816:	bd80      	pop	{r7, pc}
 8008818:	40021000 	.word	0x40021000
 800881c:	0800cd28 	.word	0x0800cd28

08008820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008824:	f7ff ffde 	bl	80087e4 <HAL_RCC_GetHCLKFreq>
 8008828:	4601      	mov	r1, r0
 800882a:	4b05      	ldr	r3, [pc, #20]	; (8008840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	0adb      	lsrs	r3, r3, #11
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	4a03      	ldr	r2, [pc, #12]	; (8008844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008836:	5cd3      	ldrb	r3, [r2, r3]
 8008838:	fa21 f303 	lsr.w	r3, r1, r3
}
 800883c:	4618      	mov	r0, r3
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40021000 	.word	0x40021000
 8008844:	0800cd28 	.word	0x0800cd28

08008848 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008850:	4b0a      	ldr	r3, [pc, #40]	; (800887c <RCC_Delay+0x34>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a0a      	ldr	r2, [pc, #40]	; (8008880 <RCC_Delay+0x38>)
 8008856:	fba2 2303 	umull	r2, r3, r2, r3
 800885a:	0a5b      	lsrs	r3, r3, #9
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	fb02 f303 	mul.w	r3, r2, r3
 8008862:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008864:	bf00      	nop
  }
  while (Delay --);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	1e5a      	subs	r2, r3, #1
 800886a:	60fa      	str	r2, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1f9      	bne.n	8008864 <RCC_Delay+0x1c>
}
 8008870:	bf00      	nop
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	bc80      	pop	{r7}
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000004 	.word	0x20000004
 8008880:	10624dd3 	.word	0x10624dd3

08008884 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	613b      	str	r3, [r7, #16]
 8008890:	2300      	movs	r3, #0
 8008892:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d07d      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80088a0:	2300      	movs	r3, #0
 80088a2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088a4:	4b4f      	ldr	r3, [pc, #316]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10d      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088b0:	4b4c      	ldr	r3, [pc, #304]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	4a4b      	ldr	r2, [pc, #300]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ba:	61d3      	str	r3, [r2, #28]
 80088bc:	4b49      	ldr	r3, [pc, #292]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c4:	60bb      	str	r3, [r7, #8]
 80088c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088c8:	2301      	movs	r3, #1
 80088ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088cc:	4b46      	ldr	r3, [pc, #280]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d118      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088d8:	4b43      	ldr	r3, [pc, #268]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a42      	ldr	r2, [pc, #264]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088e4:	f7fe fbe4 	bl	80070b0 <HAL_GetTick>
 80088e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ea:	e008      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ec:	f7fe fbe0 	bl	80070b0 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	2b64      	cmp	r3, #100	; 0x64
 80088f8:	d901      	bls.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e06d      	b.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088fe:	4b3a      	ldr	r3, [pc, #232]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f0      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800890a:	4b36      	ldr	r3, [pc, #216]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008912:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d02e      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	429a      	cmp	r2, r3
 8008926:	d027      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008928:	4b2e      	ldr	r3, [pc, #184]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008930:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008932:	4b2e      	ldr	r3, [pc, #184]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008934:	2201      	movs	r2, #1
 8008936:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008938:	4b2c      	ldr	r3, [pc, #176]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800893e:	4a29      	ldr	r2, [pc, #164]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d014      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800894e:	f7fe fbaf 	bl	80070b0 <HAL_GetTick>
 8008952:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008954:	e00a      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008956:	f7fe fbab 	bl	80070b0 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	f241 3288 	movw	r2, #5000	; 0x1388
 8008964:	4293      	cmp	r3, r2
 8008966:	d901      	bls.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e036      	b.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800896c:	4b1d      	ldr	r3, [pc, #116]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0ee      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008978:	4b1a      	ldr	r3, [pc, #104]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	4917      	ldr	r1, [pc, #92]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008986:	4313      	orrs	r3, r2
 8008988:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d105      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008990:	4b14      	ldr	r3, [pc, #80]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	4a13      	ldr	r2, [pc, #76]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800899a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d008      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089a8:	4b0e      	ldr	r3, [pc, #56]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	490b      	ldr	r1, [pc, #44]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0310 	and.w	r3, r3, #16
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d008      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089c6:	4b07      	ldr	r3, [pc, #28]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	4904      	ldr	r1, [pc, #16]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	40021000 	.word	0x40021000
 80089e8:	40007000 	.word	0x40007000
 80089ec:	42420440 	.word	0x42420440

080089f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089f0:	b590      	push	{r4, r7, lr}
 80089f2:	b08d      	sub	sp, #52	; 0x34
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80089f8:	4b6b      	ldr	r3, [pc, #428]	; (8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80089fa:	f107 040c 	add.w	r4, r7, #12
 80089fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008a04:	4b69      	ldr	r3, [pc, #420]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a0e:	2300      	movs	r3, #0
 8008a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a12:	2300      	movs	r3, #0
 8008a14:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	2b0f      	cmp	r3, #15
 8008a24:	f200 80b6 	bhi.w	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008b13 	.word	0x08008b13
 8008a34:	08008b79 	.word	0x08008b79
 8008a38:	08008b95 	.word	0x08008b95
 8008a3c:	08008b03 	.word	0x08008b03
 8008a40:	08008b95 	.word	0x08008b95
 8008a44:	08008b95 	.word	0x08008b95
 8008a48:	08008b95 	.word	0x08008b95
 8008a4c:	08008b0b 	.word	0x08008b0b
 8008a50:	08008b95 	.word	0x08008b95
 8008a54:	08008b95 	.word	0x08008b95
 8008a58:	08008b95 	.word	0x08008b95
 8008a5c:	08008b95 	.word	0x08008b95
 8008a60:	08008b95 	.word	0x08008b95
 8008a64:	08008b95 	.word	0x08008b95
 8008a68:	08008b95 	.word	0x08008b95
 8008a6c:	08008a71 	.word	0x08008a71
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008a70:	4b4f      	ldr	r3, [pc, #316]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008a76:	4b4e      	ldr	r3, [pc, #312]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 808a 	beq.w	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	0c9b      	lsrs	r3, r3, #18
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008a90:	4413      	add	r3, r2
 8008a92:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008a96:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d018      	beq.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008aa2:	4b43      	ldr	r3, [pc, #268]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	0c5b      	lsrs	r3, r3, #17
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00d      	beq.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008ac2:	4a3c      	ldr	r2, [pc, #240]	; (8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	fb02 f303 	mul.w	r3, r2, r3
 8008ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad2:	e004      	b.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	4a38      	ldr	r2, [pc, #224]	; (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8008ad8:	fb02 f303 	mul.w	r3, r2, r3
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008ade:	4b34      	ldr	r3, [pc, #208]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aea:	d102      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008af0:	e052      	b.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	4a31      	ldr	r2, [pc, #196]	; (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8008af8:	fba2 2303 	umull	r2, r3, r2, r3
 8008afc:	085b      	lsrs	r3, r3, #1
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008b00:	e04a      	b.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008b02:	f7ff fe0d 	bl	8008720 <HAL_RCC_GetSysClockFreq>
 8008b06:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008b08:	e049      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008b0a:	f7ff fe09 	bl	8008720 <HAL_RCC_GetSysClockFreq>
 8008b0e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008b10:	e045      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008b12:	4b27      	ldr	r3, [pc, #156]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b22:	d108      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8008b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b34:	e01f      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b40:	d109      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008b42:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8008b4e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b54:	e00f      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b60:	d11c      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008b62:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d016      	beq.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8008b6e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008b72:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008b74:	e012      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008b76:	e011      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008b78:	f7ff fe52 	bl	8008820 <HAL_RCC_GetPCLK2Freq>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	0b9b      	lsrs	r3, r3, #14
 8008b84:	f003 0303 	and.w	r3, r3, #3
 8008b88:	3301      	adds	r3, #1
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008b92:	e004      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8008b94:	bf00      	nop
 8008b96:	e002      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e000      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8008b9c:	bf00      	nop
    }
  }
  return (frequency);
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3734      	adds	r7, #52	; 0x34
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd90      	pop	{r4, r7, pc}
 8008ba8:	0800b544 	.word	0x0800b544
 8008bac:	0800b554 	.word	0x0800b554
 8008bb0:	40021000 	.word	0x40021000
 8008bb4:	007a1200 	.word	0x007a1200
 8008bb8:	003d0900 	.word	0x003d0900
 8008bbc:	aaaaaaab 	.word	0xaaaaaaab

08008bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e03f      	b.n	8008c52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fe f934 	bl	8006e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2224      	movs	r2, #36	; 0x24
 8008bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68da      	ldr	r2, [r3, #12]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fb83 	bl	8009310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691a      	ldr	r2, [r3, #16]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	695a      	ldr	r2, [r3, #20]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b08a      	sub	sp, #40	; 0x28
 8008c5e:	af02      	add	r7, sp, #8
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	603b      	str	r3, [r7, #0]
 8008c66:	4613      	mov	r3, r2
 8008c68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d17c      	bne.n	8008d74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <HAL_UART_Transmit+0x2c>
 8008c80:	88fb      	ldrh	r3, [r7, #6]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e075      	b.n	8008d76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d101      	bne.n	8008c98 <HAL_UART_Transmit+0x3e>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e06e      	b.n	8008d76 <HAL_UART_Transmit+0x11c>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2221      	movs	r2, #33	; 0x21
 8008caa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008cae:	f7fe f9ff 	bl	80070b0 <HAL_GetTick>
 8008cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	88fa      	ldrh	r2, [r7, #6]
 8008cb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	88fa      	ldrh	r2, [r7, #6]
 8008cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc8:	d108      	bne.n	8008cdc <HAL_UART_Transmit+0x82>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d104      	bne.n	8008cdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	61bb      	str	r3, [r7, #24]
 8008cda:	e003      	b.n	8008ce4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008cec:	e02a      	b.n	8008d44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2180      	movs	r1, #128	; 0x80
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f9a7 	bl	800904c <UART_WaitOnFlagUntilTimeout>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e036      	b.n	8008d76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10b      	bne.n	8008d26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	3302      	adds	r3, #2
 8008d22:	61bb      	str	r3, [r7, #24]
 8008d24:	e007      	b.n	8008d36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	781a      	ldrb	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	3301      	adds	r3, #1
 8008d34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1cf      	bne.n	8008cee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2200      	movs	r2, #0
 8008d56:	2140      	movs	r1, #64	; 0x40
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f977 	bl	800904c <UART_WaitOnFlagUntilTimeout>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e006      	b.n	8008d76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	e000      	b.n	8008d76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d74:	2302      	movs	r3, #2
  }
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3720      	adds	r7, #32
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d140      	bne.n	8008e1a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <HAL_UART_Receive_IT+0x26>
 8008d9e:	88fb      	ldrh	r3, [r7, #6]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e039      	b.n	8008e1c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d101      	bne.n	8008db6 <HAL_UART_Receive_IT+0x38>
 8008db2:	2302      	movs	r3, #2
 8008db4:	e032      	b.n	8008e1c <HAL_UART_Receive_IT+0x9e>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	88fa      	ldrh	r2, [r7, #6]
 8008dc8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	88fa      	ldrh	r2, [r7, #6]
 8008dce:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2222      	movs	r2, #34	; 0x22
 8008dda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008df4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	695a      	ldr	r2, [r3, #20]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0201 	orr.w	r2, r2, #1
 8008e04:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0220 	orr.w	r2, r2, #32
 8008e14:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	e000      	b.n	8008e1c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008e1a:	2302      	movs	r3, #2
  }
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr
	...

08008e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	f003 030f 	and.w	r3, r3, #15
 8008e56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10d      	bne.n	8008e7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	f003 0320 	and.w	r3, r3, #32
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d008      	beq.n	8008e7a <HAL_UART_IRQHandler+0x52>
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f9cc 	bl	8009210 <UART_Receive_IT>
      return;
 8008e78:	e0d1      	b.n	800901e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 80b0 	beq.w	8008fe2 <HAL_UART_IRQHandler+0x1ba>
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d105      	bne.n	8008e98 <HAL_UART_IRQHandler+0x70>
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80a5 	beq.w	8008fe2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <HAL_UART_IRQHandler+0x90>
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb0:	f043 0201 	orr.w	r2, r3, #1
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <HAL_UART_IRQHandler+0xb0>
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed0:	f043 0202 	orr.w	r2, r3, #2
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <HAL_UART_IRQHandler+0xd0>
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d005      	beq.n	8008ef8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef0:	f043 0204 	orr.w	r2, r3, #4
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	f003 0308 	and.w	r3, r3, #8
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00f      	beq.n	8008f22 <HAL_UART_IRQHandler+0xfa>
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d104      	bne.n	8008f16 <HAL_UART_IRQHandler+0xee>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1a:	f043 0208 	orr.w	r2, r3, #8
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d078      	beq.n	800901c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	f003 0320 	and.w	r3, r3, #32
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <HAL_UART_IRQHandler+0x11c>
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f966 	bl	8009210 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	bf14      	ite	ne
 8008f52:	2301      	movne	r3, #1
 8008f54:	2300      	moveq	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d102      	bne.n	8008f6c <HAL_UART_IRQHandler+0x144>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d031      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f8b7 	bl	80090e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d023      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	695a      	ldr	r2, [r3, #20]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f8e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d013      	beq.n	8008fc0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9c:	4a21      	ldr	r2, [pc, #132]	; (8009024 <HAL_UART_IRQHandler+0x1fc>)
 8008f9e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe fddf 	bl	8007b68 <HAL_DMA_Abort_IT>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d016      	beq.n	8008fde <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008fba:	4610      	mov	r0, r2
 8008fbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fbe:	e00e      	b.n	8008fde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f83a 	bl	800903a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc6:	e00a      	b.n	8008fde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f836 	bl	800903a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fce:	e006      	b.n	8008fde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f832 	bl	800903a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008fdc:	e01e      	b.n	800901c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fde:	bf00      	nop
    return;
 8008fe0:	e01c      	b.n	800901c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d008      	beq.n	8008ffe <HAL_UART_IRQHandler+0x1d6>
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f8a3 	bl	8009142 <UART_Transmit_IT>
    return;
 8008ffc:	e00f      	b.n	800901e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <HAL_UART_IRQHandler+0x1f6>
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f8e4 	bl	80091e0 <UART_EndTransmit_IT>
    return;
 8009018:	bf00      	nop
 800901a:	e000      	b.n	800901e <HAL_UART_IRQHandler+0x1f6>
    return;
 800901c:	bf00      	nop
  }
}
 800901e:	3720      	adds	r7, #32
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	0800911b 	.word	0x0800911b

08009028 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr

0800903a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr

0800904c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	4613      	mov	r3, r2
 800905a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800905c:	e02c      	b.n	80090b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009064:	d028      	beq.n	80090b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d007      	beq.n	800907c <UART_WaitOnFlagUntilTimeout+0x30>
 800906c:	f7fe f820 	bl	80070b0 <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	429a      	cmp	r2, r3
 800907a:	d21d      	bcs.n	80090b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800908a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695a      	ldr	r2, [r3, #20]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0201 	bic.w	r2, r2, #1
 800909a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2220      	movs	r2, #32
 80090a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e00f      	b.n	80090d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	4013      	ands	r3, r2
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	bf0c      	ite	eq
 80090c8:	2301      	moveq	r3, #1
 80090ca:	2300      	movne	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	461a      	mov	r2, r3
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d0c3      	beq.n	800905e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	695a      	ldr	r2, [r3, #20]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0201 	bic.w	r2, r2, #1
 8009106:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	bc80      	pop	{r7}
 8009118:	4770      	bx	lr

0800911a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f7ff ff80 	bl	800903a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b21      	cmp	r3, #33	; 0x21
 8009154:	d13e      	bne.n	80091d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800915e:	d114      	bne.n	800918a <UART_Transmit_IT+0x48>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d110      	bne.n	800918a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800917c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	1c9a      	adds	r2, r3, #2
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	621a      	str	r2, [r3, #32]
 8009188:	e008      	b.n	800919c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	1c59      	adds	r1, r3, #1
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6211      	str	r1, [r2, #32]
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	4619      	mov	r1, r3
 80091aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10f      	bne.n	80091d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	e000      	b.n	80091d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091d4:	2302      	movs	r3, #2
  }
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	bc80      	pop	{r7}
 80091de:	4770      	bx	lr

080091e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff ff11 	bl	8009028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b22      	cmp	r3, #34	; 0x22
 8009222:	d170      	bne.n	8009306 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922c:	d117      	bne.n	800925e <UART_Receive_IT+0x4e>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d113      	bne.n	800925e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924c:	b29a      	uxth	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	1c9a      	adds	r2, r3, #2
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	629a      	str	r2, [r3, #40]	; 0x28
 800925c:	e026      	b.n	80092ac <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009270:	d007      	beq.n	8009282 <UART_Receive_IT+0x72>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10a      	bne.n	8009290 <UART_Receive_IT+0x80>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	b2da      	uxtb	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	701a      	strb	r2, [r3, #0]
 800928e:	e008      	b.n	80092a2 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929c:	b2da      	uxtb	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	4619      	mov	r1, r3
 80092ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d120      	bne.n	8009302 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0220 	bic.w	r2, r2, #32
 80092ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	695a      	ldr	r2, [r3, #20]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 0201 	bic.w	r2, r2, #1
 80092ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7fd f905 	bl	8006508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	e002      	b.n	8009308 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	e000      	b.n	8009308 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8009306:	2302      	movs	r3, #2
  }
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	431a      	orrs	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	4313      	orrs	r3, r2
 800933e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800934a:	f023 030c 	bic.w	r3, r3, #12
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	6812      	ldr	r2, [r2, #0]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	430b      	orrs	r3, r1
 8009356:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	699a      	ldr	r2, [r3, #24]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a2c      	ldr	r2, [pc, #176]	; (8009424 <UART_SetConfig+0x114>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d103      	bne.n	8009380 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009378:	f7ff fa52 	bl	8008820 <HAL_RCC_GetPCLK2Freq>
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	e002      	b.n	8009386 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009380:	f7ff fa3a 	bl	80087f8 <HAL_RCC_GetPCLK1Freq>
 8009384:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4613      	mov	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	009a      	lsls	r2, r3, #2
 8009390:	441a      	add	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	fbb2 f3f3 	udiv	r3, r2, r3
 800939c:	4a22      	ldr	r2, [pc, #136]	; (8009428 <UART_SetConfig+0x118>)
 800939e:	fba2 2303 	umull	r2, r3, r2, r3
 80093a2:	095b      	lsrs	r3, r3, #5
 80093a4:	0119      	lsls	r1, r3, #4
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009a      	lsls	r2, r3, #2
 80093b0:	441a      	add	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80093bc:	4b1a      	ldr	r3, [pc, #104]	; (8009428 <UART_SetConfig+0x118>)
 80093be:	fba3 0302 	umull	r0, r3, r3, r2
 80093c2:	095b      	lsrs	r3, r3, #5
 80093c4:	2064      	movs	r0, #100	; 0x64
 80093c6:	fb00 f303 	mul.w	r3, r0, r3
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	011b      	lsls	r3, r3, #4
 80093ce:	3332      	adds	r3, #50	; 0x32
 80093d0:	4a15      	ldr	r2, [pc, #84]	; (8009428 <UART_SetConfig+0x118>)
 80093d2:	fba2 2303 	umull	r2, r3, r2, r3
 80093d6:	095b      	lsrs	r3, r3, #5
 80093d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093dc:	4419      	add	r1, r3
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	009a      	lsls	r2, r3, #2
 80093e8:	441a      	add	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80093f4:	4b0c      	ldr	r3, [pc, #48]	; (8009428 <UART_SetConfig+0x118>)
 80093f6:	fba3 0302 	umull	r0, r3, r3, r2
 80093fa:	095b      	lsrs	r3, r3, #5
 80093fc:	2064      	movs	r0, #100	; 0x64
 80093fe:	fb00 f303 	mul.w	r3, r0, r3
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	3332      	adds	r3, #50	; 0x32
 8009408:	4a07      	ldr	r2, [pc, #28]	; (8009428 <UART_SetConfig+0x118>)
 800940a:	fba2 2303 	umull	r2, r3, r2, r3
 800940e:	095b      	lsrs	r3, r3, #5
 8009410:	f003 020f 	and.w	r2, r3, #15
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	440a      	add	r2, r1
 800941a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800941c:	bf00      	nop
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	40013800 	.word	0x40013800
 8009428:	51eb851f 	.word	0x51eb851f

0800942c <__errno>:
 800942c:	4b01      	ldr	r3, [pc, #4]	; (8009434 <__errno+0x8>)
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000010 	.word	0x20000010

08009438 <__libc_init_array>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	2500      	movs	r5, #0
 800943c:	4e0c      	ldr	r6, [pc, #48]	; (8009470 <__libc_init_array+0x38>)
 800943e:	4c0d      	ldr	r4, [pc, #52]	; (8009474 <__libc_init_array+0x3c>)
 8009440:	1ba4      	subs	r4, r4, r6
 8009442:	10a4      	asrs	r4, r4, #2
 8009444:	42a5      	cmp	r5, r4
 8009446:	d109      	bne.n	800945c <__libc_init_array+0x24>
 8009448:	f002 f860 	bl	800b50c <_init>
 800944c:	2500      	movs	r5, #0
 800944e:	4e0a      	ldr	r6, [pc, #40]	; (8009478 <__libc_init_array+0x40>)
 8009450:	4c0a      	ldr	r4, [pc, #40]	; (800947c <__libc_init_array+0x44>)
 8009452:	1ba4      	subs	r4, r4, r6
 8009454:	10a4      	asrs	r4, r4, #2
 8009456:	42a5      	cmp	r5, r4
 8009458:	d105      	bne.n	8009466 <__libc_init_array+0x2e>
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009460:	4798      	blx	r3
 8009462:	3501      	adds	r5, #1
 8009464:	e7ee      	b.n	8009444 <__libc_init_array+0xc>
 8009466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800946a:	4798      	blx	r3
 800946c:	3501      	adds	r5, #1
 800946e:	e7f2      	b.n	8009456 <__libc_init_array+0x1e>
 8009470:	0800cf90 	.word	0x0800cf90
 8009474:	0800cf90 	.word	0x0800cf90
 8009478:	0800cf90 	.word	0x0800cf90
 800947c:	0800cf94 	.word	0x0800cf94

08009480 <memset>:
 8009480:	4603      	mov	r3, r0
 8009482:	4402      	add	r2, r0
 8009484:	4293      	cmp	r3, r2
 8009486:	d100      	bne.n	800948a <memset+0xa>
 8009488:	4770      	bx	lr
 800948a:	f803 1b01 	strb.w	r1, [r3], #1
 800948e:	e7f9      	b.n	8009484 <memset+0x4>

08009490 <__cvt>:
 8009490:	2b00      	cmp	r3, #0
 8009492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009496:	461e      	mov	r6, r3
 8009498:	bfbb      	ittet	lt
 800949a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800949e:	461e      	movlt	r6, r3
 80094a0:	2300      	movge	r3, #0
 80094a2:	232d      	movlt	r3, #45	; 0x2d
 80094a4:	b088      	sub	sp, #32
 80094a6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80094a8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80094ac:	f027 0720 	bic.w	r7, r7, #32
 80094b0:	2f46      	cmp	r7, #70	; 0x46
 80094b2:	4614      	mov	r4, r2
 80094b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80094b6:	700b      	strb	r3, [r1, #0]
 80094b8:	d004      	beq.n	80094c4 <__cvt+0x34>
 80094ba:	2f45      	cmp	r7, #69	; 0x45
 80094bc:	d100      	bne.n	80094c0 <__cvt+0x30>
 80094be:	3501      	adds	r5, #1
 80094c0:	2302      	movs	r3, #2
 80094c2:	e000      	b.n	80094c6 <__cvt+0x36>
 80094c4:	2303      	movs	r3, #3
 80094c6:	aa07      	add	r2, sp, #28
 80094c8:	9204      	str	r2, [sp, #16]
 80094ca:	aa06      	add	r2, sp, #24
 80094cc:	e9cd a202 	strd	sl, r2, [sp, #8]
 80094d0:	e9cd 3500 	strd	r3, r5, [sp]
 80094d4:	4622      	mov	r2, r4
 80094d6:	4633      	mov	r3, r6
 80094d8:	f000 fcda 	bl	8009e90 <_dtoa_r>
 80094dc:	2f47      	cmp	r7, #71	; 0x47
 80094de:	4680      	mov	r8, r0
 80094e0:	d102      	bne.n	80094e8 <__cvt+0x58>
 80094e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094e4:	07db      	lsls	r3, r3, #31
 80094e6:	d526      	bpl.n	8009536 <__cvt+0xa6>
 80094e8:	2f46      	cmp	r7, #70	; 0x46
 80094ea:	eb08 0905 	add.w	r9, r8, r5
 80094ee:	d111      	bne.n	8009514 <__cvt+0x84>
 80094f0:	f898 3000 	ldrb.w	r3, [r8]
 80094f4:	2b30      	cmp	r3, #48	; 0x30
 80094f6:	d10a      	bne.n	800950e <__cvt+0x7e>
 80094f8:	2200      	movs	r2, #0
 80094fa:	2300      	movs	r3, #0
 80094fc:	4620      	mov	r0, r4
 80094fe:	4631      	mov	r1, r6
 8009500:	f7f7 fabe 	bl	8000a80 <__aeabi_dcmpeq>
 8009504:	b918      	cbnz	r0, 800950e <__cvt+0x7e>
 8009506:	f1c5 0501 	rsb	r5, r5, #1
 800950a:	f8ca 5000 	str.w	r5, [sl]
 800950e:	f8da 3000 	ldr.w	r3, [sl]
 8009512:	4499      	add	r9, r3
 8009514:	2200      	movs	r2, #0
 8009516:	2300      	movs	r3, #0
 8009518:	4620      	mov	r0, r4
 800951a:	4631      	mov	r1, r6
 800951c:	f7f7 fab0 	bl	8000a80 <__aeabi_dcmpeq>
 8009520:	b938      	cbnz	r0, 8009532 <__cvt+0xa2>
 8009522:	2230      	movs	r2, #48	; 0x30
 8009524:	9b07      	ldr	r3, [sp, #28]
 8009526:	454b      	cmp	r3, r9
 8009528:	d205      	bcs.n	8009536 <__cvt+0xa6>
 800952a:	1c59      	adds	r1, r3, #1
 800952c:	9107      	str	r1, [sp, #28]
 800952e:	701a      	strb	r2, [r3, #0]
 8009530:	e7f8      	b.n	8009524 <__cvt+0x94>
 8009532:	f8cd 901c 	str.w	r9, [sp, #28]
 8009536:	4640      	mov	r0, r8
 8009538:	9b07      	ldr	r3, [sp, #28]
 800953a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800953c:	eba3 0308 	sub.w	r3, r3, r8
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	b008      	add	sp, #32
 8009544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009548 <__exponent>:
 8009548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800954a:	2900      	cmp	r1, #0
 800954c:	bfb4      	ite	lt
 800954e:	232d      	movlt	r3, #45	; 0x2d
 8009550:	232b      	movge	r3, #43	; 0x2b
 8009552:	4604      	mov	r4, r0
 8009554:	bfb8      	it	lt
 8009556:	4249      	neglt	r1, r1
 8009558:	2909      	cmp	r1, #9
 800955a:	f804 2b02 	strb.w	r2, [r4], #2
 800955e:	7043      	strb	r3, [r0, #1]
 8009560:	dd21      	ble.n	80095a6 <__exponent+0x5e>
 8009562:	f10d 0307 	add.w	r3, sp, #7
 8009566:	461f      	mov	r7, r3
 8009568:	260a      	movs	r6, #10
 800956a:	fb91 f5f6 	sdiv	r5, r1, r6
 800956e:	fb06 1115 	mls	r1, r6, r5, r1
 8009572:	2d09      	cmp	r5, #9
 8009574:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009578:	f803 1c01 	strb.w	r1, [r3, #-1]
 800957c:	f103 32ff 	add.w	r2, r3, #4294967295
 8009580:	4629      	mov	r1, r5
 8009582:	dc09      	bgt.n	8009598 <__exponent+0x50>
 8009584:	3130      	adds	r1, #48	; 0x30
 8009586:	3b02      	subs	r3, #2
 8009588:	f802 1c01 	strb.w	r1, [r2, #-1]
 800958c:	42bb      	cmp	r3, r7
 800958e:	4622      	mov	r2, r4
 8009590:	d304      	bcc.n	800959c <__exponent+0x54>
 8009592:	1a10      	subs	r0, r2, r0
 8009594:	b003      	add	sp, #12
 8009596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009598:	4613      	mov	r3, r2
 800959a:	e7e6      	b.n	800956a <__exponent+0x22>
 800959c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a0:	f804 2b01 	strb.w	r2, [r4], #1
 80095a4:	e7f2      	b.n	800958c <__exponent+0x44>
 80095a6:	2330      	movs	r3, #48	; 0x30
 80095a8:	4419      	add	r1, r3
 80095aa:	7083      	strb	r3, [r0, #2]
 80095ac:	1d02      	adds	r2, r0, #4
 80095ae:	70c1      	strb	r1, [r0, #3]
 80095b0:	e7ef      	b.n	8009592 <__exponent+0x4a>
	...

080095b4 <_printf_float>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	b091      	sub	sp, #68	; 0x44
 80095ba:	460c      	mov	r4, r1
 80095bc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80095be:	4693      	mov	fp, r2
 80095c0:	461e      	mov	r6, r3
 80095c2:	4605      	mov	r5, r0
 80095c4:	f001 fa18 	bl	800a9f8 <_localeconv_r>
 80095c8:	6803      	ldr	r3, [r0, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	9309      	str	r3, [sp, #36]	; 0x24
 80095ce:	f7f6 fe2b 	bl	8000228 <strlen>
 80095d2:	2300      	movs	r3, #0
 80095d4:	930e      	str	r3, [sp, #56]	; 0x38
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	900a      	str	r0, [sp, #40]	; 0x28
 80095da:	3307      	adds	r3, #7
 80095dc:	f023 0307 	bic.w	r3, r3, #7
 80095e0:	f103 0208 	add.w	r2, r3, #8
 80095e4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80095e8:	f8d4 a000 	ldr.w	sl, [r4]
 80095ec:	603a      	str	r2, [r7, #0]
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80095f6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80095fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009600:	f04f 32ff 	mov.w	r2, #4294967295
 8009604:	4ba6      	ldr	r3, [pc, #664]	; (80098a0 <_printf_float+0x2ec>)
 8009606:	4638      	mov	r0, r7
 8009608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800960a:	f7f7 fa6b 	bl	8000ae4 <__aeabi_dcmpun>
 800960e:	bb68      	cbnz	r0, 800966c <_printf_float+0xb8>
 8009610:	f04f 32ff 	mov.w	r2, #4294967295
 8009614:	4ba2      	ldr	r3, [pc, #648]	; (80098a0 <_printf_float+0x2ec>)
 8009616:	4638      	mov	r0, r7
 8009618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800961a:	f7f7 fa45 	bl	8000aa8 <__aeabi_dcmple>
 800961e:	bb28      	cbnz	r0, 800966c <_printf_float+0xb8>
 8009620:	2200      	movs	r2, #0
 8009622:	2300      	movs	r3, #0
 8009624:	4638      	mov	r0, r7
 8009626:	4649      	mov	r1, r9
 8009628:	f7f7 fa34 	bl	8000a94 <__aeabi_dcmplt>
 800962c:	b110      	cbz	r0, 8009634 <_printf_float+0x80>
 800962e:	232d      	movs	r3, #45	; 0x2d
 8009630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009634:	4f9b      	ldr	r7, [pc, #620]	; (80098a4 <_printf_float+0x2f0>)
 8009636:	4b9c      	ldr	r3, [pc, #624]	; (80098a8 <_printf_float+0x2f4>)
 8009638:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800963c:	bf98      	it	ls
 800963e:	461f      	movls	r7, r3
 8009640:	2303      	movs	r3, #3
 8009642:	f04f 0900 	mov.w	r9, #0
 8009646:	6123      	str	r3, [r4, #16]
 8009648:	f02a 0304 	bic.w	r3, sl, #4
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	9600      	str	r6, [sp, #0]
 8009650:	465b      	mov	r3, fp
 8009652:	aa0f      	add	r2, sp, #60	; 0x3c
 8009654:	4621      	mov	r1, r4
 8009656:	4628      	mov	r0, r5
 8009658:	f000 f9e2 	bl	8009a20 <_printf_common>
 800965c:	3001      	adds	r0, #1
 800965e:	f040 8090 	bne.w	8009782 <_printf_float+0x1ce>
 8009662:	f04f 30ff 	mov.w	r0, #4294967295
 8009666:	b011      	add	sp, #68	; 0x44
 8009668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966c:	463a      	mov	r2, r7
 800966e:	464b      	mov	r3, r9
 8009670:	4638      	mov	r0, r7
 8009672:	4649      	mov	r1, r9
 8009674:	f7f7 fa36 	bl	8000ae4 <__aeabi_dcmpun>
 8009678:	b110      	cbz	r0, 8009680 <_printf_float+0xcc>
 800967a:	4f8c      	ldr	r7, [pc, #560]	; (80098ac <_printf_float+0x2f8>)
 800967c:	4b8c      	ldr	r3, [pc, #560]	; (80098b0 <_printf_float+0x2fc>)
 800967e:	e7db      	b.n	8009638 <_printf_float+0x84>
 8009680:	6863      	ldr	r3, [r4, #4]
 8009682:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009686:	1c59      	adds	r1, r3, #1
 8009688:	a80d      	add	r0, sp, #52	; 0x34
 800968a:	a90e      	add	r1, sp, #56	; 0x38
 800968c:	d140      	bne.n	8009710 <_printf_float+0x15c>
 800968e:	2306      	movs	r3, #6
 8009690:	6063      	str	r3, [r4, #4]
 8009692:	f04f 0c00 	mov.w	ip, #0
 8009696:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800969a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800969e:	6863      	ldr	r3, [r4, #4]
 80096a0:	6022      	str	r2, [r4, #0]
 80096a2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	463a      	mov	r2, r7
 80096aa:	464b      	mov	r3, r9
 80096ac:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80096b0:	4628      	mov	r0, r5
 80096b2:	f7ff feed 	bl	8009490 <__cvt>
 80096b6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80096ba:	2b47      	cmp	r3, #71	; 0x47
 80096bc:	4607      	mov	r7, r0
 80096be:	d109      	bne.n	80096d4 <_printf_float+0x120>
 80096c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096c2:	1cd8      	adds	r0, r3, #3
 80096c4:	db02      	blt.n	80096cc <_printf_float+0x118>
 80096c6:	6862      	ldr	r2, [r4, #4]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	dd47      	ble.n	800975c <_printf_float+0x1a8>
 80096cc:	f1a8 0802 	sub.w	r8, r8, #2
 80096d0:	fa5f f888 	uxtb.w	r8, r8
 80096d4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80096d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80096da:	d824      	bhi.n	8009726 <_printf_float+0x172>
 80096dc:	3901      	subs	r1, #1
 80096de:	4642      	mov	r2, r8
 80096e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096e4:	910d      	str	r1, [sp, #52]	; 0x34
 80096e6:	f7ff ff2f 	bl	8009548 <__exponent>
 80096ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096ec:	4681      	mov	r9, r0
 80096ee:	1813      	adds	r3, r2, r0
 80096f0:	2a01      	cmp	r2, #1
 80096f2:	6123      	str	r3, [r4, #16]
 80096f4:	dc02      	bgt.n	80096fc <_printf_float+0x148>
 80096f6:	6822      	ldr	r2, [r4, #0]
 80096f8:	07d1      	lsls	r1, r2, #31
 80096fa:	d501      	bpl.n	8009700 <_printf_float+0x14c>
 80096fc:	3301      	adds	r3, #1
 80096fe:	6123      	str	r3, [r4, #16]
 8009700:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0a2      	beq.n	800964e <_printf_float+0x9a>
 8009708:	232d      	movs	r3, #45	; 0x2d
 800970a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800970e:	e79e      	b.n	800964e <_printf_float+0x9a>
 8009710:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009714:	f000 816e 	beq.w	80099f4 <_printf_float+0x440>
 8009718:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800971c:	d1b9      	bne.n	8009692 <_printf_float+0xde>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1b7      	bne.n	8009692 <_printf_float+0xde>
 8009722:	2301      	movs	r3, #1
 8009724:	e7b4      	b.n	8009690 <_printf_float+0xdc>
 8009726:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800972a:	d119      	bne.n	8009760 <_printf_float+0x1ac>
 800972c:	2900      	cmp	r1, #0
 800972e:	6863      	ldr	r3, [r4, #4]
 8009730:	dd0c      	ble.n	800974c <_printf_float+0x198>
 8009732:	6121      	str	r1, [r4, #16]
 8009734:	b913      	cbnz	r3, 800973c <_printf_float+0x188>
 8009736:	6822      	ldr	r2, [r4, #0]
 8009738:	07d2      	lsls	r2, r2, #31
 800973a:	d502      	bpl.n	8009742 <_printf_float+0x18e>
 800973c:	3301      	adds	r3, #1
 800973e:	440b      	add	r3, r1
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009744:	f04f 0900 	mov.w	r9, #0
 8009748:	65a3      	str	r3, [r4, #88]	; 0x58
 800974a:	e7d9      	b.n	8009700 <_printf_float+0x14c>
 800974c:	b913      	cbnz	r3, 8009754 <_printf_float+0x1a0>
 800974e:	6822      	ldr	r2, [r4, #0]
 8009750:	07d0      	lsls	r0, r2, #31
 8009752:	d501      	bpl.n	8009758 <_printf_float+0x1a4>
 8009754:	3302      	adds	r3, #2
 8009756:	e7f3      	b.n	8009740 <_printf_float+0x18c>
 8009758:	2301      	movs	r3, #1
 800975a:	e7f1      	b.n	8009740 <_printf_float+0x18c>
 800975c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009760:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009764:	4293      	cmp	r3, r2
 8009766:	db05      	blt.n	8009774 <_printf_float+0x1c0>
 8009768:	6822      	ldr	r2, [r4, #0]
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	07d1      	lsls	r1, r2, #31
 800976e:	d5e8      	bpl.n	8009742 <_printf_float+0x18e>
 8009770:	3301      	adds	r3, #1
 8009772:	e7e5      	b.n	8009740 <_printf_float+0x18c>
 8009774:	2b00      	cmp	r3, #0
 8009776:	bfcc      	ite	gt
 8009778:	2301      	movgt	r3, #1
 800977a:	f1c3 0302 	rsble	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	e7de      	b.n	8009740 <_printf_float+0x18c>
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	055a      	lsls	r2, r3, #21
 8009786:	d407      	bmi.n	8009798 <_printf_float+0x1e4>
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	463a      	mov	r2, r7
 800978c:	4659      	mov	r1, fp
 800978e:	4628      	mov	r0, r5
 8009790:	47b0      	blx	r6
 8009792:	3001      	adds	r0, #1
 8009794:	d129      	bne.n	80097ea <_printf_float+0x236>
 8009796:	e764      	b.n	8009662 <_printf_float+0xae>
 8009798:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800979c:	f240 80d7 	bls.w	800994e <_printf_float+0x39a>
 80097a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097a4:	2200      	movs	r2, #0
 80097a6:	2300      	movs	r3, #0
 80097a8:	f7f7 f96a 	bl	8000a80 <__aeabi_dcmpeq>
 80097ac:	b388      	cbz	r0, 8009812 <_printf_float+0x25e>
 80097ae:	2301      	movs	r3, #1
 80097b0:	4a40      	ldr	r2, [pc, #256]	; (80098b4 <_printf_float+0x300>)
 80097b2:	4659      	mov	r1, fp
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b0      	blx	r6
 80097b8:	3001      	adds	r0, #1
 80097ba:	f43f af52 	beq.w	8009662 <_printf_float+0xae>
 80097be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80097c2:	429a      	cmp	r2, r3
 80097c4:	db02      	blt.n	80097cc <_printf_float+0x218>
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	07d8      	lsls	r0, r3, #31
 80097ca:	d50e      	bpl.n	80097ea <_printf_float+0x236>
 80097cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097d0:	4659      	mov	r1, fp
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b0      	blx	r6
 80097d6:	3001      	adds	r0, #1
 80097d8:	f43f af43 	beq.w	8009662 <_printf_float+0xae>
 80097dc:	2700      	movs	r7, #0
 80097de:	f104 081a 	add.w	r8, r4, #26
 80097e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097e4:	3b01      	subs	r3, #1
 80097e6:	42bb      	cmp	r3, r7
 80097e8:	dc09      	bgt.n	80097fe <_printf_float+0x24a>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	079f      	lsls	r7, r3, #30
 80097ee:	f100 80fd 	bmi.w	80099ec <_printf_float+0x438>
 80097f2:	68e0      	ldr	r0, [r4, #12]
 80097f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097f6:	4298      	cmp	r0, r3
 80097f8:	bfb8      	it	lt
 80097fa:	4618      	movlt	r0, r3
 80097fc:	e733      	b.n	8009666 <_printf_float+0xb2>
 80097fe:	2301      	movs	r3, #1
 8009800:	4642      	mov	r2, r8
 8009802:	4659      	mov	r1, fp
 8009804:	4628      	mov	r0, r5
 8009806:	47b0      	blx	r6
 8009808:	3001      	adds	r0, #1
 800980a:	f43f af2a 	beq.w	8009662 <_printf_float+0xae>
 800980e:	3701      	adds	r7, #1
 8009810:	e7e7      	b.n	80097e2 <_printf_float+0x22e>
 8009812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009814:	2b00      	cmp	r3, #0
 8009816:	dc2b      	bgt.n	8009870 <_printf_float+0x2bc>
 8009818:	2301      	movs	r3, #1
 800981a:	4a26      	ldr	r2, [pc, #152]	; (80098b4 <_printf_float+0x300>)
 800981c:	4659      	mov	r1, fp
 800981e:	4628      	mov	r0, r5
 8009820:	47b0      	blx	r6
 8009822:	3001      	adds	r0, #1
 8009824:	f43f af1d 	beq.w	8009662 <_printf_float+0xae>
 8009828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800982a:	b923      	cbnz	r3, 8009836 <_printf_float+0x282>
 800982c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800982e:	b913      	cbnz	r3, 8009836 <_printf_float+0x282>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	07d9      	lsls	r1, r3, #31
 8009834:	d5d9      	bpl.n	80097ea <_printf_float+0x236>
 8009836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800983a:	4659      	mov	r1, fp
 800983c:	4628      	mov	r0, r5
 800983e:	47b0      	blx	r6
 8009840:	3001      	adds	r0, #1
 8009842:	f43f af0e 	beq.w	8009662 <_printf_float+0xae>
 8009846:	f04f 0800 	mov.w	r8, #0
 800984a:	f104 091a 	add.w	r9, r4, #26
 800984e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009850:	425b      	negs	r3, r3
 8009852:	4543      	cmp	r3, r8
 8009854:	dc01      	bgt.n	800985a <_printf_float+0x2a6>
 8009856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009858:	e797      	b.n	800978a <_printf_float+0x1d6>
 800985a:	2301      	movs	r3, #1
 800985c:	464a      	mov	r2, r9
 800985e:	4659      	mov	r1, fp
 8009860:	4628      	mov	r0, r5
 8009862:	47b0      	blx	r6
 8009864:	3001      	adds	r0, #1
 8009866:	f43f aefc 	beq.w	8009662 <_printf_float+0xae>
 800986a:	f108 0801 	add.w	r8, r8, #1
 800986e:	e7ee      	b.n	800984e <_printf_float+0x29a>
 8009870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009872:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009874:	429a      	cmp	r2, r3
 8009876:	bfa8      	it	ge
 8009878:	461a      	movge	r2, r3
 800987a:	2a00      	cmp	r2, #0
 800987c:	4690      	mov	r8, r2
 800987e:	dd07      	ble.n	8009890 <_printf_float+0x2dc>
 8009880:	4613      	mov	r3, r2
 8009882:	4659      	mov	r1, fp
 8009884:	463a      	mov	r2, r7
 8009886:	4628      	mov	r0, r5
 8009888:	47b0      	blx	r6
 800988a:	3001      	adds	r0, #1
 800988c:	f43f aee9 	beq.w	8009662 <_printf_float+0xae>
 8009890:	f104 031a 	add.w	r3, r4, #26
 8009894:	f04f 0a00 	mov.w	sl, #0
 8009898:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800989c:	930b      	str	r3, [sp, #44]	; 0x2c
 800989e:	e015      	b.n	80098cc <_printf_float+0x318>
 80098a0:	7fefffff 	.word	0x7fefffff
 80098a4:	0800cd34 	.word	0x0800cd34
 80098a8:	0800cd30 	.word	0x0800cd30
 80098ac:	0800cd3c 	.word	0x0800cd3c
 80098b0:	0800cd38 	.word	0x0800cd38
 80098b4:	0800cd40 	.word	0x0800cd40
 80098b8:	2301      	movs	r3, #1
 80098ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098bc:	4659      	mov	r1, fp
 80098be:	4628      	mov	r0, r5
 80098c0:	47b0      	blx	r6
 80098c2:	3001      	adds	r0, #1
 80098c4:	f43f aecd 	beq.w	8009662 <_printf_float+0xae>
 80098c8:	f10a 0a01 	add.w	sl, sl, #1
 80098cc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80098d0:	eba9 0308 	sub.w	r3, r9, r8
 80098d4:	4553      	cmp	r3, sl
 80098d6:	dcef      	bgt.n	80098b8 <_printf_float+0x304>
 80098d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80098dc:	429a      	cmp	r2, r3
 80098de:	444f      	add	r7, r9
 80098e0:	db14      	blt.n	800990c <_printf_float+0x358>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	07da      	lsls	r2, r3, #31
 80098e6:	d411      	bmi.n	800990c <_printf_float+0x358>
 80098e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80098ec:	eba3 0209 	sub.w	r2, r3, r9
 80098f0:	eba3 0901 	sub.w	r9, r3, r1
 80098f4:	4591      	cmp	r9, r2
 80098f6:	bfa8      	it	ge
 80098f8:	4691      	movge	r9, r2
 80098fa:	f1b9 0f00 	cmp.w	r9, #0
 80098fe:	dc0d      	bgt.n	800991c <_printf_float+0x368>
 8009900:	2700      	movs	r7, #0
 8009902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009906:	f104 081a 	add.w	r8, r4, #26
 800990a:	e018      	b.n	800993e <_printf_float+0x38a>
 800990c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009910:	4659      	mov	r1, fp
 8009912:	4628      	mov	r0, r5
 8009914:	47b0      	blx	r6
 8009916:	3001      	adds	r0, #1
 8009918:	d1e6      	bne.n	80098e8 <_printf_float+0x334>
 800991a:	e6a2      	b.n	8009662 <_printf_float+0xae>
 800991c:	464b      	mov	r3, r9
 800991e:	463a      	mov	r2, r7
 8009920:	4659      	mov	r1, fp
 8009922:	4628      	mov	r0, r5
 8009924:	47b0      	blx	r6
 8009926:	3001      	adds	r0, #1
 8009928:	d1ea      	bne.n	8009900 <_printf_float+0x34c>
 800992a:	e69a      	b.n	8009662 <_printf_float+0xae>
 800992c:	2301      	movs	r3, #1
 800992e:	4642      	mov	r2, r8
 8009930:	4659      	mov	r1, fp
 8009932:	4628      	mov	r0, r5
 8009934:	47b0      	blx	r6
 8009936:	3001      	adds	r0, #1
 8009938:	f43f ae93 	beq.w	8009662 <_printf_float+0xae>
 800993c:	3701      	adds	r7, #1
 800993e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	eba3 0309 	sub.w	r3, r3, r9
 8009948:	42bb      	cmp	r3, r7
 800994a:	dcef      	bgt.n	800992c <_printf_float+0x378>
 800994c:	e74d      	b.n	80097ea <_printf_float+0x236>
 800994e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009950:	2a01      	cmp	r2, #1
 8009952:	dc01      	bgt.n	8009958 <_printf_float+0x3a4>
 8009954:	07db      	lsls	r3, r3, #31
 8009956:	d538      	bpl.n	80099ca <_printf_float+0x416>
 8009958:	2301      	movs	r3, #1
 800995a:	463a      	mov	r2, r7
 800995c:	4659      	mov	r1, fp
 800995e:	4628      	mov	r0, r5
 8009960:	47b0      	blx	r6
 8009962:	3001      	adds	r0, #1
 8009964:	f43f ae7d 	beq.w	8009662 <_printf_float+0xae>
 8009968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800996c:	4659      	mov	r1, fp
 800996e:	4628      	mov	r0, r5
 8009970:	47b0      	blx	r6
 8009972:	3001      	adds	r0, #1
 8009974:	f107 0701 	add.w	r7, r7, #1
 8009978:	f43f ae73 	beq.w	8009662 <_printf_float+0xae>
 800997c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009982:	2200      	movs	r2, #0
 8009984:	f103 38ff 	add.w	r8, r3, #4294967295
 8009988:	2300      	movs	r3, #0
 800998a:	f7f7 f879 	bl	8000a80 <__aeabi_dcmpeq>
 800998e:	b9c0      	cbnz	r0, 80099c2 <_printf_float+0x40e>
 8009990:	4643      	mov	r3, r8
 8009992:	463a      	mov	r2, r7
 8009994:	4659      	mov	r1, fp
 8009996:	4628      	mov	r0, r5
 8009998:	47b0      	blx	r6
 800999a:	3001      	adds	r0, #1
 800999c:	d10d      	bne.n	80099ba <_printf_float+0x406>
 800999e:	e660      	b.n	8009662 <_printf_float+0xae>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4642      	mov	r2, r8
 80099a4:	4659      	mov	r1, fp
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b0      	blx	r6
 80099aa:	3001      	adds	r0, #1
 80099ac:	f43f ae59 	beq.w	8009662 <_printf_float+0xae>
 80099b0:	3701      	adds	r7, #1
 80099b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099b4:	3b01      	subs	r3, #1
 80099b6:	42bb      	cmp	r3, r7
 80099b8:	dcf2      	bgt.n	80099a0 <_printf_float+0x3ec>
 80099ba:	464b      	mov	r3, r9
 80099bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099c0:	e6e4      	b.n	800978c <_printf_float+0x1d8>
 80099c2:	2700      	movs	r7, #0
 80099c4:	f104 081a 	add.w	r8, r4, #26
 80099c8:	e7f3      	b.n	80099b2 <_printf_float+0x3fe>
 80099ca:	2301      	movs	r3, #1
 80099cc:	e7e1      	b.n	8009992 <_printf_float+0x3de>
 80099ce:	2301      	movs	r3, #1
 80099d0:	4642      	mov	r2, r8
 80099d2:	4659      	mov	r1, fp
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b0      	blx	r6
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f ae42 	beq.w	8009662 <_printf_float+0xae>
 80099de:	3701      	adds	r7, #1
 80099e0:	68e3      	ldr	r3, [r4, #12]
 80099e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099e4:	1a9b      	subs	r3, r3, r2
 80099e6:	42bb      	cmp	r3, r7
 80099e8:	dcf1      	bgt.n	80099ce <_printf_float+0x41a>
 80099ea:	e702      	b.n	80097f2 <_printf_float+0x23e>
 80099ec:	2700      	movs	r7, #0
 80099ee:	f104 0819 	add.w	r8, r4, #25
 80099f2:	e7f5      	b.n	80099e0 <_printf_float+0x42c>
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f43f ae94 	beq.w	8009722 <_printf_float+0x16e>
 80099fa:	f04f 0c00 	mov.w	ip, #0
 80099fe:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009a02:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009a06:	6022      	str	r2, [r4, #0]
 8009a08:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009a0c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	463a      	mov	r2, r7
 8009a14:	464b      	mov	r3, r9
 8009a16:	4628      	mov	r0, r5
 8009a18:	f7ff fd3a 	bl	8009490 <__cvt>
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	e64f      	b.n	80096c0 <_printf_float+0x10c>

08009a20 <_printf_common>:
 8009a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	4691      	mov	r9, r2
 8009a26:	461f      	mov	r7, r3
 8009a28:	688a      	ldr	r2, [r1, #8]
 8009a2a:	690b      	ldr	r3, [r1, #16]
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	bfb8      	it	lt
 8009a32:	4613      	movlt	r3, r2
 8009a34:	f8c9 3000 	str.w	r3, [r9]
 8009a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a42:	b112      	cbz	r2, 8009a4a <_printf_common+0x2a>
 8009a44:	3301      	adds	r3, #1
 8009a46:	f8c9 3000 	str.w	r3, [r9]
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	0699      	lsls	r1, r3, #26
 8009a4e:	bf42      	ittt	mi
 8009a50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009a54:	3302      	addmi	r3, #2
 8009a56:	f8c9 3000 	strmi.w	r3, [r9]
 8009a5a:	6825      	ldr	r5, [r4, #0]
 8009a5c:	f015 0506 	ands.w	r5, r5, #6
 8009a60:	d107      	bne.n	8009a72 <_printf_common+0x52>
 8009a62:	f104 0a19 	add.w	sl, r4, #25
 8009a66:	68e3      	ldr	r3, [r4, #12]
 8009a68:	f8d9 2000 	ldr.w	r2, [r9]
 8009a6c:	1a9b      	subs	r3, r3, r2
 8009a6e:	42ab      	cmp	r3, r5
 8009a70:	dc29      	bgt.n	8009ac6 <_printf_common+0xa6>
 8009a72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009a76:	6822      	ldr	r2, [r4, #0]
 8009a78:	3300      	adds	r3, #0
 8009a7a:	bf18      	it	ne
 8009a7c:	2301      	movne	r3, #1
 8009a7e:	0692      	lsls	r2, r2, #26
 8009a80:	d42e      	bmi.n	8009ae0 <_printf_common+0xc0>
 8009a82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a86:	4639      	mov	r1, r7
 8009a88:	4630      	mov	r0, r6
 8009a8a:	47c0      	blx	r8
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d021      	beq.n	8009ad4 <_printf_common+0xb4>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	68e5      	ldr	r5, [r4, #12]
 8009a94:	f003 0306 	and.w	r3, r3, #6
 8009a98:	2b04      	cmp	r3, #4
 8009a9a:	bf18      	it	ne
 8009a9c:	2500      	movne	r5, #0
 8009a9e:	f8d9 2000 	ldr.w	r2, [r9]
 8009aa2:	f04f 0900 	mov.w	r9, #0
 8009aa6:	bf08      	it	eq
 8009aa8:	1aad      	subeq	r5, r5, r2
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	6922      	ldr	r2, [r4, #16]
 8009aae:	bf08      	it	eq
 8009ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	bfc4      	itt	gt
 8009ab8:	1a9b      	subgt	r3, r3, r2
 8009aba:	18ed      	addgt	r5, r5, r3
 8009abc:	341a      	adds	r4, #26
 8009abe:	454d      	cmp	r5, r9
 8009ac0:	d11a      	bne.n	8009af8 <_printf_common+0xd8>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	e008      	b.n	8009ad8 <_printf_common+0xb8>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	4652      	mov	r2, sl
 8009aca:	4639      	mov	r1, r7
 8009acc:	4630      	mov	r0, r6
 8009ace:	47c0      	blx	r8
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d103      	bne.n	8009adc <_printf_common+0xbc>
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009adc:	3501      	adds	r5, #1
 8009ade:	e7c2      	b.n	8009a66 <_printf_common+0x46>
 8009ae0:	2030      	movs	r0, #48	; 0x30
 8009ae2:	18e1      	adds	r1, r4, r3
 8009ae4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aee:	4422      	add	r2, r4
 8009af0:	3302      	adds	r3, #2
 8009af2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af6:	e7c4      	b.n	8009a82 <_printf_common+0x62>
 8009af8:	2301      	movs	r3, #1
 8009afa:	4622      	mov	r2, r4
 8009afc:	4639      	mov	r1, r7
 8009afe:	4630      	mov	r0, r6
 8009b00:	47c0      	blx	r8
 8009b02:	3001      	adds	r0, #1
 8009b04:	d0e6      	beq.n	8009ad4 <_printf_common+0xb4>
 8009b06:	f109 0901 	add.w	r9, r9, #1
 8009b0a:	e7d8      	b.n	8009abe <_printf_common+0x9e>

08009b0c <_printf_i>:
 8009b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009b14:	460c      	mov	r4, r1
 8009b16:	7e09      	ldrb	r1, [r1, #24]
 8009b18:	b085      	sub	sp, #20
 8009b1a:	296e      	cmp	r1, #110	; 0x6e
 8009b1c:	4617      	mov	r7, r2
 8009b1e:	4606      	mov	r6, r0
 8009b20:	4698      	mov	r8, r3
 8009b22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b24:	f000 80b3 	beq.w	8009c8e <_printf_i+0x182>
 8009b28:	d822      	bhi.n	8009b70 <_printf_i+0x64>
 8009b2a:	2963      	cmp	r1, #99	; 0x63
 8009b2c:	d036      	beq.n	8009b9c <_printf_i+0x90>
 8009b2e:	d80a      	bhi.n	8009b46 <_printf_i+0x3a>
 8009b30:	2900      	cmp	r1, #0
 8009b32:	f000 80b9 	beq.w	8009ca8 <_printf_i+0x19c>
 8009b36:	2958      	cmp	r1, #88	; 0x58
 8009b38:	f000 8083 	beq.w	8009c42 <_printf_i+0x136>
 8009b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009b44:	e032      	b.n	8009bac <_printf_i+0xa0>
 8009b46:	2964      	cmp	r1, #100	; 0x64
 8009b48:	d001      	beq.n	8009b4e <_printf_i+0x42>
 8009b4a:	2969      	cmp	r1, #105	; 0x69
 8009b4c:	d1f6      	bne.n	8009b3c <_printf_i+0x30>
 8009b4e:	6820      	ldr	r0, [r4, #0]
 8009b50:	6813      	ldr	r3, [r2, #0]
 8009b52:	0605      	lsls	r5, r0, #24
 8009b54:	f103 0104 	add.w	r1, r3, #4
 8009b58:	d52a      	bpl.n	8009bb0 <_printf_i+0xa4>
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6011      	str	r1, [r2, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da03      	bge.n	8009b6a <_printf_i+0x5e>
 8009b62:	222d      	movs	r2, #45	; 0x2d
 8009b64:	425b      	negs	r3, r3
 8009b66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009b6a:	486f      	ldr	r0, [pc, #444]	; (8009d28 <_printf_i+0x21c>)
 8009b6c:	220a      	movs	r2, #10
 8009b6e:	e039      	b.n	8009be4 <_printf_i+0xd8>
 8009b70:	2973      	cmp	r1, #115	; 0x73
 8009b72:	f000 809d 	beq.w	8009cb0 <_printf_i+0x1a4>
 8009b76:	d808      	bhi.n	8009b8a <_printf_i+0x7e>
 8009b78:	296f      	cmp	r1, #111	; 0x6f
 8009b7a:	d020      	beq.n	8009bbe <_printf_i+0xb2>
 8009b7c:	2970      	cmp	r1, #112	; 0x70
 8009b7e:	d1dd      	bne.n	8009b3c <_printf_i+0x30>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	f043 0320 	orr.w	r3, r3, #32
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	e003      	b.n	8009b92 <_printf_i+0x86>
 8009b8a:	2975      	cmp	r1, #117	; 0x75
 8009b8c:	d017      	beq.n	8009bbe <_printf_i+0xb2>
 8009b8e:	2978      	cmp	r1, #120	; 0x78
 8009b90:	d1d4      	bne.n	8009b3c <_printf_i+0x30>
 8009b92:	2378      	movs	r3, #120	; 0x78
 8009b94:	4865      	ldr	r0, [pc, #404]	; (8009d2c <_printf_i+0x220>)
 8009b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b9a:	e055      	b.n	8009c48 <_printf_i+0x13c>
 8009b9c:	6813      	ldr	r3, [r2, #0]
 8009b9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ba2:	1d19      	adds	r1, r3, #4
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6011      	str	r1, [r2, #0]
 8009ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bac:	2301      	movs	r3, #1
 8009bae:	e08c      	b.n	8009cca <_printf_i+0x1be>
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009bb6:	6011      	str	r1, [r2, #0]
 8009bb8:	bf18      	it	ne
 8009bba:	b21b      	sxthne	r3, r3
 8009bbc:	e7cf      	b.n	8009b5e <_printf_i+0x52>
 8009bbe:	6813      	ldr	r3, [r2, #0]
 8009bc0:	6825      	ldr	r5, [r4, #0]
 8009bc2:	1d18      	adds	r0, r3, #4
 8009bc4:	6010      	str	r0, [r2, #0]
 8009bc6:	0628      	lsls	r0, r5, #24
 8009bc8:	d501      	bpl.n	8009bce <_printf_i+0xc2>
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	e002      	b.n	8009bd4 <_printf_i+0xc8>
 8009bce:	0668      	lsls	r0, r5, #25
 8009bd0:	d5fb      	bpl.n	8009bca <_printf_i+0xbe>
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	296f      	cmp	r1, #111	; 0x6f
 8009bd6:	bf14      	ite	ne
 8009bd8:	220a      	movne	r2, #10
 8009bda:	2208      	moveq	r2, #8
 8009bdc:	4852      	ldr	r0, [pc, #328]	; (8009d28 <_printf_i+0x21c>)
 8009bde:	2100      	movs	r1, #0
 8009be0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009be4:	6865      	ldr	r5, [r4, #4]
 8009be6:	2d00      	cmp	r5, #0
 8009be8:	60a5      	str	r5, [r4, #8]
 8009bea:	f2c0 8095 	blt.w	8009d18 <_printf_i+0x20c>
 8009bee:	6821      	ldr	r1, [r4, #0]
 8009bf0:	f021 0104 	bic.w	r1, r1, #4
 8009bf4:	6021      	str	r1, [r4, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d13d      	bne.n	8009c76 <_printf_i+0x16a>
 8009bfa:	2d00      	cmp	r5, #0
 8009bfc:	f040 808e 	bne.w	8009d1c <_printf_i+0x210>
 8009c00:	4665      	mov	r5, ip
 8009c02:	2a08      	cmp	r2, #8
 8009c04:	d10b      	bne.n	8009c1e <_printf_i+0x112>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	07db      	lsls	r3, r3, #31
 8009c0a:	d508      	bpl.n	8009c1e <_printf_i+0x112>
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	6862      	ldr	r2, [r4, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	bfde      	ittt	le
 8009c14:	2330      	movle	r3, #48	; 0x30
 8009c16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c1e:	ebac 0305 	sub.w	r3, ip, r5
 8009c22:	6123      	str	r3, [r4, #16]
 8009c24:	f8cd 8000 	str.w	r8, [sp]
 8009c28:	463b      	mov	r3, r7
 8009c2a:	aa03      	add	r2, sp, #12
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7ff fef6 	bl	8009a20 <_printf_common>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d14d      	bne.n	8009cd4 <_printf_i+0x1c8>
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3c:	b005      	add	sp, #20
 8009c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c42:	4839      	ldr	r0, [pc, #228]	; (8009d28 <_printf_i+0x21c>)
 8009c44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009c48:	6813      	ldr	r3, [r2, #0]
 8009c4a:	6821      	ldr	r1, [r4, #0]
 8009c4c:	1d1d      	adds	r5, r3, #4
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6015      	str	r5, [r2, #0]
 8009c52:	060a      	lsls	r2, r1, #24
 8009c54:	d50b      	bpl.n	8009c6e <_printf_i+0x162>
 8009c56:	07ca      	lsls	r2, r1, #31
 8009c58:	bf44      	itt	mi
 8009c5a:	f041 0120 	orrmi.w	r1, r1, #32
 8009c5e:	6021      	strmi	r1, [r4, #0]
 8009c60:	b91b      	cbnz	r3, 8009c6a <_printf_i+0x15e>
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	f022 0220 	bic.w	r2, r2, #32
 8009c68:	6022      	str	r2, [r4, #0]
 8009c6a:	2210      	movs	r2, #16
 8009c6c:	e7b7      	b.n	8009bde <_printf_i+0xd2>
 8009c6e:	064d      	lsls	r5, r1, #25
 8009c70:	bf48      	it	mi
 8009c72:	b29b      	uxthmi	r3, r3
 8009c74:	e7ef      	b.n	8009c56 <_printf_i+0x14a>
 8009c76:	4665      	mov	r5, ip
 8009c78:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c7c:	fb02 3311 	mls	r3, r2, r1, r3
 8009c80:	5cc3      	ldrb	r3, [r0, r3]
 8009c82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009c86:	460b      	mov	r3, r1
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	d1f5      	bne.n	8009c78 <_printf_i+0x16c>
 8009c8c:	e7b9      	b.n	8009c02 <_printf_i+0xf6>
 8009c8e:	6813      	ldr	r3, [r2, #0]
 8009c90:	6825      	ldr	r5, [r4, #0]
 8009c92:	1d18      	adds	r0, r3, #4
 8009c94:	6961      	ldr	r1, [r4, #20]
 8009c96:	6010      	str	r0, [r2, #0]
 8009c98:	0628      	lsls	r0, r5, #24
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	d501      	bpl.n	8009ca2 <_printf_i+0x196>
 8009c9e:	6019      	str	r1, [r3, #0]
 8009ca0:	e002      	b.n	8009ca8 <_printf_i+0x19c>
 8009ca2:	066a      	lsls	r2, r5, #25
 8009ca4:	d5fb      	bpl.n	8009c9e <_printf_i+0x192>
 8009ca6:	8019      	strh	r1, [r3, #0]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4665      	mov	r5, ip
 8009cac:	6123      	str	r3, [r4, #16]
 8009cae:	e7b9      	b.n	8009c24 <_printf_i+0x118>
 8009cb0:	6813      	ldr	r3, [r2, #0]
 8009cb2:	1d19      	adds	r1, r3, #4
 8009cb4:	6011      	str	r1, [r2, #0]
 8009cb6:	681d      	ldr	r5, [r3, #0]
 8009cb8:	6862      	ldr	r2, [r4, #4]
 8009cba:	2100      	movs	r1, #0
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f000 feb1 	bl	800aa24 <memchr>
 8009cc2:	b108      	cbz	r0, 8009cc8 <_printf_i+0x1bc>
 8009cc4:	1b40      	subs	r0, r0, r5
 8009cc6:	6060      	str	r0, [r4, #4]
 8009cc8:	6863      	ldr	r3, [r4, #4]
 8009cca:	6123      	str	r3, [r4, #16]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd2:	e7a7      	b.n	8009c24 <_printf_i+0x118>
 8009cd4:	6923      	ldr	r3, [r4, #16]
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4639      	mov	r1, r7
 8009cda:	4630      	mov	r0, r6
 8009cdc:	47c0      	blx	r8
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d0aa      	beq.n	8009c38 <_printf_i+0x12c>
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	079b      	lsls	r3, r3, #30
 8009ce6:	d413      	bmi.n	8009d10 <_printf_i+0x204>
 8009ce8:	68e0      	ldr	r0, [r4, #12]
 8009cea:	9b03      	ldr	r3, [sp, #12]
 8009cec:	4298      	cmp	r0, r3
 8009cee:	bfb8      	it	lt
 8009cf0:	4618      	movlt	r0, r3
 8009cf2:	e7a3      	b.n	8009c3c <_printf_i+0x130>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	464a      	mov	r2, r9
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	47c0      	blx	r8
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d09a      	beq.n	8009c38 <_printf_i+0x12c>
 8009d02:	3501      	adds	r5, #1
 8009d04:	68e3      	ldr	r3, [r4, #12]
 8009d06:	9a03      	ldr	r2, [sp, #12]
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	42ab      	cmp	r3, r5
 8009d0c:	dcf2      	bgt.n	8009cf4 <_printf_i+0x1e8>
 8009d0e:	e7eb      	b.n	8009ce8 <_printf_i+0x1dc>
 8009d10:	2500      	movs	r5, #0
 8009d12:	f104 0919 	add.w	r9, r4, #25
 8009d16:	e7f5      	b.n	8009d04 <_printf_i+0x1f8>
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1ac      	bne.n	8009c76 <_printf_i+0x16a>
 8009d1c:	7803      	ldrb	r3, [r0, #0]
 8009d1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d26:	e76c      	b.n	8009c02 <_printf_i+0xf6>
 8009d28:	0800cd42 	.word	0x0800cd42
 8009d2c:	0800cd53 	.word	0x0800cd53

08009d30 <siprintf>:
 8009d30:	b40e      	push	{r1, r2, r3}
 8009d32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d36:	b500      	push	{lr}
 8009d38:	b09c      	sub	sp, #112	; 0x70
 8009d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8009d3c:	9002      	str	r0, [sp, #8]
 8009d3e:	9006      	str	r0, [sp, #24]
 8009d40:	9107      	str	r1, [sp, #28]
 8009d42:	9104      	str	r1, [sp, #16]
 8009d44:	4808      	ldr	r0, [pc, #32]	; (8009d68 <siprintf+0x38>)
 8009d46:	4909      	ldr	r1, [pc, #36]	; (8009d6c <siprintf+0x3c>)
 8009d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4c:	9105      	str	r1, [sp, #20]
 8009d4e:	6800      	ldr	r0, [r0, #0]
 8009d50:	a902      	add	r1, sp, #8
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	f001 fa6a 	bl	800b22c <_svfiprintf_r>
 8009d58:	2200      	movs	r2, #0
 8009d5a:	9b02      	ldr	r3, [sp, #8]
 8009d5c:	701a      	strb	r2, [r3, #0]
 8009d5e:	b01c      	add	sp, #112	; 0x70
 8009d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d64:	b003      	add	sp, #12
 8009d66:	4770      	bx	lr
 8009d68:	20000010 	.word	0x20000010
 8009d6c:	ffff0208 	.word	0xffff0208

08009d70 <quorem>:
 8009d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	6903      	ldr	r3, [r0, #16]
 8009d76:	690c      	ldr	r4, [r1, #16]
 8009d78:	4680      	mov	r8, r0
 8009d7a:	42a3      	cmp	r3, r4
 8009d7c:	f2c0 8084 	blt.w	8009e88 <quorem+0x118>
 8009d80:	3c01      	subs	r4, #1
 8009d82:	f101 0714 	add.w	r7, r1, #20
 8009d86:	f100 0614 	add.w	r6, r0, #20
 8009d8a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009d8e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009d92:	3501      	adds	r5, #1
 8009d94:	fbb0 f5f5 	udiv	r5, r0, r5
 8009d98:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009d9c:	eb06 030c 	add.w	r3, r6, ip
 8009da0:	eb07 090c 	add.w	r9, r7, ip
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	b39d      	cbz	r5, 8009e10 <quorem+0xa0>
 8009da8:	f04f 0a00 	mov.w	sl, #0
 8009dac:	4638      	mov	r0, r7
 8009dae:	46b6      	mov	lr, r6
 8009db0:	46d3      	mov	fp, sl
 8009db2:	f850 2b04 	ldr.w	r2, [r0], #4
 8009db6:	b293      	uxth	r3, r2
 8009db8:	fb05 a303 	mla	r3, r5, r3, sl
 8009dbc:	0c12      	lsrs	r2, r2, #16
 8009dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009dc2:	fb05 a202 	mla	r2, r5, r2, sl
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	ebab 0303 	sub.w	r3, fp, r3
 8009dcc:	f8de b000 	ldr.w	fp, [lr]
 8009dd0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009dd4:	fa1f fb8b 	uxth.w	fp, fp
 8009dd8:	445b      	add	r3, fp
 8009dda:	fa1f fb82 	uxth.w	fp, r2
 8009dde:	f8de 2000 	ldr.w	r2, [lr]
 8009de2:	4581      	cmp	r9, r0
 8009de4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009de8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009df6:	f84e 3b04 	str.w	r3, [lr], #4
 8009dfa:	d2da      	bcs.n	8009db2 <quorem+0x42>
 8009dfc:	f856 300c 	ldr.w	r3, [r6, ip]
 8009e00:	b933      	cbnz	r3, 8009e10 <quorem+0xa0>
 8009e02:	9b01      	ldr	r3, [sp, #4]
 8009e04:	3b04      	subs	r3, #4
 8009e06:	429e      	cmp	r6, r3
 8009e08:	461a      	mov	r2, r3
 8009e0a:	d331      	bcc.n	8009e70 <quorem+0x100>
 8009e0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009e10:	4640      	mov	r0, r8
 8009e12:	f001 f835 	bl	800ae80 <__mcmp>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	db26      	blt.n	8009e68 <quorem+0xf8>
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f04f 0c00 	mov.w	ip, #0
 8009e20:	3501      	adds	r5, #1
 8009e22:	f857 1b04 	ldr.w	r1, [r7], #4
 8009e26:	f8d0 e000 	ldr.w	lr, [r0]
 8009e2a:	b28b      	uxth	r3, r1
 8009e2c:	ebac 0303 	sub.w	r3, ip, r3
 8009e30:	fa1f f28e 	uxth.w	r2, lr
 8009e34:	4413      	add	r3, r2
 8009e36:	0c0a      	lsrs	r2, r1, #16
 8009e38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e46:	45b9      	cmp	r9, r7
 8009e48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e4c:	f840 3b04 	str.w	r3, [r0], #4
 8009e50:	d2e7      	bcs.n	8009e22 <quorem+0xb2>
 8009e52:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009e56:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009e5a:	b92a      	cbnz	r2, 8009e68 <quorem+0xf8>
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	429e      	cmp	r6, r3
 8009e60:	461a      	mov	r2, r3
 8009e62:	d30b      	bcc.n	8009e7c <quorem+0x10c>
 8009e64:	f8c8 4010 	str.w	r4, [r8, #16]
 8009e68:	4628      	mov	r0, r5
 8009e6a:	b003      	add	sp, #12
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	6812      	ldr	r2, [r2, #0]
 8009e72:	3b04      	subs	r3, #4
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	d1c9      	bne.n	8009e0c <quorem+0x9c>
 8009e78:	3c01      	subs	r4, #1
 8009e7a:	e7c4      	b.n	8009e06 <quorem+0x96>
 8009e7c:	6812      	ldr	r2, [r2, #0]
 8009e7e:	3b04      	subs	r3, #4
 8009e80:	2a00      	cmp	r2, #0
 8009e82:	d1ef      	bne.n	8009e64 <quorem+0xf4>
 8009e84:	3c01      	subs	r4, #1
 8009e86:	e7ea      	b.n	8009e5e <quorem+0xee>
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e7ee      	b.n	8009e6a <quorem+0xfa>
 8009e8c:	0000      	movs	r0, r0
	...

08009e90 <_dtoa_r>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	4616      	mov	r6, r2
 8009e96:	461f      	mov	r7, r3
 8009e98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e9a:	b095      	sub	sp, #84	; 0x54
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009ea2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009ea6:	b93d      	cbnz	r5, 8009eb8 <_dtoa_r+0x28>
 8009ea8:	2010      	movs	r0, #16
 8009eaa:	f000 fdb3 	bl	800aa14 <malloc>
 8009eae:	6260      	str	r0, [r4, #36]	; 0x24
 8009eb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009eb4:	6005      	str	r5, [r0, #0]
 8009eb6:	60c5      	str	r5, [r0, #12]
 8009eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eba:	6819      	ldr	r1, [r3, #0]
 8009ebc:	b151      	cbz	r1, 8009ed4 <_dtoa_r+0x44>
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	4093      	lsls	r3, r2
 8009ec4:	604a      	str	r2, [r1, #4]
 8009ec6:	608b      	str	r3, [r1, #8]
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f000 fdf8 	bl	800aabe <_Bfree>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	1e3b      	subs	r3, r7, #0
 8009ed6:	bfaf      	iteee	ge
 8009ed8:	2300      	movge	r3, #0
 8009eda:	2201      	movlt	r2, #1
 8009edc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ee0:	9303      	strlt	r3, [sp, #12]
 8009ee2:	bfac      	ite	ge
 8009ee4:	f8c8 3000 	strge.w	r3, [r8]
 8009ee8:	f8c8 2000 	strlt.w	r2, [r8]
 8009eec:	4bae      	ldr	r3, [pc, #696]	; (800a1a8 <_dtoa_r+0x318>)
 8009eee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ef2:	ea33 0308 	bics.w	r3, r3, r8
 8009ef6:	d11b      	bne.n	8009f30 <_dtoa_r+0xa0>
 8009ef8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009efc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	9b02      	ldr	r3, [sp, #8]
 8009f02:	b923      	cbnz	r3, 8009f0e <_dtoa_r+0x7e>
 8009f04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	f000 8545 	beq.w	800a998 <_dtoa_r+0xb08>
 8009f0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f10:	b953      	cbnz	r3, 8009f28 <_dtoa_r+0x98>
 8009f12:	4ba6      	ldr	r3, [pc, #664]	; (800a1ac <_dtoa_r+0x31c>)
 8009f14:	e021      	b.n	8009f5a <_dtoa_r+0xca>
 8009f16:	4ba6      	ldr	r3, [pc, #664]	; (800a1b0 <_dtoa_r+0x320>)
 8009f18:	9306      	str	r3, [sp, #24]
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	9806      	ldr	r0, [sp, #24]
 8009f22:	b015      	add	sp, #84	; 0x54
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	4ba0      	ldr	r3, [pc, #640]	; (800a1ac <_dtoa_r+0x31c>)
 8009f2a:	9306      	str	r3, [sp, #24]
 8009f2c:	3303      	adds	r3, #3
 8009f2e:	e7f5      	b.n	8009f1c <_dtoa_r+0x8c>
 8009f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f34:	2200      	movs	r2, #0
 8009f36:	2300      	movs	r3, #0
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	f7f6 fda0 	bl	8000a80 <__aeabi_dcmpeq>
 8009f40:	4682      	mov	sl, r0
 8009f42:	b160      	cbz	r0, 8009f5e <_dtoa_r+0xce>
 8009f44:	2301      	movs	r3, #1
 8009f46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f48:	6013      	str	r3, [r2, #0]
 8009f4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 8520 	beq.w	800a992 <_dtoa_r+0xb02>
 8009f52:	4b98      	ldr	r3, [pc, #608]	; (800a1b4 <_dtoa_r+0x324>)
 8009f54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	9306      	str	r3, [sp, #24]
 8009f5c:	e7e0      	b.n	8009f20 <_dtoa_r+0x90>
 8009f5e:	ab12      	add	r3, sp, #72	; 0x48
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	ab13      	add	r3, sp, #76	; 0x4c
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	4632      	mov	r2, r6
 8009f68:	463b      	mov	r3, r7
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f001 f800 	bl	800af70 <__d2b>
 8009f70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f74:	4683      	mov	fp, r0
 8009f76:	2d00      	cmp	r5, #0
 8009f78:	d07d      	beq.n	800a076 <_dtoa_r+0x1e6>
 8009f7a:	46b0      	mov	r8, r6
 8009f7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009f84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009f88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009f90:	2200      	movs	r2, #0
 8009f92:	4b89      	ldr	r3, [pc, #548]	; (800a1b8 <_dtoa_r+0x328>)
 8009f94:	4640      	mov	r0, r8
 8009f96:	4649      	mov	r1, r9
 8009f98:	f7f6 f952 	bl	8000240 <__aeabi_dsub>
 8009f9c:	a37c      	add	r3, pc, #496	; (adr r3, 800a190 <_dtoa_r+0x300>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f7f6 fb05 	bl	80005b0 <__aeabi_dmul>
 8009fa6:	a37c      	add	r3, pc, #496	; (adr r3, 800a198 <_dtoa_r+0x308>)
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	f7f6 f94a 	bl	8000244 <__adddf3>
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	f7f6 fa91 	bl	80004dc <__aeabi_i2d>
 8009fba:	a379      	add	r3, pc, #484	; (adr r3, 800a1a0 <_dtoa_r+0x310>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 faf6 	bl	80005b0 <__aeabi_dmul>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4630      	mov	r0, r6
 8009fca:	4639      	mov	r1, r7
 8009fcc:	f7f6 f93a 	bl	8000244 <__adddf3>
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460f      	mov	r7, r1
 8009fd4:	f7f6 fd9c 	bl	8000b10 <__aeabi_d2iz>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4682      	mov	sl, r0
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4630      	mov	r0, r6
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	f7f6 fd57 	bl	8000a94 <__aeabi_dcmplt>
 8009fe6:	b148      	cbz	r0, 8009ffc <_dtoa_r+0x16c>
 8009fe8:	4650      	mov	r0, sl
 8009fea:	f7f6 fa77 	bl	80004dc <__aeabi_i2d>
 8009fee:	4632      	mov	r2, r6
 8009ff0:	463b      	mov	r3, r7
 8009ff2:	f7f6 fd45 	bl	8000a80 <__aeabi_dcmpeq>
 8009ff6:	b908      	cbnz	r0, 8009ffc <_dtoa_r+0x16c>
 8009ff8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ffc:	f1ba 0f16 	cmp.w	sl, #22
 800a000:	d85a      	bhi.n	800a0b8 <_dtoa_r+0x228>
 800a002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a006:	496d      	ldr	r1, [pc, #436]	; (800a1bc <_dtoa_r+0x32c>)
 800a008:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a010:	f7f6 fd5e 	bl	8000ad0 <__aeabi_dcmpgt>
 800a014:	2800      	cmp	r0, #0
 800a016:	d051      	beq.n	800a0bc <_dtoa_r+0x22c>
 800a018:	2300      	movs	r3, #0
 800a01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a01e:	930d      	str	r3, [sp, #52]	; 0x34
 800a020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a022:	1b5d      	subs	r5, r3, r5
 800a024:	1e6b      	subs	r3, r5, #1
 800a026:	9307      	str	r3, [sp, #28]
 800a028:	bf43      	ittte	mi
 800a02a:	2300      	movmi	r3, #0
 800a02c:	f1c5 0901 	rsbmi	r9, r5, #1
 800a030:	9307      	strmi	r3, [sp, #28]
 800a032:	f04f 0900 	movpl.w	r9, #0
 800a036:	f1ba 0f00 	cmp.w	sl, #0
 800a03a:	db41      	blt.n	800a0c0 <_dtoa_r+0x230>
 800a03c:	9b07      	ldr	r3, [sp, #28]
 800a03e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a042:	4453      	add	r3, sl
 800a044:	9307      	str	r3, [sp, #28]
 800a046:	2300      	movs	r3, #0
 800a048:	9308      	str	r3, [sp, #32]
 800a04a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a04c:	2b09      	cmp	r3, #9
 800a04e:	f200 808f 	bhi.w	800a170 <_dtoa_r+0x2e0>
 800a052:	2b05      	cmp	r3, #5
 800a054:	bfc4      	itt	gt
 800a056:	3b04      	subgt	r3, #4
 800a058:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a05a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a05c:	bfc8      	it	gt
 800a05e:	2500      	movgt	r5, #0
 800a060:	f1a3 0302 	sub.w	r3, r3, #2
 800a064:	bfd8      	it	le
 800a066:	2501      	movle	r5, #1
 800a068:	2b03      	cmp	r3, #3
 800a06a:	f200 808d 	bhi.w	800a188 <_dtoa_r+0x2f8>
 800a06e:	e8df f003 	tbb	[pc, r3]
 800a072:	7d7b      	.short	0x7d7b
 800a074:	6f2f      	.short	0x6f2f
 800a076:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a07a:	441d      	add	r5, r3
 800a07c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a080:	2820      	cmp	r0, #32
 800a082:	dd13      	ble.n	800a0ac <_dtoa_r+0x21c>
 800a084:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a088:	9b02      	ldr	r3, [sp, #8]
 800a08a:	fa08 f800 	lsl.w	r8, r8, r0
 800a08e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a092:	fa23 f000 	lsr.w	r0, r3, r0
 800a096:	ea48 0000 	orr.w	r0, r8, r0
 800a09a:	f7f6 fa0f 	bl	80004bc <__aeabi_ui2d>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a0a6:	3d01      	subs	r5, #1
 800a0a8:	9310      	str	r3, [sp, #64]	; 0x40
 800a0aa:	e771      	b.n	8009f90 <_dtoa_r+0x100>
 800a0ac:	9b02      	ldr	r3, [sp, #8]
 800a0ae:	f1c0 0020 	rsb	r0, r0, #32
 800a0b2:	fa03 f000 	lsl.w	r0, r3, r0
 800a0b6:	e7f0      	b.n	800a09a <_dtoa_r+0x20a>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e7b0      	b.n	800a01e <_dtoa_r+0x18e>
 800a0bc:	900d      	str	r0, [sp, #52]	; 0x34
 800a0be:	e7af      	b.n	800a020 <_dtoa_r+0x190>
 800a0c0:	f1ca 0300 	rsb	r3, sl, #0
 800a0c4:	9308      	str	r3, [sp, #32]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	eba9 090a 	sub.w	r9, r9, sl
 800a0cc:	930c      	str	r3, [sp, #48]	; 0x30
 800a0ce:	e7bc      	b.n	800a04a <_dtoa_r+0x1ba>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	dd74      	ble.n	800a1c4 <_dtoa_r+0x334>
 800a0da:	4698      	mov	r8, r3
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a0e2:	6072      	str	r2, [r6, #4]
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	f102 0014 	add.w	r0, r2, #20
 800a0ea:	4298      	cmp	r0, r3
 800a0ec:	6871      	ldr	r1, [r6, #4]
 800a0ee:	d96e      	bls.n	800a1ce <_dtoa_r+0x33e>
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 fcb0 	bl	800aa56 <_Balloc>
 800a0f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f8:	6030      	str	r0, [r6, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f1b8 0f0e 	cmp.w	r8, #14
 800a100:	9306      	str	r3, [sp, #24]
 800a102:	f200 80ed 	bhi.w	800a2e0 <_dtoa_r+0x450>
 800a106:	2d00      	cmp	r5, #0
 800a108:	f000 80ea 	beq.w	800a2e0 <_dtoa_r+0x450>
 800a10c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a110:	f1ba 0f00 	cmp.w	sl, #0
 800a114:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a118:	dd77      	ble.n	800a20a <_dtoa_r+0x37a>
 800a11a:	4a28      	ldr	r2, [pc, #160]	; (800a1bc <_dtoa_r+0x32c>)
 800a11c:	f00a 030f 	and.w	r3, sl, #15
 800a120:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a124:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a128:	06f0      	lsls	r0, r6, #27
 800a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a132:	d568      	bpl.n	800a206 <_dtoa_r+0x376>
 800a134:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a138:	4b21      	ldr	r3, [pc, #132]	; (800a1c0 <_dtoa_r+0x330>)
 800a13a:	2503      	movs	r5, #3
 800a13c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a140:	f7f6 fb60 	bl	8000804 <__aeabi_ddiv>
 800a144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a148:	f006 060f 	and.w	r6, r6, #15
 800a14c:	4f1c      	ldr	r7, [pc, #112]	; (800a1c0 <_dtoa_r+0x330>)
 800a14e:	e04f      	b.n	800a1f0 <_dtoa_r+0x360>
 800a150:	2301      	movs	r3, #1
 800a152:	9309      	str	r3, [sp, #36]	; 0x24
 800a154:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a156:	4453      	add	r3, sl
 800a158:	f103 0801 	add.w	r8, r3, #1
 800a15c:	9304      	str	r3, [sp, #16]
 800a15e:	4643      	mov	r3, r8
 800a160:	2b01      	cmp	r3, #1
 800a162:	bfb8      	it	lt
 800a164:	2301      	movlt	r3, #1
 800a166:	e7ba      	b.n	800a0de <_dtoa_r+0x24e>
 800a168:	2300      	movs	r3, #0
 800a16a:	e7b2      	b.n	800a0d2 <_dtoa_r+0x242>
 800a16c:	2300      	movs	r3, #0
 800a16e:	e7f0      	b.n	800a152 <_dtoa_r+0x2c2>
 800a170:	2501      	movs	r5, #1
 800a172:	2300      	movs	r3, #0
 800a174:	9509      	str	r5, [sp, #36]	; 0x24
 800a176:	931e      	str	r3, [sp, #120]	; 0x78
 800a178:	f04f 33ff 	mov.w	r3, #4294967295
 800a17c:	2200      	movs	r2, #0
 800a17e:	9304      	str	r3, [sp, #16]
 800a180:	4698      	mov	r8, r3
 800a182:	2312      	movs	r3, #18
 800a184:	921f      	str	r2, [sp, #124]	; 0x7c
 800a186:	e7aa      	b.n	800a0de <_dtoa_r+0x24e>
 800a188:	2301      	movs	r3, #1
 800a18a:	9309      	str	r3, [sp, #36]	; 0x24
 800a18c:	e7f4      	b.n	800a178 <_dtoa_r+0x2e8>
 800a18e:	bf00      	nop
 800a190:	636f4361 	.word	0x636f4361
 800a194:	3fd287a7 	.word	0x3fd287a7
 800a198:	8b60c8b3 	.word	0x8b60c8b3
 800a19c:	3fc68a28 	.word	0x3fc68a28
 800a1a0:	509f79fb 	.word	0x509f79fb
 800a1a4:	3fd34413 	.word	0x3fd34413
 800a1a8:	7ff00000 	.word	0x7ff00000
 800a1ac:	0800cd6d 	.word	0x0800cd6d
 800a1b0:	0800cd64 	.word	0x0800cd64
 800a1b4:	0800cd41 	.word	0x0800cd41
 800a1b8:	3ff80000 	.word	0x3ff80000
 800a1bc:	0800cda0 	.word	0x0800cda0
 800a1c0:	0800cd78 	.word	0x0800cd78
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	4698      	mov	r8, r3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	e7da      	b.n	800a184 <_dtoa_r+0x2f4>
 800a1ce:	3101      	adds	r1, #1
 800a1d0:	6071      	str	r1, [r6, #4]
 800a1d2:	0052      	lsls	r2, r2, #1
 800a1d4:	e787      	b.n	800a0e6 <_dtoa_r+0x256>
 800a1d6:	07f1      	lsls	r1, r6, #31
 800a1d8:	d508      	bpl.n	800a1ec <_dtoa_r+0x35c>
 800a1da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1e2:	f7f6 f9e5 	bl	80005b0 <__aeabi_dmul>
 800a1e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a1ea:	3501      	adds	r5, #1
 800a1ec:	1076      	asrs	r6, r6, #1
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	2e00      	cmp	r6, #0
 800a1f2:	d1f0      	bne.n	800a1d6 <_dtoa_r+0x346>
 800a1f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a1f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1fc:	f7f6 fb02 	bl	8000804 <__aeabi_ddiv>
 800a200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a204:	e01b      	b.n	800a23e <_dtoa_r+0x3ae>
 800a206:	2502      	movs	r5, #2
 800a208:	e7a0      	b.n	800a14c <_dtoa_r+0x2bc>
 800a20a:	f000 80a4 	beq.w	800a356 <_dtoa_r+0x4c6>
 800a20e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a212:	f1ca 0600 	rsb	r6, sl, #0
 800a216:	4ba0      	ldr	r3, [pc, #640]	; (800a498 <_dtoa_r+0x608>)
 800a218:	f006 020f 	and.w	r2, r6, #15
 800a21c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 f9c4 	bl	80005b0 <__aeabi_dmul>
 800a228:	2502      	movs	r5, #2
 800a22a:	2300      	movs	r3, #0
 800a22c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a230:	4f9a      	ldr	r7, [pc, #616]	; (800a49c <_dtoa_r+0x60c>)
 800a232:	1136      	asrs	r6, r6, #4
 800a234:	2e00      	cmp	r6, #0
 800a236:	f040 8083 	bne.w	800a340 <_dtoa_r+0x4b0>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e0      	bne.n	800a200 <_dtoa_r+0x370>
 800a23e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 808a 	beq.w	800a35a <_dtoa_r+0x4ca>
 800a246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a24a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a24e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a252:	2200      	movs	r2, #0
 800a254:	4b92      	ldr	r3, [pc, #584]	; (800a4a0 <_dtoa_r+0x610>)
 800a256:	f7f6 fc1d 	bl	8000a94 <__aeabi_dcmplt>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d07d      	beq.n	800a35a <_dtoa_r+0x4ca>
 800a25e:	f1b8 0f00 	cmp.w	r8, #0
 800a262:	d07a      	beq.n	800a35a <_dtoa_r+0x4ca>
 800a264:	9b04      	ldr	r3, [sp, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	dd36      	ble.n	800a2d8 <_dtoa_r+0x448>
 800a26a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a26e:	2200      	movs	r2, #0
 800a270:	4b8c      	ldr	r3, [pc, #560]	; (800a4a4 <_dtoa_r+0x614>)
 800a272:	f7f6 f99d 	bl	80005b0 <__aeabi_dmul>
 800a276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a27a:	9e04      	ldr	r6, [sp, #16]
 800a27c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800a280:	3501      	adds	r5, #1
 800a282:	4628      	mov	r0, r5
 800a284:	f7f6 f92a 	bl	80004dc <__aeabi_i2d>
 800a288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a28c:	f7f6 f990 	bl	80005b0 <__aeabi_dmul>
 800a290:	2200      	movs	r2, #0
 800a292:	4b85      	ldr	r3, [pc, #532]	; (800a4a8 <_dtoa_r+0x618>)
 800a294:	f7f5 ffd6 	bl	8000244 <__adddf3>
 800a298:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a29c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a2a0:	950b      	str	r5, [sp, #44]	; 0x2c
 800a2a2:	2e00      	cmp	r6, #0
 800a2a4:	d15c      	bne.n	800a360 <_dtoa_r+0x4d0>
 800a2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	4b7f      	ldr	r3, [pc, #508]	; (800a4ac <_dtoa_r+0x61c>)
 800a2ae:	f7f5 ffc7 	bl	8000240 <__aeabi_dsub>
 800a2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ba:	f7f6 fc09 	bl	8000ad0 <__aeabi_dcmpgt>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f040 8281 	bne.w	800a7c6 <_dtoa_r+0x936>
 800a2c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a2ce:	f7f6 fbe1 	bl	8000a94 <__aeabi_dcmplt>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f040 8275 	bne.w	800a7c2 <_dtoa_r+0x932>
 800a2d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a2dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f2c0 814b 	blt.w	800a57e <_dtoa_r+0x6ee>
 800a2e8:	f1ba 0f0e 	cmp.w	sl, #14
 800a2ec:	f300 8147 	bgt.w	800a57e <_dtoa_r+0x6ee>
 800a2f0:	4b69      	ldr	r3, [pc, #420]	; (800a498 <_dtoa_r+0x608>)
 800a2f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a300:	2b00      	cmp	r3, #0
 800a302:	f280 80d7 	bge.w	800a4b4 <_dtoa_r+0x624>
 800a306:	f1b8 0f00 	cmp.w	r8, #0
 800a30a:	f300 80d3 	bgt.w	800a4b4 <_dtoa_r+0x624>
 800a30e:	f040 8257 	bne.w	800a7c0 <_dtoa_r+0x930>
 800a312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a316:	2200      	movs	r2, #0
 800a318:	4b64      	ldr	r3, [pc, #400]	; (800a4ac <_dtoa_r+0x61c>)
 800a31a:	f7f6 f949 	bl	80005b0 <__aeabi_dmul>
 800a31e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a322:	f7f6 fbcb 	bl	8000abc <__aeabi_dcmpge>
 800a326:	4646      	mov	r6, r8
 800a328:	4647      	mov	r7, r8
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f040 822d 	bne.w	800a78a <_dtoa_r+0x8fa>
 800a330:	9b06      	ldr	r3, [sp, #24]
 800a332:	9a06      	ldr	r2, [sp, #24]
 800a334:	1c5d      	adds	r5, r3, #1
 800a336:	2331      	movs	r3, #49	; 0x31
 800a338:	f10a 0a01 	add.w	sl, sl, #1
 800a33c:	7013      	strb	r3, [r2, #0]
 800a33e:	e228      	b.n	800a792 <_dtoa_r+0x902>
 800a340:	07f2      	lsls	r2, r6, #31
 800a342:	d505      	bpl.n	800a350 <_dtoa_r+0x4c0>
 800a344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a348:	f7f6 f932 	bl	80005b0 <__aeabi_dmul>
 800a34c:	2301      	movs	r3, #1
 800a34e:	3501      	adds	r5, #1
 800a350:	1076      	asrs	r6, r6, #1
 800a352:	3708      	adds	r7, #8
 800a354:	e76e      	b.n	800a234 <_dtoa_r+0x3a4>
 800a356:	2502      	movs	r5, #2
 800a358:	e771      	b.n	800a23e <_dtoa_r+0x3ae>
 800a35a:	4657      	mov	r7, sl
 800a35c:	4646      	mov	r6, r8
 800a35e:	e790      	b.n	800a282 <_dtoa_r+0x3f2>
 800a360:	4b4d      	ldr	r3, [pc, #308]	; (800a498 <_dtoa_r+0x608>)
 800a362:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a366:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d048      	beq.n	800a402 <_dtoa_r+0x572>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	2000      	movs	r0, #0
 800a376:	494e      	ldr	r1, [pc, #312]	; (800a4b0 <_dtoa_r+0x620>)
 800a378:	f7f6 fa44 	bl	8000804 <__aeabi_ddiv>
 800a37c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a380:	f7f5 ff5e 	bl	8000240 <__aeabi_dsub>
 800a384:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a388:	9d06      	ldr	r5, [sp, #24]
 800a38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38e:	f7f6 fbbf 	bl	8000b10 <__aeabi_d2iz>
 800a392:	9011      	str	r0, [sp, #68]	; 0x44
 800a394:	f7f6 f8a2 	bl	80004dc <__aeabi_i2d>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a0:	f7f5 ff4e 	bl	8000240 <__aeabi_dsub>
 800a3a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3aa:	3330      	adds	r3, #48	; 0x30
 800a3ac:	f805 3b01 	strb.w	r3, [r5], #1
 800a3b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3b4:	f7f6 fb6e 	bl	8000a94 <__aeabi_dcmplt>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d163      	bne.n	800a484 <_dtoa_r+0x5f4>
 800a3bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	4937      	ldr	r1, [pc, #220]	; (800a4a0 <_dtoa_r+0x610>)
 800a3c4:	f7f5 ff3c 	bl	8000240 <__aeabi_dsub>
 800a3c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3cc:	f7f6 fb62 	bl	8000a94 <__aeabi_dcmplt>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	f040 80b5 	bne.w	800a540 <_dtoa_r+0x6b0>
 800a3d6:	9b06      	ldr	r3, [sp, #24]
 800a3d8:	1aeb      	subs	r3, r5, r3
 800a3da:	429e      	cmp	r6, r3
 800a3dc:	f77f af7c 	ble.w	800a2d8 <_dtoa_r+0x448>
 800a3e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4b2f      	ldr	r3, [pc, #188]	; (800a4a4 <_dtoa_r+0x614>)
 800a3e8:	f7f6 f8e2 	bl	80005b0 <__aeabi_dmul>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3f6:	4b2b      	ldr	r3, [pc, #172]	; (800a4a4 <_dtoa_r+0x614>)
 800a3f8:	f7f6 f8da 	bl	80005b0 <__aeabi_dmul>
 800a3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a400:	e7c3      	b.n	800a38a <_dtoa_r+0x4fa>
 800a402:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a406:	f7f6 f8d3 	bl	80005b0 <__aeabi_dmul>
 800a40a:	9b06      	ldr	r3, [sp, #24]
 800a40c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a410:	199d      	adds	r5, r3, r6
 800a412:	461e      	mov	r6, r3
 800a414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a418:	f7f6 fb7a 	bl	8000b10 <__aeabi_d2iz>
 800a41c:	9011      	str	r0, [sp, #68]	; 0x44
 800a41e:	f7f6 f85d 	bl	80004dc <__aeabi_i2d>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a42a:	f7f5 ff09 	bl	8000240 <__aeabi_dsub>
 800a42e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a434:	3330      	adds	r3, #48	; 0x30
 800a436:	f806 3b01 	strb.w	r3, [r6], #1
 800a43a:	42ae      	cmp	r6, r5
 800a43c:	f04f 0200 	mov.w	r2, #0
 800a440:	d124      	bne.n	800a48c <_dtoa_r+0x5fc>
 800a442:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a446:	4b1a      	ldr	r3, [pc, #104]	; (800a4b0 <_dtoa_r+0x620>)
 800a448:	f7f5 fefc 	bl	8000244 <__adddf3>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a454:	f7f6 fb3c 	bl	8000ad0 <__aeabi_dcmpgt>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d171      	bne.n	800a540 <_dtoa_r+0x6b0>
 800a45c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a460:	2000      	movs	r0, #0
 800a462:	4913      	ldr	r1, [pc, #76]	; (800a4b0 <_dtoa_r+0x620>)
 800a464:	f7f5 feec 	bl	8000240 <__aeabi_dsub>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a470:	f7f6 fb10 	bl	8000a94 <__aeabi_dcmplt>
 800a474:	2800      	cmp	r0, #0
 800a476:	f43f af2f 	beq.w	800a2d8 <_dtoa_r+0x448>
 800a47a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a47e:	1e6a      	subs	r2, r5, #1
 800a480:	2b30      	cmp	r3, #48	; 0x30
 800a482:	d001      	beq.n	800a488 <_dtoa_r+0x5f8>
 800a484:	46ba      	mov	sl, r7
 800a486:	e04a      	b.n	800a51e <_dtoa_r+0x68e>
 800a488:	4615      	mov	r5, r2
 800a48a:	e7f6      	b.n	800a47a <_dtoa_r+0x5ea>
 800a48c:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <_dtoa_r+0x614>)
 800a48e:	f7f6 f88f 	bl	80005b0 <__aeabi_dmul>
 800a492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a496:	e7bd      	b.n	800a414 <_dtoa_r+0x584>
 800a498:	0800cda0 	.word	0x0800cda0
 800a49c:	0800cd78 	.word	0x0800cd78
 800a4a0:	3ff00000 	.word	0x3ff00000
 800a4a4:	40240000 	.word	0x40240000
 800a4a8:	401c0000 	.word	0x401c0000
 800a4ac:	40140000 	.word	0x40140000
 800a4b0:	3fe00000 	.word	0x3fe00000
 800a4b4:	9d06      	ldr	r5, [sp, #24]
 800a4b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4be:	4630      	mov	r0, r6
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	f7f6 f99f 	bl	8000804 <__aeabi_ddiv>
 800a4c6:	f7f6 fb23 	bl	8000b10 <__aeabi_d2iz>
 800a4ca:	4681      	mov	r9, r0
 800a4cc:	f7f6 f806 	bl	80004dc <__aeabi_i2d>
 800a4d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4d4:	f7f6 f86c 	bl	80005b0 <__aeabi_dmul>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4639      	mov	r1, r7
 800a4e0:	f7f5 feae 	bl	8000240 <__aeabi_dsub>
 800a4e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a4e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a4ec:	9e06      	ldr	r6, [sp, #24]
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	1bae      	subs	r6, r5, r6
 800a4f2:	45b0      	cmp	r8, r6
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	d135      	bne.n	800a564 <_dtoa_r+0x6d4>
 800a4f8:	f7f5 fea4 	bl	8000244 <__adddf3>
 800a4fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a500:	4606      	mov	r6, r0
 800a502:	460f      	mov	r7, r1
 800a504:	f7f6 fae4 	bl	8000ad0 <__aeabi_dcmpgt>
 800a508:	b9c8      	cbnz	r0, 800a53e <_dtoa_r+0x6ae>
 800a50a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	f7f6 fab5 	bl	8000a80 <__aeabi_dcmpeq>
 800a516:	b110      	cbz	r0, 800a51e <_dtoa_r+0x68e>
 800a518:	f019 0f01 	tst.w	r9, #1
 800a51c:	d10f      	bne.n	800a53e <_dtoa_r+0x6ae>
 800a51e:	4659      	mov	r1, fp
 800a520:	4620      	mov	r0, r4
 800a522:	f000 facc 	bl	800aabe <_Bfree>
 800a526:	2300      	movs	r3, #0
 800a528:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a52a:	702b      	strb	r3, [r5, #0]
 800a52c:	f10a 0301 	add.w	r3, sl, #1
 800a530:	6013      	str	r3, [r2, #0]
 800a532:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a534:	2b00      	cmp	r3, #0
 800a536:	f43f acf3 	beq.w	8009f20 <_dtoa_r+0x90>
 800a53a:	601d      	str	r5, [r3, #0]
 800a53c:	e4f0      	b.n	8009f20 <_dtoa_r+0x90>
 800a53e:	4657      	mov	r7, sl
 800a540:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a544:	1e6b      	subs	r3, r5, #1
 800a546:	2a39      	cmp	r2, #57	; 0x39
 800a548:	d106      	bne.n	800a558 <_dtoa_r+0x6c8>
 800a54a:	9a06      	ldr	r2, [sp, #24]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d107      	bne.n	800a560 <_dtoa_r+0x6d0>
 800a550:	2330      	movs	r3, #48	; 0x30
 800a552:	7013      	strb	r3, [r2, #0]
 800a554:	4613      	mov	r3, r2
 800a556:	3701      	adds	r7, #1
 800a558:	781a      	ldrb	r2, [r3, #0]
 800a55a:	3201      	adds	r2, #1
 800a55c:	701a      	strb	r2, [r3, #0]
 800a55e:	e791      	b.n	800a484 <_dtoa_r+0x5f4>
 800a560:	461d      	mov	r5, r3
 800a562:	e7ed      	b.n	800a540 <_dtoa_r+0x6b0>
 800a564:	2200      	movs	r2, #0
 800a566:	4b99      	ldr	r3, [pc, #612]	; (800a7cc <_dtoa_r+0x93c>)
 800a568:	f7f6 f822 	bl	80005b0 <__aeabi_dmul>
 800a56c:	2200      	movs	r2, #0
 800a56e:	2300      	movs	r3, #0
 800a570:	4606      	mov	r6, r0
 800a572:	460f      	mov	r7, r1
 800a574:	f7f6 fa84 	bl	8000a80 <__aeabi_dcmpeq>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d09e      	beq.n	800a4ba <_dtoa_r+0x62a>
 800a57c:	e7cf      	b.n	800a51e <_dtoa_r+0x68e>
 800a57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a580:	2a00      	cmp	r2, #0
 800a582:	f000 8088 	beq.w	800a696 <_dtoa_r+0x806>
 800a586:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a588:	2a01      	cmp	r2, #1
 800a58a:	dc6d      	bgt.n	800a668 <_dtoa_r+0x7d8>
 800a58c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a58e:	2a00      	cmp	r2, #0
 800a590:	d066      	beq.n	800a660 <_dtoa_r+0x7d0>
 800a592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a596:	464d      	mov	r5, r9
 800a598:	9e08      	ldr	r6, [sp, #32]
 800a59a:	9a07      	ldr	r2, [sp, #28]
 800a59c:	2101      	movs	r1, #1
 800a59e:	441a      	add	r2, r3
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	4499      	add	r9, r3
 800a5a4:	9207      	str	r2, [sp, #28]
 800a5a6:	f000 fb2a 	bl	800abfe <__i2b>
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	2d00      	cmp	r5, #0
 800a5ae:	dd0b      	ble.n	800a5c8 <_dtoa_r+0x738>
 800a5b0:	9b07      	ldr	r3, [sp, #28]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	dd08      	ble.n	800a5c8 <_dtoa_r+0x738>
 800a5b6:	42ab      	cmp	r3, r5
 800a5b8:	bfa8      	it	ge
 800a5ba:	462b      	movge	r3, r5
 800a5bc:	9a07      	ldr	r2, [sp, #28]
 800a5be:	eba9 0903 	sub.w	r9, r9, r3
 800a5c2:	1aed      	subs	r5, r5, r3
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	9307      	str	r3, [sp, #28]
 800a5c8:	9b08      	ldr	r3, [sp, #32]
 800a5ca:	b1eb      	cbz	r3, 800a608 <_dtoa_r+0x778>
 800a5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d065      	beq.n	800a69e <_dtoa_r+0x80e>
 800a5d2:	b18e      	cbz	r6, 800a5f8 <_dtoa_r+0x768>
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	4632      	mov	r2, r6
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 fbaf 	bl	800ad3c <__pow5mult>
 800a5de:	465a      	mov	r2, fp
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	4607      	mov	r7, r0
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fb13 	bl	800ac10 <__multiply>
 800a5ea:	4659      	mov	r1, fp
 800a5ec:	900a      	str	r0, [sp, #40]	; 0x28
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 fa65 	bl	800aabe <_Bfree>
 800a5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f6:	469b      	mov	fp, r3
 800a5f8:	9b08      	ldr	r3, [sp, #32]
 800a5fa:	1b9a      	subs	r2, r3, r6
 800a5fc:	d004      	beq.n	800a608 <_dtoa_r+0x778>
 800a5fe:	4659      	mov	r1, fp
 800a600:	4620      	mov	r0, r4
 800a602:	f000 fb9b 	bl	800ad3c <__pow5mult>
 800a606:	4683      	mov	fp, r0
 800a608:	2101      	movs	r1, #1
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 faf7 	bl	800abfe <__i2b>
 800a610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a612:	4606      	mov	r6, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 81c6 	beq.w	800a9a6 <_dtoa_r+0xb16>
 800a61a:	461a      	mov	r2, r3
 800a61c:	4601      	mov	r1, r0
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 fb8c 	bl	800ad3c <__pow5mult>
 800a624:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a626:	4606      	mov	r6, r0
 800a628:	2b01      	cmp	r3, #1
 800a62a:	dc3e      	bgt.n	800a6aa <_dtoa_r+0x81a>
 800a62c:	9b02      	ldr	r3, [sp, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d137      	bne.n	800a6a2 <_dtoa_r+0x812>
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d134      	bne.n	800a6a6 <_dtoa_r+0x816>
 800a63c:	9b03      	ldr	r3, [sp, #12]
 800a63e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a642:	0d1b      	lsrs	r3, r3, #20
 800a644:	051b      	lsls	r3, r3, #20
 800a646:	b12b      	cbz	r3, 800a654 <_dtoa_r+0x7c4>
 800a648:	9b07      	ldr	r3, [sp, #28]
 800a64a:	f109 0901 	add.w	r9, r9, #1
 800a64e:	3301      	adds	r3, #1
 800a650:	9307      	str	r3, [sp, #28]
 800a652:	2301      	movs	r3, #1
 800a654:	9308      	str	r3, [sp, #32]
 800a656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d128      	bne.n	800a6ae <_dtoa_r+0x81e>
 800a65c:	2001      	movs	r0, #1
 800a65e:	e02e      	b.n	800a6be <_dtoa_r+0x82e>
 800a660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a662:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a666:	e796      	b.n	800a596 <_dtoa_r+0x706>
 800a668:	9b08      	ldr	r3, [sp, #32]
 800a66a:	f108 36ff 	add.w	r6, r8, #4294967295
 800a66e:	42b3      	cmp	r3, r6
 800a670:	bfb7      	itett	lt
 800a672:	9b08      	ldrlt	r3, [sp, #32]
 800a674:	1b9e      	subge	r6, r3, r6
 800a676:	1af2      	sublt	r2, r6, r3
 800a678:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a67a:	bfbf      	itttt	lt
 800a67c:	9608      	strlt	r6, [sp, #32]
 800a67e:	189b      	addlt	r3, r3, r2
 800a680:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a682:	2600      	movlt	r6, #0
 800a684:	f1b8 0f00 	cmp.w	r8, #0
 800a688:	bfb9      	ittee	lt
 800a68a:	eba9 0508 	sublt.w	r5, r9, r8
 800a68e:	2300      	movlt	r3, #0
 800a690:	464d      	movge	r5, r9
 800a692:	4643      	movge	r3, r8
 800a694:	e781      	b.n	800a59a <_dtoa_r+0x70a>
 800a696:	9e08      	ldr	r6, [sp, #32]
 800a698:	464d      	mov	r5, r9
 800a69a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a69c:	e786      	b.n	800a5ac <_dtoa_r+0x71c>
 800a69e:	9a08      	ldr	r2, [sp, #32]
 800a6a0:	e7ad      	b.n	800a5fe <_dtoa_r+0x76e>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e7d6      	b.n	800a654 <_dtoa_r+0x7c4>
 800a6a6:	9b02      	ldr	r3, [sp, #8]
 800a6a8:	e7d4      	b.n	800a654 <_dtoa_r+0x7c4>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	9308      	str	r3, [sp, #32]
 800a6ae:	6933      	ldr	r3, [r6, #16]
 800a6b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6b4:	6918      	ldr	r0, [r3, #16]
 800a6b6:	f000 fa54 	bl	800ab62 <__hi0bits>
 800a6ba:	f1c0 0020 	rsb	r0, r0, #32
 800a6be:	9b07      	ldr	r3, [sp, #28]
 800a6c0:	4418      	add	r0, r3
 800a6c2:	f010 001f 	ands.w	r0, r0, #31
 800a6c6:	d047      	beq.n	800a758 <_dtoa_r+0x8c8>
 800a6c8:	f1c0 0320 	rsb	r3, r0, #32
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	dd3b      	ble.n	800a748 <_dtoa_r+0x8b8>
 800a6d0:	9b07      	ldr	r3, [sp, #28]
 800a6d2:	f1c0 001c 	rsb	r0, r0, #28
 800a6d6:	4481      	add	r9, r0
 800a6d8:	4405      	add	r5, r0
 800a6da:	4403      	add	r3, r0
 800a6dc:	9307      	str	r3, [sp, #28]
 800a6de:	f1b9 0f00 	cmp.w	r9, #0
 800a6e2:	dd05      	ble.n	800a6f0 <_dtoa_r+0x860>
 800a6e4:	4659      	mov	r1, fp
 800a6e6:	464a      	mov	r2, r9
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 fb75 	bl	800add8 <__lshift>
 800a6ee:	4683      	mov	fp, r0
 800a6f0:	9b07      	ldr	r3, [sp, #28]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dd05      	ble.n	800a702 <_dtoa_r+0x872>
 800a6f6:	4631      	mov	r1, r6
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fb6c 	bl	800add8 <__lshift>
 800a700:	4606      	mov	r6, r0
 800a702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a704:	b353      	cbz	r3, 800a75c <_dtoa_r+0x8cc>
 800a706:	4631      	mov	r1, r6
 800a708:	4658      	mov	r0, fp
 800a70a:	f000 fbb9 	bl	800ae80 <__mcmp>
 800a70e:	2800      	cmp	r0, #0
 800a710:	da24      	bge.n	800a75c <_dtoa_r+0x8cc>
 800a712:	2300      	movs	r3, #0
 800a714:	4659      	mov	r1, fp
 800a716:	220a      	movs	r2, #10
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 f9e7 	bl	800aaec <__multadd>
 800a71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a720:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a724:	4683      	mov	fp, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 8144 	beq.w	800a9b4 <_dtoa_r+0xb24>
 800a72c:	2300      	movs	r3, #0
 800a72e:	4639      	mov	r1, r7
 800a730:	220a      	movs	r2, #10
 800a732:	4620      	mov	r0, r4
 800a734:	f000 f9da 	bl	800aaec <__multadd>
 800a738:	9b04      	ldr	r3, [sp, #16]
 800a73a:	4607      	mov	r7, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	dc4d      	bgt.n	800a7dc <_dtoa_r+0x94c>
 800a740:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a742:	2b02      	cmp	r3, #2
 800a744:	dd4a      	ble.n	800a7dc <_dtoa_r+0x94c>
 800a746:	e011      	b.n	800a76c <_dtoa_r+0x8dc>
 800a748:	d0c9      	beq.n	800a6de <_dtoa_r+0x84e>
 800a74a:	9a07      	ldr	r2, [sp, #28]
 800a74c:	331c      	adds	r3, #28
 800a74e:	441a      	add	r2, r3
 800a750:	4499      	add	r9, r3
 800a752:	441d      	add	r5, r3
 800a754:	4613      	mov	r3, r2
 800a756:	e7c1      	b.n	800a6dc <_dtoa_r+0x84c>
 800a758:	4603      	mov	r3, r0
 800a75a:	e7f6      	b.n	800a74a <_dtoa_r+0x8ba>
 800a75c:	f1b8 0f00 	cmp.w	r8, #0
 800a760:	dc36      	bgt.n	800a7d0 <_dtoa_r+0x940>
 800a762:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a764:	2b02      	cmp	r3, #2
 800a766:	dd33      	ble.n	800a7d0 <_dtoa_r+0x940>
 800a768:	f8cd 8010 	str.w	r8, [sp, #16]
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	b963      	cbnz	r3, 800a78a <_dtoa_r+0x8fa>
 800a770:	4631      	mov	r1, r6
 800a772:	2205      	movs	r2, #5
 800a774:	4620      	mov	r0, r4
 800a776:	f000 f9b9 	bl	800aaec <__multadd>
 800a77a:	4601      	mov	r1, r0
 800a77c:	4606      	mov	r6, r0
 800a77e:	4658      	mov	r0, fp
 800a780:	f000 fb7e 	bl	800ae80 <__mcmp>
 800a784:	2800      	cmp	r0, #0
 800a786:	f73f add3 	bgt.w	800a330 <_dtoa_r+0x4a0>
 800a78a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a78c:	9d06      	ldr	r5, [sp, #24]
 800a78e:	ea6f 0a03 	mvn.w	sl, r3
 800a792:	f04f 0900 	mov.w	r9, #0
 800a796:	4631      	mov	r1, r6
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 f990 	bl	800aabe <_Bfree>
 800a79e:	2f00      	cmp	r7, #0
 800a7a0:	f43f aebd 	beq.w	800a51e <_dtoa_r+0x68e>
 800a7a4:	f1b9 0f00 	cmp.w	r9, #0
 800a7a8:	d005      	beq.n	800a7b6 <_dtoa_r+0x926>
 800a7aa:	45b9      	cmp	r9, r7
 800a7ac:	d003      	beq.n	800a7b6 <_dtoa_r+0x926>
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 f984 	bl	800aabe <_Bfree>
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 f980 	bl	800aabe <_Bfree>
 800a7be:	e6ae      	b.n	800a51e <_dtoa_r+0x68e>
 800a7c0:	2600      	movs	r6, #0
 800a7c2:	4637      	mov	r7, r6
 800a7c4:	e7e1      	b.n	800a78a <_dtoa_r+0x8fa>
 800a7c6:	46ba      	mov	sl, r7
 800a7c8:	4637      	mov	r7, r6
 800a7ca:	e5b1      	b.n	800a330 <_dtoa_r+0x4a0>
 800a7cc:	40240000 	.word	0x40240000
 800a7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d2:	f8cd 8010 	str.w	r8, [sp, #16]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 80f3 	beq.w	800a9c2 <_dtoa_r+0xb32>
 800a7dc:	2d00      	cmp	r5, #0
 800a7de:	dd05      	ble.n	800a7ec <_dtoa_r+0x95c>
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 faf7 	bl	800add8 <__lshift>
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	9b08      	ldr	r3, [sp, #32]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d04c      	beq.n	800a88c <_dtoa_r+0x9fc>
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 f92e 	bl	800aa56 <_Balloc>
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	f107 010c 	add.w	r1, r7, #12
 800a802:	3202      	adds	r2, #2
 800a804:	0092      	lsls	r2, r2, #2
 800a806:	300c      	adds	r0, #12
 800a808:	f000 f91a 	bl	800aa40 <memcpy>
 800a80c:	2201      	movs	r2, #1
 800a80e:	4629      	mov	r1, r5
 800a810:	4620      	mov	r0, r4
 800a812:	f000 fae1 	bl	800add8 <__lshift>
 800a816:	46b9      	mov	r9, r7
 800a818:	4607      	mov	r7, r0
 800a81a:	9b06      	ldr	r3, [sp, #24]
 800a81c:	9307      	str	r3, [sp, #28]
 800a81e:	9b02      	ldr	r3, [sp, #8]
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	9308      	str	r3, [sp, #32]
 800a826:	4631      	mov	r1, r6
 800a828:	4658      	mov	r0, fp
 800a82a:	f7ff faa1 	bl	8009d70 <quorem>
 800a82e:	4649      	mov	r1, r9
 800a830:	4605      	mov	r5, r0
 800a832:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a836:	4658      	mov	r0, fp
 800a838:	f000 fb22 	bl	800ae80 <__mcmp>
 800a83c:	463a      	mov	r2, r7
 800a83e:	9002      	str	r0, [sp, #8]
 800a840:	4631      	mov	r1, r6
 800a842:	4620      	mov	r0, r4
 800a844:	f000 fb36 	bl	800aeb4 <__mdiff>
 800a848:	68c3      	ldr	r3, [r0, #12]
 800a84a:	4602      	mov	r2, r0
 800a84c:	bb03      	cbnz	r3, 800a890 <_dtoa_r+0xa00>
 800a84e:	4601      	mov	r1, r0
 800a850:	9009      	str	r0, [sp, #36]	; 0x24
 800a852:	4658      	mov	r0, fp
 800a854:	f000 fb14 	bl	800ae80 <__mcmp>
 800a858:	4603      	mov	r3, r0
 800a85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a85c:	4611      	mov	r1, r2
 800a85e:	4620      	mov	r0, r4
 800a860:	9309      	str	r3, [sp, #36]	; 0x24
 800a862:	f000 f92c 	bl	800aabe <_Bfree>
 800a866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a868:	b9a3      	cbnz	r3, 800a894 <_dtoa_r+0xa04>
 800a86a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a86c:	b992      	cbnz	r2, 800a894 <_dtoa_r+0xa04>
 800a86e:	9a08      	ldr	r2, [sp, #32]
 800a870:	b982      	cbnz	r2, 800a894 <_dtoa_r+0xa04>
 800a872:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a876:	d029      	beq.n	800a8cc <_dtoa_r+0xa3c>
 800a878:	9b02      	ldr	r3, [sp, #8]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dd01      	ble.n	800a882 <_dtoa_r+0x9f2>
 800a87e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a882:	9b07      	ldr	r3, [sp, #28]
 800a884:	1c5d      	adds	r5, r3, #1
 800a886:	f883 8000 	strb.w	r8, [r3]
 800a88a:	e784      	b.n	800a796 <_dtoa_r+0x906>
 800a88c:	4638      	mov	r0, r7
 800a88e:	e7c2      	b.n	800a816 <_dtoa_r+0x986>
 800a890:	2301      	movs	r3, #1
 800a892:	e7e3      	b.n	800a85c <_dtoa_r+0x9cc>
 800a894:	9a02      	ldr	r2, [sp, #8]
 800a896:	2a00      	cmp	r2, #0
 800a898:	db04      	blt.n	800a8a4 <_dtoa_r+0xa14>
 800a89a:	d123      	bne.n	800a8e4 <_dtoa_r+0xa54>
 800a89c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a89e:	bb0a      	cbnz	r2, 800a8e4 <_dtoa_r+0xa54>
 800a8a0:	9a08      	ldr	r2, [sp, #32]
 800a8a2:	b9fa      	cbnz	r2, 800a8e4 <_dtoa_r+0xa54>
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	ddec      	ble.n	800a882 <_dtoa_r+0x9f2>
 800a8a8:	4659      	mov	r1, fp
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fa93 	bl	800add8 <__lshift>
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4683      	mov	fp, r0
 800a8b6:	f000 fae3 	bl	800ae80 <__mcmp>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	dc03      	bgt.n	800a8c6 <_dtoa_r+0xa36>
 800a8be:	d1e0      	bne.n	800a882 <_dtoa_r+0x9f2>
 800a8c0:	f018 0f01 	tst.w	r8, #1
 800a8c4:	d0dd      	beq.n	800a882 <_dtoa_r+0x9f2>
 800a8c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a8ca:	d1d8      	bne.n	800a87e <_dtoa_r+0x9ee>
 800a8cc:	9b07      	ldr	r3, [sp, #28]
 800a8ce:	9a07      	ldr	r2, [sp, #28]
 800a8d0:	1c5d      	adds	r5, r3, #1
 800a8d2:	2339      	movs	r3, #57	; 0x39
 800a8d4:	7013      	strb	r3, [r2, #0]
 800a8d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8da:	1e6a      	subs	r2, r5, #1
 800a8dc:	2b39      	cmp	r3, #57	; 0x39
 800a8de:	d04d      	beq.n	800a97c <_dtoa_r+0xaec>
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	e052      	b.n	800a98a <_dtoa_r+0xafa>
 800a8e4:	9a07      	ldr	r2, [sp, #28]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f102 0501 	add.w	r5, r2, #1
 800a8ec:	dd06      	ble.n	800a8fc <_dtoa_r+0xa6c>
 800a8ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a8f2:	d0eb      	beq.n	800a8cc <_dtoa_r+0xa3c>
 800a8f4:	f108 0801 	add.w	r8, r8, #1
 800a8f8:	9b07      	ldr	r3, [sp, #28]
 800a8fa:	e7c4      	b.n	800a886 <_dtoa_r+0x9f6>
 800a8fc:	9b06      	ldr	r3, [sp, #24]
 800a8fe:	9a04      	ldr	r2, [sp, #16]
 800a900:	1aeb      	subs	r3, r5, r3
 800a902:	4293      	cmp	r3, r2
 800a904:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a908:	d021      	beq.n	800a94e <_dtoa_r+0xabe>
 800a90a:	4659      	mov	r1, fp
 800a90c:	2300      	movs	r3, #0
 800a90e:	220a      	movs	r2, #10
 800a910:	4620      	mov	r0, r4
 800a912:	f000 f8eb 	bl	800aaec <__multadd>
 800a916:	45b9      	cmp	r9, r7
 800a918:	4683      	mov	fp, r0
 800a91a:	f04f 0300 	mov.w	r3, #0
 800a91e:	f04f 020a 	mov.w	r2, #10
 800a922:	4649      	mov	r1, r9
 800a924:	4620      	mov	r0, r4
 800a926:	d105      	bne.n	800a934 <_dtoa_r+0xaa4>
 800a928:	f000 f8e0 	bl	800aaec <__multadd>
 800a92c:	4681      	mov	r9, r0
 800a92e:	4607      	mov	r7, r0
 800a930:	9507      	str	r5, [sp, #28]
 800a932:	e778      	b.n	800a826 <_dtoa_r+0x996>
 800a934:	f000 f8da 	bl	800aaec <__multadd>
 800a938:	4639      	mov	r1, r7
 800a93a:	4681      	mov	r9, r0
 800a93c:	2300      	movs	r3, #0
 800a93e:	220a      	movs	r2, #10
 800a940:	4620      	mov	r0, r4
 800a942:	f000 f8d3 	bl	800aaec <__multadd>
 800a946:	4607      	mov	r7, r0
 800a948:	e7f2      	b.n	800a930 <_dtoa_r+0xaa0>
 800a94a:	f04f 0900 	mov.w	r9, #0
 800a94e:	4659      	mov	r1, fp
 800a950:	2201      	movs	r2, #1
 800a952:	4620      	mov	r0, r4
 800a954:	f000 fa40 	bl	800add8 <__lshift>
 800a958:	4631      	mov	r1, r6
 800a95a:	4683      	mov	fp, r0
 800a95c:	f000 fa90 	bl	800ae80 <__mcmp>
 800a960:	2800      	cmp	r0, #0
 800a962:	dcb8      	bgt.n	800a8d6 <_dtoa_r+0xa46>
 800a964:	d102      	bne.n	800a96c <_dtoa_r+0xadc>
 800a966:	f018 0f01 	tst.w	r8, #1
 800a96a:	d1b4      	bne.n	800a8d6 <_dtoa_r+0xa46>
 800a96c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a970:	1e6a      	subs	r2, r5, #1
 800a972:	2b30      	cmp	r3, #48	; 0x30
 800a974:	f47f af0f 	bne.w	800a796 <_dtoa_r+0x906>
 800a978:	4615      	mov	r5, r2
 800a97a:	e7f7      	b.n	800a96c <_dtoa_r+0xadc>
 800a97c:	9b06      	ldr	r3, [sp, #24]
 800a97e:	4293      	cmp	r3, r2
 800a980:	d105      	bne.n	800a98e <_dtoa_r+0xafe>
 800a982:	2331      	movs	r3, #49	; 0x31
 800a984:	9a06      	ldr	r2, [sp, #24]
 800a986:	f10a 0a01 	add.w	sl, sl, #1
 800a98a:	7013      	strb	r3, [r2, #0]
 800a98c:	e703      	b.n	800a796 <_dtoa_r+0x906>
 800a98e:	4615      	mov	r5, r2
 800a990:	e7a1      	b.n	800a8d6 <_dtoa_r+0xa46>
 800a992:	4b17      	ldr	r3, [pc, #92]	; (800a9f0 <_dtoa_r+0xb60>)
 800a994:	f7ff bae1 	b.w	8009f5a <_dtoa_r+0xca>
 800a998:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f47f aabb 	bne.w	8009f16 <_dtoa_r+0x86>
 800a9a0:	4b14      	ldr	r3, [pc, #80]	; (800a9f4 <_dtoa_r+0xb64>)
 800a9a2:	f7ff bada 	b.w	8009f5a <_dtoa_r+0xca>
 800a9a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	f77f ae3f 	ble.w	800a62c <_dtoa_r+0x79c>
 800a9ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9b0:	9308      	str	r3, [sp, #32]
 800a9b2:	e653      	b.n	800a65c <_dtoa_r+0x7cc>
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	dc03      	bgt.n	800a9c2 <_dtoa_r+0xb32>
 800a9ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	f73f aed5 	bgt.w	800a76c <_dtoa_r+0x8dc>
 800a9c2:	9d06      	ldr	r5, [sp, #24]
 800a9c4:	4631      	mov	r1, r6
 800a9c6:	4658      	mov	r0, fp
 800a9c8:	f7ff f9d2 	bl	8009d70 <quorem>
 800a9cc:	9b06      	ldr	r3, [sp, #24]
 800a9ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a9d2:	f805 8b01 	strb.w	r8, [r5], #1
 800a9d6:	9a04      	ldr	r2, [sp, #16]
 800a9d8:	1aeb      	subs	r3, r5, r3
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	ddb5      	ble.n	800a94a <_dtoa_r+0xaba>
 800a9de:	4659      	mov	r1, fp
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	220a      	movs	r2, #10
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f000 f881 	bl	800aaec <__multadd>
 800a9ea:	4683      	mov	fp, r0
 800a9ec:	e7ea      	b.n	800a9c4 <_dtoa_r+0xb34>
 800a9ee:	bf00      	nop
 800a9f0:	0800cd40 	.word	0x0800cd40
 800a9f4:	0800cd64 	.word	0x0800cd64

0800a9f8 <_localeconv_r>:
 800a9f8:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <_localeconv_r+0x14>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6a18      	ldr	r0, [r3, #32]
 800a9fe:	4b04      	ldr	r3, [pc, #16]	; (800aa10 <_localeconv_r+0x18>)
 800aa00:	2800      	cmp	r0, #0
 800aa02:	bf08      	it	eq
 800aa04:	4618      	moveq	r0, r3
 800aa06:	30f0      	adds	r0, #240	; 0xf0
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	20000010 	.word	0x20000010
 800aa10:	20000074 	.word	0x20000074

0800aa14 <malloc>:
 800aa14:	4b02      	ldr	r3, [pc, #8]	; (800aa20 <malloc+0xc>)
 800aa16:	4601      	mov	r1, r0
 800aa18:	6818      	ldr	r0, [r3, #0]
 800aa1a:	f000 bb53 	b.w	800b0c4 <_malloc_r>
 800aa1e:	bf00      	nop
 800aa20:	20000010 	.word	0x20000010

0800aa24 <memchr>:
 800aa24:	b510      	push	{r4, lr}
 800aa26:	b2c9      	uxtb	r1, r1
 800aa28:	4402      	add	r2, r0
 800aa2a:	4290      	cmp	r0, r2
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	d101      	bne.n	800aa34 <memchr+0x10>
 800aa30:	2300      	movs	r3, #0
 800aa32:	e003      	b.n	800aa3c <memchr+0x18>
 800aa34:	781c      	ldrb	r4, [r3, #0]
 800aa36:	3001      	adds	r0, #1
 800aa38:	428c      	cmp	r4, r1
 800aa3a:	d1f6      	bne.n	800aa2a <memchr+0x6>
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	bd10      	pop	{r4, pc}

0800aa40 <memcpy>:
 800aa40:	b510      	push	{r4, lr}
 800aa42:	1e43      	subs	r3, r0, #1
 800aa44:	440a      	add	r2, r1
 800aa46:	4291      	cmp	r1, r2
 800aa48:	d100      	bne.n	800aa4c <memcpy+0xc>
 800aa4a:	bd10      	pop	{r4, pc}
 800aa4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa54:	e7f7      	b.n	800aa46 <memcpy+0x6>

0800aa56 <_Balloc>:
 800aa56:	b570      	push	{r4, r5, r6, lr}
 800aa58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	460e      	mov	r6, r1
 800aa5e:	b93d      	cbnz	r5, 800aa70 <_Balloc+0x1a>
 800aa60:	2010      	movs	r0, #16
 800aa62:	f7ff ffd7 	bl	800aa14 <malloc>
 800aa66:	6260      	str	r0, [r4, #36]	; 0x24
 800aa68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa6c:	6005      	str	r5, [r0, #0]
 800aa6e:	60c5      	str	r5, [r0, #12]
 800aa70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa72:	68eb      	ldr	r3, [r5, #12]
 800aa74:	b183      	cbz	r3, 800aa98 <_Balloc+0x42>
 800aa76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aa7e:	b9b8      	cbnz	r0, 800aab0 <_Balloc+0x5a>
 800aa80:	2101      	movs	r1, #1
 800aa82:	fa01 f506 	lsl.w	r5, r1, r6
 800aa86:	1d6a      	adds	r2, r5, #5
 800aa88:	0092      	lsls	r2, r2, #2
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 fabf 	bl	800b00e <_calloc_r>
 800aa90:	b160      	cbz	r0, 800aaac <_Balloc+0x56>
 800aa92:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aa96:	e00e      	b.n	800aab6 <_Balloc+0x60>
 800aa98:	2221      	movs	r2, #33	; 0x21
 800aa9a:	2104      	movs	r1, #4
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f000 fab6 	bl	800b00e <_calloc_r>
 800aaa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaa4:	60e8      	str	r0, [r5, #12]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1e4      	bne.n	800aa76 <_Balloc+0x20>
 800aaac:	2000      	movs	r0, #0
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
 800aab0:	6802      	ldr	r2, [r0, #0]
 800aab2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aab6:	2300      	movs	r3, #0
 800aab8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aabc:	e7f7      	b.n	800aaae <_Balloc+0x58>

0800aabe <_Bfree>:
 800aabe:	b570      	push	{r4, r5, r6, lr}
 800aac0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aac2:	4606      	mov	r6, r0
 800aac4:	460d      	mov	r5, r1
 800aac6:	b93c      	cbnz	r4, 800aad8 <_Bfree+0x1a>
 800aac8:	2010      	movs	r0, #16
 800aaca:	f7ff ffa3 	bl	800aa14 <malloc>
 800aace:	6270      	str	r0, [r6, #36]	; 0x24
 800aad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aad4:	6004      	str	r4, [r0, #0]
 800aad6:	60c4      	str	r4, [r0, #12]
 800aad8:	b13d      	cbz	r5, 800aaea <_Bfree+0x2c>
 800aada:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aadc:	686a      	ldr	r2, [r5, #4]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aae4:	6029      	str	r1, [r5, #0]
 800aae6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aaea:	bd70      	pop	{r4, r5, r6, pc}

0800aaec <__multadd>:
 800aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf0:	461f      	mov	r7, r3
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	690d      	ldr	r5, [r1, #16]
 800aafa:	f101 0c14 	add.w	ip, r1, #20
 800aafe:	f8dc 0000 	ldr.w	r0, [ip]
 800ab02:	3301      	adds	r3, #1
 800ab04:	b281      	uxth	r1, r0
 800ab06:	fb02 7101 	mla	r1, r2, r1, r7
 800ab0a:	0c00      	lsrs	r0, r0, #16
 800ab0c:	0c0f      	lsrs	r7, r1, #16
 800ab0e:	fb02 7000 	mla	r0, r2, r0, r7
 800ab12:	b289      	uxth	r1, r1
 800ab14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ab18:	429d      	cmp	r5, r3
 800ab1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ab1e:	f84c 1b04 	str.w	r1, [ip], #4
 800ab22:	dcec      	bgt.n	800aafe <__multadd+0x12>
 800ab24:	b1d7      	cbz	r7, 800ab5c <__multadd+0x70>
 800ab26:	68a3      	ldr	r3, [r4, #8]
 800ab28:	42ab      	cmp	r3, r5
 800ab2a:	dc12      	bgt.n	800ab52 <__multadd+0x66>
 800ab2c:	6861      	ldr	r1, [r4, #4]
 800ab2e:	4630      	mov	r0, r6
 800ab30:	3101      	adds	r1, #1
 800ab32:	f7ff ff90 	bl	800aa56 <_Balloc>
 800ab36:	4680      	mov	r8, r0
 800ab38:	6922      	ldr	r2, [r4, #16]
 800ab3a:	f104 010c 	add.w	r1, r4, #12
 800ab3e:	3202      	adds	r2, #2
 800ab40:	0092      	lsls	r2, r2, #2
 800ab42:	300c      	adds	r0, #12
 800ab44:	f7ff ff7c 	bl	800aa40 <memcpy>
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f7ff ffb7 	bl	800aabe <_Bfree>
 800ab50:	4644      	mov	r4, r8
 800ab52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab56:	3501      	adds	r5, #1
 800ab58:	615f      	str	r7, [r3, #20]
 800ab5a:	6125      	str	r5, [r4, #16]
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ab62 <__hi0bits>:
 800ab62:	0c02      	lsrs	r2, r0, #16
 800ab64:	0412      	lsls	r2, r2, #16
 800ab66:	4603      	mov	r3, r0
 800ab68:	b9b2      	cbnz	r2, 800ab98 <__hi0bits+0x36>
 800ab6a:	0403      	lsls	r3, r0, #16
 800ab6c:	2010      	movs	r0, #16
 800ab6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ab72:	bf04      	itt	eq
 800ab74:	021b      	lsleq	r3, r3, #8
 800ab76:	3008      	addeq	r0, #8
 800ab78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ab7c:	bf04      	itt	eq
 800ab7e:	011b      	lsleq	r3, r3, #4
 800ab80:	3004      	addeq	r0, #4
 800ab82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ab86:	bf04      	itt	eq
 800ab88:	009b      	lsleq	r3, r3, #2
 800ab8a:	3002      	addeq	r0, #2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	db06      	blt.n	800ab9e <__hi0bits+0x3c>
 800ab90:	005b      	lsls	r3, r3, #1
 800ab92:	d503      	bpl.n	800ab9c <__hi0bits+0x3a>
 800ab94:	3001      	adds	r0, #1
 800ab96:	4770      	bx	lr
 800ab98:	2000      	movs	r0, #0
 800ab9a:	e7e8      	b.n	800ab6e <__hi0bits+0xc>
 800ab9c:	2020      	movs	r0, #32
 800ab9e:	4770      	bx	lr

0800aba0 <__lo0bits>:
 800aba0:	6803      	ldr	r3, [r0, #0]
 800aba2:	4601      	mov	r1, r0
 800aba4:	f013 0207 	ands.w	r2, r3, #7
 800aba8:	d00b      	beq.n	800abc2 <__lo0bits+0x22>
 800abaa:	07da      	lsls	r2, r3, #31
 800abac:	d423      	bmi.n	800abf6 <__lo0bits+0x56>
 800abae:	0798      	lsls	r0, r3, #30
 800abb0:	bf49      	itett	mi
 800abb2:	085b      	lsrmi	r3, r3, #1
 800abb4:	089b      	lsrpl	r3, r3, #2
 800abb6:	2001      	movmi	r0, #1
 800abb8:	600b      	strmi	r3, [r1, #0]
 800abba:	bf5c      	itt	pl
 800abbc:	600b      	strpl	r3, [r1, #0]
 800abbe:	2002      	movpl	r0, #2
 800abc0:	4770      	bx	lr
 800abc2:	b298      	uxth	r0, r3
 800abc4:	b9a8      	cbnz	r0, 800abf2 <__lo0bits+0x52>
 800abc6:	2010      	movs	r0, #16
 800abc8:	0c1b      	lsrs	r3, r3, #16
 800abca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800abce:	bf04      	itt	eq
 800abd0:	0a1b      	lsreq	r3, r3, #8
 800abd2:	3008      	addeq	r0, #8
 800abd4:	071a      	lsls	r2, r3, #28
 800abd6:	bf04      	itt	eq
 800abd8:	091b      	lsreq	r3, r3, #4
 800abda:	3004      	addeq	r0, #4
 800abdc:	079a      	lsls	r2, r3, #30
 800abde:	bf04      	itt	eq
 800abe0:	089b      	lsreq	r3, r3, #2
 800abe2:	3002      	addeq	r0, #2
 800abe4:	07da      	lsls	r2, r3, #31
 800abe6:	d402      	bmi.n	800abee <__lo0bits+0x4e>
 800abe8:	085b      	lsrs	r3, r3, #1
 800abea:	d006      	beq.n	800abfa <__lo0bits+0x5a>
 800abec:	3001      	adds	r0, #1
 800abee:	600b      	str	r3, [r1, #0]
 800abf0:	4770      	bx	lr
 800abf2:	4610      	mov	r0, r2
 800abf4:	e7e9      	b.n	800abca <__lo0bits+0x2a>
 800abf6:	2000      	movs	r0, #0
 800abf8:	4770      	bx	lr
 800abfa:	2020      	movs	r0, #32
 800abfc:	4770      	bx	lr

0800abfe <__i2b>:
 800abfe:	b510      	push	{r4, lr}
 800ac00:	460c      	mov	r4, r1
 800ac02:	2101      	movs	r1, #1
 800ac04:	f7ff ff27 	bl	800aa56 <_Balloc>
 800ac08:	2201      	movs	r2, #1
 800ac0a:	6144      	str	r4, [r0, #20]
 800ac0c:	6102      	str	r2, [r0, #16]
 800ac0e:	bd10      	pop	{r4, pc}

0800ac10 <__multiply>:
 800ac10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	4614      	mov	r4, r2
 800ac16:	690a      	ldr	r2, [r1, #16]
 800ac18:	6923      	ldr	r3, [r4, #16]
 800ac1a:	4688      	mov	r8, r1
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	bfbe      	ittt	lt
 800ac20:	460b      	movlt	r3, r1
 800ac22:	46a0      	movlt	r8, r4
 800ac24:	461c      	movlt	r4, r3
 800ac26:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac2a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ac2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac32:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac36:	eb07 0609 	add.w	r6, r7, r9
 800ac3a:	42b3      	cmp	r3, r6
 800ac3c:	bfb8      	it	lt
 800ac3e:	3101      	addlt	r1, #1
 800ac40:	f7ff ff09 	bl	800aa56 <_Balloc>
 800ac44:	f100 0514 	add.w	r5, r0, #20
 800ac48:	462b      	mov	r3, r5
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ac50:	4573      	cmp	r3, lr
 800ac52:	d316      	bcc.n	800ac82 <__multiply+0x72>
 800ac54:	f104 0214 	add.w	r2, r4, #20
 800ac58:	f108 0114 	add.w	r1, r8, #20
 800ac5c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ac60:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	9b00      	ldr	r3, [sp, #0]
 800ac68:	9201      	str	r2, [sp, #4]
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d80c      	bhi.n	800ac88 <__multiply+0x78>
 800ac6e:	2e00      	cmp	r6, #0
 800ac70:	dd03      	ble.n	800ac7a <__multiply+0x6a>
 800ac72:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d05d      	beq.n	800ad36 <__multiply+0x126>
 800ac7a:	6106      	str	r6, [r0, #16]
 800ac7c:	b003      	add	sp, #12
 800ac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac82:	f843 2b04 	str.w	r2, [r3], #4
 800ac86:	e7e3      	b.n	800ac50 <__multiply+0x40>
 800ac88:	f8b2 b000 	ldrh.w	fp, [r2]
 800ac8c:	f1bb 0f00 	cmp.w	fp, #0
 800ac90:	d023      	beq.n	800acda <__multiply+0xca>
 800ac92:	4689      	mov	r9, r1
 800ac94:	46ac      	mov	ip, r5
 800ac96:	f04f 0800 	mov.w	r8, #0
 800ac9a:	f859 4b04 	ldr.w	r4, [r9], #4
 800ac9e:	f8dc a000 	ldr.w	sl, [ip]
 800aca2:	b2a3      	uxth	r3, r4
 800aca4:	fa1f fa8a 	uxth.w	sl, sl
 800aca8:	fb0b a303 	mla	r3, fp, r3, sl
 800acac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800acb0:	f8dc 4000 	ldr.w	r4, [ip]
 800acb4:	4443      	add	r3, r8
 800acb6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800acba:	fb0b 840a 	mla	r4, fp, sl, r8
 800acbe:	46e2      	mov	sl, ip
 800acc0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800acca:	454f      	cmp	r7, r9
 800accc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800acd0:	f84a 3b04 	str.w	r3, [sl], #4
 800acd4:	d82b      	bhi.n	800ad2e <__multiply+0x11e>
 800acd6:	f8cc 8004 	str.w	r8, [ip, #4]
 800acda:	9b01      	ldr	r3, [sp, #4]
 800acdc:	3204      	adds	r2, #4
 800acde:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ace2:	f1ba 0f00 	cmp.w	sl, #0
 800ace6:	d020      	beq.n	800ad2a <__multiply+0x11a>
 800ace8:	4689      	mov	r9, r1
 800acea:	46a8      	mov	r8, r5
 800acec:	f04f 0b00 	mov.w	fp, #0
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	f8b9 c000 	ldrh.w	ip, [r9]
 800acf6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	fb0a 440c 	mla	r4, sl, ip, r4
 800ad00:	46c4      	mov	ip, r8
 800ad02:	445c      	add	r4, fp
 800ad04:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad08:	f84c 3b04 	str.w	r3, [ip], #4
 800ad0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad10:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ad14:	0c1b      	lsrs	r3, r3, #16
 800ad16:	fb0a b303 	mla	r3, sl, r3, fp
 800ad1a:	454f      	cmp	r7, r9
 800ad1c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ad20:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ad24:	d805      	bhi.n	800ad32 <__multiply+0x122>
 800ad26:	f8c8 3004 	str.w	r3, [r8, #4]
 800ad2a:	3504      	adds	r5, #4
 800ad2c:	e79b      	b.n	800ac66 <__multiply+0x56>
 800ad2e:	46d4      	mov	ip, sl
 800ad30:	e7b3      	b.n	800ac9a <__multiply+0x8a>
 800ad32:	46e0      	mov	r8, ip
 800ad34:	e7dd      	b.n	800acf2 <__multiply+0xe2>
 800ad36:	3e01      	subs	r6, #1
 800ad38:	e799      	b.n	800ac6e <__multiply+0x5e>
	...

0800ad3c <__pow5mult>:
 800ad3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad40:	4615      	mov	r5, r2
 800ad42:	f012 0203 	ands.w	r2, r2, #3
 800ad46:	4606      	mov	r6, r0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	d007      	beq.n	800ad5c <__pow5mult+0x20>
 800ad4c:	4c21      	ldr	r4, [pc, #132]	; (800add4 <__pow5mult+0x98>)
 800ad4e:	3a01      	subs	r2, #1
 800ad50:	2300      	movs	r3, #0
 800ad52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad56:	f7ff fec9 	bl	800aaec <__multadd>
 800ad5a:	4607      	mov	r7, r0
 800ad5c:	10ad      	asrs	r5, r5, #2
 800ad5e:	d035      	beq.n	800adcc <__pow5mult+0x90>
 800ad60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad62:	b93c      	cbnz	r4, 800ad74 <__pow5mult+0x38>
 800ad64:	2010      	movs	r0, #16
 800ad66:	f7ff fe55 	bl	800aa14 <malloc>
 800ad6a:	6270      	str	r0, [r6, #36]	; 0x24
 800ad6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad70:	6004      	str	r4, [r0, #0]
 800ad72:	60c4      	str	r4, [r0, #12]
 800ad74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad7c:	b94c      	cbnz	r4, 800ad92 <__pow5mult+0x56>
 800ad7e:	f240 2171 	movw	r1, #625	; 0x271
 800ad82:	4630      	mov	r0, r6
 800ad84:	f7ff ff3b 	bl	800abfe <__i2b>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad90:	6003      	str	r3, [r0, #0]
 800ad92:	f04f 0800 	mov.w	r8, #0
 800ad96:	07eb      	lsls	r3, r5, #31
 800ad98:	d50a      	bpl.n	800adb0 <__pow5mult+0x74>
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	4622      	mov	r2, r4
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f7ff ff36 	bl	800ac10 <__multiply>
 800ada4:	4681      	mov	r9, r0
 800ada6:	4639      	mov	r1, r7
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff fe88 	bl	800aabe <_Bfree>
 800adae:	464f      	mov	r7, r9
 800adb0:	106d      	asrs	r5, r5, #1
 800adb2:	d00b      	beq.n	800adcc <__pow5mult+0x90>
 800adb4:	6820      	ldr	r0, [r4, #0]
 800adb6:	b938      	cbnz	r0, 800adc8 <__pow5mult+0x8c>
 800adb8:	4622      	mov	r2, r4
 800adba:	4621      	mov	r1, r4
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7ff ff27 	bl	800ac10 <__multiply>
 800adc2:	6020      	str	r0, [r4, #0]
 800adc4:	f8c0 8000 	str.w	r8, [r0]
 800adc8:	4604      	mov	r4, r0
 800adca:	e7e4      	b.n	800ad96 <__pow5mult+0x5a>
 800adcc:	4638      	mov	r0, r7
 800adce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add2:	bf00      	nop
 800add4:	0800ce68 	.word	0x0800ce68

0800add8 <__lshift>:
 800add8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800addc:	460c      	mov	r4, r1
 800adde:	4607      	mov	r7, r0
 800ade0:	4616      	mov	r6, r2
 800ade2:	6923      	ldr	r3, [r4, #16]
 800ade4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ade8:	eb0a 0903 	add.w	r9, sl, r3
 800adec:	6849      	ldr	r1, [r1, #4]
 800adee:	68a3      	ldr	r3, [r4, #8]
 800adf0:	f109 0501 	add.w	r5, r9, #1
 800adf4:	42ab      	cmp	r3, r5
 800adf6:	db32      	blt.n	800ae5e <__lshift+0x86>
 800adf8:	4638      	mov	r0, r7
 800adfa:	f7ff fe2c 	bl	800aa56 <_Balloc>
 800adfe:	2300      	movs	r3, #0
 800ae00:	4680      	mov	r8, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	f100 0114 	add.w	r1, r0, #20
 800ae08:	4553      	cmp	r3, sl
 800ae0a:	db2b      	blt.n	800ae64 <__lshift+0x8c>
 800ae0c:	6920      	ldr	r0, [r4, #16]
 800ae0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae12:	f104 0314 	add.w	r3, r4, #20
 800ae16:	f016 021f 	ands.w	r2, r6, #31
 800ae1a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae1e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae22:	d025      	beq.n	800ae70 <__lshift+0x98>
 800ae24:	2000      	movs	r0, #0
 800ae26:	f1c2 0e20 	rsb	lr, r2, #32
 800ae2a:	468a      	mov	sl, r1
 800ae2c:	681e      	ldr	r6, [r3, #0]
 800ae2e:	4096      	lsls	r6, r2
 800ae30:	4330      	orrs	r0, r6
 800ae32:	f84a 0b04 	str.w	r0, [sl], #4
 800ae36:	f853 0b04 	ldr.w	r0, [r3], #4
 800ae3a:	459c      	cmp	ip, r3
 800ae3c:	fa20 f00e 	lsr.w	r0, r0, lr
 800ae40:	d814      	bhi.n	800ae6c <__lshift+0x94>
 800ae42:	6048      	str	r0, [r1, #4]
 800ae44:	b108      	cbz	r0, 800ae4a <__lshift+0x72>
 800ae46:	f109 0502 	add.w	r5, r9, #2
 800ae4a:	3d01      	subs	r5, #1
 800ae4c:	4638      	mov	r0, r7
 800ae4e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ae52:	4621      	mov	r1, r4
 800ae54:	f7ff fe33 	bl	800aabe <_Bfree>
 800ae58:	4640      	mov	r0, r8
 800ae5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5e:	3101      	adds	r1, #1
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	e7c7      	b.n	800adf4 <__lshift+0x1c>
 800ae64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	e7cd      	b.n	800ae08 <__lshift+0x30>
 800ae6c:	4651      	mov	r1, sl
 800ae6e:	e7dc      	b.n	800ae2a <__lshift+0x52>
 800ae70:	3904      	subs	r1, #4
 800ae72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae76:	459c      	cmp	ip, r3
 800ae78:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae7c:	d8f9      	bhi.n	800ae72 <__lshift+0x9a>
 800ae7e:	e7e4      	b.n	800ae4a <__lshift+0x72>

0800ae80 <__mcmp>:
 800ae80:	6903      	ldr	r3, [r0, #16]
 800ae82:	690a      	ldr	r2, [r1, #16]
 800ae84:	b530      	push	{r4, r5, lr}
 800ae86:	1a9b      	subs	r3, r3, r2
 800ae88:	d10c      	bne.n	800aea4 <__mcmp+0x24>
 800ae8a:	0092      	lsls	r2, r2, #2
 800ae8c:	3014      	adds	r0, #20
 800ae8e:	3114      	adds	r1, #20
 800ae90:	1884      	adds	r4, r0, r2
 800ae92:	4411      	add	r1, r2
 800ae94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae9c:	4295      	cmp	r5, r2
 800ae9e:	d003      	beq.n	800aea8 <__mcmp+0x28>
 800aea0:	d305      	bcc.n	800aeae <__mcmp+0x2e>
 800aea2:	2301      	movs	r3, #1
 800aea4:	4618      	mov	r0, r3
 800aea6:	bd30      	pop	{r4, r5, pc}
 800aea8:	42a0      	cmp	r0, r4
 800aeaa:	d3f3      	bcc.n	800ae94 <__mcmp+0x14>
 800aeac:	e7fa      	b.n	800aea4 <__mcmp+0x24>
 800aeae:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb2:	e7f7      	b.n	800aea4 <__mcmp+0x24>

0800aeb4 <__mdiff>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	460d      	mov	r5, r1
 800aeba:	4607      	mov	r7, r0
 800aebc:	4611      	mov	r1, r2
 800aebe:	4628      	mov	r0, r5
 800aec0:	4614      	mov	r4, r2
 800aec2:	f7ff ffdd 	bl	800ae80 <__mcmp>
 800aec6:	1e06      	subs	r6, r0, #0
 800aec8:	d108      	bne.n	800aedc <__mdiff+0x28>
 800aeca:	4631      	mov	r1, r6
 800aecc:	4638      	mov	r0, r7
 800aece:	f7ff fdc2 	bl	800aa56 <_Balloc>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800aed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aedc:	bfa4      	itt	ge
 800aede:	4623      	movge	r3, r4
 800aee0:	462c      	movge	r4, r5
 800aee2:	4638      	mov	r0, r7
 800aee4:	6861      	ldr	r1, [r4, #4]
 800aee6:	bfa6      	itte	ge
 800aee8:	461d      	movge	r5, r3
 800aeea:	2600      	movge	r6, #0
 800aeec:	2601      	movlt	r6, #1
 800aeee:	f7ff fdb2 	bl	800aa56 <_Balloc>
 800aef2:	f04f 0e00 	mov.w	lr, #0
 800aef6:	60c6      	str	r6, [r0, #12]
 800aef8:	692b      	ldr	r3, [r5, #16]
 800aefa:	6926      	ldr	r6, [r4, #16]
 800aefc:	f104 0214 	add.w	r2, r4, #20
 800af00:	f105 0914 	add.w	r9, r5, #20
 800af04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800af08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800af0c:	f100 0114 	add.w	r1, r0, #20
 800af10:	f852 ab04 	ldr.w	sl, [r2], #4
 800af14:	f859 5b04 	ldr.w	r5, [r9], #4
 800af18:	fa1f f38a 	uxth.w	r3, sl
 800af1c:	4473      	add	r3, lr
 800af1e:	b2ac      	uxth	r4, r5
 800af20:	1b1b      	subs	r3, r3, r4
 800af22:	0c2c      	lsrs	r4, r5, #16
 800af24:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800af28:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800af32:	45c8      	cmp	r8, r9
 800af34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800af38:	4694      	mov	ip, r2
 800af3a:	f841 4b04 	str.w	r4, [r1], #4
 800af3e:	d8e7      	bhi.n	800af10 <__mdiff+0x5c>
 800af40:	45bc      	cmp	ip, r7
 800af42:	d304      	bcc.n	800af4e <__mdiff+0x9a>
 800af44:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800af48:	b183      	cbz	r3, 800af6c <__mdiff+0xb8>
 800af4a:	6106      	str	r6, [r0, #16]
 800af4c:	e7c4      	b.n	800aed8 <__mdiff+0x24>
 800af4e:	f85c 4b04 	ldr.w	r4, [ip], #4
 800af52:	b2a2      	uxth	r2, r4
 800af54:	4472      	add	r2, lr
 800af56:	1413      	asrs	r3, r2, #16
 800af58:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800af5c:	b292      	uxth	r2, r2
 800af5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af62:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800af66:	f841 2b04 	str.w	r2, [r1], #4
 800af6a:	e7e9      	b.n	800af40 <__mdiff+0x8c>
 800af6c:	3e01      	subs	r6, #1
 800af6e:	e7e9      	b.n	800af44 <__mdiff+0x90>

0800af70 <__d2b>:
 800af70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800af74:	461c      	mov	r4, r3
 800af76:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800af7a:	2101      	movs	r1, #1
 800af7c:	4690      	mov	r8, r2
 800af7e:	f7ff fd6a 	bl	800aa56 <_Balloc>
 800af82:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800af86:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800af8a:	4607      	mov	r7, r0
 800af8c:	bb34      	cbnz	r4, 800afdc <__d2b+0x6c>
 800af8e:	9201      	str	r2, [sp, #4]
 800af90:	f1b8 0200 	subs.w	r2, r8, #0
 800af94:	d027      	beq.n	800afe6 <__d2b+0x76>
 800af96:	a802      	add	r0, sp, #8
 800af98:	f840 2d08 	str.w	r2, [r0, #-8]!
 800af9c:	f7ff fe00 	bl	800aba0 <__lo0bits>
 800afa0:	9900      	ldr	r1, [sp, #0]
 800afa2:	b1f0      	cbz	r0, 800afe2 <__d2b+0x72>
 800afa4:	9a01      	ldr	r2, [sp, #4]
 800afa6:	f1c0 0320 	rsb	r3, r0, #32
 800afaa:	fa02 f303 	lsl.w	r3, r2, r3
 800afae:	430b      	orrs	r3, r1
 800afb0:	40c2      	lsrs	r2, r0
 800afb2:	617b      	str	r3, [r7, #20]
 800afb4:	9201      	str	r2, [sp, #4]
 800afb6:	9b01      	ldr	r3, [sp, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	bf14      	ite	ne
 800afbc:	2102      	movne	r1, #2
 800afbe:	2101      	moveq	r1, #1
 800afc0:	61bb      	str	r3, [r7, #24]
 800afc2:	6139      	str	r1, [r7, #16]
 800afc4:	b1c4      	cbz	r4, 800aff8 <__d2b+0x88>
 800afc6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800afca:	4404      	add	r4, r0
 800afcc:	6034      	str	r4, [r6, #0]
 800afce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800afd2:	6028      	str	r0, [r5, #0]
 800afd4:	4638      	mov	r0, r7
 800afd6:	b002      	add	sp, #8
 800afd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afdc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800afe0:	e7d5      	b.n	800af8e <__d2b+0x1e>
 800afe2:	6179      	str	r1, [r7, #20]
 800afe4:	e7e7      	b.n	800afb6 <__d2b+0x46>
 800afe6:	a801      	add	r0, sp, #4
 800afe8:	f7ff fdda 	bl	800aba0 <__lo0bits>
 800afec:	2101      	movs	r1, #1
 800afee:	9b01      	ldr	r3, [sp, #4]
 800aff0:	6139      	str	r1, [r7, #16]
 800aff2:	617b      	str	r3, [r7, #20]
 800aff4:	3020      	adds	r0, #32
 800aff6:	e7e5      	b.n	800afc4 <__d2b+0x54>
 800aff8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800affc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b000:	6030      	str	r0, [r6, #0]
 800b002:	6918      	ldr	r0, [r3, #16]
 800b004:	f7ff fdad 	bl	800ab62 <__hi0bits>
 800b008:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b00c:	e7e1      	b.n	800afd2 <__d2b+0x62>

0800b00e <_calloc_r>:
 800b00e:	b538      	push	{r3, r4, r5, lr}
 800b010:	fb02 f401 	mul.w	r4, r2, r1
 800b014:	4621      	mov	r1, r4
 800b016:	f000 f855 	bl	800b0c4 <_malloc_r>
 800b01a:	4605      	mov	r5, r0
 800b01c:	b118      	cbz	r0, 800b026 <_calloc_r+0x18>
 800b01e:	4622      	mov	r2, r4
 800b020:	2100      	movs	r1, #0
 800b022:	f7fe fa2d 	bl	8009480 <memset>
 800b026:	4628      	mov	r0, r5
 800b028:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b02c <_free_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4605      	mov	r5, r0
 800b030:	2900      	cmp	r1, #0
 800b032:	d043      	beq.n	800b0bc <_free_r+0x90>
 800b034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b038:	1f0c      	subs	r4, r1, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfb8      	it	lt
 800b03e:	18e4      	addlt	r4, r4, r3
 800b040:	f000 fa27 	bl	800b492 <__malloc_lock>
 800b044:	4a1e      	ldr	r2, [pc, #120]	; (800b0c0 <_free_r+0x94>)
 800b046:	6813      	ldr	r3, [r2, #0]
 800b048:	4610      	mov	r0, r2
 800b04a:	b933      	cbnz	r3, 800b05a <_free_r+0x2e>
 800b04c:	6063      	str	r3, [r4, #4]
 800b04e:	6014      	str	r4, [r2, #0]
 800b050:	4628      	mov	r0, r5
 800b052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b056:	f000 ba1d 	b.w	800b494 <__malloc_unlock>
 800b05a:	42a3      	cmp	r3, r4
 800b05c:	d90b      	bls.n	800b076 <_free_r+0x4a>
 800b05e:	6821      	ldr	r1, [r4, #0]
 800b060:	1862      	adds	r2, r4, r1
 800b062:	4293      	cmp	r3, r2
 800b064:	bf01      	itttt	eq
 800b066:	681a      	ldreq	r2, [r3, #0]
 800b068:	685b      	ldreq	r3, [r3, #4]
 800b06a:	1852      	addeq	r2, r2, r1
 800b06c:	6022      	streq	r2, [r4, #0]
 800b06e:	6063      	str	r3, [r4, #4]
 800b070:	6004      	str	r4, [r0, #0]
 800b072:	e7ed      	b.n	800b050 <_free_r+0x24>
 800b074:	4613      	mov	r3, r2
 800b076:	685a      	ldr	r2, [r3, #4]
 800b078:	b10a      	cbz	r2, 800b07e <_free_r+0x52>
 800b07a:	42a2      	cmp	r2, r4
 800b07c:	d9fa      	bls.n	800b074 <_free_r+0x48>
 800b07e:	6819      	ldr	r1, [r3, #0]
 800b080:	1858      	adds	r0, r3, r1
 800b082:	42a0      	cmp	r0, r4
 800b084:	d10b      	bne.n	800b09e <_free_r+0x72>
 800b086:	6820      	ldr	r0, [r4, #0]
 800b088:	4401      	add	r1, r0
 800b08a:	1858      	adds	r0, r3, r1
 800b08c:	4282      	cmp	r2, r0
 800b08e:	6019      	str	r1, [r3, #0]
 800b090:	d1de      	bne.n	800b050 <_free_r+0x24>
 800b092:	6810      	ldr	r0, [r2, #0]
 800b094:	6852      	ldr	r2, [r2, #4]
 800b096:	4401      	add	r1, r0
 800b098:	6019      	str	r1, [r3, #0]
 800b09a:	605a      	str	r2, [r3, #4]
 800b09c:	e7d8      	b.n	800b050 <_free_r+0x24>
 800b09e:	d902      	bls.n	800b0a6 <_free_r+0x7a>
 800b0a0:	230c      	movs	r3, #12
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	e7d4      	b.n	800b050 <_free_r+0x24>
 800b0a6:	6820      	ldr	r0, [r4, #0]
 800b0a8:	1821      	adds	r1, r4, r0
 800b0aa:	428a      	cmp	r2, r1
 800b0ac:	bf01      	itttt	eq
 800b0ae:	6811      	ldreq	r1, [r2, #0]
 800b0b0:	6852      	ldreq	r2, [r2, #4]
 800b0b2:	1809      	addeq	r1, r1, r0
 800b0b4:	6021      	streq	r1, [r4, #0]
 800b0b6:	6062      	str	r2, [r4, #4]
 800b0b8:	605c      	str	r4, [r3, #4]
 800b0ba:	e7c9      	b.n	800b050 <_free_r+0x24>
 800b0bc:	bd38      	pop	{r3, r4, r5, pc}
 800b0be:	bf00      	nop
 800b0c0:	2000070c 	.word	0x2000070c

0800b0c4 <_malloc_r>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	1ccd      	adds	r5, r1, #3
 800b0c8:	f025 0503 	bic.w	r5, r5, #3
 800b0cc:	3508      	adds	r5, #8
 800b0ce:	2d0c      	cmp	r5, #12
 800b0d0:	bf38      	it	cc
 800b0d2:	250c      	movcc	r5, #12
 800b0d4:	2d00      	cmp	r5, #0
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	db01      	blt.n	800b0de <_malloc_r+0x1a>
 800b0da:	42a9      	cmp	r1, r5
 800b0dc:	d903      	bls.n	800b0e6 <_malloc_r+0x22>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	6033      	str	r3, [r6, #0]
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	bd70      	pop	{r4, r5, r6, pc}
 800b0e6:	f000 f9d4 	bl	800b492 <__malloc_lock>
 800b0ea:	4a21      	ldr	r2, [pc, #132]	; (800b170 <_malloc_r+0xac>)
 800b0ec:	6814      	ldr	r4, [r2, #0]
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	b991      	cbnz	r1, 800b118 <_malloc_r+0x54>
 800b0f2:	4c20      	ldr	r4, [pc, #128]	; (800b174 <_malloc_r+0xb0>)
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	b91b      	cbnz	r3, 800b100 <_malloc_r+0x3c>
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f000 f98f 	bl	800b41c <_sbrk_r>
 800b0fe:	6020      	str	r0, [r4, #0]
 800b100:	4629      	mov	r1, r5
 800b102:	4630      	mov	r0, r6
 800b104:	f000 f98a 	bl	800b41c <_sbrk_r>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	d124      	bne.n	800b156 <_malloc_r+0x92>
 800b10c:	230c      	movs	r3, #12
 800b10e:	4630      	mov	r0, r6
 800b110:	6033      	str	r3, [r6, #0]
 800b112:	f000 f9bf 	bl	800b494 <__malloc_unlock>
 800b116:	e7e4      	b.n	800b0e2 <_malloc_r+0x1e>
 800b118:	680b      	ldr	r3, [r1, #0]
 800b11a:	1b5b      	subs	r3, r3, r5
 800b11c:	d418      	bmi.n	800b150 <_malloc_r+0x8c>
 800b11e:	2b0b      	cmp	r3, #11
 800b120:	d90f      	bls.n	800b142 <_malloc_r+0x7e>
 800b122:	600b      	str	r3, [r1, #0]
 800b124:	18cc      	adds	r4, r1, r3
 800b126:	50cd      	str	r5, [r1, r3]
 800b128:	4630      	mov	r0, r6
 800b12a:	f000 f9b3 	bl	800b494 <__malloc_unlock>
 800b12e:	f104 000b 	add.w	r0, r4, #11
 800b132:	1d23      	adds	r3, r4, #4
 800b134:	f020 0007 	bic.w	r0, r0, #7
 800b138:	1ac3      	subs	r3, r0, r3
 800b13a:	d0d3      	beq.n	800b0e4 <_malloc_r+0x20>
 800b13c:	425a      	negs	r2, r3
 800b13e:	50e2      	str	r2, [r4, r3]
 800b140:	e7d0      	b.n	800b0e4 <_malloc_r+0x20>
 800b142:	684b      	ldr	r3, [r1, #4]
 800b144:	428c      	cmp	r4, r1
 800b146:	bf16      	itet	ne
 800b148:	6063      	strne	r3, [r4, #4]
 800b14a:	6013      	streq	r3, [r2, #0]
 800b14c:	460c      	movne	r4, r1
 800b14e:	e7eb      	b.n	800b128 <_malloc_r+0x64>
 800b150:	460c      	mov	r4, r1
 800b152:	6849      	ldr	r1, [r1, #4]
 800b154:	e7cc      	b.n	800b0f0 <_malloc_r+0x2c>
 800b156:	1cc4      	adds	r4, r0, #3
 800b158:	f024 0403 	bic.w	r4, r4, #3
 800b15c:	42a0      	cmp	r0, r4
 800b15e:	d005      	beq.n	800b16c <_malloc_r+0xa8>
 800b160:	1a21      	subs	r1, r4, r0
 800b162:	4630      	mov	r0, r6
 800b164:	f000 f95a 	bl	800b41c <_sbrk_r>
 800b168:	3001      	adds	r0, #1
 800b16a:	d0cf      	beq.n	800b10c <_malloc_r+0x48>
 800b16c:	6025      	str	r5, [r4, #0]
 800b16e:	e7db      	b.n	800b128 <_malloc_r+0x64>
 800b170:	2000070c 	.word	0x2000070c
 800b174:	20000710 	.word	0x20000710

0800b178 <__ssputs_r>:
 800b178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	688e      	ldr	r6, [r1, #8]
 800b17e:	4682      	mov	sl, r0
 800b180:	429e      	cmp	r6, r3
 800b182:	460c      	mov	r4, r1
 800b184:	4690      	mov	r8, r2
 800b186:	4699      	mov	r9, r3
 800b188:	d837      	bhi.n	800b1fa <__ssputs_r+0x82>
 800b18a:	898a      	ldrh	r2, [r1, #12]
 800b18c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b190:	d031      	beq.n	800b1f6 <__ssputs_r+0x7e>
 800b192:	2302      	movs	r3, #2
 800b194:	6825      	ldr	r5, [r4, #0]
 800b196:	6909      	ldr	r1, [r1, #16]
 800b198:	1a6f      	subs	r7, r5, r1
 800b19a:	6965      	ldr	r5, [r4, #20]
 800b19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1a0:	fb95 f5f3 	sdiv	r5, r5, r3
 800b1a4:	f109 0301 	add.w	r3, r9, #1
 800b1a8:	443b      	add	r3, r7
 800b1aa:	429d      	cmp	r5, r3
 800b1ac:	bf38      	it	cc
 800b1ae:	461d      	movcc	r5, r3
 800b1b0:	0553      	lsls	r3, r2, #21
 800b1b2:	d530      	bpl.n	800b216 <__ssputs_r+0x9e>
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f7ff ff85 	bl	800b0c4 <_malloc_r>
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	b950      	cbnz	r0, 800b1d4 <__ssputs_r+0x5c>
 800b1be:	230c      	movs	r3, #12
 800b1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c4:	f8ca 3000 	str.w	r3, [sl]
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ce:	81a3      	strh	r3, [r4, #12]
 800b1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d4:	463a      	mov	r2, r7
 800b1d6:	6921      	ldr	r1, [r4, #16]
 800b1d8:	f7ff fc32 	bl	800aa40 <memcpy>
 800b1dc:	89a3      	ldrh	r3, [r4, #12]
 800b1de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e6:	81a3      	strh	r3, [r4, #12]
 800b1e8:	6126      	str	r6, [r4, #16]
 800b1ea:	443e      	add	r6, r7
 800b1ec:	6026      	str	r6, [r4, #0]
 800b1ee:	464e      	mov	r6, r9
 800b1f0:	6165      	str	r5, [r4, #20]
 800b1f2:	1bed      	subs	r5, r5, r7
 800b1f4:	60a5      	str	r5, [r4, #8]
 800b1f6:	454e      	cmp	r6, r9
 800b1f8:	d900      	bls.n	800b1fc <__ssputs_r+0x84>
 800b1fa:	464e      	mov	r6, r9
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	4641      	mov	r1, r8
 800b200:	6820      	ldr	r0, [r4, #0]
 800b202:	f000 f92d 	bl	800b460 <memmove>
 800b206:	68a3      	ldr	r3, [r4, #8]
 800b208:	2000      	movs	r0, #0
 800b20a:	1b9b      	subs	r3, r3, r6
 800b20c:	60a3      	str	r3, [r4, #8]
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	441e      	add	r6, r3
 800b212:	6026      	str	r6, [r4, #0]
 800b214:	e7dc      	b.n	800b1d0 <__ssputs_r+0x58>
 800b216:	462a      	mov	r2, r5
 800b218:	f000 f93d 	bl	800b496 <_realloc_r>
 800b21c:	4606      	mov	r6, r0
 800b21e:	2800      	cmp	r0, #0
 800b220:	d1e2      	bne.n	800b1e8 <__ssputs_r+0x70>
 800b222:	6921      	ldr	r1, [r4, #16]
 800b224:	4650      	mov	r0, sl
 800b226:	f7ff ff01 	bl	800b02c <_free_r>
 800b22a:	e7c8      	b.n	800b1be <__ssputs_r+0x46>

0800b22c <_svfiprintf_r>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	461d      	mov	r5, r3
 800b232:	898b      	ldrh	r3, [r1, #12]
 800b234:	b09d      	sub	sp, #116	; 0x74
 800b236:	061f      	lsls	r7, r3, #24
 800b238:	4680      	mov	r8, r0
 800b23a:	460c      	mov	r4, r1
 800b23c:	4616      	mov	r6, r2
 800b23e:	d50f      	bpl.n	800b260 <_svfiprintf_r+0x34>
 800b240:	690b      	ldr	r3, [r1, #16]
 800b242:	b96b      	cbnz	r3, 800b260 <_svfiprintf_r+0x34>
 800b244:	2140      	movs	r1, #64	; 0x40
 800b246:	f7ff ff3d 	bl	800b0c4 <_malloc_r>
 800b24a:	6020      	str	r0, [r4, #0]
 800b24c:	6120      	str	r0, [r4, #16]
 800b24e:	b928      	cbnz	r0, 800b25c <_svfiprintf_r+0x30>
 800b250:	230c      	movs	r3, #12
 800b252:	f8c8 3000 	str.w	r3, [r8]
 800b256:	f04f 30ff 	mov.w	r0, #4294967295
 800b25a:	e0c8      	b.n	800b3ee <_svfiprintf_r+0x1c2>
 800b25c:	2340      	movs	r3, #64	; 0x40
 800b25e:	6163      	str	r3, [r4, #20]
 800b260:	2300      	movs	r3, #0
 800b262:	9309      	str	r3, [sp, #36]	; 0x24
 800b264:	2320      	movs	r3, #32
 800b266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b26a:	2330      	movs	r3, #48	; 0x30
 800b26c:	f04f 0b01 	mov.w	fp, #1
 800b270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b274:	9503      	str	r5, [sp, #12]
 800b276:	4637      	mov	r7, r6
 800b278:	463d      	mov	r5, r7
 800b27a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b27e:	b10b      	cbz	r3, 800b284 <_svfiprintf_r+0x58>
 800b280:	2b25      	cmp	r3, #37	; 0x25
 800b282:	d13e      	bne.n	800b302 <_svfiprintf_r+0xd6>
 800b284:	ebb7 0a06 	subs.w	sl, r7, r6
 800b288:	d00b      	beq.n	800b2a2 <_svfiprintf_r+0x76>
 800b28a:	4653      	mov	r3, sl
 800b28c:	4632      	mov	r2, r6
 800b28e:	4621      	mov	r1, r4
 800b290:	4640      	mov	r0, r8
 800b292:	f7ff ff71 	bl	800b178 <__ssputs_r>
 800b296:	3001      	adds	r0, #1
 800b298:	f000 80a4 	beq.w	800b3e4 <_svfiprintf_r+0x1b8>
 800b29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b29e:	4453      	add	r3, sl
 800b2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a2:	783b      	ldrb	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 809d 	beq.w	800b3e4 <_svfiprintf_r+0x1b8>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2b4:	9304      	str	r3, [sp, #16]
 800b2b6:	9307      	str	r3, [sp, #28]
 800b2b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b2be:	462f      	mov	r7, r5
 800b2c0:	2205      	movs	r2, #5
 800b2c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b2c6:	4850      	ldr	r0, [pc, #320]	; (800b408 <_svfiprintf_r+0x1dc>)
 800b2c8:	f7ff fbac 	bl	800aa24 <memchr>
 800b2cc:	9b04      	ldr	r3, [sp, #16]
 800b2ce:	b9d0      	cbnz	r0, 800b306 <_svfiprintf_r+0xda>
 800b2d0:	06d9      	lsls	r1, r3, #27
 800b2d2:	bf44      	itt	mi
 800b2d4:	2220      	movmi	r2, #32
 800b2d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b2da:	071a      	lsls	r2, r3, #28
 800b2dc:	bf44      	itt	mi
 800b2de:	222b      	movmi	r2, #43	; 0x2b
 800b2e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b2e4:	782a      	ldrb	r2, [r5, #0]
 800b2e6:	2a2a      	cmp	r2, #42	; 0x2a
 800b2e8:	d015      	beq.n	800b316 <_svfiprintf_r+0xea>
 800b2ea:	462f      	mov	r7, r5
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	250a      	movs	r5, #10
 800b2f0:	9a07      	ldr	r2, [sp, #28]
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f8:	3b30      	subs	r3, #48	; 0x30
 800b2fa:	2b09      	cmp	r3, #9
 800b2fc:	d94d      	bls.n	800b39a <_svfiprintf_r+0x16e>
 800b2fe:	b1b8      	cbz	r0, 800b330 <_svfiprintf_r+0x104>
 800b300:	e00f      	b.n	800b322 <_svfiprintf_r+0xf6>
 800b302:	462f      	mov	r7, r5
 800b304:	e7b8      	b.n	800b278 <_svfiprintf_r+0x4c>
 800b306:	4a40      	ldr	r2, [pc, #256]	; (800b408 <_svfiprintf_r+0x1dc>)
 800b308:	463d      	mov	r5, r7
 800b30a:	1a80      	subs	r0, r0, r2
 800b30c:	fa0b f000 	lsl.w	r0, fp, r0
 800b310:	4318      	orrs	r0, r3
 800b312:	9004      	str	r0, [sp, #16]
 800b314:	e7d3      	b.n	800b2be <_svfiprintf_r+0x92>
 800b316:	9a03      	ldr	r2, [sp, #12]
 800b318:	1d11      	adds	r1, r2, #4
 800b31a:	6812      	ldr	r2, [r2, #0]
 800b31c:	9103      	str	r1, [sp, #12]
 800b31e:	2a00      	cmp	r2, #0
 800b320:	db01      	blt.n	800b326 <_svfiprintf_r+0xfa>
 800b322:	9207      	str	r2, [sp, #28]
 800b324:	e004      	b.n	800b330 <_svfiprintf_r+0x104>
 800b326:	4252      	negs	r2, r2
 800b328:	f043 0302 	orr.w	r3, r3, #2
 800b32c:	9207      	str	r2, [sp, #28]
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	783b      	ldrb	r3, [r7, #0]
 800b332:	2b2e      	cmp	r3, #46	; 0x2e
 800b334:	d10c      	bne.n	800b350 <_svfiprintf_r+0x124>
 800b336:	787b      	ldrb	r3, [r7, #1]
 800b338:	2b2a      	cmp	r3, #42	; 0x2a
 800b33a:	d133      	bne.n	800b3a4 <_svfiprintf_r+0x178>
 800b33c:	9b03      	ldr	r3, [sp, #12]
 800b33e:	3702      	adds	r7, #2
 800b340:	1d1a      	adds	r2, r3, #4
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	9203      	str	r2, [sp, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	bfb8      	it	lt
 800b34a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b34e:	9305      	str	r3, [sp, #20]
 800b350:	4d2e      	ldr	r5, [pc, #184]	; (800b40c <_svfiprintf_r+0x1e0>)
 800b352:	2203      	movs	r2, #3
 800b354:	7839      	ldrb	r1, [r7, #0]
 800b356:	4628      	mov	r0, r5
 800b358:	f7ff fb64 	bl	800aa24 <memchr>
 800b35c:	b138      	cbz	r0, 800b36e <_svfiprintf_r+0x142>
 800b35e:	2340      	movs	r3, #64	; 0x40
 800b360:	1b40      	subs	r0, r0, r5
 800b362:	fa03 f000 	lsl.w	r0, r3, r0
 800b366:	9b04      	ldr	r3, [sp, #16]
 800b368:	3701      	adds	r7, #1
 800b36a:	4303      	orrs	r3, r0
 800b36c:	9304      	str	r3, [sp, #16]
 800b36e:	7839      	ldrb	r1, [r7, #0]
 800b370:	2206      	movs	r2, #6
 800b372:	4827      	ldr	r0, [pc, #156]	; (800b410 <_svfiprintf_r+0x1e4>)
 800b374:	1c7e      	adds	r6, r7, #1
 800b376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b37a:	f7ff fb53 	bl	800aa24 <memchr>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d038      	beq.n	800b3f4 <_svfiprintf_r+0x1c8>
 800b382:	4b24      	ldr	r3, [pc, #144]	; (800b414 <_svfiprintf_r+0x1e8>)
 800b384:	bb13      	cbnz	r3, 800b3cc <_svfiprintf_r+0x1a0>
 800b386:	9b03      	ldr	r3, [sp, #12]
 800b388:	3307      	adds	r3, #7
 800b38a:	f023 0307 	bic.w	r3, r3, #7
 800b38e:	3308      	adds	r3, #8
 800b390:	9303      	str	r3, [sp, #12]
 800b392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b394:	444b      	add	r3, r9
 800b396:	9309      	str	r3, [sp, #36]	; 0x24
 800b398:	e76d      	b.n	800b276 <_svfiprintf_r+0x4a>
 800b39a:	fb05 3202 	mla	r2, r5, r2, r3
 800b39e:	2001      	movs	r0, #1
 800b3a0:	460f      	mov	r7, r1
 800b3a2:	e7a6      	b.n	800b2f2 <_svfiprintf_r+0xc6>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	250a      	movs	r5, #10
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	3701      	adds	r7, #1
 800b3ac:	9305      	str	r3, [sp, #20]
 800b3ae:	4638      	mov	r0, r7
 800b3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b4:	3a30      	subs	r2, #48	; 0x30
 800b3b6:	2a09      	cmp	r2, #9
 800b3b8:	d903      	bls.n	800b3c2 <_svfiprintf_r+0x196>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0c8      	beq.n	800b350 <_svfiprintf_r+0x124>
 800b3be:	9105      	str	r1, [sp, #20]
 800b3c0:	e7c6      	b.n	800b350 <_svfiprintf_r+0x124>
 800b3c2:	fb05 2101 	mla	r1, r5, r1, r2
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	e7f0      	b.n	800b3ae <_svfiprintf_r+0x182>
 800b3cc:	ab03      	add	r3, sp, #12
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	4b11      	ldr	r3, [pc, #68]	; (800b418 <_svfiprintf_r+0x1ec>)
 800b3d4:	a904      	add	r1, sp, #16
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	f7fe f8ec 	bl	80095b4 <_printf_float>
 800b3dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b3e0:	4681      	mov	r9, r0
 800b3e2:	d1d6      	bne.n	800b392 <_svfiprintf_r+0x166>
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	065b      	lsls	r3, r3, #25
 800b3e8:	f53f af35 	bmi.w	800b256 <_svfiprintf_r+0x2a>
 800b3ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3ee:	b01d      	add	sp, #116	; 0x74
 800b3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f4:	ab03      	add	r3, sp, #12
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	4b07      	ldr	r3, [pc, #28]	; (800b418 <_svfiprintf_r+0x1ec>)
 800b3fc:	a904      	add	r1, sp, #16
 800b3fe:	4640      	mov	r0, r8
 800b400:	f7fe fb84 	bl	8009b0c <_printf_i>
 800b404:	e7ea      	b.n	800b3dc <_svfiprintf_r+0x1b0>
 800b406:	bf00      	nop
 800b408:	0800ce74 	.word	0x0800ce74
 800b40c:	0800ce7a 	.word	0x0800ce7a
 800b410:	0800ce7e 	.word	0x0800ce7e
 800b414:	080095b5 	.word	0x080095b5
 800b418:	0800b179 	.word	0x0800b179

0800b41c <_sbrk_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	2300      	movs	r3, #0
 800b420:	4c05      	ldr	r4, [pc, #20]	; (800b438 <_sbrk_r+0x1c>)
 800b422:	4605      	mov	r5, r0
 800b424:	4608      	mov	r0, r1
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	f7fb fd92 	bl	8006f50 <_sbrk>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_sbrk_r+0x1a>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	b103      	cbz	r3, 800b436 <_sbrk_r+0x1a>
 800b434:	602b      	str	r3, [r5, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	200007ac 	.word	0x200007ac

0800b43c <__ascii_mbtowc>:
 800b43c:	b082      	sub	sp, #8
 800b43e:	b901      	cbnz	r1, 800b442 <__ascii_mbtowc+0x6>
 800b440:	a901      	add	r1, sp, #4
 800b442:	b142      	cbz	r2, 800b456 <__ascii_mbtowc+0x1a>
 800b444:	b14b      	cbz	r3, 800b45a <__ascii_mbtowc+0x1e>
 800b446:	7813      	ldrb	r3, [r2, #0]
 800b448:	600b      	str	r3, [r1, #0]
 800b44a:	7812      	ldrb	r2, [r2, #0]
 800b44c:	1c10      	adds	r0, r2, #0
 800b44e:	bf18      	it	ne
 800b450:	2001      	movne	r0, #1
 800b452:	b002      	add	sp, #8
 800b454:	4770      	bx	lr
 800b456:	4610      	mov	r0, r2
 800b458:	e7fb      	b.n	800b452 <__ascii_mbtowc+0x16>
 800b45a:	f06f 0001 	mvn.w	r0, #1
 800b45e:	e7f8      	b.n	800b452 <__ascii_mbtowc+0x16>

0800b460 <memmove>:
 800b460:	4288      	cmp	r0, r1
 800b462:	b510      	push	{r4, lr}
 800b464:	eb01 0302 	add.w	r3, r1, r2
 800b468:	d807      	bhi.n	800b47a <memmove+0x1a>
 800b46a:	1e42      	subs	r2, r0, #1
 800b46c:	4299      	cmp	r1, r3
 800b46e:	d00a      	beq.n	800b486 <memmove+0x26>
 800b470:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b474:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b478:	e7f8      	b.n	800b46c <memmove+0xc>
 800b47a:	4283      	cmp	r3, r0
 800b47c:	d9f5      	bls.n	800b46a <memmove+0xa>
 800b47e:	1881      	adds	r1, r0, r2
 800b480:	1ad2      	subs	r2, r2, r3
 800b482:	42d3      	cmn	r3, r2
 800b484:	d100      	bne.n	800b488 <memmove+0x28>
 800b486:	bd10      	pop	{r4, pc}
 800b488:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b48c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b490:	e7f7      	b.n	800b482 <memmove+0x22>

0800b492 <__malloc_lock>:
 800b492:	4770      	bx	lr

0800b494 <__malloc_unlock>:
 800b494:	4770      	bx	lr

0800b496 <_realloc_r>:
 800b496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b498:	4607      	mov	r7, r0
 800b49a:	4614      	mov	r4, r2
 800b49c:	460e      	mov	r6, r1
 800b49e:	b921      	cbnz	r1, 800b4aa <_realloc_r+0x14>
 800b4a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	f7ff be0d 	b.w	800b0c4 <_malloc_r>
 800b4aa:	b922      	cbnz	r2, 800b4b6 <_realloc_r+0x20>
 800b4ac:	f7ff fdbe 	bl	800b02c <_free_r>
 800b4b0:	4625      	mov	r5, r4
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4b6:	f000 f821 	bl	800b4fc <_malloc_usable_size_r>
 800b4ba:	42a0      	cmp	r0, r4
 800b4bc:	d20f      	bcs.n	800b4de <_realloc_r+0x48>
 800b4be:	4621      	mov	r1, r4
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f7ff fdff 	bl	800b0c4 <_malloc_r>
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d0f2      	beq.n	800b4b2 <_realloc_r+0x1c>
 800b4cc:	4631      	mov	r1, r6
 800b4ce:	4622      	mov	r2, r4
 800b4d0:	f7ff fab6 	bl	800aa40 <memcpy>
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	f7ff fda8 	bl	800b02c <_free_r>
 800b4dc:	e7e9      	b.n	800b4b2 <_realloc_r+0x1c>
 800b4de:	4635      	mov	r5, r6
 800b4e0:	e7e7      	b.n	800b4b2 <_realloc_r+0x1c>

0800b4e2 <__ascii_wctomb>:
 800b4e2:	b149      	cbz	r1, 800b4f8 <__ascii_wctomb+0x16>
 800b4e4:	2aff      	cmp	r2, #255	; 0xff
 800b4e6:	bf8b      	itete	hi
 800b4e8:	238a      	movhi	r3, #138	; 0x8a
 800b4ea:	700a      	strbls	r2, [r1, #0]
 800b4ec:	6003      	strhi	r3, [r0, #0]
 800b4ee:	2001      	movls	r0, #1
 800b4f0:	bf88      	it	hi
 800b4f2:	f04f 30ff 	movhi.w	r0, #4294967295
 800b4f6:	4770      	bx	lr
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	4770      	bx	lr

0800b4fc <_malloc_usable_size_r>:
 800b4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b500:	1f18      	subs	r0, r3, #4
 800b502:	2b00      	cmp	r3, #0
 800b504:	bfbc      	itt	lt
 800b506:	580b      	ldrlt	r3, [r1, r0]
 800b508:	18c0      	addlt	r0, r0, r3
 800b50a:	4770      	bx	lr

0800b50c <_init>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr

0800b518 <_fini>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	bf00      	nop
 800b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51e:	bc08      	pop	{r3}
 800b520:	469e      	mov	lr, r3
 800b522:	4770      	bx	lr


lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d7c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001f60  08001f60  00011f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f8c  08001f8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f8c  08001f8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f8c  08001f8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f8c  08001f8c  00011f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  2000000c  08001fa0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08001fa0  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005803  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012f8  00000000  00000000  00025838  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000648  00000000  00000000  00026b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b8  00000000  00000000  00027178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017df0  00000000  00000000  00027730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005b7d  00000000  00000000  0003f520  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bf22  00000000  00000000  0004509d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0fbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001824  00000000  00000000  000d103c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001f48 	.word	0x08001f48

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001f48 	.word	0x08001f48

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fa16 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f80e 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f872 	bl	8000318 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f846 	bl	80002c4 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 8000238:	2201      	movs	r2, #1
 800023a:	4902      	ldr	r1, [pc, #8]	; (8000244 <main+0x20>)
 800023c:	4802      	ldr	r0, [pc, #8]	; (8000248 <main+0x24>)
 800023e:	f001 fb00 	bl	8001842 <HAL_UART_Receive_IT>
 8000242:	e7f9      	b.n	8000238 <main+0x14>
 8000244:	2000046c 	.word	0x2000046c
 8000248:	2000042c 	.word	0x2000042c

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	; 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fe6c 	bl	8001f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2310      	movs	r3, #16
 8000278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027a:	2300      	movs	r3, #0
 800027c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fde2 	bl	8000e4c <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800028e:	f000 f8f7 	bl	8000480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000296:	2300      	movs	r3, #0
 8000298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 f84e 	bl	800134c <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b6:	f000 f8e3 	bl	8000480 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	; 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <MX_USART1_UART_Init+0x50>)
 80002cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002ea:	220c      	movs	r2, #12
 80002ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002fa:	4805      	ldr	r0, [pc, #20]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002fc:	f001 f9c2 	bl	8001684 <HAL_UART_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000306:	f000 f8bb 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000042c 	.word	0x2000042c
 8000314:	40013800 	.word	0x40013800

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032c:	4b34      	ldr	r3, [pc, #208]	; (8000400 <MX_GPIO_Init+0xe8>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a33      	ldr	r2, [pc, #204]	; (8000400 <MX_GPIO_Init+0xe8>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b31      	ldr	r3, [pc, #196]	; (8000400 <MX_GPIO_Init+0xe8>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0320 	and.w	r3, r3, #32
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000344:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <MX_GPIO_Init+0xe8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a2d      	ldr	r2, [pc, #180]	; (8000400 <MX_GPIO_Init+0xe8>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <MX_GPIO_Init+0xe8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0310 	and.w	r3, r3, #16
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b28      	ldr	r3, [pc, #160]	; (8000400 <MX_GPIO_Init+0xe8>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a27      	ldr	r2, [pc, #156]	; (8000400 <MX_GPIO_Init+0xe8>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b25      	ldr	r3, [pc, #148]	; (8000400 <MX_GPIO_Init+0xe8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037a:	4822      	ldr	r0, [pc, #136]	; (8000404 <MX_GPIO_Init+0xec>)
 800037c:	f000 fd4e 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2104      	movs	r1, #4
 8000384:	4820      	ldr	r0, [pc, #128]	; (8000408 <MX_GPIO_Init+0xf0>)
 8000386:	f000 fd49 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800038a:	2320      	movs	r3, #32
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	481b      	ldr	r0, [pc, #108]	; (800040c <MX_GPIO_Init+0xf4>)
 800039e:	f000 fbd3 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b0:	2302      	movs	r3, #2
 80003b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	4619      	mov	r1, r3
 80003ba:	4812      	ldr	r0, [pc, #72]	; (8000404 <MX_GPIO_Init+0xec>)
 80003bc:	f000 fbc4 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80003c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_GPIO_Init+0xf8>)
 80003c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <MX_GPIO_Init+0xec>)
 80003d6:	f000 fbb7 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003da:	2304      	movs	r3, #4
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_GPIO_Init+0xf0>)
 80003f2:	f000 fba9 	bl	8000b48 <HAL_GPIO_Init>

}
 80003f6:	bf00      	nop
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40010800 	.word	0x40010800
 8000408:	40011400 	.word	0x40011400
 800040c:	40011000 	.word	0x40011000
 8000410:	10110000 	.word	0x10110000

08000414 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <HAL_UART_RxCpltCallback+0x58>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d11d      	bne.n	8000462 <HAL_UART_RxCpltCallback+0x4e>
		static unsigned char uRx_Data[1024] = { 0 };
		static unsigned char uLength = 0;
		if (rxBuffer[0] == '\n') {
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <HAL_UART_RxCpltCallback+0x5c>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b0a      	cmp	r3, #10
 800042c:	d10c      	bne.n	8000448 <HAL_UART_RxCpltCallback+0x34>
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_UART_RxCpltCallback+0x60>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	b29a      	uxth	r2, r3
 8000434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000438:	490f      	ldr	r1, [pc, #60]	; (8000478 <HAL_UART_RxCpltCallback+0x64>)
 800043a:	4810      	ldr	r0, [pc, #64]	; (800047c <HAL_UART_RxCpltCallback+0x68>)
 800043c:	f001 f96f 	bl	800171e <HAL_UART_Transmit>
			uLength = 0;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_UART_RxCpltCallback+0x60>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
		} else {
			uRx_Data[uLength] = rxBuffer[0];
			uLength++;
		}
	}
}
 8000446:	e00c      	b.n	8000462 <HAL_UART_RxCpltCallback+0x4e>
			uRx_Data[uLength] = rxBuffer[0];
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_UART_RxCpltCallback+0x60>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	461a      	mov	r2, r3
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <HAL_UART_RxCpltCallback+0x5c>)
 8000450:	7819      	ldrb	r1, [r3, #0]
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <HAL_UART_RxCpltCallback+0x64>)
 8000454:	5499      	strb	r1, [r3, r2]
			uLength++;
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <HAL_UART_RxCpltCallback+0x60>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_UART_RxCpltCallback+0x60>)
 8000460:	701a      	strb	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40013800 	.word	0x40013800
 8000470:	2000046c 	.word	0x2000046c
 8000474:	20000028 	.word	0x20000028
 8000478:	2000002c 	.word	0x2000002c
 800047c:	2000042c 	.word	0x2000042c

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <HAL_MspInit+0x5c>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_MspInit+0x60>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_MspInit+0x60>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000

080004f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a20      	ldr	r2, [pc, #128]	; (800058c <HAL_UART_MspInit+0x9c>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d139      	bne.n	8000584 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <HAL_UART_MspInit+0xa0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <HAL_UART_MspInit+0xa0>)
 8000516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <HAL_UART_MspInit+0xa0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <HAL_UART_MspInit+0xa0>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a18      	ldr	r2, [pc, #96]	; (8000590 <HAL_UART_MspInit+0xa0>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <HAL_UART_MspInit+0xa0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000546:	2302      	movs	r3, #2
 8000548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054a:	2303      	movs	r3, #3
 800054c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	4619      	mov	r1, r3
 8000554:	480f      	ldr	r0, [pc, #60]	; (8000594 <HAL_UART_MspInit+0xa4>)
 8000556:	f000 faf7 	bl	8000b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800055a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4809      	ldr	r0, [pc, #36]	; (8000594 <HAL_UART_MspInit+0xa4>)
 8000570:	f000 faea 	bl	8000b48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	2025      	movs	r0, #37	; 0x25
 800057a:	f000 f9a6 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800057e:	2025      	movs	r0, #37	; 0x25
 8000580:	f000 f9bf 	bl	8000902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40013800 	.word	0x40013800
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <HardFault_Handler+0x4>

080005aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <MemManage_Handler+0x4>

080005b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <BusFault_Handler+0x4>

080005b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <UsageFault_Handler+0x4>

080005bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e4:	f000 f87e 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <USART1_IRQHandler+0x10>)
 80005f2:	f001 f97b 	bl	80018ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
//  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
  /* USER CODE END USART1_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000042c 	.word	0x2000042c

08000600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800060c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800060e:	e003      	b.n	8000618 <LoopCopyDataInit>

08000610 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000612:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000614:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000616:	3104      	adds	r1, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800061c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800061e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000620:	d3f6      	bcc.n	8000610 <CopyDataInit>
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000624:	e002      	b.n	800062c <LoopFillZerobss>

08000626 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000628:	f842 3b04 	str.w	r3, [r2], #4

0800062c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800062e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000630:	d3f9      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000632:	f7ff ffe5 	bl	8000600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000636:	f001 fc5b 	bl	8001ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fdf3 	bl	8000224 <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r3, =_sidata
 8000640:	08001f94 	.word	0x08001f94
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000648:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800064c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000650:	20000484 	.word	0x20000484

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f923 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f808 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff ff0a 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x58>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	fbb3 f3f1 	udiv	r3, r3, r1
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f93b 	bl	800091e <HAL_SYSTICK_Config>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00e      	b.n	80006d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d80a      	bhi.n	80006ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f000 f903 	bl	80008ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_InitTick+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000004 	.word	0x20000004

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x1c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x20>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <HAL_IncTick+0x20>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	20000008 	.word	0x20000008
 8000704:	20000480 	.word	0x20000480

08000708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <HAL_GetTick+0x10>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	20000480 	.word	0x20000480

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	db0b      	blt.n	80007aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 021f 	and.w	r2, r3, #31
 8000798:	4906      	ldr	r1, [pc, #24]	; (80007b4 <__NVIC_EnableIRQ+0x34>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	2001      	movs	r0, #1
 80007a2:	fa00 f202 	lsl.w	r2, r0, r2
 80007a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff90 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff2d 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff42 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff90 	bl	800080c <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5f 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff35 	bl	8000780 <__NVIC_EnableIRQ>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffa2 	bl	8000870 <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800094a:	2b02      	cmp	r3, #2
 800094c:	d005      	beq.n	800095a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2204      	movs	r2, #4
 8000952:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e0d6      	b.n	8000b08 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f022 020e 	bic.w	r2, r2, #14
 8000968:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 0201 	bic.w	r2, r2, #1
 8000978:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	4b64      	ldr	r3, [pc, #400]	; (8000b14 <HAL_DMA_Abort_IT+0x1dc>)
 8000982:	429a      	cmp	r2, r3
 8000984:	d958      	bls.n	8000a38 <HAL_DMA_Abort_IT+0x100>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a63      	ldr	r2, [pc, #396]	; (8000b18 <HAL_DMA_Abort_IT+0x1e0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d04f      	beq.n	8000a30 <HAL_DMA_Abort_IT+0xf8>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a61      	ldr	r2, [pc, #388]	; (8000b1c <HAL_DMA_Abort_IT+0x1e4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d048      	beq.n	8000a2c <HAL_DMA_Abort_IT+0xf4>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a60      	ldr	r2, [pc, #384]	; (8000b20 <HAL_DMA_Abort_IT+0x1e8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d040      	beq.n	8000a26 <HAL_DMA_Abort_IT+0xee>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a5e      	ldr	r2, [pc, #376]	; (8000b24 <HAL_DMA_Abort_IT+0x1ec>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d038      	beq.n	8000a20 <HAL_DMA_Abort_IT+0xe8>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a5d      	ldr	r2, [pc, #372]	; (8000b28 <HAL_DMA_Abort_IT+0x1f0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d030      	beq.n	8000a1a <HAL_DMA_Abort_IT+0xe2>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a5b      	ldr	r2, [pc, #364]	; (8000b2c <HAL_DMA_Abort_IT+0x1f4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d028      	beq.n	8000a14 <HAL_DMA_Abort_IT+0xdc>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a53      	ldr	r2, [pc, #332]	; (8000b14 <HAL_DMA_Abort_IT+0x1dc>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d020      	beq.n	8000a0e <HAL_DMA_Abort_IT+0xd6>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a57      	ldr	r2, [pc, #348]	; (8000b30 <HAL_DMA_Abort_IT+0x1f8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d019      	beq.n	8000a0a <HAL_DMA_Abort_IT+0xd2>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a56      	ldr	r2, [pc, #344]	; (8000b34 <HAL_DMA_Abort_IT+0x1fc>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d012      	beq.n	8000a06 <HAL_DMA_Abort_IT+0xce>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a54      	ldr	r2, [pc, #336]	; (8000b38 <HAL_DMA_Abort_IT+0x200>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00a      	beq.n	8000a00 <HAL_DMA_Abort_IT+0xc8>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a53      	ldr	r2, [pc, #332]	; (8000b3c <HAL_DMA_Abort_IT+0x204>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d102      	bne.n	80009fa <HAL_DMA_Abort_IT+0xc2>
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	e01b      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 80009fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fe:	e018      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a04:	e015      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a06:	2310      	movs	r3, #16
 8000a08:	e013      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e011      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a12:	e00e      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a18:	e00b      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1e:	e008      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	e005      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2a:	e002      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	e000      	b.n	8000a32 <HAL_DMA_Abort_IT+0xfa>
 8000a30:	2301      	movs	r3, #1
 8000a32:	4a43      	ldr	r2, [pc, #268]	; (8000b40 <HAL_DMA_Abort_IT+0x208>)
 8000a34:	6053      	str	r3, [r2, #4]
 8000a36:	e057      	b.n	8000ae8 <HAL_DMA_Abort_IT+0x1b0>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a36      	ldr	r2, [pc, #216]	; (8000b18 <HAL_DMA_Abort_IT+0x1e0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d04f      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0x1aa>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a35      	ldr	r2, [pc, #212]	; (8000b1c <HAL_DMA_Abort_IT+0x1e4>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d048      	beq.n	8000ade <HAL_DMA_Abort_IT+0x1a6>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <HAL_DMA_Abort_IT+0x1e8>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d040      	beq.n	8000ad8 <HAL_DMA_Abort_IT+0x1a0>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <HAL_DMA_Abort_IT+0x1ec>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d038      	beq.n	8000ad2 <HAL_DMA_Abort_IT+0x19a>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <HAL_DMA_Abort_IT+0x1f0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d030      	beq.n	8000acc <HAL_DMA_Abort_IT+0x194>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <HAL_DMA_Abort_IT+0x1f4>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d028      	beq.n	8000ac6 <HAL_DMA_Abort_IT+0x18e>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <HAL_DMA_Abort_IT+0x1dc>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d020      	beq.n	8000ac0 <HAL_DMA_Abort_IT+0x188>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a2b      	ldr	r2, [pc, #172]	; (8000b30 <HAL_DMA_Abort_IT+0x1f8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d019      	beq.n	8000abc <HAL_DMA_Abort_IT+0x184>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <HAL_DMA_Abort_IT+0x1fc>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d012      	beq.n	8000ab8 <HAL_DMA_Abort_IT+0x180>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <HAL_DMA_Abort_IT+0x200>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d00a      	beq.n	8000ab2 <HAL_DMA_Abort_IT+0x17a>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <HAL_DMA_Abort_IT+0x204>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d102      	bne.n	8000aac <HAL_DMA_Abort_IT+0x174>
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	e01b      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab0:	e018      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab6:	e015      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000ab8:	2310      	movs	r3, #16
 8000aba:	e013      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e011      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac4:	e00e      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000ac6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aca:	e00b      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad0:	e008      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	e005      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000adc:	e002      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000ade:	2310      	movs	r3, #16
 8000ae0:	e000      	b.n	8000ae4 <HAL_DMA_Abort_IT+0x1ac>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_DMA_Abort_IT+0x20c>)
 8000ae6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2201      	movs	r2, #1
 8000aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	4798      	blx	r3
    } 
  }
  return status;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40020080 	.word	0x40020080
 8000b18:	40020008 	.word	0x40020008
 8000b1c:	4002001c 	.word	0x4002001c
 8000b20:	40020030 	.word	0x40020030
 8000b24:	40020044 	.word	0x40020044
 8000b28:	40020058 	.word	0x40020058
 8000b2c:	4002006c 	.word	0x4002006c
 8000b30:	40020408 	.word	0x40020408
 8000b34:	4002041c 	.word	0x4002041c
 8000b38:	40020430 	.word	0x40020430
 8000b3c:	40020444 	.word	0x40020444
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b08b      	sub	sp, #44	; 0x2c
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	e133      	b.n	8000dc4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f040 8122 	bne.w	8000dbe <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d034      	beq.n	8000bec <HAL_GPIO_Init+0xa4>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d80d      	bhi.n	8000ba2 <HAL_GPIO_Init+0x5a>
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d02b      	beq.n	8000be2 <HAL_GPIO_Init+0x9a>
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d804      	bhi.n	8000b98 <HAL_GPIO_Init+0x50>
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d031      	beq.n	8000bf6 <HAL_GPIO_Init+0xae>
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d01c      	beq.n	8000bd0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b96:	e048      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d043      	beq.n	8000c24 <HAL_GPIO_Init+0xdc>
 8000b9c:	2b11      	cmp	r3, #17
 8000b9e:	d01b      	beq.n	8000bd8 <HAL_GPIO_Init+0x90>
          break;
 8000ba0:	e043      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ba2:	4a8f      	ldr	r2, [pc, #572]	; (8000de0 <HAL_GPIO_Init+0x298>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d026      	beq.n	8000bf6 <HAL_GPIO_Init+0xae>
 8000ba8:	4a8d      	ldr	r2, [pc, #564]	; (8000de0 <HAL_GPIO_Init+0x298>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d806      	bhi.n	8000bbc <HAL_GPIO_Init+0x74>
 8000bae:	4a8d      	ldr	r2, [pc, #564]	; (8000de4 <HAL_GPIO_Init+0x29c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d020      	beq.n	8000bf6 <HAL_GPIO_Init+0xae>
 8000bb4:	4a8c      	ldr	r2, [pc, #560]	; (8000de8 <HAL_GPIO_Init+0x2a0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d01d      	beq.n	8000bf6 <HAL_GPIO_Init+0xae>
          break;
 8000bba:	e036      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bbc:	4a8b      	ldr	r2, [pc, #556]	; (8000dec <HAL_GPIO_Init+0x2a4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d019      	beq.n	8000bf6 <HAL_GPIO_Init+0xae>
 8000bc2:	4a8b      	ldr	r2, [pc, #556]	; (8000df0 <HAL_GPIO_Init+0x2a8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d016      	beq.n	8000bf6 <HAL_GPIO_Init+0xae>
 8000bc8:	4a8a      	ldr	r2, [pc, #552]	; (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d013      	beq.n	8000bf6 <HAL_GPIO_Init+0xae>
          break;
 8000bce:	e02c      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	623b      	str	r3, [r7, #32]
          break;
 8000bd6:	e028      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e023      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	3308      	adds	r3, #8
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e01e      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	330c      	adds	r3, #12
 8000bf2:	623b      	str	r3, [r7, #32]
          break;
 8000bf4:	e019      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d102      	bne.n	8000c04 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e012      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d105      	bne.n	8000c18 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	611a      	str	r2, [r3, #16]
          break;
 8000c16:	e008      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	615a      	str	r2, [r3, #20]
          break;
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
          break;
 8000c28:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d801      	bhi.n	8000c34 <HAL_GPIO_Init+0xec>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	e001      	b.n	8000c38 <HAL_GPIO_Init+0xf0>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3304      	adds	r3, #4
 8000c38:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d802      	bhi.n	8000c46 <HAL_GPIO_Init+0xfe>
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_Init+0x104>
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	3b08      	subs	r3, #8
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	210f      	movs	r1, #15
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	6a39      	ldr	r1, [r7, #32]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	431a      	orrs	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 80a2 	beq.w	8000dbe <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7a:	4b5f      	ldr	r3, [pc, #380]	; (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	4a5e      	ldr	r2, [pc, #376]	; (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6193      	str	r3, [r2, #24]
 8000c86:	4b5c      	ldr	r3, [pc, #368]	; (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c92:	4a5a      	ldr	r2, [pc, #360]	; (8000dfc <HAL_GPIO_Init+0x2b4>)
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3302      	adds	r3, #2
 8000c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	220f      	movs	r2, #15
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a51      	ldr	r2, [pc, #324]	; (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d01f      	beq.n	8000cfe <HAL_GPIO_Init+0x1b6>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a50      	ldr	r2, [pc, #320]	; (8000e04 <HAL_GPIO_Init+0x2bc>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d019      	beq.n	8000cfa <HAL_GPIO_Init+0x1b2>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4f      	ldr	r2, [pc, #316]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d013      	beq.n	8000cf6 <HAL_GPIO_Init+0x1ae>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a4e      	ldr	r2, [pc, #312]	; (8000e0c <HAL_GPIO_Init+0x2c4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d00d      	beq.n	8000cf2 <HAL_GPIO_Init+0x1aa>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4d      	ldr	r2, [pc, #308]	; (8000e10 <HAL_GPIO_Init+0x2c8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d007      	beq.n	8000cee <HAL_GPIO_Init+0x1a6>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <HAL_GPIO_Init+0x2cc>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_GPIO_Init+0x1a2>
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	e00a      	b.n	8000d00 <HAL_GPIO_Init+0x1b8>
 8000cea:	2306      	movs	r3, #6
 8000cec:	e008      	b.n	8000d00 <HAL_GPIO_Init+0x1b8>
 8000cee:	2304      	movs	r3, #4
 8000cf0:	e006      	b.n	8000d00 <HAL_GPIO_Init+0x1b8>
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e004      	b.n	8000d00 <HAL_GPIO_Init+0x1b8>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e002      	b.n	8000d00 <HAL_GPIO_Init+0x1b8>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <HAL_GPIO_Init+0x1b8>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d02:	f002 0203 	and.w	r2, r2, #3
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	4093      	lsls	r3, r2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d10:	493a      	ldr	r1, [pc, #232]	; (8000dfc <HAL_GPIO_Init+0x2b4>)
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	3302      	adds	r3, #2
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d006      	beq.n	8000d38 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2a:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	493a      	ldr	r1, [pc, #232]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
 8000d36:	e006      	b.n	8000d46 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	4935      	ldr	r1, [pc, #212]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d006      	beq.n	8000d60 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d52:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	4930      	ldr	r1, [pc, #192]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
 8000d5e:	e006      	b.n	8000d6e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	492b      	ldr	r1, [pc, #172]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	4926      	ldr	r1, [pc, #152]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	608b      	str	r3, [r1, #8]
 8000d86:	e006      	b.n	8000d96 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	4921      	ldr	r1, [pc, #132]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	491c      	ldr	r1, [pc, #112]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60cb      	str	r3, [r1, #12]
 8000dae:	e006      	b.n	8000dbe <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	4917      	ldr	r1, [pc, #92]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dba:	4013      	ands	r3, r2
 8000dbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	fa22 f303 	lsr.w	r3, r2, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f47f aec4 	bne.w	8000b5c <HAL_GPIO_Init+0x14>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	372c      	adds	r7, #44	; 0x2c
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	10210000 	.word	0x10210000
 8000de4:	10110000 	.word	0x10110000
 8000de8:	10120000 	.word	0x10120000
 8000dec:	10310000 	.word	0x10310000
 8000df0:	10320000 	.word	0x10320000
 8000df4:	10220000 	.word	0x10220000
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	40011400 	.word	0x40011400
 8000e10:	40011800 	.word	0x40011800
 8000e14:	40011c00 	.word	0x40011c00
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e38:	e003      	b.n	8000e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	041a      	lsls	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e26c      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8087 	beq.w	8000f7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e6c:	4b92      	ldr	r3, [pc, #584]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 030c 	and.w	r3, r3, #12
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d00c      	beq.n	8000e92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e78:	4b8f      	ldr	r3, [pc, #572]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d112      	bne.n	8000eaa <HAL_RCC_OscConfig+0x5e>
 8000e84:	4b8c      	ldr	r3, [pc, #560]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e90:	d10b      	bne.n	8000eaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e92:	4b89      	ldr	r3, [pc, #548]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d06c      	beq.n	8000f78 <HAL_RCC_OscConfig+0x12c>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d168      	bne.n	8000f78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e246      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb2:	d106      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x76>
 8000eb4:	4b80      	ldr	r3, [pc, #512]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a7f      	ldr	r2, [pc, #508]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e02e      	b.n	8000f20 <HAL_RCC_OscConfig+0xd4>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x98>
 8000eca:	4b7b      	ldr	r3, [pc, #492]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a7a      	ldr	r2, [pc, #488]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b78      	ldr	r3, [pc, #480]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a77      	ldr	r2, [pc, #476]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e01d      	b.n	8000f20 <HAL_RCC_OscConfig+0xd4>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0xbc>
 8000eee:	4b72      	ldr	r3, [pc, #456]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a71      	ldr	r2, [pc, #452]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a6e      	ldr	r2, [pc, #440]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e00b      	b.n	8000f20 <HAL_RCC_OscConfig+0xd4>
 8000f08:	4b6b      	ldr	r3, [pc, #428]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a6a      	ldr	r2, [pc, #424]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b68      	ldr	r3, [pc, #416]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a67      	ldr	r2, [pc, #412]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d013      	beq.n	8000f50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fbee 	bl	8000708 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fbea 	bl	8000708 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	; 0x64
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e1fa      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f0      	beq.n	8000f30 <HAL_RCC_OscConfig+0xe4>
 8000f4e:	e014      	b.n	8000f7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fbda 	bl	8000708 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fbd6 	bl	8000708 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e1e6      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6a:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x10c>
 8000f76:	e000      	b.n	8000f7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d063      	beq.n	800104e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d11c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x18c>
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d116      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000faa:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x176>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d001      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e1ba      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4939      	ldr	r1, [pc, #228]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	e03a      	b.n	800104e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d020      	beq.n	8001022 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <HAL_RCC_OscConfig+0x270>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fb8f 	bl	8000708 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fee:	f7ff fb8b 	bl	8000708 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e19b      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4927      	ldr	r1, [pc, #156]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 800101c:	4313      	orrs	r3, r2
 800101e:	600b      	str	r3, [r1, #0]
 8001020:	e015      	b.n	800104e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_RCC_OscConfig+0x270>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fb6e 	bl	8000708 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001030:	f7ff fb6a 	bl	8000708 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e17a      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	2b00      	cmp	r3, #0
 8001058:	d03a      	beq.n	80010d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d019      	beq.n	8001096 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_RCC_OscConfig+0x274>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001068:	f7ff fb4e 	bl	8000708 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001070:	f7ff fb4a 	bl	8000708 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e15a      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f0      	beq.n	8001070 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f000 fada 	bl	8001648 <RCC_Delay>
 8001094:	e01c      	b.n	80010d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_RCC_OscConfig+0x274>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109c:	f7ff fb34 	bl	8000708 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a2:	e00f      	b.n	80010c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fb30 	bl	8000708 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d908      	bls.n	80010c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e140      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	42420000 	.word	0x42420000
 80010c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c4:	4b9e      	ldr	r3, [pc, #632]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1e9      	bne.n	80010a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80a6 	beq.w	800122a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e2:	4b97      	ldr	r3, [pc, #604]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10d      	bne.n	800110a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b94      	ldr	r3, [pc, #592]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a93      	ldr	r2, [pc, #588]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b91      	ldr	r3, [pc, #580]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	4b8e      	ldr	r3, [pc, #568]	; (8001344 <HAL_RCC_OscConfig+0x4f8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001116:	4b8b      	ldr	r3, [pc, #556]	; (8001344 <HAL_RCC_OscConfig+0x4f8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a8a      	ldr	r2, [pc, #552]	; (8001344 <HAL_RCC_OscConfig+0x4f8>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff faf1 	bl	8000708 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112a:	f7ff faed 	bl	8000708 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b64      	cmp	r3, #100	; 0x64
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e0fd      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	4b81      	ldr	r3, [pc, #516]	; (8001344 <HAL_RCC_OscConfig+0x4f8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x312>
 8001150:	4b7b      	ldr	r3, [pc, #492]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4a7a      	ldr	r2, [pc, #488]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6213      	str	r3, [r2, #32]
 800115c:	e02d      	b.n	80011ba <HAL_RCC_OscConfig+0x36e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x334>
 8001166:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a75      	ldr	r2, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	6213      	str	r3, [r2, #32]
 8001172:	4b73      	ldr	r3, [pc, #460]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4a72      	ldr	r2, [pc, #456]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	6213      	str	r3, [r2, #32]
 800117e:	e01c      	b.n	80011ba <HAL_RCC_OscConfig+0x36e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b05      	cmp	r3, #5
 8001186:	d10c      	bne.n	80011a2 <HAL_RCC_OscConfig+0x356>
 8001188:	4b6d      	ldr	r3, [pc, #436]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4a6c      	ldr	r2, [pc, #432]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6213      	str	r3, [r2, #32]
 8001194:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4a69      	ldr	r2, [pc, #420]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6213      	str	r3, [r2, #32]
 80011a0:	e00b      	b.n	80011ba <HAL_RCC_OscConfig+0x36e>
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a66      	ldr	r2, [pc, #408]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	4b64      	ldr	r3, [pc, #400]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a63      	ldr	r2, [pc, #396]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d015      	beq.n	80011ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c2:	f7ff faa1 	bl	8000708 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c8:	e00a      	b.n	80011e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ca:	f7ff fa9d 	bl	8000708 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d8:	4293      	cmp	r3, r2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e0ab      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e0:	4b57      	ldr	r3, [pc, #348]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0ee      	beq.n	80011ca <HAL_RCC_OscConfig+0x37e>
 80011ec:	e014      	b.n	8001218 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fa8b 	bl	8000708 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fa87 	bl	8000708 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e095      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120c:	4b4c      	ldr	r3, [pc, #304]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1ee      	bne.n	80011f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d105      	bne.n	800122a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800121e:	4b48      	ldr	r3, [pc, #288]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a47      	ldr	r2, [pc, #284]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8081 	beq.w	8001336 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001234:	4b42      	ldr	r3, [pc, #264]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d061      	beq.n	8001304 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d146      	bne.n	80012d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001248:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <HAL_RCC_OscConfig+0x4fc>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124e:	f7ff fa5b 	bl	8000708 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001256:	f7ff fa57 	bl	8000708 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e067      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f0      	bne.n	8001256 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d108      	bne.n	8001290 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	492d      	ldr	r1, [pc, #180]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a19      	ldr	r1, [r3, #32]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	430b      	orrs	r3, r1
 80012a2:	4927      	ldr	r1, [pc, #156]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_RCC_OscConfig+0x4fc>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fa2b 	bl	8000708 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff fa27 	bl	8000708 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e037      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x46a>
 80012d4:	e02f      	b.n	8001336 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_RCC_OscConfig+0x4fc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fa14 	bl	8000708 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff fa10 	bl	8000708 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e020      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x498>
 8001302:	e018      	b.n	8001336 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e013      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_OscConfig+0x4f4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	429a      	cmp	r2, r3
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40007000 	.word	0x40007000
 8001348:	42420060 	.word	0x42420060

0800134c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e0d0      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001360:	4b6a      	ldr	r3, [pc, #424]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d910      	bls.n	8001390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	4b67      	ldr	r3, [pc, #412]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 0207 	bic.w	r2, r3, #7
 8001376:	4965      	ldr	r1, [pc, #404]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0b8      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d020      	beq.n	80013de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a8:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a58      	ldr	r2, [pc, #352]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c0:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a52      	ldr	r2, [pc, #328]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	494d      	ldr	r1, [pc, #308]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d040      	beq.n	800146c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d107      	bne.n	8001402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d115      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e07f      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d107      	bne.n	800141a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e073      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e06b      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142a:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f023 0203 	bic.w	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4936      	ldr	r1, [pc, #216]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800143c:	f7ff f964 	bl	8000708 <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	e00a      	b.n	800145a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001444:	f7ff f960 	bl	8000708 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e053      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 020c 	and.w	r2, r3, #12
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	429a      	cmp	r2, r3
 800146a:	d1eb      	bne.n	8001444 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d210      	bcs.n	800149c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 0207 	bic.w	r2, r3, #7
 8001482:	4922      	ldr	r1, [pc, #136]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e032      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4916      	ldr	r1, [pc, #88]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d009      	beq.n	80014da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	490e      	ldr	r1, [pc, #56]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014da:	f000 f821 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 80014de:	4601      	mov	r1, r0
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
 80014ee:	fa21 f303 	lsr.w	r3, r1, r3
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_RCC_ClockConfig+0x1cc>)
 80014f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_ClockConfig+0x1d0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f8c2 	bl	8000684 <HAL_InitTick>

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000
 8001510:	40021000 	.word	0x40021000
 8001514:	08001f74 	.word	0x08001f74
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001520:	b490      	push	{r4, r7}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001528:	1d3c      	adds	r4, r7, #4
 800152a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b04      	cmp	r3, #4
 8001558:	d002      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0x40>
 800155a:	2b08      	cmp	r3, #8
 800155c:	d003      	beq.n	8001566 <HAL_RCC_GetSysClockFreq+0x46>
 800155e:	e02d      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001562:	623b      	str	r3, [r7, #32]
      break;
 8001564:	e02d      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	0c9b      	lsrs	r3, r3, #18
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001572:	4413      	add	r3, r2
 8001574:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001578:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	0c5b      	lsrs	r3, r3, #17
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001592:	4413      	add	r3, r2
 8001594:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001598:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800159e:	fb02 f203 	mul.w	r2, r2, r3
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
 80015aa:	e004      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	623b      	str	r3, [r7, #32]
      break;
 80015ba:	e002      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80015be:	623b      	str	r3, [r7, #32]
      break;
 80015c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c2:	6a3b      	ldr	r3, [r7, #32]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc90      	pop	{r4, r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	08001f60 	.word	0x08001f60
 80015d4:	08001f70 	.word	0x08001f70
 80015d8:	40021000 	.word	0x40021000
 80015dc:	007a1200 	.word	0x007a1200
 80015e0:	003d0900 	.word	0x003d0900

080015e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000000 	.word	0x20000000

080015f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015fc:	f7ff fff2 	bl	80015e4 <HAL_RCC_GetHCLKFreq>
 8001600:	4601      	mov	r1, r0
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_RCC_GetPCLK1Freq+0x24>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000
 800161c:	08001f84 	.word	0x08001f84

08001620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001624:	f7ff ffde 	bl	80015e4 <HAL_RCC_GetHCLKFreq>
 8001628:	4601      	mov	r1, r0
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0adb      	lsrs	r3, r3, #11
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	4a03      	ldr	r2, [pc, #12]	; (8001644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	fa21 f303 	lsr.w	r3, r1, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	08001f84 	.word	0x08001f84

08001648 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <RCC_Delay+0x34>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <RCC_Delay+0x38>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0a5b      	lsrs	r3, r3, #9
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001664:	bf00      	nop
  }
  while (Delay --);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1e5a      	subs	r2, r3, #1
 800166a:	60fa      	str	r2, [r7, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f9      	bne.n	8001664 <RCC_Delay+0x1c>
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000000 	.word	0x20000000
 8001680:	10624dd3 	.word	0x10624dd3

08001684 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_UART_Init+0x12>
		return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e03f      	b.n	8001716 <HAL_UART_Init+0x92>
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

	if (huart->gState == HAL_UART_STATE_RESET) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_UART_Init+0x2c>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7fe ff20 	bl	80004f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	/* Disable the peripheral */
	__HAL_UART_DISABLE(huart);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016c6:	60da      	str	r2, [r3, #12]

	/* Set the UART Communication parameters */
	UART_SetConfig(huart);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fb83 	bl	8001dd4 <UART_SetConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016dc:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016ec:	615a      	str	r2, [r3, #20]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	/* Enable the peripheral */
	__HAL_UART_ENABLE(huart);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016fc:	60da      	str	r2, [r3, #12]

	/* Initialize the UART state */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
	huart->gState = HAL_UART_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	huart->RxState = HAL_UART_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2220      	movs	r2, #32
 8001710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_UART_Transmit>:
 * @param  Size  Amount of data elements (u8 or u16) to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 800171e:	b580      	push	{r7, lr}
 8001720:	b08a      	sub	sp, #40	; 0x28
 8001722:	af02      	add	r7, sp, #8
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4613      	mov	r3, r2
 800172c:	80fb      	strh	r3, [r7, #6]
	uint8_t *pdata8bits;
	uint16_t *pdata16bits;
	uint32_t tickstart = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY) {
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b20      	cmp	r3, #32
 800173c:	d17c      	bne.n	8001838 <HAL_UART_Transmit+0x11a>
		if ((pData == NULL) || (Size == 0U)) {
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_UART_Transmit+0x2c>
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_UART_Transmit+0x30>
			return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e075      	b.n	800183a <HAL_UART_Transmit+0x11c>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_UART_Transmit+0x3e>
 8001758:	2302      	movs	r3, #2
 800175a:	e06e      	b.n	800183a <HAL_UART_Transmit+0x11c>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_BUSY_TX;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2221      	movs	r2, #33	; 0x21
 800176e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

		/* Init tickstart for timeout managment */
		tickstart = HAL_GetTick();
 8001772:	f7fe ffc9 	bl	8000708 <HAL_GetTick>
 8001776:	6178      	str	r0, [r7, #20]

		huart->TxXferSize = Size;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	849a      	strh	r2, [r3, #36]	; 0x24
		huart->TxXferCount = Size;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	88fa      	ldrh	r2, [r7, #6]
 8001782:	84da      	strh	r2, [r3, #38]	; 0x26

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800178c:	d108      	bne.n	80017a0 <HAL_UART_Transmit+0x82>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d104      	bne.n	80017a0 <HAL_UART_Transmit+0x82>
			pdata8bits = NULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
			pdata16bits = (uint16_t*) pData;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	e003      	b.n	80017a8 <HAL_UART_Transmit+0x8a>
		} else {
			pdata8bits = pData;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
		}

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		while (huart->TxXferCount > 0U) {
 80017b0:	e02a      	b.n	8001808 <HAL_UART_Transmit+0xea>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2200      	movs	r2, #0
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 f9a7 	bl	8001b10 <UART_WaitOnFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_Transmit+0xae>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e036      	b.n	800183a <HAL_UART_Transmit+0x11c>
			}
			if (pdata8bits == NULL) {
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10b      	bne.n	80017ea <HAL_UART_Transmit+0xcc>
				huart->Instance->DR = (uint16_t) (*pdata16bits & 0x01FFU);
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017e0:	605a      	str	r2, [r3, #4]
				pdata16bits++;
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	3302      	adds	r3, #2
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	e007      	b.n	80017fa <HAL_UART_Transmit+0xdc>
			} else {
				huart->Instance->DR = (uint8_t) (*pdata8bits & 0xFFU);
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
				pdata8bits++;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	3301      	adds	r3, #1
 80017f8:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017fe:	b29b      	uxth	r3, r3
 8001800:	3b01      	subs	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	84da      	strh	r2, [r3, #38]	; 0x26
		while (huart->TxXferCount > 0U) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800180c:	b29b      	uxth	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1cf      	bne.n	80017b2 <HAL_UART_Transmit+0x94>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2200      	movs	r2, #0
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f977 	bl	8001b10 <UART_WaitOnFlagUntilTimeout>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_Transmit+0x10e>
				Timeout) != HAL_OK) {
			return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e006      	b.n	800183a <HAL_UART_Transmit+0x11c>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2220      	movs	r2, #32
 8001830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

		return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <HAL_UART_Transmit+0x11c>
	} else {
		return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
	}
}
 800183a:	4618      	mov	r0, r3
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_UART_Receive_IT>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size) {
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	4613      	mov	r3, r2
 800184e:	80fb      	strh	r3, [r7, #6]
	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b20      	cmp	r3, #32
 800185a:	d140      	bne.n	80018de <HAL_UART_Receive_IT+0x9c>
		if ((pData == NULL) || (Size == 0U)) {
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_UART_Receive_IT+0x26>
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_UART_Receive_IT+0x2a>
			return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e039      	b.n	80018e0 <HAL_UART_Receive_IT+0x9e>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_UART_Receive_IT+0x38>
 8001876:	2302      	movs	r3, #2
 8001878:	e032      	b.n	80018e0 <HAL_UART_Receive_IT+0x9e>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		huart->pRxBuffPtr = pData;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	88fa      	ldrh	r2, [r7, #6]
 800188c:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->RxXferCount = Size;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	88fa      	ldrh	r2, [r7, #6]
 8001892:	85da      	strh	r2, [r3, #46]	; 0x2e

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2222      	movs	r2, #34	; 0x22
 800189e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* Enable the UART Parity Error Interrupt */
		__HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b8:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		__HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	615a      	str	r2, [r3, #20]

		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0220 	orr.w	r2, r2, #32
 80018d8:	60da      	str	r2, [r3, #12]

		return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_UART_Receive_IT+0x9e>
	} else {
		return HAL_BUSY;
 80018de:	2302      	movs	r3, #2
	}
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_UART_IRQHandler>:
 * @brief  This function handles UART interrupt request.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	61fb      	str	r3, [r7, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	61bb      	str	r3, [r7, #24]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	617b      	str	r3, [r7, #20]
	uint32_t errorflags = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
	uint32_t dmarequest = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]

	/* If no error occurs */
	errorflags =
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	613b      	str	r3, [r7, #16]
			(isrflags
					& (uint32_t) (USART_SR_PE | USART_SR_FE | USART_SR_ORE
							| USART_SR_NE));
	if (errorflags == RESET) {
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_UART_IRQHandler+0x52>
		/* UART in mode Receiver -------------------------------------------------*/
		if (((isrflags & USART_SR_RXNE) != RESET)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_UART_IRQHandler+0x52>
				&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_UART_IRQHandler+0x52>
			UART_Receive_IT(huart);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f9cc 	bl	8001cd4 <UART_Receive_IT>
			return;
 800193c:	e0d1      	b.n	8001ae2 <HAL_UART_IRQHandler+0x1f6>
		}
	}

	/* If some errors occur */
	if ((errorflags != RESET)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80b0 	beq.w	8001aa6 <HAL_UART_IRQHandler+0x1ba>
			&& (((cr3its & USART_CR3_EIE) != RESET)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_UART_IRQHandler+0x70>
					|| ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80a5 	beq.w	8001aa6 <HAL_UART_IRQHandler+0x1ba>
		/* UART parity error interrupt occurred ----------------------------------*/
		if (((isrflags & USART_SR_PE) != RESET)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00a      	beq.n	800197c <HAL_UART_IRQHandler+0x90>
				&& ((cr1its & USART_CR1_PEIE) != RESET)) {
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_UART_IRQHandler+0x90>
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		/* UART noise error interrupt occurred -----------------------------------*/
		if (((isrflags & USART_SR_NE) != RESET)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <HAL_UART_IRQHandler+0xb0>
				&& ((cr3its & USART_CR3_EIE) != RESET)) {
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_UART_IRQHandler+0xb0>
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001994:	f043 0202 	orr.w	r2, r3, #2
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		/* UART frame error interrupt occurred -----------------------------------*/
		if (((isrflags & USART_SR_FE) != RESET)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <HAL_UART_IRQHandler+0xd0>
				&& ((cr3its & USART_CR3_EIE) != RESET)) {
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_UART_IRQHandler+0xd0>
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	f043 0204 	orr.w	r2, r3, #4
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		/* UART Over-Run interrupt occurred --------------------------------------*/
		if (((isrflags & USART_SR_ORE) != RESET)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00f      	beq.n	80019e6 <HAL_UART_IRQHandler+0xfa>
				&& (((cr1its & USART_CR1_RXNEIE) != RESET)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d104      	bne.n	80019da <HAL_UART_IRQHandler+0xee>
						|| ((cr3its & USART_CR3_EIE) != RESET))) {
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_UART_IRQHandler+0xfa>
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	f043 0208 	orr.w	r2, r3, #8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		/* Call UART Error Call back function if need be --------------------------*/
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d078      	beq.n	8001ae0 <HAL_UART_IRQHandler+0x1f4>
			/* UART in mode Receiver -----------------------------------------------*/
			if (((isrflags & USART_SR_RXNE) != RESET)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <HAL_UART_IRQHandler+0x11c>
					&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_UART_IRQHandler+0x11c>
				UART_Receive_IT(huart);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f966 	bl	8001cd4 <UART_Receive_IT>
			}

			/* If Overrun error occurs, or if any error occurs in DMA mode reception,
			 consider error as blocking */
			dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf14      	ite	ne
 8001a16:	2301      	movne	r3, #1
 8001a18:	2300      	moveq	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	60fb      	str	r3, [r7, #12]
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_UART_IRQHandler+0x144>
					|| dmarequest) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d031      	beq.n	8001a94 <HAL_UART_IRQHandler+0x1a8>
				/* Blocking error : transfer is aborted
				 Set the UART state ready to be able to start again the process,
				 Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
				UART_EndRxTransfer(huart);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f8b7 	bl	8001ba4 <UART_EndRxTransfer>

				/* Disable the UART DMA Rx request if enabled */
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_UART_IRQHandler+0x1a0>
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a52:	615a      	str	r2, [r3, #20]

					/* Abort the UART DMA Rx channel */
					if (huart->hdmarx != NULL) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_UART_IRQHandler+0x198>
						/* Set the UART DMA Abort callback :
						 will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a60:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <HAL_UART_IRQHandler+0x1fc>)
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe ff65 	bl	8000938 <HAL_DMA_Abort_IT>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d016      	beq.n	8001aa2 <HAL_UART_IRQHandler+0x1b6>
							/* Call Directly XferAbortCallback function in case of error */
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4798      	blx	r3
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001a82:	e00e      	b.n	8001aa2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
						/*Call legacy weak error callback*/
						HAL_UART_ErrorCallback(huart);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f83a 	bl	8001afe <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001a8a:	e00a      	b.n	8001aa2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
					/*Call legacy weak error callback*/
					HAL_UART_ErrorCallback(huart);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f836 	bl	8001afe <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001a92:	e006      	b.n	8001aa2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
				/*Call legacy weak error callback*/
				HAL_UART_ErrorCallback(huart);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f832 	bl	8001afe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c
			}
		}
		return;
 8001aa0:	e01e      	b.n	8001ae0 <HAL_UART_IRQHandler+0x1f4>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001aa2:	bf00      	nop
		return;
 8001aa4:	e01c      	b.n	8001ae0 <HAL_UART_IRQHandler+0x1f4>
	} /* End if some error occurs */

	/* UART in mode Transmitter ------------------------------------------------*/
	if (((isrflags & USART_SR_TXE) != RESET)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x1d6>
			&& ((cr1its & USART_CR1_TXEIE) != RESET)) {
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x1d6>
		UART_Transmit_IT(huart);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8a3 	bl	8001c06 <UART_Transmit_IT>
		return;
 8001ac0:	e00f      	b.n	8001ae2 <HAL_UART_IRQHandler+0x1f6>
	}

	/* UART in mode Transmitter end --------------------------------------------*/
	if (((isrflags & USART_SR_TC) != RESET)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00a      	beq.n	8001ae2 <HAL_UART_IRQHandler+0x1f6>
			&& ((cr1its & USART_CR1_TCIE) != RESET)) {
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_UART_IRQHandler+0x1f6>
		UART_EndTransmit_IT(huart);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f8e4 	bl	8001ca4 <UART_EndTransmit_IT>
		return;
 8001adc:	bf00      	nop
 8001ade:	e000      	b.n	8001ae2 <HAL_UART_IRQHandler+0x1f6>
		return;
 8001ae0:	bf00      	nop
	}
}
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	08001bdf 	.word	0x08001bdf

08001aec <HAL_UART_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_TxCpltCallback could be implemented in the user file
	 */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <HAL_UART_ErrorCallback>:
 * @brief  UART error callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_ErrorCallback could be implemented in the user file
	 */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <UART_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8001b20:	e02c      	b.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x6c>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d028      	beq.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x6c>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b30:	f7fe fdea 	bl	8000708 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d21d      	bcs.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x6c>
				/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
				CLEAR_BIT(huart->Instance->CR1,
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b4e:	60da      	str	r2, [r3, #12]
						(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
				CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	615a      	str	r2, [r3, #20]

				huart->gState = HAL_UART_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				huart->RxState = HAL_UART_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

				/* Process Unlocked */
				__HAL_UNLOCK(huart);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

				return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e00f      	b.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x8c>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4013      	ands	r3, r2
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d0c3      	beq.n	8001b22 <UART_WaitOnFlagUntilTimeout+0x12>
			}
		}
	}
	return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <UART_EndRxTransfer>:
/**
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001bba:	60da      	str	r2, [r3, #12]
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	615a      	str	r2, [r3, #20]

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <UART_DMAAbortOnError>:
 *         (To be called at end of DMA Abort procedure following error occurrence).
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart =
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	60fb      	str	r3, [r7, #12]
			(UART_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
	huart->RxXferCount = 0x00U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	85da      	strh	r2, [r3, #46]	; 0x2e
	huart->TxXferCount = 0x00U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
	/*Call legacy weak error callback*/
	HAL_UART_ErrorCallback(huart);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff ff80 	bl	8001afe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <UART_Transmit_IT>:
 * @brief  Sends an amount of data in non blocking mode.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart) {
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
	uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b21      	cmp	r3, #33	; 0x21
 8001c18:	d13e      	bne.n	8001c98 <UART_Transmit_IT+0x92>
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c22:	d114      	bne.n	8001c4e <UART_Transmit_IT+0x48>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d110      	bne.n	8001c4e <UART_Transmit_IT+0x48>
			tmp = (uint16_t*) huart->pTxBuffPtr;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	60fb      	str	r3, [r7, #12]
			huart->Instance->DR = (uint16_t) (*tmp & (uint16_t) 0x01FF);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c40:	605a      	str	r2, [r3, #4]
			huart->pTxBuffPtr += 2U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	1c9a      	adds	r2, r3, #2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	621a      	str	r2, [r3, #32]
 8001c4c:	e008      	b.n	8001c60 <UART_Transmit_IT+0x5a>
		} else {
			huart->Instance->DR = (uint8_t) (*huart->pTxBuffPtr++
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	1c59      	adds	r1, r3, #1
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6211      	str	r1, [r2, #32]
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
					& (uint8_t) 0x00FF);
		}

		if (--huart->TxXferCount == 0U) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10f      	bne.n	8001c94 <UART_Transmit_IT+0x8e>
			/* Disable the UART Transmit Complete Interrupt */
			__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c82:	60da      	str	r2, [r3, #12]

			/* Enable the UART Transmit Complete Interrupt */
			__HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c92:	60da      	str	r2, [r3, #12]
		}
		return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <UART_Transmit_IT+0x94>
	} else {
		return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
	}
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <UART_EndTransmit_IT>:
 * @brief  Wraps up transmission in non blocking mode.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	/* Disable the UART Transmit Complete Interrupt */
	__HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cba:	60da      	str	r2, [r3, #12]

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff11 	bl	8001aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

	return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <UART_Receive_IT>:
 * @brief  Receives an amount of data in non blocking mode
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	uint8_t *pdata8bits;
	uint16_t *pdata16bits;

	/* Check that a Rx process is ongoing */
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b22      	cmp	r3, #34	; 0x22
 8001ce6:	d170      	bne.n	8001dca <UART_Receive_IT+0xf6>
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf0:	d117      	bne.n	8001d22 <UART_Receive_IT+0x4e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d113      	bne.n	8001d22 <UART_Receive_IT+0x4e>
			pdata8bits = NULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
			pdata16bits = (uint16_t*) huart->pRxBuffPtr;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	60bb      	str	r3, [r7, #8]
			*pdata16bits = (uint16_t) (huart->Instance->DR & (uint16_t) 0x01FF);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	801a      	strh	r2, [r3, #0]
			huart->pRxBuffPtr += 2U;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	1c9a      	adds	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d20:	e026      	b.n	8001d70 <UART_Receive_IT+0x9c>
		} else {
			pdata8bits = (uint8_t*) huart->pRxBuffPtr;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	60fb      	str	r3, [r7, #12]
			pdata16bits = NULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]

			if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d34:	d007      	beq.n	8001d46 <UART_Receive_IT+0x72>
					|| ((huart->Init.WordLength == UART_WORDLENGTH_8B)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10a      	bne.n	8001d54 <UART_Receive_IT+0x80>
							&& (huart->Init.Parity == UART_PARITY_NONE))) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <UART_Receive_IT+0x80>
				*pdata8bits =
						(uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	b2da      	uxtb	r2, r3
				*pdata8bits =
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e008      	b.n	8001d66 <UART_Receive_IT+0x92>
			} else {
				*pdata8bits =
						(uint8_t) (huart->Instance->DR & (uint8_t) 0x007F);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d60:	b2da      	uxtb	r2, r3
				*pdata8bits =
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	701a      	strb	r2, [r3, #0]
			}
			huart->pRxBuffPtr += 1U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (--huart->RxXferCount == 0U) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d120      	bne.n	8001dc6 <UART_Receive_IT+0xf2>
			/* Disable the UART Data Register not empty Interrupt */
			__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0220 	bic.w	r2, r2, #32
 8001d92:	60da      	str	r2, [r3, #12]

			/* Disable the UART Parity Error Interrupt */
			__HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da2:	60da      	str	r2, [r3, #12]

			/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	615a      	str	r2, [r3, #20]

			/* Rx process is completed, restore huart->RxState to Ready */
			huart->RxState = HAL_UART_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
			/*Call legacy weak Rx complete callback*/
			HAL_UART_RxCpltCallback(huart);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7fe fb29 	bl	8000414 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

			return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e002      	b.n	8001dcc <UART_Receive_IT+0xf8>
		}
		return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <UART_Receive_IT+0xf8>
	} else {
		return HAL_BUSY;
 8001dca:	2302      	movs	r3, #2
	}
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits
	 according to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	431a      	orrs	r2, r3
			| huart->Init.Mode;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
	MODIFY_REG(huart->Instance->CR1,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e0e:	f023 030c 	bic.w	r3, r3, #12
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	60d3      	str	r3, [r2, #12]
			tmpreg);
#endif /* USART_CR1_OVER8 */

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	615a      	str	r2, [r3, #20]
			huart->Init.HwFlowCtl);

	if (huart->Instance == USART1) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <UART_SetConfig+0x114>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d103      	bne.n	8001e44 <UART_SetConfig+0x70>
		pclk = HAL_RCC_GetPCLK2Freq();
 8001e3c:	f7ff fbf0 	bl	8001620 <HAL_RCC_GetPCLK2Freq>
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	e002      	b.n	8001e4a <UART_SetConfig+0x76>
	} else {
		pclk = HAL_RCC_GetPCLK1Freq();
 8001e44:	f7ff fbd8 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8001e48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
	huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	009a      	lsls	r2, r3, #2
 8001e54:	441a      	add	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	4a22      	ldr	r2, [pc, #136]	; (8001eec <UART_SetConfig+0x118>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	0119      	lsls	r1, r3, #4
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	441a      	add	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <UART_SetConfig+0x118>)
 8001e82:	fba3 0302 	umull	r0, r3, r3, r2
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2064      	movs	r0, #100	; 0x64
 8001e8a:	fb00 f303 	mul.w	r3, r0, r3
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	3332      	adds	r3, #50	; 0x32
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <UART_SetConfig+0x118>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	4419      	add	r1, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009a      	lsls	r2, r3, #2
 8001eac:	441a      	add	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <UART_SetConfig+0x118>)
 8001eba:	fba3 0302 	umull	r0, r3, r3, r2
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2064      	movs	r0, #100	; 0x64
 8001ec2:	fb00 f303 	mul.w	r3, r0, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	3332      	adds	r3, #50	; 0x32
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <UART_SetConfig+0x118>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	f003 020f 	and.w	r2, r3, #15
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	440a      	add	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	51eb851f 	.word	0x51eb851f

08001ef0 <__libc_init_array>:
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	4e0c      	ldr	r6, [pc, #48]	; (8001f28 <__libc_init_array+0x38>)
 8001ef6:	4c0d      	ldr	r4, [pc, #52]	; (8001f2c <__libc_init_array+0x3c>)
 8001ef8:	1ba4      	subs	r4, r4, r6
 8001efa:	10a4      	asrs	r4, r4, #2
 8001efc:	42a5      	cmp	r5, r4
 8001efe:	d109      	bne.n	8001f14 <__libc_init_array+0x24>
 8001f00:	f000 f822 	bl	8001f48 <_init>
 8001f04:	2500      	movs	r5, #0
 8001f06:	4e0a      	ldr	r6, [pc, #40]	; (8001f30 <__libc_init_array+0x40>)
 8001f08:	4c0a      	ldr	r4, [pc, #40]	; (8001f34 <__libc_init_array+0x44>)
 8001f0a:	1ba4      	subs	r4, r4, r6
 8001f0c:	10a4      	asrs	r4, r4, #2
 8001f0e:	42a5      	cmp	r5, r4
 8001f10:	d105      	bne.n	8001f1e <__libc_init_array+0x2e>
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
 8001f14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f18:	4798      	blx	r3
 8001f1a:	3501      	adds	r5, #1
 8001f1c:	e7ee      	b.n	8001efc <__libc_init_array+0xc>
 8001f1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f22:	4798      	blx	r3
 8001f24:	3501      	adds	r5, #1
 8001f26:	e7f2      	b.n	8001f0e <__libc_init_array+0x1e>
 8001f28:	08001f8c 	.word	0x08001f8c
 8001f2c:	08001f8c 	.word	0x08001f8c
 8001f30:	08001f8c 	.word	0x08001f8c
 8001f34:	08001f90 	.word	0x08001f90

08001f38 <memset>:
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4402      	add	r2, r0
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d100      	bne.n	8001f42 <memset+0xa>
 8001f40:	4770      	bx	lr
 8001f42:	f803 1b01 	strb.w	r1, [r3], #1
 8001f46:	e7f9      	b.n	8001f3c <memset+0x4>

08001f48 <_init>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	bf00      	nop
 8001f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	469e      	mov	lr, r3
 8001f52:	4770      	bx	lr

08001f54 <_fini>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	bf00      	nop
 8001f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f5a:	bc08      	pop	{r3}
 8001f5c:	469e      	mov	lr, r3
 8001f5e:	4770      	bx	lr

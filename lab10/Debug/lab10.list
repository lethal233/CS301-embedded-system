
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008518  08008518  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008518  08008518  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008518  08008518  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001020  20000010  08008530  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001030  08008530  00021030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102a2  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002608  00000000  00000000  000302db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  000328e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  000337e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ac61  00000000  00000000  000345c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc57  00000000  00000000  0004f221  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d9f1  00000000  00000000  0005be78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9869  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb4  00000000  00000000  000f98e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	0800847c 	.word	0x0800847c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	0800847c 	.word	0x0800847c

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <vApplicationGetIdleTaskMemory+0x28>)
 8000a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	2000002c 	.word	0x2000002c
 8000a38:	20000080 	.word	0x20000080

08000a3c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <LCD_WR_REG+0x40>)
 8000a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <LCD_WR_REG+0x40>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <LCD_WR_REG+0x44>)
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <LCD_WR_REG+0x40>)
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <LCD_WR_REG+0x40>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <LCD_WR_REG+0x40>)
 8000a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6e:	611a      	str	r2, [r3, #16]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40011000 	.word	0x40011000
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <LCD_WR_DATAX+0x40>)
 8000a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a94:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <LCD_WR_DATAX+0x40>)
 8000a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <LCD_WR_DATAX+0x44>)
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <LCD_WR_DATAX+0x40>)
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <LCD_WR_DATAX+0x40>)
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <LCD_WR_DATAX+0x40>)
 8000ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab6:	611a      	str	r2, [r3, #16]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <LCD_RD_DATA+0x7c>)
 8000ad4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ad8:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <LCD_RD_DATA+0x7c>)
 8000adc:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ae0:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <LCD_RD_DATA+0x7c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <LCD_RD_DATA+0x80>)
 8000aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aee:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <LCD_RD_DATA+0x80>)
 8000af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af6:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <LCD_RD_DATA+0x80>)
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <LCD_RD_DATA+0x84>)
 8000b00:	889b      	ldrh	r3, [r3, #4]
 8000b02:	f648 1289 	movw	r2, #35209	; 0x8989
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d102      	bne.n	8000b10 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f005 f9a2 	bl	8005e54 <HAL_Delay>
	t = DATAIN
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <LCD_RD_DATA+0x7c>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <LCD_RD_DATA+0x80>)
 8000b18:	2240      	movs	r2, #64	; 0x40
 8000b1a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <LCD_RD_DATA+0x80>)
 8000b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b22:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <LCD_RD_DATA+0x7c>)
 8000b26:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000b2a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <LCD_RD_DATA+0x7c>)
 8000b2e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000b32:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <LCD_RD_DATA+0x7c>)
 8000b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b3a:	60da      	str	r2, [r3, #12]
	return t;
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	20000fcc 	.word	0x20000fcc

08000b54 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	4613      	mov	r3, r2
 8000b62:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff68 	bl	8000a3c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <LCD_WriteReg+0x4c>)
 8000b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <LCD_WriteReg+0x4c>)
 8000b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <LCD_WriteReg+0x50>)
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	60d3      	str	r3, [r2, #12]
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <LCD_WriteReg+0x4c>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	615a      	str	r2, [r3, #20]
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <LCD_WriteReg+0x4c>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <LCD_WriteReg+0x4c>)
 8000b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b94:	611a      	str	r2, [r3, #16]
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40010c00 	.word	0x40010c00

08000ba8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff41 	bl	8000a3c <LCD_WR_REG>
	return LCD_RD_DATA();
 8000bba:	f7ff ff87 	bl	8000acc <LCD_RD_DATA>
 8000bbe:	4603      	mov	r3, r0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <LCD_WriteRAM_Prepare+0x14>)
 8000bce:	891b      	ldrh	r3, [r3, #8]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff33 	bl	8000a3c <LCD_WR_REG>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000fcc 	.word	0x20000fcc

08000be0 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	460a      	mov	r2, r1
 8000bea:	80fb      	strh	r3, [r7, #6]
 8000bec:	4613      	mov	r3, r2
 8000bee:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000bf0:	4b73      	ldr	r3, [pc, #460]	; (8000dc0 <LCD_SetCursor+0x1e0>)
 8000bf2:	889b      	ldrh	r3, [r3, #4]
 8000bf4:	f249 3241 	movw	r2, #37697	; 0x9341
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d005      	beq.n	8000c08 <LCD_SetCursor+0x28>
 8000bfc:	4b70      	ldr	r3, [pc, #448]	; (8000dc0 <LCD_SetCursor+0x1e0>)
 8000bfe:	889b      	ldrh	r3, [r3, #4]
 8000c00:	f245 3210 	movw	r2, #21264	; 0x5310
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d164      	bne.n	8000cd2 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000c08:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <LCD_SetCursor+0x1e0>)
 8000c0a:	895b      	ldrh	r3, [r3, #10]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff15 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000c12:	4b6c      	ldr	r3, [pc, #432]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	4b6a      	ldr	r3, [pc, #424]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c20:	615a      	str	r2, [r3, #20]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	4b67      	ldr	r3, [pc, #412]	; (8000dc8 <LCD_SetCursor+0x1e8>)
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	4b65      	ldr	r3, [pc, #404]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	4b64      	ldr	r3, [pc, #400]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	4b62      	ldr	r3, [pc, #392]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c40:	4b60      	ldr	r3, [pc, #384]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	4b5e      	ldr	r3, [pc, #376]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	4a5d      	ldr	r2, [pc, #372]	; (8000dc8 <LCD_SetCursor+0x1e8>)
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	60d3      	str	r3, [r2, #12]
 8000c58:	4b5a      	ldr	r3, [pc, #360]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	4b59      	ldr	r3, [pc, #356]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	4b57      	ldr	r3, [pc, #348]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000c6c:	4b54      	ldr	r3, [pc, #336]	; (8000dc0 <LCD_SetCursor+0x1e0>)
 8000c6e:	899b      	ldrh	r3, [r3, #12]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fee3 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000c76:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b4e      	ldr	r3, [pc, #312]	; (8000dc8 <LCD_SetCursor+0x1e8>)
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	4b4c      	ldr	r3, [pc, #304]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	4b4b      	ldr	r3, [pc, #300]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ca4:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb2:	615a      	str	r2, [r3, #20]
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	4a44      	ldr	r2, [pc, #272]	; (8000dc8 <LCD_SetCursor+0x1e8>)
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	60d3      	str	r3, [r2, #12]
 8000cbc:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cce:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000cd0:	e248      	b.n	8001164 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <LCD_SetCursor+0x1e0>)
 8000cd4:	889b      	ldrh	r3, [r3, #4]
 8000cd6:	f646 0204 	movw	r2, #26628	; 0x6804
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d176      	bne.n	8000dcc <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <LCD_SetCursor+0x1e0>)
 8000ce0:	799b      	ldrb	r3, [r3, #6]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d106      	bne.n	8000cf4 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <LCD_SetCursor+0x1e0>)
 8000ce8:	881a      	ldrh	r2, [r3, #0]
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <LCD_SetCursor+0x1e0>)
 8000cf6:	895b      	ldrh	r3, [r3, #10]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe9f 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <LCD_SetCursor+0x1e8>)
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <LCD_SetCursor+0x1e8>)
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	60d3      	str	r3, [r2, #12]
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d56:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <LCD_SetCursor+0x1e0>)
 8000d5a:	899b      	ldrh	r3, [r3, #12]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fe6d 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d68:	611a      	str	r2, [r3, #16]
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <LCD_SetCursor+0x1e8>)
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	88bb      	ldrh	r3, [r7, #4]
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <LCD_SetCursor+0x1e8>)
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	60d3      	str	r3, [r2, #12]
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <LCD_SetCursor+0x1e4>)
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	611a      	str	r2, [r3, #16]
}
 8000dbc:	e1d2      	b.n	8001164 <LCD_SetCursor+0x584>
 8000dbe:	bf00      	nop
 8000dc0:	20000fcc 	.word	0x20000fcc
 8000dc4:	40011000 	.word	0x40011000
 8000dc8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000dcc:	4b99      	ldr	r3, [pc, #612]	; (8001034 <LCD_SetCursor+0x454>)
 8000dce:	889b      	ldrh	r3, [r3, #4]
 8000dd0:	f641 1263 	movw	r2, #6499	; 0x1963
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	f040 8133 	bne.w	8001040 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000dda:	4b96      	ldr	r3, [pc, #600]	; (8001034 <LCD_SetCursor+0x454>)
 8000ddc:	799b      	ldrb	r3, [r3, #6]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d163      	bne.n	8000eaa <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000de2:	4b94      	ldr	r3, [pc, #592]	; (8001034 <LCD_SetCursor+0x454>)
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	3b01      	subs	r3, #1
 8000dee:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000df0:	4b90      	ldr	r3, [pc, #576]	; (8001034 <LCD_SetCursor+0x454>)
 8000df2:	895b      	ldrh	r3, [r3, #10]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe21 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000dfa:	4b8f      	ldr	r3, [pc, #572]	; (8001038 <LCD_SetCursor+0x458>)
 8000dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	4b8d      	ldr	r3, [pc, #564]	; (8001038 <LCD_SetCursor+0x458>)
 8000e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	4b8c      	ldr	r3, [pc, #560]	; (800103c <LCD_SetCursor+0x45c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	4b89      	ldr	r3, [pc, #548]	; (8001038 <LCD_SetCursor+0x458>)
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	4b88      	ldr	r3, [pc, #544]	; (8001038 <LCD_SetCursor+0x458>)
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	4b86      	ldr	r3, [pc, #536]	; (8001038 <LCD_SetCursor+0x458>)
 8000e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e22:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000e24:	4b84      	ldr	r3, [pc, #528]	; (8001038 <LCD_SetCursor+0x458>)
 8000e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	4b82      	ldr	r3, [pc, #520]	; (8001038 <LCD_SetCursor+0x458>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	4b81      	ldr	r3, [pc, #516]	; (800103c <LCD_SetCursor+0x45c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	4b7f      	ldr	r3, [pc, #508]	; (8001038 <LCD_SetCursor+0x458>)
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	4b7d      	ldr	r3, [pc, #500]	; (8001038 <LCD_SetCursor+0x458>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b7c      	ldr	r3, [pc, #496]	; (8001038 <LCD_SetCursor+0x458>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000e4e:	4b7a      	ldr	r3, [pc, #488]	; (8001038 <LCD_SetCursor+0x458>)
 8000e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	4b78      	ldr	r3, [pc, #480]	; (8001038 <LCD_SetCursor+0x458>)
 8000e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	4b75      	ldr	r3, [pc, #468]	; (800103c <LCD_SetCursor+0x45c>)
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	4b73      	ldr	r3, [pc, #460]	; (8001038 <LCD_SetCursor+0x458>)
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	4b72      	ldr	r3, [pc, #456]	; (8001038 <LCD_SetCursor+0x458>)
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	4b70      	ldr	r3, [pc, #448]	; (8001038 <LCD_SetCursor+0x458>)
 8000e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e7c:	4b6e      	ldr	r3, [pc, #440]	; (8001038 <LCD_SetCursor+0x458>)
 8000e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	4b6c      	ldr	r3, [pc, #432]	; (8001038 <LCD_SetCursor+0x458>)
 8000e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	4a6b      	ldr	r2, [pc, #428]	; (800103c <LCD_SetCursor+0x45c>)
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	60d3      	str	r3, [r2, #12]
 8000e94:	4b68      	ldr	r3, [pc, #416]	; (8001038 <LCD_SetCursor+0x458>)
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	615a      	str	r2, [r3, #20]
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <LCD_SetCursor+0x458>)
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	4b65      	ldr	r3, [pc, #404]	; (8001038 <LCD_SetCursor+0x458>)
 8000ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	e061      	b.n	8000f6e <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000eaa:	4b62      	ldr	r3, [pc, #392]	; (8001034 <LCD_SetCursor+0x454>)
 8000eac:	895b      	ldrh	r3, [r3, #10]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fdc4 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000eb4:	4b60      	ldr	r3, [pc, #384]	; (8001038 <LCD_SetCursor+0x458>)
 8000eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	4b5e      	ldr	r3, [pc, #376]	; (8001038 <LCD_SetCursor+0x458>)
 8000ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec2:	615a      	str	r2, [r3, #20]
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	4b5c      	ldr	r3, [pc, #368]	; (800103c <LCD_SetCursor+0x45c>)
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	4b5a      	ldr	r3, [pc, #360]	; (8001038 <LCD_SetCursor+0x458>)
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	4b58      	ldr	r3, [pc, #352]	; (8001038 <LCD_SetCursor+0x458>)
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	4b57      	ldr	r3, [pc, #348]	; (8001038 <LCD_SetCursor+0x458>)
 8000edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000ee2:	4b55      	ldr	r3, [pc, #340]	; (8001038 <LCD_SetCursor+0x458>)
 8000ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	4b53      	ldr	r3, [pc, #332]	; (8001038 <LCD_SetCursor+0x458>)
 8000eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	4a51      	ldr	r2, [pc, #324]	; (800103c <LCD_SetCursor+0x45c>)
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	60d3      	str	r3, [r2, #12]
 8000efa:	4b4f      	ldr	r3, [pc, #316]	; (8001038 <LCD_SetCursor+0x458>)
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <LCD_SetCursor+0x458>)
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <LCD_SetCursor+0x458>)
 8000f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000f0e:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <LCD_SetCursor+0x458>)
 8000f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f14:	611a      	str	r2, [r3, #16]
 8000f16:	4b48      	ldr	r3, [pc, #288]	; (8001038 <LCD_SetCursor+0x458>)
 8000f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1c:	615a      	str	r2, [r3, #20]
 8000f1e:	4b45      	ldr	r3, [pc, #276]	; (8001034 <LCD_SetCursor+0x454>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	121a      	asrs	r2, r3, #8
 8000f26:	4b45      	ldr	r3, [pc, #276]	; (800103c <LCD_SetCursor+0x45c>)
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	4b43      	ldr	r3, [pc, #268]	; (8001038 <LCD_SetCursor+0x458>)
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	4b41      	ldr	r3, [pc, #260]	; (8001038 <LCD_SetCursor+0x458>)
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	4b40      	ldr	r3, [pc, #256]	; (8001038 <LCD_SetCursor+0x458>)
 8000f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <LCD_SetCursor+0x458>)
 8000f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f44:	611a      	str	r2, [r3, #16]
 8000f46:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <LCD_SetCursor+0x458>)
 8000f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	4b39      	ldr	r3, [pc, #228]	; (8001034 <LCD_SetCursor+0x454>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	4a39      	ldr	r2, [pc, #228]	; (800103c <LCD_SetCursor+0x45c>)
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	60d3      	str	r3, [r2, #12]
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <LCD_SetCursor+0x458>)
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	615a      	str	r2, [r3, #20]
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <LCD_SetCursor+0x458>)
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <LCD_SetCursor+0x458>)
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <LCD_SetCursor+0x454>)
 8000f70:	899b      	ldrh	r3, [r3, #12]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fd62 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <LCD_SetCursor+0x458>)
 8000f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <LCD_SetCursor+0x458>)
 8000f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	; (800103c <LCD_SetCursor+0x45c>)
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <LCD_SetCursor+0x458>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <LCD_SetCursor+0x458>)
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <LCD_SetCursor+0x458>)
 8000fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <LCD_SetCursor+0x458>)
 8000fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <LCD_SetCursor+0x458>)
 8000fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	4a20      	ldr	r2, [pc, #128]	; (800103c <LCD_SetCursor+0x45c>)
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	60d3      	str	r3, [r2, #12]
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <LCD_SetCursor+0x458>)
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	615a      	str	r2, [r3, #20]
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <LCD_SetCursor+0x458>)
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <LCD_SetCursor+0x458>)
 8000fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <LCD_SetCursor+0x458>)
 8000fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <LCD_SetCursor+0x458>)
 8000fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <LCD_SetCursor+0x454>)
 8000fe4:	885b      	ldrh	r3, [r3, #2]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	121a      	asrs	r2, r3, #8
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <LCD_SetCursor+0x45c>)
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <LCD_SetCursor+0x458>)
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	615a      	str	r2, [r3, #20]
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <LCD_SetCursor+0x458>)
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <LCD_SetCursor+0x458>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001000:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <LCD_SetCursor+0x458>)
 8001004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <LCD_SetCursor+0x458>)
 800100c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <LCD_SetCursor+0x454>)
 8001014:	885b      	ldrh	r3, [r3, #2]
 8001016:	3b01      	subs	r3, #1
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <LCD_SetCursor+0x45c>)
 800101a:	b2db      	uxtb	r3, r3
 800101c:	60d3      	str	r3, [r2, #12]
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <LCD_SetCursor+0x458>)
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <LCD_SetCursor+0x458>)
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	4b03      	ldr	r3, [pc, #12]	; (8001038 <LCD_SetCursor+0x458>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	611a      	str	r2, [r3, #16]
}
 8001032:	e097      	b.n	8001164 <LCD_SetCursor+0x584>
 8001034:	20000fcc 	.word	0x20000fcc
 8001038:	40011000 	.word	0x40011000
 800103c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001040:	4b4a      	ldr	r3, [pc, #296]	; (800116c <LCD_SetCursor+0x58c>)
 8001042:	889b      	ldrh	r3, [r3, #4]
 8001044:	f245 5210 	movw	r2, #21776	; 0x5510
 8001048:	4293      	cmp	r3, r2
 800104a:	d172      	bne.n	8001132 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 800104c:	4b47      	ldr	r3, [pc, #284]	; (800116c <LCD_SetCursor+0x58c>)
 800104e:	895b      	ldrh	r3, [r3, #10]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fcf3 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <LCD_SetCursor+0x590>)
 8001058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <LCD_SetCursor+0x590>)
 8001060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001064:	615a      	str	r2, [r3, #20]
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b41      	ldr	r3, [pc, #260]	; (8001174 <LCD_SetCursor+0x594>)
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <LCD_SetCursor+0x590>)
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <LCD_SetCursor+0x590>)
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	4b3c      	ldr	r3, [pc, #240]	; (8001170 <LCD_SetCursor+0x590>)
 800107e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001082:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <LCD_SetCursor+0x58c>)
 8001086:	895b      	ldrh	r3, [r3, #10]
 8001088:	3301      	adds	r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fcd5 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <LCD_SetCursor+0x590>)
 8001094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	4b35      	ldr	r3, [pc, #212]	; (8001170 <LCD_SetCursor+0x590>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	4a33      	ldr	r2, [pc, #204]	; (8001174 <LCD_SetCursor+0x594>)
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	60d3      	str	r3, [r2, #12]
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <LCD_SetCursor+0x590>)
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <LCD_SetCursor+0x590>)
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <LCD_SetCursor+0x590>)
 80010b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010bc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <LCD_SetCursor+0x58c>)
 80010c0:	899b      	ldrh	r3, [r3, #12]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fcba 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <LCD_SetCursor+0x590>)
 80010ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <LCD_SetCursor+0x590>)
 80010d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <LCD_SetCursor+0x594>)
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <LCD_SetCursor+0x590>)
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	615a      	str	r2, [r3, #20]
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <LCD_SetCursor+0x590>)
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	611a      	str	r2, [r3, #16]
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <LCD_SetCursor+0x590>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <LCD_SetCursor+0x58c>)
 80010f8:	899b      	ldrh	r3, [r3, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fc9c 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <LCD_SetCursor+0x590>)
 8001106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <LCD_SetCursor+0x590>)
 800110e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001112:	615a      	str	r2, [r3, #20]
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <LCD_SetCursor+0x594>)
 8001118:	b2db      	uxtb	r3, r3
 800111a:	60d3      	str	r3, [r2, #12]
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <LCD_SetCursor+0x590>)
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <LCD_SetCursor+0x590>)
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <LCD_SetCursor+0x590>)
 800112a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112e:	611a      	str	r2, [r3, #16]
}
 8001130:	e018      	b.n	8001164 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <LCD_SetCursor+0x58c>)
 8001134:	799b      	ldrb	r3, [r3, #6]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d106      	bne.n	8001148 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <LCD_SetCursor+0x58c>)
 800113c:	881a      	ldrh	r2, [r3, #0]
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <LCD_SetCursor+0x58c>)
 800114a:	895b      	ldrh	r3, [r3, #10]
 800114c:	88fa      	ldrh	r2, [r7, #6]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fcff 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <LCD_SetCursor+0x58c>)
 8001158:	899b      	ldrh	r3, [r3, #12]
 800115a:	88ba      	ldrh	r2, [r7, #4]
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fcf8 	bl	8000b54 <LCD_WriteReg>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000fcc 	.word	0x20000fcc
 8001170:	40011000 	.word	0x40011000
 8001174:	40010c00 	.word	0x40010c00

08001178 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800118a:	4b78      	ldr	r3, [pc, #480]	; (800136c <LCD_Scan_Dir+0x1f4>)
 800118c:	799b      	ldrb	r3, [r3, #6]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d10b      	bne.n	80011aa <LCD_Scan_Dir+0x32>
 8001192:	4b76      	ldr	r3, [pc, #472]	; (800136c <LCD_Scan_Dir+0x1f4>)
 8001194:	889b      	ldrh	r3, [r3, #4]
 8001196:	f646 0204 	movw	r2, #26628	; 0x6804
 800119a:	4293      	cmp	r3, r2
 800119c:	d005      	beq.n	80011aa <LCD_Scan_Dir+0x32>
 800119e:	4b73      	ldr	r3, [pc, #460]	; (800136c <LCD_Scan_Dir+0x1f4>)
 80011a0:	889b      	ldrh	r3, [r3, #4]
 80011a2:	f641 1263 	movw	r2, #6499	; 0x1963
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d109      	bne.n	80011be <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80011aa:	4b70      	ldr	r3, [pc, #448]	; (800136c <LCD_Scan_Dir+0x1f4>)
 80011ac:	799b      	ldrb	r3, [r3, #6]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d134      	bne.n	800121c <LCD_Scan_Dir+0xa4>
 80011b2:	4b6e      	ldr	r3, [pc, #440]	; (800136c <LCD_Scan_Dir+0x1f4>)
 80011b4:	889b      	ldrh	r3, [r3, #4]
 80011b6:	f641 1263 	movw	r2, #6499	; 0x1963
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12e      	bne.n	800121c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	d82b      	bhi.n	800121c <LCD_Scan_Dir+0xa4>
 80011c4:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <LCD_Scan_Dir+0x54>)
 80011c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ca:	bf00      	nop
 80011cc:	080011ed 	.word	0x080011ed
 80011d0:	080011f3 	.word	0x080011f3
 80011d4:	080011f9 	.word	0x080011f9
 80011d8:	080011ff 	.word	0x080011ff
 80011dc:	08001205 	.word	0x08001205
 80011e0:	0800120b 	.word	0x0800120b
 80011e4:	08001211 	.word	0x08001211
 80011e8:	08001217 	.word	0x08001217
		{
		case 0:
			dir = 6;
 80011ec:	2306      	movs	r3, #6
 80011ee:	71fb      	strb	r3, [r7, #7]
			break;
 80011f0:	e014      	b.n	800121c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80011f2:	2307      	movs	r3, #7
 80011f4:	71fb      	strb	r3, [r7, #7]
			break;
 80011f6:	e011      	b.n	800121c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80011f8:	2304      	movs	r3, #4
 80011fa:	71fb      	strb	r3, [r7, #7]
			break;
 80011fc:	e00e      	b.n	800121c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80011fe:	2305      	movs	r3, #5
 8001200:	71fb      	strb	r3, [r7, #7]
			break;
 8001202:	e00b      	b.n	800121c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001204:	2301      	movs	r3, #1
 8001206:	71fb      	strb	r3, [r7, #7]
			break;
 8001208:	e008      	b.n	800121c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]
			break;
 800120e:	e005      	b.n	800121c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001210:	2303      	movs	r3, #3
 8001212:	71fb      	strb	r3, [r7, #7]
			break;
 8001214:	e002      	b.n	800121c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	71fb      	strb	r3, [r7, #7]
			break;
 800121a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800121c:	4b53      	ldr	r3, [pc, #332]	; (800136c <LCD_Scan_Dir+0x1f4>)
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	f249 3241 	movw	r2, #37697	; 0x9341
 8001224:	4293      	cmp	r3, r2
 8001226:	d018      	beq.n	800125a <LCD_Scan_Dir+0xe2>
 8001228:	4b50      	ldr	r3, [pc, #320]	; (800136c <LCD_Scan_Dir+0x1f4>)
 800122a:	889b      	ldrh	r3, [r3, #4]
 800122c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001230:	4293      	cmp	r3, r2
 8001232:	d012      	beq.n	800125a <LCD_Scan_Dir+0xe2>
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <LCD_Scan_Dir+0x1f4>)
 8001236:	889b      	ldrh	r3, [r3, #4]
 8001238:	f245 3210 	movw	r2, #21264	; 0x5310
 800123c:	4293      	cmp	r3, r2
 800123e:	d00c      	beq.n	800125a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001240:	4b4a      	ldr	r3, [pc, #296]	; (800136c <LCD_Scan_Dir+0x1f4>)
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	f245 5210 	movw	r2, #21776	; 0x5510
 8001248:	4293      	cmp	r3, r2
 800124a:	d006      	beq.n	800125a <LCD_Scan_Dir+0xe2>
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <LCD_Scan_Dir+0x1f4>)
 800124e:	889b      	ldrh	r3, [r3, #4]
 8001250:	f641 1263 	movw	r2, #6499	; 0x1963
 8001254:	4293      	cmp	r3, r2
 8001256:	f040 8250 	bne.w	80016fa <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b07      	cmp	r3, #7
 800125e:	d836      	bhi.n	80012ce <LCD_Scan_Dir+0x156>
 8001260:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <LCD_Scan_Dir+0xf0>)
 8001262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001266:	bf00      	nop
 8001268:	080012cf 	.word	0x080012cf
 800126c:	08001289 	.word	0x08001289
 8001270:	08001293 	.word	0x08001293
 8001274:	0800129d 	.word	0x0800129d
 8001278:	080012a7 	.word	0x080012a7
 800127c:	080012b1 	.word	0x080012b1
 8001280:	080012bb 	.word	0x080012bb
 8001284:	080012c5 	.word	0x080012c5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128e:	81fb      	strh	r3, [r7, #14]
			break;
 8001290:	e01d      	b.n	80012ce <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001298:	81fb      	strh	r3, [r7, #14]
			break;
 800129a:	e018      	b.n	80012ce <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 800129c:	89fb      	ldrh	r3, [r7, #14]
 800129e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012a2:	81fb      	strh	r3, [r7, #14]
			break;
 80012a4:	e013      	b.n	80012ce <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	81fb      	strh	r3, [r7, #14]
			break;
 80012ae:	e00e      	b.n	80012ce <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80012b0:	89fb      	ldrh	r3, [r7, #14]
 80012b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012b6:	81fb      	strh	r3, [r7, #14]
			break;
 80012b8:	e009      	b.n	80012ce <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80012c0:	81fb      	strh	r3, [r7, #14]
			break;
 80012c2:	e004      	b.n	80012ce <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80012ca:	81fb      	strh	r3, [r7, #14]
			break;
 80012cc:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <LCD_Scan_Dir+0x1f4>)
 80012d0:	889b      	ldrh	r3, [r3, #4]
 80012d2:	f245 5210 	movw	r2, #21776	; 0x5510
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d103      	bne.n	80012e2 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80012da:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80012de:	81bb      	strh	r3, [r7, #12]
 80012e0:	e001      	b.n	80012e6 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80012e2:	2336      	movs	r3, #54	; 0x36
 80012e4:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <LCD_Scan_Dir+0x1f4>)
 80012e8:	889b      	ldrh	r3, [r3, #4]
 80012ea:	f245 3210 	movw	r2, #21264	; 0x5310
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00f      	beq.n	8001312 <LCD_Scan_Dir+0x19a>
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <LCD_Scan_Dir+0x1f4>)
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	f245 5210 	movw	r2, #21776	; 0x5510
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d009      	beq.n	8001312 <LCD_Scan_Dir+0x19a>
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <LCD_Scan_Dir+0x1f4>)
 8001300:	889b      	ldrh	r3, [r3, #4]
 8001302:	f641 1263 	movw	r2, #6499	; 0x1963
 8001306:	4293      	cmp	r3, r2
 8001308:	d003      	beq.n	8001312 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <LCD_Scan_Dir+0x1f4>)
 8001314:	889b      	ldrh	r3, [r3, #4]
 8001316:	f646 0204 	movw	r2, #26628	; 0x6804
 800131a:	4293      	cmp	r3, r2
 800131c:	d103      	bne.n	8001326 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001326:	89fa      	ldrh	r2, [r7, #14]
 8001328:	89bb      	ldrh	r3, [r7, #12]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fc11 	bl	8000b54 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <LCD_Scan_Dir+0x1f4>)
 8001334:	889b      	ldrh	r3, [r3, #4]
 8001336:	f641 1263 	movw	r2, #6499	; 0x1963
 800133a:	4293      	cmp	r3, r2
 800133c:	d028      	beq.n	8001390 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <LCD_Scan_Dir+0x1f4>)
 800134a:	881a      	ldrh	r2, [r3, #0]
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <LCD_Scan_Dir+0x1f4>)
 800134e:	885b      	ldrh	r3, [r3, #2]
 8001350:	429a      	cmp	r2, r3
 8001352:	d21d      	bcs.n	8001390 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <LCD_Scan_Dir+0x1f4>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <LCD_Scan_Dir+0x1f4>)
 800135c:	885a      	ldrh	r2, [r3, #2]
 800135e:	4b03      	ldr	r3, [pc, #12]	; (800136c <LCD_Scan_Dir+0x1f4>)
 8001360:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001362:	4a02      	ldr	r2, [pc, #8]	; (800136c <LCD_Scan_Dir+0x1f4>)
 8001364:	897b      	ldrh	r3, [r7, #10]
 8001366:	8053      	strh	r3, [r2, #2]
 8001368:	e012      	b.n	8001390 <LCD_Scan_Dir+0x218>
 800136a:	bf00      	nop
 800136c:	20000fcc 	.word	0x20000fcc
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001370:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001372:	881a      	ldrh	r2, [r3, #0]
 8001374:	4b7e      	ldr	r3, [pc, #504]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001376:	885b      	ldrh	r3, [r3, #2]
 8001378:	429a      	cmp	r2, r3
 800137a:	d909      	bls.n	8001390 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800137c:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001382:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001384:	885a      	ldrh	r2, [r3, #2]
 8001386:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001388:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800138a:	4a79      	ldr	r2, [pc, #484]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001390:	4b77      	ldr	r3, [pc, #476]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	f245 5210 	movw	r2, #21776	; 0x5510
 8001398:	4293      	cmp	r3, r2
 800139a:	f040 80ef 	bne.w	800157c <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 800139e:	4b74      	ldr	r3, [pc, #464]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 80013a0:	895b      	ldrh	r3, [r3, #10]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fb4a 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013a8:	4b72      	ldr	r3, [pc, #456]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80013aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	4b70      	ldr	r3, [pc, #448]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80013b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <LCD_Scan_Dir+0x400>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	4b6d      	ldr	r3, [pc, #436]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	4b6b      	ldr	r3, [pc, #428]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 80013d4:	895b      	ldrh	r3, [r3, #10]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fb2e 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013e0:	4b64      	ldr	r3, [pc, #400]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80013e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	4b62      	ldr	r3, [pc, #392]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80013ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <LCD_Scan_Dir+0x400>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	4b5f      	ldr	r3, [pc, #380]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	4b5d      	ldr	r3, [pc, #372]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	4b5c      	ldr	r3, [pc, #368]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800140a:	4b59      	ldr	r3, [pc, #356]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 800140c:	895b      	ldrh	r3, [r3, #10]
 800140e:	3302      	adds	r3, #2
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb12 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001418:	4b56      	ldr	r3, [pc, #344]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 800141a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	4b54      	ldr	r3, [pc, #336]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	4b51      	ldr	r3, [pc, #324]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	121a      	asrs	r2, r3, #8
 8001430:	4b51      	ldr	r3, [pc, #324]	; (8001578 <LCD_Scan_Dir+0x400>)
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	4b4f      	ldr	r3, [pc, #316]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	4b4e      	ldr	r3, [pc, #312]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001446:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001448:	4b49      	ldr	r3, [pc, #292]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 800144a:	895b      	ldrh	r3, [r3, #10]
 800144c:	3303      	adds	r3, #3
 800144e:	b29b      	uxth	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff faf3 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001456:	4b47      	ldr	r3, [pc, #284]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	4b45      	ldr	r3, [pc, #276]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	615a      	str	r2, [r3, #20]
 8001466:	4b42      	ldr	r3, [pc, #264]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	3b01      	subs	r3, #1
 800146c:	4a42      	ldr	r2, [pc, #264]	; (8001578 <LCD_Scan_Dir+0x400>)
 800146e:	b2db      	uxtb	r3, r3
 8001470:	60d3      	str	r3, [r2, #12]
 8001472:	4b40      	ldr	r3, [pc, #256]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	611a      	str	r2, [r3, #16]
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001484:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001488:	899b      	ldrh	r3, [r3, #12]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fad6 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 800149a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <LCD_Scan_Dir+0x400>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80014b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 80014bc:	899b      	ldrh	r3, [r3, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff faba 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80014ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80014d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d6:	615a      	str	r2, [r3, #20]
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <LCD_Scan_Dir+0x400>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 80014ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 80014f4:	899b      	ldrh	r3, [r3, #12]
 80014f6:	3302      	adds	r3, #2
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fa9e 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 800150a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001512:	885b      	ldrh	r3, [r3, #2]
 8001514:	3b01      	subs	r3, #1
 8001516:	121a      	asrs	r2, r3, #8
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <LCD_Scan_Dir+0x400>)
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 800152a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001532:	899b      	ldrh	r3, [r3, #12]
 8001534:	3303      	adds	r3, #3
 8001536:	b29b      	uxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fa7f 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <LCD_Scan_Dir+0x3f8>)
 8001550:	885b      	ldrh	r3, [r3, #2]
 8001552:	3b01      	subs	r3, #1
 8001554:	4a08      	ldr	r2, [pc, #32]	; (8001578 <LCD_Scan_Dir+0x400>)
 8001556:	b2db      	uxtb	r3, r3
 8001558:	60d3      	str	r3, [r2, #12]
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <LCD_Scan_Dir+0x3fc>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800156e:	e10a      	b.n	8001786 <LCD_Scan_Dir+0x60e>
 8001570:	20000fcc 	.word	0x20000fcc
 8001574:	40011000 	.word	0x40011000
 8001578:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 800157c:	4b84      	ldr	r3, [pc, #528]	; (8001790 <LCD_Scan_Dir+0x618>)
 800157e:	895b      	ldrh	r3, [r3, #10]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fa5b 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001586:	4b83      	ldr	r3, [pc, #524]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	4b81      	ldr	r3, [pc, #516]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	4b80      	ldr	r3, [pc, #512]	; (8001798 <LCD_Scan_Dir+0x620>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	4b7d      	ldr	r3, [pc, #500]	; (8001794 <LCD_Scan_Dir+0x61c>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	615a      	str	r2, [r3, #20]
 80015a2:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	4b7a      	ldr	r3, [pc, #488]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ae:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80015b0:	4b78      	ldr	r3, [pc, #480]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	4b76      	ldr	r3, [pc, #472]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	615a      	str	r2, [r3, #20]
 80015c0:	4b75      	ldr	r3, [pc, #468]	; (8001798 <LCD_Scan_Dir+0x620>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	4b73      	ldr	r3, [pc, #460]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	615a      	str	r2, [r3, #20]
 80015cc:	4b71      	ldr	r3, [pc, #452]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	4b70      	ldr	r3, [pc, #448]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80015da:	4b6e      	ldr	r3, [pc, #440]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	4b6c      	ldr	r3, [pc, #432]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	4b69      	ldr	r3, [pc, #420]	; (8001790 <LCD_Scan_Dir+0x618>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	121a      	asrs	r2, r3, #8
 80015f2:	4b69      	ldr	r3, [pc, #420]	; (8001798 <LCD_Scan_Dir+0x620>)
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	4b67      	ldr	r3, [pc, #412]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	4b65      	ldr	r3, [pc, #404]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	4b64      	ldr	r3, [pc, #400]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001608:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800160a:	4b62      	ldr	r3, [pc, #392]	; (8001794 <LCD_Scan_Dir+0x61c>)
 800160c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	4b60      	ldr	r3, [pc, #384]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001618:	615a      	str	r2, [r3, #20]
 800161a:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <LCD_Scan_Dir+0x618>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	3b01      	subs	r3, #1
 8001620:	4a5d      	ldr	r2, [pc, #372]	; (8001798 <LCD_Scan_Dir+0x620>)
 8001622:	b2db      	uxtb	r3, r3
 8001624:	60d3      	str	r3, [r2, #12]
 8001626:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <LCD_Scan_Dir+0x61c>)
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	4b58      	ldr	r3, [pc, #352]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001638:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800163a:	4b55      	ldr	r3, [pc, #340]	; (8001790 <LCD_Scan_Dir+0x618>)
 800163c:	899b      	ldrh	r3, [r3, #12]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f9fc 	bl	8000a3c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	4b51      	ldr	r3, [pc, #324]	; (8001794 <LCD_Scan_Dir+0x61c>)
 800164e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001652:	615a      	str	r2, [r3, #20]
 8001654:	4b50      	ldr	r3, [pc, #320]	; (8001798 <LCD_Scan_Dir+0x620>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <LCD_Scan_Dir+0x61c>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800166e:	4b49      	ldr	r3, [pc, #292]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167c:	615a      	str	r2, [r3, #20]
 800167e:	4b46      	ldr	r3, [pc, #280]	; (8001798 <LCD_Scan_Dir+0x620>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	4b42      	ldr	r3, [pc, #264]	; (8001794 <LCD_Scan_Dir+0x61c>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <LCD_Scan_Dir+0x61c>)
 8001692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001696:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001698:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <LCD_Scan_Dir+0x61c>)
 800169a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169e:	611a      	str	r2, [r3, #16]
 80016a0:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80016a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a6:	615a      	str	r2, [r3, #20]
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <LCD_Scan_Dir+0x618>)
 80016aa:	885b      	ldrh	r3, [r3, #2]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	121a      	asrs	r2, r3, #8
 80016b0:	4b39      	ldr	r3, [pc, #228]	; (8001798 <LCD_Scan_Dir+0x620>)
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	4b37      	ldr	r3, [pc, #220]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	615a      	str	r2, [r3, #20]
 80016ba:	4b36      	ldr	r3, [pc, #216]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	4b34      	ldr	r3, [pc, #208]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80016c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80016ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80016d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d6:	615a      	str	r2, [r3, #20]
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <LCD_Scan_Dir+0x618>)
 80016da:	885b      	ldrh	r3, [r3, #2]
 80016dc:	3b01      	subs	r3, #1
 80016de:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <LCD_Scan_Dir+0x620>)
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	60d3      	str	r3, [r2, #12]
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <LCD_Scan_Dir+0x61c>)
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80016f8:	e045      	b.n	8001786 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b07      	cmp	r3, #7
 80016fe:	d836      	bhi.n	800176e <LCD_Scan_Dir+0x5f6>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <LCD_Scan_Dir+0x590>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	08001729 	.word	0x08001729
 800170c:	08001733 	.word	0x08001733
 8001710:	0800173d 	.word	0x0800173d
 8001714:	0800176f 	.word	0x0800176f
 8001718:	08001747 	.word	0x08001747
 800171c:	08001751 	.word	0x08001751
 8001720:	0800175b 	.word	0x0800175b
 8001724:	08001765 	.word	0x08001765
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800172e:	81fb      	strh	r3, [r7, #14]
			break;
 8001730:	e01d      	b.n	800176e <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	81fb      	strh	r3, [r7, #14]
			break;
 800173a:	e018      	b.n	800176e <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	f043 0320 	orr.w	r3, r3, #32
 8001742:	81fb      	strh	r3, [r7, #14]
			break;
 8001744:	e013      	b.n	800176e <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001746:	89fb      	ldrh	r3, [r7, #14]
 8001748:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800174c:	81fb      	strh	r3, [r7, #14]
			break;
 800174e:	e00e      	b.n	800176e <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001756:	81fb      	strh	r3, [r7, #14]
			break;
 8001758:	e009      	b.n	800176e <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	f043 0318 	orr.w	r3, r3, #24
 8001760:	81fb      	strh	r3, [r7, #14]
			break;
 8001762:	e004      	b.n	800176e <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	81fb      	strh	r3, [r7, #14]
			break;
 800176c:	bf00      	nop
		}
		dirreg = 0X03;
 800176e:	2303      	movs	r3, #3
 8001770:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001778:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800177a:	89fa      	ldrh	r2, [r7, #14]
 800177c:	89bb      	ldrh	r3, [r7, #12]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff f9e7 	bl	8000b54 <LCD_WriteReg>
	}
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000fcc 	.word	0x20000fcc
 8001794:	40011000 	.word	0x40011000
 8001798:	40010c00 	.word	0x40010c00
 800179c:	00000000 	.word	0x00000000

080017a0 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80017aa:	20be      	movs	r0, #190	; 0xbe
 80017ac:	f7ff f946 	bl	8000a3c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80017b0:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80017b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80017ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <LCD_SSD_BackLightSet+0x144>)
 80017c2:	2205      	movs	r2, #5
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80017d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 80017da:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80017dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80017e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe71 	bl	80004d4 <__aeabi_i2d>
 80017f2:	a339      	add	r3, pc, #228	; (adr r3, 80018d8 <LCD_SSD_BackLightSet+0x138>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe fed6 	bl	80005a8 <__aeabi_dmul>
 80017fc:	4603      	mov	r3, r0
 80017fe:	460c      	mov	r4, r1
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	4c37      	ldr	r4, [pc, #220]	; (80018e4 <LCD_SSD_BackLightSet+0x144>)
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f8df 	bl	80009cc <__aeabi_d2uiz>
 800180e:	4603      	mov	r3, r0
 8001810:	60e3      	str	r3, [r4, #12]
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001824:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182c:	611a      	str	r2, [r3, #16]
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001834:	615a      	str	r2, [r3, #20]
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <LCD_SSD_BackLightSet+0x144>)
 8001838:	2201      	movs	r2, #1
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 800184a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184e:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 800185a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <LCD_SSD_BackLightSet+0x144>)
 8001862:	22ff      	movs	r2, #255	; 0xff
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001868:	2280      	movs	r2, #128	; 0x80
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	611a      	str	r2, [r3, #16]
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001878:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 800187c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <LCD_SSD_BackLightSet+0x144>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 800189e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80018a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80018ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <LCD_SSD_BackLightSet+0x144>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <LCD_SSD_BackLightSet+0x140>)
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	611a      	str	r2, [r3, #16]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}
 80018d6:	bf00      	nop
 80018d8:	66666666 	.word	0x66666666
 80018dc:	40046666 	.word	0x40046666
 80018e0:	40011000 	.word	0x40011000
 80018e4:	40010c00 	.word	0x40010c00

080018e8 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d177      	bne.n	80019e8 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 80018f8:	4b80      	ldr	r3, [pc, #512]	; (8001afc <LCD_Display_Dir+0x214>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 80018fe:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <LCD_Display_Dir+0x214>)
 8001900:	22f0      	movs	r2, #240	; 0xf0
 8001902:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001904:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <LCD_Display_Dir+0x214>)
 8001906:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800190a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800190c:	4b7b      	ldr	r3, [pc, #492]	; (8001afc <LCD_Display_Dir+0x214>)
 800190e:	889b      	ldrh	r3, [r3, #4]
 8001910:	f249 3241 	movw	r2, #37697	; 0x9341
 8001914:	4293      	cmp	r3, r2
 8001916:	d00b      	beq.n	8001930 <LCD_Display_Dir+0x48>
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <LCD_Display_Dir+0x214>)
 800191a:	889b      	ldrh	r3, [r3, #4]
 800191c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001920:	4293      	cmp	r3, r2
 8001922:	d005      	beq.n	8001930 <LCD_Display_Dir+0x48>
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <LCD_Display_Dir+0x214>)
 8001926:	889b      	ldrh	r3, [r3, #4]
 8001928:	f245 3210 	movw	r2, #21264	; 0x5310
 800192c:	4293      	cmp	r3, r2
 800192e:	d11e      	bne.n	800196e <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001930:	4b72      	ldr	r3, [pc, #456]	; (8001afc <LCD_Display_Dir+0x214>)
 8001932:	222c      	movs	r2, #44	; 0x2c
 8001934:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001936:	4b71      	ldr	r3, [pc, #452]	; (8001afc <LCD_Display_Dir+0x214>)
 8001938:	222a      	movs	r2, #42	; 0x2a
 800193a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 800193c:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <LCD_Display_Dir+0x214>)
 800193e:	222b      	movs	r2, #43	; 0x2b
 8001940:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001942:	4b6e      	ldr	r3, [pc, #440]	; (8001afc <LCD_Display_Dir+0x214>)
 8001944:	889b      	ldrh	r3, [r3, #4]
 8001946:	f646 0204 	movw	r2, #26628	; 0x6804
 800194a:	4293      	cmp	r3, r2
 800194c:	d006      	beq.n	800195c <LCD_Display_Dir+0x74>
 800194e:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <LCD_Display_Dir+0x214>)
 8001950:	889b      	ldrh	r3, [r3, #4]
 8001952:	f245 3210 	movw	r2, #21264	; 0x5310
 8001956:	4293      	cmp	r3, r2
 8001958:	f040 80c7 	bne.w	8001aea <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 800195c:	4b67      	ldr	r3, [pc, #412]	; (8001afc <LCD_Display_Dir+0x214>)
 800195e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001962:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001964:	4b65      	ldr	r3, [pc, #404]	; (8001afc <LCD_Display_Dir+0x214>)
 8001966:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800196a:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800196c:	e0bd      	b.n	8001aea <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <LCD_Display_Dir+0x214>)
 8001970:	889b      	ldrh	r3, [r3, #4]
 8001972:	f245 5210 	movw	r2, #21776	; 0x5510
 8001976:	4293      	cmp	r3, r2
 8001978:	d114      	bne.n	80019a4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 800197a:	4b60      	ldr	r3, [pc, #384]	; (8001afc <LCD_Display_Dir+0x214>)
 800197c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001980:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001982:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <LCD_Display_Dir+0x214>)
 8001984:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001988:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800198a:	4b5c      	ldr	r3, [pc, #368]	; (8001afc <LCD_Display_Dir+0x214>)
 800198c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001990:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001992:	4b5a      	ldr	r3, [pc, #360]	; (8001afc <LCD_Display_Dir+0x214>)
 8001994:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001998:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 800199a:	4b58      	ldr	r3, [pc, #352]	; (8001afc <LCD_Display_Dir+0x214>)
 800199c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a0:	805a      	strh	r2, [r3, #2]
 80019a2:	e0a3      	b.n	8001aec <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 80019a4:	4b55      	ldr	r3, [pc, #340]	; (8001afc <LCD_Display_Dir+0x214>)
 80019a6:	889b      	ldrh	r3, [r3, #4]
 80019a8:	f641 1263 	movw	r2, #6499	; 0x1963
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d111      	bne.n	80019d4 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80019b0:	4b52      	ldr	r3, [pc, #328]	; (8001afc <LCD_Display_Dir+0x214>)
 80019b2:	222c      	movs	r2, #44	; 0x2c
 80019b4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 80019b6:	4b51      	ldr	r3, [pc, #324]	; (8001afc <LCD_Display_Dir+0x214>)
 80019b8:	222b      	movs	r2, #43	; 0x2b
 80019ba:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 80019bc:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <LCD_Display_Dir+0x214>)
 80019be:	222a      	movs	r2, #42	; 0x2a
 80019c0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 80019c2:	4b4e      	ldr	r3, [pc, #312]	; (8001afc <LCD_Display_Dir+0x214>)
 80019c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019c8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 80019ca:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <LCD_Display_Dir+0x214>)
 80019cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019d0:	805a      	strh	r2, [r3, #2]
 80019d2:	e08b      	b.n	8001aec <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 80019d4:	4b49      	ldr	r3, [pc, #292]	; (8001afc <LCD_Display_Dir+0x214>)
 80019d6:	2222      	movs	r2, #34	; 0x22
 80019d8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 80019da:	4b48      	ldr	r3, [pc, #288]	; (8001afc <LCD_Display_Dir+0x214>)
 80019dc:	2220      	movs	r2, #32
 80019de:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <LCD_Display_Dir+0x214>)
 80019e2:	2221      	movs	r2, #33	; 0x21
 80019e4:	819a      	strh	r2, [r3, #12]
 80019e6:	e081      	b.n	8001aec <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 80019e8:	4b44      	ldr	r3, [pc, #272]	; (8001afc <LCD_Display_Dir+0x214>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <LCD_Display_Dir+0x214>)
 80019f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019f4:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80019f6:	4b41      	ldr	r3, [pc, #260]	; (8001afc <LCD_Display_Dir+0x214>)
 80019f8:	22f0      	movs	r2, #240	; 0xf0
 80019fa:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80019fc:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <LCD_Display_Dir+0x214>)
 80019fe:	889b      	ldrh	r3, [r3, #4]
 8001a00:	f249 3241 	movw	r2, #37697	; 0x9341
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d005      	beq.n	8001a14 <LCD_Display_Dir+0x12c>
 8001a08:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a0a:	889b      	ldrh	r3, [r3, #4]
 8001a0c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d109      	bne.n	8001a28 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a16:	222c      	movs	r2, #44	; 0x2c
 8001a18:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a1c:	222a      	movs	r2, #42	; 0x2a
 8001a1e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a22:	222b      	movs	r2, #43	; 0x2b
 8001a24:	819a      	strh	r2, [r3, #12]
 8001a26:	e04b      	b.n	8001ac0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a2a:	889b      	ldrh	r3, [r3, #4]
 8001a2c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d109      	bne.n	8001a48 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001a34:	4b31      	ldr	r3, [pc, #196]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a36:	222c      	movs	r2, #44	; 0x2c
 8001a38:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a3c:	222b      	movs	r2, #43	; 0x2b
 8001a3e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a42:	222a      	movs	r2, #42	; 0x2a
 8001a44:	819a      	strh	r2, [r3, #12]
 8001a46:	e03b      	b.n	8001ac0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a4a:	889b      	ldrh	r3, [r3, #4]
 8001a4c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d114      	bne.n	8001a7e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a56:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001a5a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a5e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001a62:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a66:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001a6a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a72:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a7a:	805a      	strh	r2, [r3, #2]
 8001a7c:	e020      	b.n	8001ac0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a80:	889b      	ldrh	r3, [r3, #4]
 8001a82:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d111      	bne.n	8001aae <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a8c:	222c      	movs	r2, #44	; 0x2c
 8001a8e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a92:	222a      	movs	r2, #42	; 0x2a
 8001a94:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a98:	222b      	movs	r2, #43	; 0x2b
 8001a9a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <LCD_Display_Dir+0x214>)
 8001a9e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001aa2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <LCD_Display_Dir+0x214>)
 8001aa6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001aaa:	805a      	strh	r2, [r3, #2]
 8001aac:	e008      	b.n	8001ac0 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <LCD_Display_Dir+0x214>)
 8001ab0:	2222      	movs	r2, #34	; 0x22
 8001ab2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <LCD_Display_Dir+0x214>)
 8001ab6:	2221      	movs	r2, #33	; 0x21
 8001ab8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <LCD_Display_Dir+0x214>)
 8001abc:	2220      	movs	r2, #32
 8001abe:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <LCD_Display_Dir+0x214>)
 8001ac2:	889b      	ldrh	r3, [r3, #4]
 8001ac4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d005      	beq.n	8001ad8 <LCD_Display_Dir+0x1f0>
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <LCD_Display_Dir+0x214>)
 8001ace:	889b      	ldrh	r3, [r3, #4]
 8001ad0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d109      	bne.n	8001aec <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <LCD_Display_Dir+0x214>)
 8001ada:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ade:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <LCD_Display_Dir+0x214>)
 8001ae2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ae6:	805a      	strh	r2, [r3, #2]
 8001ae8:	e000      	b.n	8001aec <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001aea:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fb43 	bl	8001178 <LCD_Scan_Dir>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000fcc 	.word	0x20000fcc

08001b00 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001b06:	4b90      	ldr	r3, [pc, #576]	; (8001d48 <LCD_Init+0x248>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	4a8f      	ldr	r2, [pc, #572]	; (8001d48 <LCD_Init+0x248>)
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	6193      	str	r3, [r2, #24]
 8001b12:	4b8d      	ldr	r3, [pc, #564]	; (8001d48 <LCD_Init+0x248>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001b1e:	4b8a      	ldr	r3, [pc, #552]	; (8001d48 <LCD_Init+0x248>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	4a89      	ldr	r2, [pc, #548]	; (8001d48 <LCD_Init+0x248>)
 8001b24:	f043 0310 	orr.w	r3, r3, #16
 8001b28:	6193      	str	r3, [r2, #24]
 8001b2a:	4b87      	ldr	r3, [pc, #540]	; (8001d48 <LCD_Init+0x248>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001b36:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b3a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001b40:	2301      	movs	r3, #1
 8001b42:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001b44:	2303      	movs	r3, #3
 8001b46:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	487f      	ldr	r0, [pc, #508]	; (8001d4c <LCD_Init+0x24c>)
 8001b50:	f004 fa82 	bl	8006058 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4619      	mov	r1, r3
 8001b60:	487b      	ldr	r0, [pc, #492]	; (8001d50 <LCD_Init+0x250>)
 8001b62:	f004 fa79 	bl	8006058 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001b66:	2032      	movs	r0, #50	; 0x32
 8001b68:	f004 f974 	bl	8005e54 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7fe fff0 	bl	8000b54 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001b74:	2032      	movs	r0, #50	; 0x32
 8001b76:	f004 f96d 	bl	8005e54 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff f814 	bl	8000ba8 <LCD_ReadReg>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <LCD_Init+0x254>)
 8001b86:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001b88:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <LCD_Init+0x254>)
 8001b8a:	889b      	ldrh	r3, [r3, #4]
 8001b8c:	2bfe      	cmp	r3, #254	; 0xfe
 8001b8e:	d90b      	bls.n	8001ba8 <LCD_Init+0xa8>
 8001b90:	4b70      	ldr	r3, [pc, #448]	; (8001d54 <LCD_Init+0x254>)
 8001b92:	889b      	ldrh	r3, [r3, #4]
 8001b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d005      	beq.n	8001ba8 <LCD_Init+0xa8>
 8001b9c:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <LCD_Init+0x254>)
 8001b9e:	889b      	ldrh	r3, [r3, #4]
 8001ba0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001ba4:	f040 80c8 	bne.w	8001d38 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001ba8:	20d3      	movs	r0, #211	; 0xd3
 8001baa:	f7fe ff47 	bl	8000a3c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001bae:	f7fe ff8d 	bl	8000acc <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001bb2:	f7fe ff8b 	bl	8000acc <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001bb6:	f7fe ff89 	bl	8000acc <LCD_RD_DATA>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <LCD_Init+0x254>)
 8001bc0:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001bc2:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <LCD_Init+0x254>)
 8001bc4:	889b      	ldrh	r3, [r3, #4]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <LCD_Init+0x254>)
 8001bcc:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001bce:	f7fe ff7d 	bl	8000acc <LCD_RD_DATA>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <LCD_Init+0x254>)
 8001bd8:	889b      	ldrh	r3, [r3, #4]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <LCD_Init+0x254>)
 8001be0:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <LCD_Init+0x254>)
 8001be4:	889b      	ldrh	r3, [r3, #4]
 8001be6:	f249 3241 	movw	r2, #37697	; 0x9341
 8001bea:	4293      	cmp	r3, r2
 8001bec:	f000 80a4 	beq.w	8001d38 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001bf0:	20bf      	movs	r0, #191	; 0xbf
 8001bf2:	f7fe ff23 	bl	8000a3c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001bf6:	f7fe ff69 	bl	8000acc <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001bfa:	f7fe ff67 	bl	8000acc <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001bfe:	f7fe ff65 	bl	8000acc <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001c02:	f7fe ff63 	bl	8000acc <LCD_RD_DATA>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <LCD_Init+0x254>)
 8001c0c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001c0e:	4b51      	ldr	r3, [pc, #324]	; (8001d54 <LCD_Init+0x254>)
 8001c10:	889b      	ldrh	r3, [r3, #4]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <LCD_Init+0x254>)
 8001c18:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001c1a:	f7fe ff57 	bl	8000acc <LCD_RD_DATA>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <LCD_Init+0x254>)
 8001c24:	889b      	ldrh	r3, [r3, #4]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <LCD_Init+0x254>)
 8001c2c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <LCD_Init+0x254>)
 8001c30:	889b      	ldrh	r3, [r3, #4]
 8001c32:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d07e      	beq.n	8001d38 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001c3a:	20d4      	movs	r0, #212	; 0xd4
 8001c3c:	f7fe fefe 	bl	8000a3c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001c40:	f7fe ff44 	bl	8000acc <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001c44:	f7fe ff42 	bl	8000acc <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001c48:	f7fe ff40 	bl	8000acc <LCD_RD_DATA>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b40      	ldr	r3, [pc, #256]	; (8001d54 <LCD_Init+0x254>)
 8001c52:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001c54:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <LCD_Init+0x254>)
 8001c56:	889b      	ldrh	r3, [r3, #4]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <LCD_Init+0x254>)
 8001c5e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001c60:	f7fe ff34 	bl	8000acc <LCD_RD_DATA>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <LCD_Init+0x254>)
 8001c6a:	889b      	ldrh	r3, [r3, #4]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <LCD_Init+0x254>)
 8001c72:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001c74:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <LCD_Init+0x254>)
 8001c76:	889b      	ldrh	r3, [r3, #4]
 8001c78:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d05b      	beq.n	8001d38 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001c80:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001c84:	f7fe feda 	bl	8000a3c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001c88:	f7fe ff20 	bl	8000acc <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001c8c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001c90:	f7fe fed4 	bl	8000a3c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001c94:	f7fe ff1a 	bl	8000acc <LCD_RD_DATA>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <LCD_Init+0x254>)
 8001c9e:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <LCD_Init+0x254>)
 8001ca2:	889b      	ldrh	r3, [r3, #4]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <LCD_Init+0x254>)
 8001caa:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001cac:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001cb0:	f7fe fec4 	bl	8000a3c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8001cb4:	f7fe ff0a 	bl	8000acc <LCD_RD_DATA>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <LCD_Init+0x254>)
 8001cbe:	889b      	ldrh	r3, [r3, #4]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <LCD_Init+0x254>)
 8001cc6:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <LCD_Init+0x254>)
 8001cca:	889b      	ldrh	r3, [r3, #4]
 8001ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd0:	d103      	bne.n	8001cda <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <LCD_Init+0x254>)
 8001cd4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cd8:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <LCD_Init+0x254>)
 8001cdc:	889b      	ldrh	r3, [r3, #4]
 8001cde:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d028      	beq.n	8001d38 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8001ce6:	20a1      	movs	r0, #161	; 0xa1
 8001ce8:	f7fe fea8 	bl	8000a3c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8001cec:	f7fe feee 	bl	8000acc <LCD_RD_DATA>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <LCD_Init+0x254>)
 8001cf6:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8001cf8:	f7fe fee8 	bl	8000acc <LCD_RD_DATA>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <LCD_Init+0x254>)
 8001d02:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <LCD_Init+0x254>)
 8001d06:	889b      	ldrh	r3, [r3, #4]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <LCD_Init+0x254>)
 8001d0e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8001d10:	f7fe fedc 	bl	8000acc <LCD_RD_DATA>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <LCD_Init+0x254>)
 8001d1a:	889b      	ldrh	r3, [r3, #4]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <LCD_Init+0x254>)
 8001d22:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <LCD_Init+0x254>)
 8001d26:	889b      	ldrh	r3, [r3, #4]
 8001d28:	f245 7261 	movw	r2, #22369	; 0x5761
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d103      	bne.n	8001d38 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <LCD_Init+0x254>)
 8001d32:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d36:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <LCD_Init+0x254>)
 8001d3a:	889b      	ldrh	r3, [r3, #4]
 8001d3c:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f040 811f 	bne.w	8001f84 <LCD_Init+0x484>
 8001d46:	e007      	b.n	8001d58 <LCD_Init+0x258>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	40010c00 	.word	0x40010c00
 8001d54:	20000fcc 	.word	0x20000fcc
			{
		LCD_WR_REG(0xCF);
 8001d58:	20cf      	movs	r0, #207	; 0xcf
 8001d5a:	f7fe fe6f 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7fe fe90 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8001d64:	20c1      	movs	r0, #193	; 0xc1
 8001d66:	f7fe fe8d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8001d6a:	2030      	movs	r0, #48	; 0x30
 8001d6c:	f7fe fe8a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8001d70:	20ed      	movs	r0, #237	; 0xed
 8001d72:	f7fe fe63 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8001d76:	2064      	movs	r0, #100	; 0x64
 8001d78:	f7fe fe84 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f7fe fe81 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8001d82:	2012      	movs	r0, #18
 8001d84:	f7fe fe7e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8001d88:	2081      	movs	r0, #129	; 0x81
 8001d8a:	f7fe fe7b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8001d8e:	20e8      	movs	r0, #232	; 0xe8
 8001d90:	f7fe fe54 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8001d94:	2085      	movs	r0, #133	; 0x85
 8001d96:	f7fe fe75 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001d9a:	2010      	movs	r0, #16
 8001d9c:	f7fe fe72 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8001da0:	207a      	movs	r0, #122	; 0x7a
 8001da2:	f7fe fe6f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8001da6:	20cb      	movs	r0, #203	; 0xcb
 8001da8:	f7fe fe48 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8001dac:	2039      	movs	r0, #57	; 0x39
 8001dae:	f7fe fe69 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8001db2:	202c      	movs	r0, #44	; 0x2c
 8001db4:	f7fe fe66 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7fe fe63 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8001dbe:	2034      	movs	r0, #52	; 0x34
 8001dc0:	f7fe fe60 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	f7fe fe5d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8001dca:	20f7      	movs	r0, #247	; 0xf7
 8001dcc:	f7fe fe36 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8001dd0:	2020      	movs	r0, #32
 8001dd2:	f7fe fe57 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8001dd6:	20ea      	movs	r0, #234	; 0xea
 8001dd8:	f7fe fe30 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7fe fe51 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7fe fe4e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8001de8:	20c0      	movs	r0, #192	; 0xc0
 8001dea:	f7fe fe27 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8001dee:	201b      	movs	r0, #27
 8001df0:	f7fe fe48 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8001df4:	20c1      	movs	r0, #193	; 0xc1
 8001df6:	f7fe fe21 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7fe fe42 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8001e00:	20c5      	movs	r0, #197	; 0xc5
 8001e02:	f7fe fe1b 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8001e06:	2030      	movs	r0, #48	; 0x30
 8001e08:	f7fe fe3c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8001e0c:	2030      	movs	r0, #48	; 0x30
 8001e0e:	f7fe fe39 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8001e12:	20c7      	movs	r0, #199	; 0xc7
 8001e14:	f7fe fe12 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8001e18:	20b7      	movs	r0, #183	; 0xb7
 8001e1a:	f7fe fe33 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8001e1e:	2036      	movs	r0, #54	; 0x36
 8001e20:	f7fe fe0c 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8001e24:	2048      	movs	r0, #72	; 0x48
 8001e26:	f7fe fe2d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8001e2a:	203a      	movs	r0, #58	; 0x3a
 8001e2c:	f7fe fe06 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8001e30:	2055      	movs	r0, #85	; 0x55
 8001e32:	f7fe fe27 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8001e36:	20b1      	movs	r0, #177	; 0xb1
 8001e38:	f7fe fe00 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7fe fe21 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8001e42:	201a      	movs	r0, #26
 8001e44:	f7fe fe1e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8001e48:	20b6      	movs	r0, #182	; 0xb6
 8001e4a:	f7fe fdf7 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8001e4e:	200a      	movs	r0, #10
 8001e50:	f7fe fe18 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8001e54:	20a2      	movs	r0, #162	; 0xa2
 8001e56:	f7fe fe15 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8001e5a:	20f2      	movs	r0, #242	; 0xf2
 8001e5c:	f7fe fdee 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7fe fe0f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8001e66:	2026      	movs	r0, #38	; 0x26
 8001e68:	f7fe fde8 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f7fe fe09 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8001e72:	20e0      	movs	r0, #224	; 0xe0
 8001e74:	f7fe fde2 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8001e78:	200f      	movs	r0, #15
 8001e7a:	f7fe fe03 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8001e7e:	202a      	movs	r0, #42	; 0x2a
 8001e80:	f7fe fe00 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8001e84:	2028      	movs	r0, #40	; 0x28
 8001e86:	f7fe fdfd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001e8a:	2008      	movs	r0, #8
 8001e8c:	f7fe fdfa 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8001e90:	200e      	movs	r0, #14
 8001e92:	f7fe fdf7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001e96:	2008      	movs	r0, #8
 8001e98:	f7fe fdf4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8001e9c:	2054      	movs	r0, #84	; 0x54
 8001e9e:	f7fe fdf1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8001ea2:	20a9      	movs	r0, #169	; 0xa9
 8001ea4:	f7fe fdee 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8001ea8:	2043      	movs	r0, #67	; 0x43
 8001eaa:	f7fe fdeb 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8001eae:	200a      	movs	r0, #10
 8001eb0:	f7fe fde8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001eb4:	200f      	movs	r0, #15
 8001eb6:	f7fe fde5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7fe fde2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7fe fddf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7fe fddc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7fe fdd9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8001ed2:	20e1      	movs	r0, #225	; 0xe1
 8001ed4:	f7fe fdb2 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7fe fdd3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8001ede:	2015      	movs	r0, #21
 8001ee0:	f7fe fdd0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8001ee4:	2017      	movs	r0, #23
 8001ee6:	f7fe fdcd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8001eea:	2007      	movs	r0, #7
 8001eec:	f7fe fdca 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8001ef0:	2011      	movs	r0, #17
 8001ef2:	f7fe fdc7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8001ef6:	2006      	movs	r0, #6
 8001ef8:	f7fe fdc4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8001efc:	202b      	movs	r0, #43	; 0x2b
 8001efe:	f7fe fdc1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8001f02:	2056      	movs	r0, #86	; 0x56
 8001f04:	f7fe fdbe 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8001f08:	203c      	movs	r0, #60	; 0x3c
 8001f0a:	f7fe fdbb 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8001f0e:	2005      	movs	r0, #5
 8001f10:	f7fe fdb8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001f14:	2010      	movs	r0, #16
 8001f16:	f7fe fdb5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001f1a:	200f      	movs	r0, #15
 8001f1c:	f7fe fdb2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001f20:	203f      	movs	r0, #63	; 0x3f
 8001f22:	f7fe fdaf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001f26:	203f      	movs	r0, #63	; 0x3f
 8001f28:	f7fe fdac 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001f2c:	200f      	movs	r0, #15
 8001f2e:	f7fe fda9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8001f32:	202b      	movs	r0, #43	; 0x2b
 8001f34:	f7fe fd82 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7fe fda3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7fe fda0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7fe fd9d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8001f4a:	203f      	movs	r0, #63	; 0x3f
 8001f4c:	f7fe fd9a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8001f50:	202a      	movs	r0, #42	; 0x2a
 8001f52:	f7fe fd73 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7fe fd94 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7fe fd91 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7fe fd8e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8001f68:	20ef      	movs	r0, #239	; 0xef
 8001f6a:	f7fe fd8b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8001f6e:	2011      	movs	r0, #17
 8001f70:	f7fe fd64 	bl	8000a3c <LCD_WR_REG>
		HAL_Delay(120);
 8001f74:	2078      	movs	r0, #120	; 0x78
 8001f76:	f003 ff6d 	bl	8005e54 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8001f7a:	2029      	movs	r0, #41	; 0x29
 8001f7c:	f7fe fd5e 	bl	8000a3c <LCD_WR_REG>
 8001f80:	f003 bcd8 	b.w	8005934 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8001f84:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <LCD_Init+0x5e8>)
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	f040 80ad 	bne.w	80020ec <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8001f92:	2011      	movs	r0, #17
 8001f94:	f7fe fd52 	bl	8000a3c <LCD_WR_REG>
		HAL_Delay(20);
 8001f98:	2014      	movs	r0, #20
 8001f9a:	f003 ff5b 	bl	8005e54 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8001f9e:	20d0      	movs	r0, #208	; 0xd0
 8001fa0:	f7fe fd4c 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8001fa4:	2007      	movs	r0, #7
 8001fa6:	f7fe fd6d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8001faa:	2042      	movs	r0, #66	; 0x42
 8001fac:	f7fe fd6a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8001fb0:	201d      	movs	r0, #29
 8001fb2:	f7fe fd67 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8001fb6:	20d1      	movs	r0, #209	; 0xd1
 8001fb8:	f7fe fd40 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7fe fd61 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8001fc2:	201a      	movs	r0, #26
 8001fc4:	f7fe fd5e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8001fc8:	2009      	movs	r0, #9
 8001fca:	f7fe fd5b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8001fce:	20d2      	movs	r0, #210	; 0xd2
 8001fd0:	f7fe fd34 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7fe fd55 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8001fda:	2022      	movs	r0, #34	; 0x22
 8001fdc:	f7fe fd52 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8001fe0:	20c0      	movs	r0, #192	; 0xc0
 8001fe2:	f7fe fd2b 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8001fe6:	2010      	movs	r0, #16
 8001fe8:	f7fe fd4c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8001fec:	203b      	movs	r0, #59	; 0x3b
 8001fee:	f7fe fd49 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7fe fd46 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f7fe fd43 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8001ffe:	2011      	movs	r0, #17
 8002000:	f7fe fd40 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002004:	20c5      	movs	r0, #197	; 0xc5
 8002006:	f7fe fd19 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800200a:	2003      	movs	r0, #3
 800200c:	f7fe fd3a 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002010:	20c8      	movs	r0, #200	; 0xc8
 8002012:	f7fe fd13 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002016:	2000      	movs	r0, #0
 8002018:	f7fe fd34 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800201c:	2025      	movs	r0, #37	; 0x25
 800201e:	f7fe fd31 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002022:	2021      	movs	r0, #33	; 0x21
 8002024:	f7fe fd2e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002028:	2005      	movs	r0, #5
 800202a:	f7fe fd2b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800202e:	2000      	movs	r0, #0
 8002030:	f7fe fd28 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002034:	200a      	movs	r0, #10
 8002036:	f7fe fd25 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 800203a:	2065      	movs	r0, #101	; 0x65
 800203c:	f7fe fd22 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002040:	2025      	movs	r0, #37	; 0x25
 8002042:	f7fe fd1f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002046:	2077      	movs	r0, #119	; 0x77
 8002048:	f7fe fd1c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 800204c:	2050      	movs	r0, #80	; 0x50
 800204e:	f7fe fd19 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002052:	200f      	movs	r0, #15
 8002054:	f7fe fd16 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002058:	2000      	movs	r0, #0
 800205a:	f7fe fd13 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 800205e:	20f8      	movs	r0, #248	; 0xf8
 8002060:	f7fe fcec 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002064:	2001      	movs	r0, #1
 8002066:	f7fe fd0d 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 800206a:	20fe      	movs	r0, #254	; 0xfe
 800206c:	f7fe fce6 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002070:	2000      	movs	r0, #0
 8002072:	f7fe fd07 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002076:	2002      	movs	r0, #2
 8002078:	f7fe fd04 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800207c:	2020      	movs	r0, #32
 800207e:	f7fe fcdd 	bl	8000a3c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002082:	2036      	movs	r0, #54	; 0x36
 8002084:	f7fe fcda 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002088:	2008      	movs	r0, #8
 800208a:	f7fe fcfb 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800208e:	203a      	movs	r0, #58	; 0x3a
 8002090:	f7fe fcd4 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8002094:	2055      	movs	r0, #85	; 0x55
 8002096:	f7fe fcf5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 800209a:	202b      	movs	r0, #43	; 0x2b
 800209c:	f7fe fcce 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7fe fcef 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7fe fcec 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7fe fce9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80020b2:	203f      	movs	r0, #63	; 0x3f
 80020b4:	f7fe fce6 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80020b8:	202a      	movs	r0, #42	; 0x2a
 80020ba:	f7fe fcbf 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80020be:	2000      	movs	r0, #0
 80020c0:	f7fe fce0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7fe fcdd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f7fe fcda 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80020d0:	20df      	movs	r0, #223	; 0xdf
 80020d2:	f7fe fcd7 	bl	8000a84 <LCD_WR_DATAX>
		HAL_Delay(120);
 80020d6:	2078      	movs	r0, #120	; 0x78
 80020d8:	f003 febc 	bl	8005e54 <HAL_Delay>
		LCD_WR_REG(0X29);
 80020dc:	2029      	movs	r0, #41	; 0x29
 80020de:	f7fe fcad 	bl	8000a3c <LCD_WR_REG>
 80020e2:	f003 bc27 	b.w	8005934 <LCD_Init+0x3e34>
 80020e6:	bf00      	nop
 80020e8:	20000fcc 	.word	0x20000fcc
	} else if (lcddev.id == 0x5310) {
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <LCD_Init+0x5fc>)
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	f245 3210 	movw	r2, #21264	; 0x5310
 80020f4:	4293      	cmp	r3, r2
 80020f6:	f040 877c 	bne.w	8002ff2 <LCD_Init+0x14f2>
 80020fa:	e001      	b.n	8002100 <LCD_Init+0x600>
 80020fc:	20000fcc 	.word	0x20000fcc
		LCD_WR_REG(0xED);
 8002100:	20ed      	movs	r0, #237	; 0xed
 8002102:	f7fe fc9b 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002106:	2001      	movs	r0, #1
 8002108:	f7fe fcbc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800210c:	20fe      	movs	r0, #254	; 0xfe
 800210e:	f7fe fcb9 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002112:	20ee      	movs	r0, #238	; 0xee
 8002114:	f7fe fc92 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002118:	20de      	movs	r0, #222	; 0xde
 800211a:	f7fe fcb3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800211e:	2021      	movs	r0, #33	; 0x21
 8002120:	f7fe fcb0 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002124:	20f1      	movs	r0, #241	; 0xf1
 8002126:	f7fe fc89 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800212a:	2001      	movs	r0, #1
 800212c:	f7fe fcaa 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002130:	20df      	movs	r0, #223	; 0xdf
 8002132:	f7fe fc83 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002136:	2010      	movs	r0, #16
 8002138:	f7fe fca4 	bl	8000a84 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800213c:	20c4      	movs	r0, #196	; 0xc4
 800213e:	f7fe fc7d 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002142:	208f      	movs	r0, #143	; 0x8f
 8002144:	f7fe fc9e 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002148:	20c6      	movs	r0, #198	; 0xc6
 800214a:	f7fe fc77 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800214e:	2000      	movs	r0, #0
 8002150:	f7fe fc98 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002154:	20e2      	movs	r0, #226	; 0xe2
 8002156:	f7fe fc95 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800215a:	20e2      	movs	r0, #226	; 0xe2
 800215c:	f7fe fc92 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002160:	20e2      	movs	r0, #226	; 0xe2
 8002162:	f7fe fc8f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8002166:	20bf      	movs	r0, #191	; 0xbf
 8002168:	f7fe fc68 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800216c:	20aa      	movs	r0, #170	; 0xaa
 800216e:	f7fe fc89 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002172:	20b0      	movs	r0, #176	; 0xb0
 8002174:	f7fe fc62 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002178:	200d      	movs	r0, #13
 800217a:	f7fe fc83 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800217e:	2000      	movs	r0, #0
 8002180:	f7fe fc80 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002184:	200d      	movs	r0, #13
 8002186:	f7fe fc7d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe fc7a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002190:	2011      	movs	r0, #17
 8002192:	f7fe fc77 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002196:	2000      	movs	r0, #0
 8002198:	f7fe fc74 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 800219c:	2019      	movs	r0, #25
 800219e:	f7fe fc71 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7fe fc6e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80021a8:	2021      	movs	r0, #33	; 0x21
 80021aa:	f7fe fc6b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7fe fc68 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80021b4:	202d      	movs	r0, #45	; 0x2d
 80021b6:	f7fe fc65 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f7fe fc62 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80021c0:	203d      	movs	r0, #61	; 0x3d
 80021c2:	f7fe fc5f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7fe fc5c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80021cc:	205d      	movs	r0, #93	; 0x5d
 80021ce:	f7fe fc59 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7fe fc56 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80021d8:	205d      	movs	r0, #93	; 0x5d
 80021da:	f7fe fc53 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7fe fc50 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80021e4:	20b1      	movs	r0, #177	; 0xb1
 80021e6:	f7fe fc29 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80021ea:	2080      	movs	r0, #128	; 0x80
 80021ec:	f7fe fc4a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7fe fc47 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80021f6:	208b      	movs	r0, #139	; 0x8b
 80021f8:	f7fe fc44 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7fe fc41 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002202:	2096      	movs	r0, #150	; 0x96
 8002204:	f7fe fc3e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002208:	2000      	movs	r0, #0
 800220a:	f7fe fc3b 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800220e:	20b2      	movs	r0, #178	; 0xb2
 8002210:	f7fe fc14 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002214:	2000      	movs	r0, #0
 8002216:	f7fe fc35 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800221a:	2000      	movs	r0, #0
 800221c:	f7fe fc32 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002220:	2002      	movs	r0, #2
 8002222:	f7fe fc2f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002226:	2000      	movs	r0, #0
 8002228:	f7fe fc2c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800222c:	2003      	movs	r0, #3
 800222e:	f7fe fc29 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002232:	2000      	movs	r0, #0
 8002234:	f7fe fc26 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002238:	20b3      	movs	r0, #179	; 0xb3
 800223a:	f7fe fbff 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800223e:	2000      	movs	r0, #0
 8002240:	f7fe fc20 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f7fe fc1d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800224a:	2000      	movs	r0, #0
 800224c:	f7fe fc1a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002250:	2000      	movs	r0, #0
 8002252:	f7fe fc17 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002256:	2000      	movs	r0, #0
 8002258:	f7fe fc14 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800225c:	2000      	movs	r0, #0
 800225e:	f7fe fc11 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002262:	2000      	movs	r0, #0
 8002264:	f7fe fc0e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002268:	2000      	movs	r0, #0
 800226a:	f7fe fc0b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800226e:	2000      	movs	r0, #0
 8002270:	f7fe fc08 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002274:	2000      	movs	r0, #0
 8002276:	f7fe fc05 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800227a:	2000      	movs	r0, #0
 800227c:	f7fe fc02 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002280:	2000      	movs	r0, #0
 8002282:	f7fe fbff 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002286:	2000      	movs	r0, #0
 8002288:	f7fe fbfc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800228c:	2000      	movs	r0, #0
 800228e:	f7fe fbf9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002292:	2000      	movs	r0, #0
 8002294:	f7fe fbf6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002298:	2000      	movs	r0, #0
 800229a:	f7fe fbf3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800229e:	2000      	movs	r0, #0
 80022a0:	f7fe fbf0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7fe fbed 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7fe fbea 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7fe fbe7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7fe fbe4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fbe1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7fe fbde 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7fe fbdb 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80022ce:	20b4      	movs	r0, #180	; 0xb4
 80022d0:	f7fe fbb4 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80022d4:	208b      	movs	r0, #139	; 0x8b
 80022d6:	f7fe fbd5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022da:	2000      	movs	r0, #0
 80022dc:	f7fe fbd2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80022e0:	2096      	movs	r0, #150	; 0x96
 80022e2:	f7fe fbcf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022e6:	2000      	movs	r0, #0
 80022e8:	f7fe fbcc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80022ec:	20a1      	movs	r0, #161	; 0xa1
 80022ee:	f7fe fbc9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7fe fbc6 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80022f8:	20b5      	movs	r0, #181	; 0xb5
 80022fa:	f7fe fb9f 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80022fe:	2002      	movs	r0, #2
 8002300:	f7fe fbc0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe fbbd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800230a:	2003      	movs	r0, #3
 800230c:	f7fe fbba 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe fbb7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002316:	2004      	movs	r0, #4
 8002318:	f7fe fbb4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800231c:	2000      	movs	r0, #0
 800231e:	f7fe fbb1 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002322:	20b6      	movs	r0, #182	; 0xb6
 8002324:	f7fe fb8a 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002328:	2000      	movs	r0, #0
 800232a:	f7fe fbab 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800232e:	2000      	movs	r0, #0
 8002330:	f7fe fba8 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002334:	20b7      	movs	r0, #183	; 0xb7
 8002336:	f7fe fb81 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800233a:	2000      	movs	r0, #0
 800233c:	f7fe fba2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002340:	2000      	movs	r0, #0
 8002342:	f7fe fb9f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002346:	203f      	movs	r0, #63	; 0x3f
 8002348:	f7fe fb9c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800234c:	2000      	movs	r0, #0
 800234e:	f7fe fb99 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002352:	205e      	movs	r0, #94	; 0x5e
 8002354:	f7fe fb96 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002358:	2000      	movs	r0, #0
 800235a:	f7fe fb93 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800235e:	2064      	movs	r0, #100	; 0x64
 8002360:	f7fe fb90 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002364:	2000      	movs	r0, #0
 8002366:	f7fe fb8d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 800236a:	208c      	movs	r0, #140	; 0x8c
 800236c:	f7fe fb8a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fb87 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002376:	20ac      	movs	r0, #172	; 0xac
 8002378:	f7fe fb84 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800237c:	2000      	movs	r0, #0
 800237e:	f7fe fb81 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002382:	20dc      	movs	r0, #220	; 0xdc
 8002384:	f7fe fb7e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002388:	2000      	movs	r0, #0
 800238a:	f7fe fb7b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 800238e:	2070      	movs	r0, #112	; 0x70
 8002390:	f7fe fb78 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002394:	2000      	movs	r0, #0
 8002396:	f7fe fb75 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 800239a:	2090      	movs	r0, #144	; 0x90
 800239c:	f7fe fb72 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe fb6f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80023a6:	20eb      	movs	r0, #235	; 0xeb
 80023a8:	f7fe fb6c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7fe fb69 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80023b2:	20dc      	movs	r0, #220	; 0xdc
 80023b4:	f7fe fb66 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7fe fb63 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80023be:	20b8      	movs	r0, #184	; 0xb8
 80023c0:	f7fe fb3c 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7fe fb5d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7fe fb5a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7fe fb57 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7fe fb54 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023dc:	2000      	movs	r0, #0
 80023de:	f7fe fb51 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7fe fb4e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fb4b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fb48 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80023f4:	20ba      	movs	r0, #186	; 0xba
 80023f6:	f7fe fb21 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80023fa:	2024      	movs	r0, #36	; 0x24
 80023fc:	f7fe fb42 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002400:	2000      	movs	r0, #0
 8002402:	f7fe fb3f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe fb3c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800240c:	2000      	movs	r0, #0
 800240e:	f7fe fb39 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002412:	20c1      	movs	r0, #193	; 0xc1
 8002414:	f7fe fb12 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002418:	2020      	movs	r0, #32
 800241a:	f7fe fb33 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800241e:	2000      	movs	r0, #0
 8002420:	f7fe fb30 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002424:	2054      	movs	r0, #84	; 0x54
 8002426:	f7fe fb2d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe fb2a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002430:	20ff      	movs	r0, #255	; 0xff
 8002432:	f7fe fb27 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe fb24 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 800243c:	20c2      	movs	r0, #194	; 0xc2
 800243e:	f7fe fafd 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002442:	200a      	movs	r0, #10
 8002444:	f7fe fb1e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fb1b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800244e:	2004      	movs	r0, #4
 8002450:	f7fe fb18 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002454:	2000      	movs	r0, #0
 8002456:	f7fe fb15 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 800245a:	20c3      	movs	r0, #195	; 0xc3
 800245c:	f7fe faee 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002460:	203c      	movs	r0, #60	; 0x3c
 8002462:	f7fe fb0f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe fb0c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 800246c:	203a      	movs	r0, #58	; 0x3a
 800246e:	f7fe fb09 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f7fe fb06 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002478:	2039      	movs	r0, #57	; 0x39
 800247a:	f7fe fb03 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe fb00 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002484:	2037      	movs	r0, #55	; 0x37
 8002486:	f7fe fafd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe fafa 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002490:	203c      	movs	r0, #60	; 0x3c
 8002492:	f7fe faf7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002496:	2000      	movs	r0, #0
 8002498:	f7fe faf4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800249c:	2036      	movs	r0, #54	; 0x36
 800249e:	f7fe faf1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7fe faee 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80024a8:	2032      	movs	r0, #50	; 0x32
 80024aa:	f7fe faeb 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7fe fae8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80024b4:	202f      	movs	r0, #47	; 0x2f
 80024b6:	f7fe fae5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe fae2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80024c0:	202c      	movs	r0, #44	; 0x2c
 80024c2:	f7fe fadf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7fe fadc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80024cc:	2029      	movs	r0, #41	; 0x29
 80024ce:	f7fe fad9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7fe fad6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80024d8:	2026      	movs	r0, #38	; 0x26
 80024da:	f7fe fad3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024de:	2000      	movs	r0, #0
 80024e0:	f7fe fad0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80024e4:	2024      	movs	r0, #36	; 0x24
 80024e6:	f7fe facd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7fe faca 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80024f0:	2024      	movs	r0, #36	; 0x24
 80024f2:	f7fe fac7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7fe fac4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80024fc:	2023      	movs	r0, #35	; 0x23
 80024fe:	f7fe fac1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002502:	2000      	movs	r0, #0
 8002504:	f7fe fabe 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002508:	203c      	movs	r0, #60	; 0x3c
 800250a:	f7fe fabb 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800250e:	2000      	movs	r0, #0
 8002510:	f7fe fab8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002514:	2036      	movs	r0, #54	; 0x36
 8002516:	f7fe fab5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800251a:	2000      	movs	r0, #0
 800251c:	f7fe fab2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002520:	2032      	movs	r0, #50	; 0x32
 8002522:	f7fe faaf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002526:	2000      	movs	r0, #0
 8002528:	f7fe faac 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800252c:	202f      	movs	r0, #47	; 0x2f
 800252e:	f7fe faa9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002532:	2000      	movs	r0, #0
 8002534:	f7fe faa6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002538:	202c      	movs	r0, #44	; 0x2c
 800253a:	f7fe faa3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800253e:	2000      	movs	r0, #0
 8002540:	f7fe faa0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002544:	2029      	movs	r0, #41	; 0x29
 8002546:	f7fe fa9d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800254a:	2000      	movs	r0, #0
 800254c:	f7fe fa9a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002550:	2026      	movs	r0, #38	; 0x26
 8002552:	f7fe fa97 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002556:	2000      	movs	r0, #0
 8002558:	f7fe fa94 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800255c:	2024      	movs	r0, #36	; 0x24
 800255e:	f7fe fa91 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002562:	2000      	movs	r0, #0
 8002564:	f7fe fa8e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002568:	2024      	movs	r0, #36	; 0x24
 800256a:	f7fe fa8b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe fa88 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002574:	2023      	movs	r0, #35	; 0x23
 8002576:	f7fe fa85 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe fa82 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002580:	20c4      	movs	r0, #196	; 0xc4
 8002582:	f7fe fa5b 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002586:	2062      	movs	r0, #98	; 0x62
 8002588:	f7fe fa7c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe fa79 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002592:	2005      	movs	r0, #5
 8002594:	f7fe fa76 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002598:	2000      	movs	r0, #0
 800259a:	f7fe fa73 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800259e:	2084      	movs	r0, #132	; 0x84
 80025a0:	f7fe fa70 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7fe fa6d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80025aa:	20f0      	movs	r0, #240	; 0xf0
 80025ac:	f7fe fa6a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe fa67 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80025b6:	2018      	movs	r0, #24
 80025b8:	f7fe fa64 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fa61 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 80025c2:	20a4      	movs	r0, #164	; 0xa4
 80025c4:	f7fe fa5e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe fa5b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80025ce:	2018      	movs	r0, #24
 80025d0:	f7fe fa58 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7fe fa55 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80025da:	2050      	movs	r0, #80	; 0x50
 80025dc:	f7fe fa52 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7fe fa4f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 80025e6:	200c      	movs	r0, #12
 80025e8:	f7fe fa4c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe fa49 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80025f2:	2017      	movs	r0, #23
 80025f4:	f7fe fa46 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe fa43 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80025fe:	2095      	movs	r0, #149	; 0x95
 8002600:	f7fe fa40 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe fa3d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800260a:	20f3      	movs	r0, #243	; 0xf3
 800260c:	f7fe fa3a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe fa37 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002616:	20e6      	movs	r0, #230	; 0xe6
 8002618:	f7fe fa34 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f7fe fa31 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002622:	20c5      	movs	r0, #197	; 0xc5
 8002624:	f7fe fa0a 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002628:	2032      	movs	r0, #50	; 0x32
 800262a:	f7fe fa2b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe fa28 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002634:	2044      	movs	r0, #68	; 0x44
 8002636:	f7fe fa25 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe fa22 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002640:	2065      	movs	r0, #101	; 0x65
 8002642:	f7fe fa1f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe fa1c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800264c:	2076      	movs	r0, #118	; 0x76
 800264e:	f7fe fa19 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f7fe fa16 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002658:	2088      	movs	r0, #136	; 0x88
 800265a:	f7fe fa13 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f7fe fa10 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002664:	20c6      	movs	r0, #198	; 0xc6
 8002666:	f7fe f9e9 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 800266a:	2020      	movs	r0, #32
 800266c:	f7fe fa0a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002670:	2000      	movs	r0, #0
 8002672:	f7fe fa07 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002676:	2017      	movs	r0, #23
 8002678:	f7fe fa04 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800267c:	2000      	movs	r0, #0
 800267e:	f7fe fa01 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002682:	2001      	movs	r0, #1
 8002684:	f7fe f9fe 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002688:	2000      	movs	r0, #0
 800268a:	f7fe f9fb 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 800268e:	20c7      	movs	r0, #199	; 0xc7
 8002690:	f7fe f9d4 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002694:	2000      	movs	r0, #0
 8002696:	f7fe f9f5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269a:	2000      	movs	r0, #0
 800269c:	f7fe f9f2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe f9ef 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe f9ec 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80026ac:	20c8      	movs	r0, #200	; 0xc8
 80026ae:	f7fe f9c5 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7fe f9e6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe f9e3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe f9e0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f9dd 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 80026ca:	20c9      	movs	r0, #201	; 0xc9
 80026cc:	f7fe f9b6 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe f9d7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7fe f9d4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe f9d1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe f9ce 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe f9cb 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7fe f9c8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe f9c5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fe f9c2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe f9bf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe f9bc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe f9b9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe f9b6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe f9b3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe f9b0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe f9ad 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f7fe f9aa 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002730:	20e0      	movs	r0, #224	; 0xe0
 8002732:	f7fe f983 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002736:	2016      	movs	r0, #22
 8002738:	f7fe f9a4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273c:	2000      	movs	r0, #0
 800273e:	f7fe f9a1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002742:	201c      	movs	r0, #28
 8002744:	f7fe f99e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002748:	2000      	movs	r0, #0
 800274a:	f7fe f99b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800274e:	2021      	movs	r0, #33	; 0x21
 8002750:	f7fe f998 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe f995 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800275a:	2036      	movs	r0, #54	; 0x36
 800275c:	f7fe f992 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe f98f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002766:	2046      	movs	r0, #70	; 0x46
 8002768:	f7fe f98c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe f989 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002772:	2052      	movs	r0, #82	; 0x52
 8002774:	f7fe f986 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7fe f983 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800277e:	2064      	movs	r0, #100	; 0x64
 8002780:	f7fe f980 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002784:	2000      	movs	r0, #0
 8002786:	f7fe f97d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 800278a:	207a      	movs	r0, #122	; 0x7a
 800278c:	f7fe f97a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe f977 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002796:	208b      	movs	r0, #139	; 0x8b
 8002798:	f7fe f974 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279c:	2000      	movs	r0, #0
 800279e:	f7fe f971 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80027a2:	2099      	movs	r0, #153	; 0x99
 80027a4:	f7fe f96e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7fe f96b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80027ae:	20a8      	movs	r0, #168	; 0xa8
 80027b0:	f7fe f968 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe f965 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80027ba:	20b9      	movs	r0, #185	; 0xb9
 80027bc:	f7fe f962 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7fe f95f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80027c6:	20c4      	movs	r0, #196	; 0xc4
 80027c8:	f7fe f95c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7fe f959 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80027d2:	20ca      	movs	r0, #202	; 0xca
 80027d4:	f7fe f956 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7fe f953 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80027de:	20d2      	movs	r0, #210	; 0xd2
 80027e0:	f7fe f950 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7fe f94d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 80027ea:	20d9      	movs	r0, #217	; 0xd9
 80027ec:	f7fe f94a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe f947 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80027f6:	20e0      	movs	r0, #224	; 0xe0
 80027f8:	f7fe f944 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fe f941 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002802:	20f3      	movs	r0, #243	; 0xf3
 8002804:	f7fe f93e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002808:	2000      	movs	r0, #0
 800280a:	f7fe f93b 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 800280e:	20e1      	movs	r0, #225	; 0xe1
 8002810:	f7fe f914 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002814:	2016      	movs	r0, #22
 8002816:	f7fe f935 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe f932 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002820:	201c      	movs	r0, #28
 8002822:	f7fe f92f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe f92c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 800282c:	2022      	movs	r0, #34	; 0x22
 800282e:	f7fe f929 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe f926 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002838:	2036      	movs	r0, #54	; 0x36
 800283a:	f7fe f923 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f920 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002844:	2045      	movs	r0, #69	; 0x45
 8002846:	f7fe f91d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284a:	2000      	movs	r0, #0
 800284c:	f7fe f91a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002850:	2052      	movs	r0, #82	; 0x52
 8002852:	f7fe f917 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f914 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800285c:	2064      	movs	r0, #100	; 0x64
 800285e:	f7fe f911 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f7fe f90e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002868:	207a      	movs	r0, #122	; 0x7a
 800286a:	f7fe f90b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe f908 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002874:	208b      	movs	r0, #139	; 0x8b
 8002876:	f7fe f905 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe f902 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002880:	2099      	movs	r0, #153	; 0x99
 8002882:	f7fe f8ff 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe f8fc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 800288c:	20a8      	movs	r0, #168	; 0xa8
 800288e:	f7fe f8f9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe f8f6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002898:	20b9      	movs	r0, #185	; 0xb9
 800289a:	f7fe f8f3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe f8f0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80028a4:	20c4      	movs	r0, #196	; 0xc4
 80028a6:	f7fe f8ed 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fe f8ea 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80028b0:	20ca      	movs	r0, #202	; 0xca
 80028b2:	f7fe f8e7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe f8e4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80028bc:	20d2      	movs	r0, #210	; 0xd2
 80028be:	f7fe f8e1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fe f8de 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 80028c8:	20d8      	movs	r0, #216	; 0xd8
 80028ca:	f7fe f8db 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe f8d8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80028d4:	20e0      	movs	r0, #224	; 0xe0
 80028d6:	f7fe f8d5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe f8d2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80028e0:	20f3      	movs	r0, #243	; 0xf3
 80028e2:	f7fe f8cf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe f8cc 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 80028ec:	20e2      	movs	r0, #226	; 0xe2
 80028ee:	f7fe f8a5 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80028f2:	2005      	movs	r0, #5
 80028f4:	f7fe f8c6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fe f8c3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 80028fe:	200b      	movs	r0, #11
 8002900:	f7fe f8c0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe f8bd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 800290a:	201b      	movs	r0, #27
 800290c:	f7fe f8ba 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002910:	2000      	movs	r0, #0
 8002912:	f7fe f8b7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002916:	2034      	movs	r0, #52	; 0x34
 8002918:	f7fe f8b4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe f8b1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002922:	2044      	movs	r0, #68	; 0x44
 8002924:	f7fe f8ae 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f7fe f8ab 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 800292e:	204f      	movs	r0, #79	; 0x4f
 8002930:	f7fe f8a8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f7fe f8a5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 800293a:	2061      	movs	r0, #97	; 0x61
 800293c:	f7fe f8a2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f7fe f89f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002946:	2079      	movs	r0, #121	; 0x79
 8002948:	f7fe f89c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f7fe f899 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002952:	2088      	movs	r0, #136	; 0x88
 8002954:	f7fe f896 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f7fe f893 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800295e:	2097      	movs	r0, #151	; 0x97
 8002960:	f7fe f890 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f7fe f88d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 800296a:	20a6      	movs	r0, #166	; 0xa6
 800296c:	f7fe f88a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002970:	2000      	movs	r0, #0
 8002972:	f7fe f887 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002976:	20b7      	movs	r0, #183	; 0xb7
 8002978:	f7fe f884 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297c:	2000      	movs	r0, #0
 800297e:	f7fe f881 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002982:	20c2      	movs	r0, #194	; 0xc2
 8002984:	f7fe f87e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f7fe f87b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 800298e:	20c7      	movs	r0, #199	; 0xc7
 8002990:	f7fe f878 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f7fe f875 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 800299a:	20d1      	movs	r0, #209	; 0xd1
 800299c:	f7fe f872 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe f86f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 80029a6:	20d6      	movs	r0, #214	; 0xd6
 80029a8:	f7fe f86c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe f869 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80029b2:	20dd      	movs	r0, #221	; 0xdd
 80029b4:	f7fe f866 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fe f863 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80029be:	20f3      	movs	r0, #243	; 0xf3
 80029c0:	f7fe f860 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe f85d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 80029ca:	20e3      	movs	r0, #227	; 0xe3
 80029cc:	f7fe f836 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80029d0:	2005      	movs	r0, #5
 80029d2:	f7fe f857 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7fe f854 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 80029dc:	200a      	movs	r0, #10
 80029de:	f7fe f851 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fe f84e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80029e8:	201c      	movs	r0, #28
 80029ea:	f7fe f84b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7fe f848 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80029f4:	2033      	movs	r0, #51	; 0x33
 80029f6:	f7fe f845 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7fe f842 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002a00:	2044      	movs	r0, #68	; 0x44
 8002a02:	f7fe f83f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7fe f83c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002a0c:	2050      	movs	r0, #80	; 0x50
 8002a0e:	f7fe f839 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7fe f836 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002a18:	2062      	movs	r0, #98	; 0x62
 8002a1a:	f7fe f833 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe f830 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002a24:	2078      	movs	r0, #120	; 0x78
 8002a26:	f7fe f82d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7fe f82a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002a30:	2088      	movs	r0, #136	; 0x88
 8002a32:	f7fe f827 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7fe f824 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002a3c:	2097      	movs	r0, #151	; 0x97
 8002a3e:	f7fe f821 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7fe f81e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002a48:	20a6      	movs	r0, #166	; 0xa6
 8002a4a:	f7fe f81b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fe f818 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002a54:	20b7      	movs	r0, #183	; 0xb7
 8002a56:	f7fe f815 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fe f812 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002a60:	20c2      	movs	r0, #194	; 0xc2
 8002a62:	f7fe f80f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fe f80c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002a6c:	20c7      	movs	r0, #199	; 0xc7
 8002a6e:	f7fe f809 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe f806 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002a78:	20d1      	movs	r0, #209	; 0xd1
 8002a7a:	f7fe f803 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fe f800 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002a84:	20d5      	movs	r0, #213	; 0xd5
 8002a86:	f7fd fffd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fd fffa 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002a90:	20dd      	movs	r0, #221	; 0xdd
 8002a92:	f7fd fff7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fd fff4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002a9c:	20f3      	movs	r0, #243	; 0xf3
 8002a9e:	f7fd fff1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fd ffee 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002aa8:	20e4      	movs	r0, #228	; 0xe4
 8002aaa:	f7fd ffc7 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f7fd ffe8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fd ffe5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7fd ffe2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fd ffdf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f7fd ffdc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fd ffd9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002ad2:	202a      	movs	r0, #42	; 0x2a
 8002ad4:	f7fd ffd6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fd ffd3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002ade:	203c      	movs	r0, #60	; 0x3c
 8002ae0:	f7fd ffd0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fd ffcd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002aea:	204b      	movs	r0, #75	; 0x4b
 8002aec:	f7fd ffca 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fd ffc7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002af6:	205d      	movs	r0, #93	; 0x5d
 8002af8:	f7fd ffc4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fd ffc1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002b02:	2074      	movs	r0, #116	; 0x74
 8002b04:	f7fd ffbe 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fd ffbb 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002b0e:	2084      	movs	r0, #132	; 0x84
 8002b10:	f7fd ffb8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7fd ffb5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002b1a:	2093      	movs	r0, #147	; 0x93
 8002b1c:	f7fd ffb2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fd ffaf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002b26:	20a2      	movs	r0, #162	; 0xa2
 8002b28:	f7fd ffac 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fd ffa9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002b32:	20b3      	movs	r0, #179	; 0xb3
 8002b34:	f7fd ffa6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fd ffa3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002b3e:	20be      	movs	r0, #190	; 0xbe
 8002b40:	f7fd ffa0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fd ff9d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002b4a:	20c4      	movs	r0, #196	; 0xc4
 8002b4c:	f7fd ff9a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7fd ff97 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002b56:	20cd      	movs	r0, #205	; 0xcd
 8002b58:	f7fd ff94 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7fd ff91 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002b62:	20d3      	movs	r0, #211	; 0xd3
 8002b64:	f7fd ff8e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fd ff8b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002b6e:	20dd      	movs	r0, #221	; 0xdd
 8002b70:	f7fd ff88 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fd ff85 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b7a:	20f3      	movs	r0, #243	; 0xf3
 8002b7c:	f7fd ff82 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fd ff7f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002b86:	20e5      	movs	r0, #229	; 0xe5
 8002b88:	f7fd ff58 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fd ff79 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fd ff76 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7fd ff73 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fd ff70 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f7fd ff6d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fd ff6a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002bb0:	2029      	movs	r0, #41	; 0x29
 8002bb2:	f7fd ff67 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fd ff64 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002bbc:	203c      	movs	r0, #60	; 0x3c
 8002bbe:	f7fd ff61 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fd ff5e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002bc8:	204b      	movs	r0, #75	; 0x4b
 8002bca:	f7fd ff5b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fd ff58 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002bd4:	205d      	movs	r0, #93	; 0x5d
 8002bd6:	f7fd ff55 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fd ff52 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002be0:	2074      	movs	r0, #116	; 0x74
 8002be2:	f7fd ff4f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7fd ff4c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002bec:	2084      	movs	r0, #132	; 0x84
 8002bee:	f7fd ff49 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fd ff46 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002bf8:	2093      	movs	r0, #147	; 0x93
 8002bfa:	f7fd ff43 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fd ff40 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002c04:	20a2      	movs	r0, #162	; 0xa2
 8002c06:	f7fd ff3d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fd ff3a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002c10:	20b3      	movs	r0, #179	; 0xb3
 8002c12:	f7fd ff37 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fd ff34 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002c1c:	20be      	movs	r0, #190	; 0xbe
 8002c1e:	f7fd ff31 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fd ff2e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c28:	20c4      	movs	r0, #196	; 0xc4
 8002c2a:	f7fd ff2b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fd ff28 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002c34:	20cd      	movs	r0, #205	; 0xcd
 8002c36:	f7fd ff25 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7fd ff22 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002c40:	20d3      	movs	r0, #211	; 0xd3
 8002c42:	f7fd ff1f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7fd ff1c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002c4c:	20dc      	movs	r0, #220	; 0xdc
 8002c4e:	f7fd ff19 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7fd ff16 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c58:	20f3      	movs	r0, #243	; 0xf3
 8002c5a:	f7fd ff13 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fd ff10 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002c64:	20e6      	movs	r0, #230	; 0xe6
 8002c66:	f7fd fee9 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002c6a:	2011      	movs	r0, #17
 8002c6c:	f7fd ff0a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fd ff07 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002c76:	2034      	movs	r0, #52	; 0x34
 8002c78:	f7fd ff04 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fd ff01 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002c82:	2056      	movs	r0, #86	; 0x56
 8002c84:	f7fd fefe 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fd fefb 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002c8e:	2076      	movs	r0, #118	; 0x76
 8002c90:	f7fd fef8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd fef5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002c9a:	2077      	movs	r0, #119	; 0x77
 8002c9c:	f7fd fef2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fd feef 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002ca6:	2066      	movs	r0, #102	; 0x66
 8002ca8:	f7fd feec 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fd fee9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002cb2:	2088      	movs	r0, #136	; 0x88
 8002cb4:	f7fd fee6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7fd fee3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cbe:	2099      	movs	r0, #153	; 0x99
 8002cc0:	f7fd fee0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7fd fedd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002cca:	20bb      	movs	r0, #187	; 0xbb
 8002ccc:	f7fd feda 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7fd fed7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cd6:	2099      	movs	r0, #153	; 0x99
 8002cd8:	f7fd fed4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fd fed1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002ce2:	2066      	movs	r0, #102	; 0x66
 8002ce4:	f7fd fece 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd fecb 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002cee:	2055      	movs	r0, #85	; 0x55
 8002cf0:	f7fd fec8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7fd fec5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002cfa:	2055      	movs	r0, #85	; 0x55
 8002cfc:	f7fd fec2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fd febf 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002d06:	2045      	movs	r0, #69	; 0x45
 8002d08:	f7fd febc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fd feb9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002d12:	2043      	movs	r0, #67	; 0x43
 8002d14:	f7fd feb6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7fd feb3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d1e:	2044      	movs	r0, #68	; 0x44
 8002d20:	f7fd feb0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd fead 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8002d2a:	20e7      	movs	r0, #231	; 0xe7
 8002d2c:	f7fd fe86 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002d30:	2032      	movs	r0, #50	; 0x32
 8002d32:	f7fd fea7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd fea4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002d3c:	2055      	movs	r0, #85	; 0x55
 8002d3e:	f7fd fea1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7fd fe9e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002d48:	2076      	movs	r0, #118	; 0x76
 8002d4a:	f7fd fe9b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fd fe98 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002d54:	2066      	movs	r0, #102	; 0x66
 8002d56:	f7fd fe95 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7fd fe92 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002d60:	2067      	movs	r0, #103	; 0x67
 8002d62:	f7fd fe8f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fd fe8c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002d6c:	2067      	movs	r0, #103	; 0x67
 8002d6e:	f7fd fe89 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7fd fe86 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002d78:	2087      	movs	r0, #135	; 0x87
 8002d7a:	f7fd fe83 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fd fe80 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d84:	2099      	movs	r0, #153	; 0x99
 8002d86:	f7fd fe7d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd fe7a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002d90:	20bb      	movs	r0, #187	; 0xbb
 8002d92:	f7fd fe77 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd fe74 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d9c:	2099      	movs	r0, #153	; 0x99
 8002d9e:	f7fd fe71 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd fe6e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002da8:	2077      	movs	r0, #119	; 0x77
 8002daa:	f7fd fe6b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd fe68 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002db4:	2044      	movs	r0, #68	; 0x44
 8002db6:	f7fd fe65 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fd fe62 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002dc0:	2056      	movs	r0, #86	; 0x56
 8002dc2:	f7fd fe5f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7fd fe5c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002dcc:	2023      	movs	r0, #35	; 0x23
 8002dce:	f7fd fe59 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fd fe56 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002dd8:	2033      	movs	r0, #51	; 0x33
 8002dda:	f7fd fe53 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fd fe50 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002de4:	2045      	movs	r0, #69	; 0x45
 8002de6:	f7fd fe4d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fd fe4a 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8002df0:	20e8      	movs	r0, #232	; 0xe8
 8002df2:	f7fd fe23 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fd fe44 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fe41 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e02:	2099      	movs	r0, #153	; 0x99
 8002e04:	f7fd fe3e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fe3b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002e0e:	2087      	movs	r0, #135	; 0x87
 8002e10:	f7fd fe38 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fe35 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002e1a:	2088      	movs	r0, #136	; 0x88
 8002e1c:	f7fd fe32 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd fe2f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002e26:	2077      	movs	r0, #119	; 0x77
 8002e28:	f7fd fe2c 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fe29 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002e32:	2066      	movs	r0, #102	; 0x66
 8002e34:	f7fd fe26 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fe23 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002e3e:	2088      	movs	r0, #136	; 0x88
 8002e40:	f7fd fe20 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd fe1d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8002e4a:	20aa      	movs	r0, #170	; 0xaa
 8002e4c:	f7fd fe1a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fe17 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002e56:	20bb      	movs	r0, #187	; 0xbb
 8002e58:	f7fd fe14 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fe11 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e62:	2099      	movs	r0, #153	; 0x99
 8002e64:	f7fd fe0e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd fe0b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002e6e:	2066      	movs	r0, #102	; 0x66
 8002e70:	f7fd fe08 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd fe05 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002e7a:	2055      	movs	r0, #85	; 0x55
 8002e7c:	f7fd fe02 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd fdff 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002e86:	2055      	movs	r0, #85	; 0x55
 8002e88:	f7fd fdfc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fd fdf9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e92:	2044      	movs	r0, #68	; 0x44
 8002e94:	f7fd fdf6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fdf3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e9e:	2044      	movs	r0, #68	; 0x44
 8002ea0:	f7fd fdf0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7fd fded 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002eaa:	2055      	movs	r0, #85	; 0x55
 8002eac:	f7fd fdea 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fd fde7 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8002eb6:	20e9      	movs	r0, #233	; 0xe9
 8002eb8:	f7fd fdc0 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002ebc:	20aa      	movs	r0, #170	; 0xaa
 8002ebe:	f7fd fde1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fd fdde 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fd fddb 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fd fdd8 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7fd fdb1 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002eda:	20aa      	movs	r0, #170	; 0xaa
 8002edc:	f7fd fdd2 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8002ee0:	20cf      	movs	r0, #207	; 0xcf
 8002ee2:	f7fd fdab 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd fdcc 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7fd fdc9 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fd fdc6 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7fd fdc3 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fdc0 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7fd fdbd 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fdba 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7fd fdb7 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fd fdb4 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7fd fdb1 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd fdae 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7fd fdab 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fd fda8 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fd fda5 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fda2 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fd fd9f 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fd9c 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8002f4c:	20f0      	movs	r0, #240	; 0xf0
 8002f4e:	f7fd fd75 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fd96 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002f58:	2050      	movs	r0, #80	; 0x50
 8002f5a:	f7fd fd93 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fd90 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7fd fd8d 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7fd fd8a 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8002f70:	20f3      	movs	r0, #243	; 0xf3
 8002f72:	f7fd fd63 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fd fd84 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8002f7c:	20f9      	movs	r0, #249	; 0xf9
 8002f7e:	f7fd fd5d 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8002f82:	2006      	movs	r0, #6
 8002f84:	f7fd fd7e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002f88:	2010      	movs	r0, #16
 8002f8a:	f7fd fd7b 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002f8e:	2029      	movs	r0, #41	; 0x29
 8002f90:	f7fd fd78 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fd fd75 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8002f9a:	203a      	movs	r0, #58	; 0x3a
 8002f9c:	f7fd fd4e 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8002fa0:	2055      	movs	r0, #85	; 0x55
 8002fa2:	f7fd fd6f 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8002fa6:	2011      	movs	r0, #17
 8002fa8:	f7fd fd48 	bl	8000a3c <LCD_WR_REG>
		HAL_Delay(100);
 8002fac:	2064      	movs	r0, #100	; 0x64
 8002fae:	f002 ff51 	bl	8005e54 <HAL_Delay>
		LCD_WR_REG(0x29);
 8002fb2:	2029      	movs	r0, #41	; 0x29
 8002fb4:	f7fd fd42 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8002fb8:	2035      	movs	r0, #53	; 0x35
 8002fba:	f7fd fd3f 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f7fd fd60 	bl	8000a84 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8002fc4:	2051      	movs	r0, #81	; 0x51
 8002fc6:	f7fd fd39 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8002fca:	20ff      	movs	r0, #255	; 0xff
 8002fcc:	f7fd fd5a 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8002fd0:	2053      	movs	r0, #83	; 0x53
 8002fd2:	f7fd fd33 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8002fd6:	202c      	movs	r0, #44	; 0x2c
 8002fd8:	f7fd fd54 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8002fdc:	2055      	movs	r0, #85	; 0x55
 8002fde:	f7fd fd2d 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8002fe2:	2082      	movs	r0, #130	; 0x82
 8002fe4:	f7fd fd4e 	bl	8000a84 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8002fe8:	202c      	movs	r0, #44	; 0x2c
 8002fea:	f7fd fd27 	bl	8000a3c <LCD_WR_REG>
 8002fee:	f002 bca1 	b.w	8005934 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8002ff2:	4b04      	ldr	r3, [pc, #16]	; (8003004 <LCD_Init+0x1504>)
 8002ff4:	889b      	ldrh	r3, [r3, #4]
 8002ff6:	f245 5210 	movw	r2, #21776	; 0x5510
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	f040 8782 	bne.w	8003f04 <LCD_Init+0x2404>
 8003000:	e002      	b.n	8003008 <LCD_Init+0x1508>
 8003002:	bf00      	nop
 8003004:	20000fcc 	.word	0x20000fcc
		LCD_WriteReg(0xF000, 0x55);
 8003008:	2155      	movs	r1, #85	; 0x55
 800300a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800300e:	f7fd fda1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003012:	21aa      	movs	r1, #170	; 0xaa
 8003014:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003018:	f7fd fd9c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800301c:	2152      	movs	r1, #82	; 0x52
 800301e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003022:	f7fd fd97 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003026:	2108      	movs	r1, #8
 8003028:	f24f 0003 	movw	r0, #61443	; 0xf003
 800302c:	f7fd fd92 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003030:	2101      	movs	r1, #1
 8003032:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003036:	f7fd fd8d 	bl	8000b54 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 800303a:	210d      	movs	r1, #13
 800303c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003040:	f7fd fd88 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8003044:	210d      	movs	r1, #13
 8003046:	f24b 0001 	movw	r0, #45057	; 0xb001
 800304a:	f7fd fd83 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 800304e:	210d      	movs	r1, #13
 8003050:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003054:	f7fd fd7e 	bl	8000b54 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003058:	2134      	movs	r1, #52	; 0x34
 800305a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800305e:	f7fd fd79 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8003062:	2134      	movs	r1, #52	; 0x34
 8003064:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003068:	f7fd fd74 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 800306c:	2134      	movs	r1, #52	; 0x34
 800306e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003072:	f7fd fd6f 	bl	8000b54 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003076:	210d      	movs	r1, #13
 8003078:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800307c:	f7fd fd6a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003080:	210d      	movs	r1, #13
 8003082:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003086:	f7fd fd65 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800308a:	210d      	movs	r1, #13
 800308c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003090:	f7fd fd60 	bl	8000b54 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8003094:	2134      	movs	r1, #52	; 0x34
 8003096:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800309a:	f7fd fd5b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 800309e:	2134      	movs	r1, #52	; 0x34
 80030a0:	f24b 7001 	movw	r0, #46849	; 0xb701
 80030a4:	f7fd fd56 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80030a8:	2134      	movs	r1, #52	; 0x34
 80030aa:	f24b 7002 	movw	r0, #46850	; 0xb702
 80030ae:	f7fd fd51 	bl	8000b54 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80030b2:	2100      	movs	r1, #0
 80030b4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80030b8:	f7fd fd4c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80030bc:	2100      	movs	r1, #0
 80030be:	f24b 2001 	movw	r0, #45569	; 0xb201
 80030c2:	f7fd fd47 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 80030c6:	2100      	movs	r1, #0
 80030c8:	f24b 2002 	movw	r0, #45570	; 0xb202
 80030cc:	f7fd fd42 	bl	8000b54 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80030d0:	2124      	movs	r1, #36	; 0x24
 80030d2:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80030d6:	f7fd fd3d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80030da:	2124      	movs	r1, #36	; 0x24
 80030dc:	f64b 0001 	movw	r0, #47105	; 0xb801
 80030e0:	f7fd fd38 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80030e4:	2124      	movs	r1, #36	; 0x24
 80030e6:	f64b 0002 	movw	r0, #47106	; 0xb802
 80030ea:	f7fd fd33 	bl	8000b54 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80030ee:	2101      	movs	r1, #1
 80030f0:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80030f4:	f7fd fd2e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80030f8:	210f      	movs	r1, #15
 80030fa:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80030fe:	f7fd fd29 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003102:	210f      	movs	r1, #15
 8003104:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003108:	f7fd fd24 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800310c:	210f      	movs	r1, #15
 800310e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003112:	f7fd fd1f 	bl	8000b54 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003116:	2134      	movs	r1, #52	; 0x34
 8003118:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800311c:	f7fd fd1a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003120:	2134      	movs	r1, #52	; 0x34
 8003122:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003126:	f7fd fd15 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800312a:	2134      	movs	r1, #52	; 0x34
 800312c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003130:	f7fd fd10 	bl	8000b54 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003134:	2108      	movs	r1, #8
 8003136:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800313a:	f7fd fd0b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800313e:	2108      	movs	r1, #8
 8003140:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003144:	f7fd fd06 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003148:	2108      	movs	r1, #8
 800314a:	f24b 5002 	movw	r0, #46338	; 0xb502
 800314e:	f7fd fd01 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003152:	2103      	movs	r1, #3
 8003154:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003158:	f7fd fcfc 	bl	8000b54 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800315c:	2124      	movs	r1, #36	; 0x24
 800315e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003162:	f7fd fcf7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8003166:	2124      	movs	r1, #36	; 0x24
 8003168:	f64b 2001 	movw	r0, #47617	; 0xba01
 800316c:	f7fd fcf2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003170:	2124      	movs	r1, #36	; 0x24
 8003172:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003176:	f7fd fced 	bl	8000b54 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800317a:	2100      	movs	r1, #0
 800317c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003180:	f7fd fce8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003184:	2178      	movs	r1, #120	; 0x78
 8003186:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800318a:	f7fd fce3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800318e:	2100      	movs	r1, #0
 8003190:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003194:	f7fd fcde 	bl	8000b54 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003198:	2100      	movs	r1, #0
 800319a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800319e:	f7fd fcd9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80031a2:	2178      	movs	r1, #120	; 0x78
 80031a4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80031a8:	f7fd fcd4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80031ac:	2100      	movs	r1, #0
 80031ae:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80031b2:	f7fd fccf 	bl	8000b54 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80031b6:	2100      	movs	r1, #0
 80031b8:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80031bc:	f7fd fcca 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80031c0:	2164      	movs	r1, #100	; 0x64
 80031c2:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80031c6:	f7fd fcc5 	bl	8000b54 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80031ca:	2100      	movs	r1, #0
 80031cc:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80031d0:	f7fd fcc0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80031d4:	2133      	movs	r1, #51	; 0x33
 80031d6:	f24d 1001 	movw	r0, #53505	; 0xd101
 80031da:	f7fd fcbb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80031de:	2100      	movs	r1, #0
 80031e0:	f24d 1002 	movw	r0, #53506	; 0xd102
 80031e4:	f7fd fcb6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80031e8:	2134      	movs	r1, #52	; 0x34
 80031ea:	f24d 1003 	movw	r0, #53507	; 0xd103
 80031ee:	f7fd fcb1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80031f2:	2100      	movs	r1, #0
 80031f4:	f24d 1004 	movw	r0, #53508	; 0xd104
 80031f8:	f7fd fcac 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80031fc:	213a      	movs	r1, #58	; 0x3a
 80031fe:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003202:	f7fd fca7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003206:	2100      	movs	r1, #0
 8003208:	f24d 1006 	movw	r0, #53510	; 0xd106
 800320c:	f7fd fca2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003210:	214a      	movs	r1, #74	; 0x4a
 8003212:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003216:	f7fd fc9d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800321a:	2100      	movs	r1, #0
 800321c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003220:	f7fd fc98 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003224:	215c      	movs	r1, #92	; 0x5c
 8003226:	f24d 1009 	movw	r0, #53513	; 0xd109
 800322a:	f7fd fc93 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 800322e:	2100      	movs	r1, #0
 8003230:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003234:	f7fd fc8e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003238:	2181      	movs	r1, #129	; 0x81
 800323a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800323e:	f7fd fc89 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8003242:	2100      	movs	r1, #0
 8003244:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003248:	f7fd fc84 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 800324c:	21a6      	movs	r1, #166	; 0xa6
 800324e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003252:	f7fd fc7f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003256:	2100      	movs	r1, #0
 8003258:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800325c:	f7fd fc7a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003260:	21e5      	movs	r1, #229	; 0xe5
 8003262:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003266:	f7fd fc75 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 800326a:	2101      	movs	r1, #1
 800326c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003270:	f7fd fc70 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003274:	2113      	movs	r1, #19
 8003276:	f24d 1011 	movw	r0, #53521	; 0xd111
 800327a:	f7fd fc6b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800327e:	2101      	movs	r1, #1
 8003280:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003284:	f7fd fc66 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003288:	2154      	movs	r1, #84	; 0x54
 800328a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800328e:	f7fd fc61 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8003292:	2101      	movs	r1, #1
 8003294:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003298:	f7fd fc5c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 800329c:	2182      	movs	r1, #130	; 0x82
 800329e:	f24d 1015 	movw	r0, #53525	; 0xd115
 80032a2:	f7fd fc57 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80032a6:	2101      	movs	r1, #1
 80032a8:	f24d 1016 	movw	r0, #53526	; 0xd116
 80032ac:	f7fd fc52 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80032b0:	21ca      	movs	r1, #202	; 0xca
 80032b2:	f24d 1017 	movw	r0, #53527	; 0xd117
 80032b6:	f7fd fc4d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80032ba:	2102      	movs	r1, #2
 80032bc:	f24d 1018 	movw	r0, #53528	; 0xd118
 80032c0:	f7fd fc48 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80032c4:	2100      	movs	r1, #0
 80032c6:	f24d 1019 	movw	r0, #53529	; 0xd119
 80032ca:	f7fd fc43 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80032ce:	2102      	movs	r1, #2
 80032d0:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80032d4:	f7fd fc3e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80032d8:	2101      	movs	r1, #1
 80032da:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80032de:	f7fd fc39 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80032e2:	2102      	movs	r1, #2
 80032e4:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80032e8:	f7fd fc34 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80032ec:	2134      	movs	r1, #52	; 0x34
 80032ee:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80032f2:	f7fd fc2f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80032f6:	2102      	movs	r1, #2
 80032f8:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80032fc:	f7fd fc2a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003300:	2167      	movs	r1, #103	; 0x67
 8003302:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003306:	f7fd fc25 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800330a:	2102      	movs	r1, #2
 800330c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003310:	f7fd fc20 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003314:	2184      	movs	r1, #132	; 0x84
 8003316:	f24d 1021 	movw	r0, #53537	; 0xd121
 800331a:	f7fd fc1b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 800331e:	2102      	movs	r1, #2
 8003320:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003324:	f7fd fc16 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003328:	21a4      	movs	r1, #164	; 0xa4
 800332a:	f24d 1023 	movw	r0, #53539	; 0xd123
 800332e:	f7fd fc11 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003332:	2102      	movs	r1, #2
 8003334:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003338:	f7fd fc0c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 800333c:	21b7      	movs	r1, #183	; 0xb7
 800333e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003342:	f7fd fc07 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003346:	2102      	movs	r1, #2
 8003348:	f24d 1026 	movw	r0, #53542	; 0xd126
 800334c:	f7fd fc02 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003350:	21cf      	movs	r1, #207	; 0xcf
 8003352:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003356:	f7fd fbfd 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 800335a:	2102      	movs	r1, #2
 800335c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003360:	f7fd fbf8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8003364:	21de      	movs	r1, #222	; 0xde
 8003366:	f24d 1029 	movw	r0, #53545	; 0xd129
 800336a:	f7fd fbf3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 800336e:	2102      	movs	r1, #2
 8003370:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003374:	f7fd fbee 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003378:	21f2      	movs	r1, #242	; 0xf2
 800337a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800337e:	f7fd fbe9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003382:	2102      	movs	r1, #2
 8003384:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003388:	f7fd fbe4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 800338c:	21fe      	movs	r1, #254	; 0xfe
 800338e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003392:	f7fd fbdf 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8003396:	2103      	movs	r1, #3
 8003398:	f24d 102e 	movw	r0, #53550	; 0xd12e
 800339c:	f7fd fbda 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80033a0:	2110      	movs	r1, #16
 80033a2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80033a6:	f7fd fbd5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80033aa:	2103      	movs	r1, #3
 80033ac:	f24d 1030 	movw	r0, #53552	; 0xd130
 80033b0:	f7fd fbd0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80033b4:	2133      	movs	r1, #51	; 0x33
 80033b6:	f24d 1031 	movw	r0, #53553	; 0xd131
 80033ba:	f7fd fbcb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80033be:	2103      	movs	r1, #3
 80033c0:	f24d 1032 	movw	r0, #53554	; 0xd132
 80033c4:	f7fd fbc6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80033c8:	216d      	movs	r1, #109	; 0x6d
 80033ca:	f24d 1033 	movw	r0, #53555	; 0xd133
 80033ce:	f7fd fbc1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80033d2:	2100      	movs	r1, #0
 80033d4:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80033d8:	f7fd fbbc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80033dc:	2133      	movs	r1, #51	; 0x33
 80033de:	f24d 2001 	movw	r0, #53761	; 0xd201
 80033e2:	f7fd fbb7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80033e6:	2100      	movs	r1, #0
 80033e8:	f24d 2002 	movw	r0, #53762	; 0xd202
 80033ec:	f7fd fbb2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80033f0:	2134      	movs	r1, #52	; 0x34
 80033f2:	f24d 2003 	movw	r0, #53763	; 0xd203
 80033f6:	f7fd fbad 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80033fa:	2100      	movs	r1, #0
 80033fc:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003400:	f7fd fba8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003404:	213a      	movs	r1, #58	; 0x3a
 8003406:	f24d 2005 	movw	r0, #53765	; 0xd205
 800340a:	f7fd fba3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 800340e:	2100      	movs	r1, #0
 8003410:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003414:	f7fd fb9e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003418:	214a      	movs	r1, #74	; 0x4a
 800341a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800341e:	f7fd fb99 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003422:	2100      	movs	r1, #0
 8003424:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003428:	f7fd fb94 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 800342c:	215c      	movs	r1, #92	; 0x5c
 800342e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003432:	f7fd fb8f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003436:	2100      	movs	r1, #0
 8003438:	f24d 200a 	movw	r0, #53770	; 0xd20a
 800343c:	f7fd fb8a 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003440:	2181      	movs	r1, #129	; 0x81
 8003442:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003446:	f7fd fb85 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 800344a:	2100      	movs	r1, #0
 800344c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003450:	f7fd fb80 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003454:	21a6      	movs	r1, #166	; 0xa6
 8003456:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800345a:	f7fd fb7b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 800345e:	2100      	movs	r1, #0
 8003460:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003464:	f7fd fb76 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003468:	21e5      	movs	r1, #229	; 0xe5
 800346a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800346e:	f7fd fb71 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003472:	2101      	movs	r1, #1
 8003474:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003478:	f7fd fb6c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 800347c:	2113      	movs	r1, #19
 800347e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003482:	f7fd fb67 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003486:	2101      	movs	r1, #1
 8003488:	f24d 2012 	movw	r0, #53778	; 0xd212
 800348c:	f7fd fb62 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003490:	2154      	movs	r1, #84	; 0x54
 8003492:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003496:	f7fd fb5d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 800349a:	2101      	movs	r1, #1
 800349c:	f24d 2014 	movw	r0, #53780	; 0xd214
 80034a0:	f7fd fb58 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80034a4:	2182      	movs	r1, #130	; 0x82
 80034a6:	f24d 2015 	movw	r0, #53781	; 0xd215
 80034aa:	f7fd fb53 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80034ae:	2101      	movs	r1, #1
 80034b0:	f24d 2016 	movw	r0, #53782	; 0xd216
 80034b4:	f7fd fb4e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 80034b8:	21ca      	movs	r1, #202	; 0xca
 80034ba:	f24d 2017 	movw	r0, #53783	; 0xd217
 80034be:	f7fd fb49 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 80034c2:	2102      	movs	r1, #2
 80034c4:	f24d 2018 	movw	r0, #53784	; 0xd218
 80034c8:	f7fd fb44 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 80034cc:	2100      	movs	r1, #0
 80034ce:	f24d 2019 	movw	r0, #53785	; 0xd219
 80034d2:	f7fd fb3f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 80034d6:	2102      	movs	r1, #2
 80034d8:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80034dc:	f7fd fb3a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 80034e0:	2101      	movs	r1, #1
 80034e2:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80034e6:	f7fd fb35 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 80034ea:	2102      	movs	r1, #2
 80034ec:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80034f0:	f7fd fb30 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80034f4:	2134      	movs	r1, #52	; 0x34
 80034f6:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80034fa:	f7fd fb2b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80034fe:	2102      	movs	r1, #2
 8003500:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003504:	f7fd fb26 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003508:	2167      	movs	r1, #103	; 0x67
 800350a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800350e:	f7fd fb21 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003512:	2102      	movs	r1, #2
 8003514:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003518:	f7fd fb1c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 800351c:	2184      	movs	r1, #132	; 0x84
 800351e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003522:	f7fd fb17 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003526:	2102      	movs	r1, #2
 8003528:	f24d 2022 	movw	r0, #53794	; 0xd222
 800352c:	f7fd fb12 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003530:	21a4      	movs	r1, #164	; 0xa4
 8003532:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003536:	f7fd fb0d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 800353a:	2102      	movs	r1, #2
 800353c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003540:	f7fd fb08 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003544:	21b7      	movs	r1, #183	; 0xb7
 8003546:	f24d 2025 	movw	r0, #53797	; 0xd225
 800354a:	f7fd fb03 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 800354e:	2102      	movs	r1, #2
 8003550:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003554:	f7fd fafe 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003558:	21cf      	movs	r1, #207	; 0xcf
 800355a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800355e:	f7fd faf9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003562:	2102      	movs	r1, #2
 8003564:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003568:	f7fd faf4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 800356c:	21de      	movs	r1, #222	; 0xde
 800356e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003572:	f7fd faef 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003576:	2102      	movs	r1, #2
 8003578:	f24d 202a 	movw	r0, #53802	; 0xd22a
 800357c:	f7fd faea 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003580:	21f2      	movs	r1, #242	; 0xf2
 8003582:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003586:	f7fd fae5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 800358a:	2102      	movs	r1, #2
 800358c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003590:	f7fd fae0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003594:	21fe      	movs	r1, #254	; 0xfe
 8003596:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800359a:	f7fd fadb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 800359e:	2103      	movs	r1, #3
 80035a0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80035a4:	f7fd fad6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80035a8:	2110      	movs	r1, #16
 80035aa:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80035ae:	f7fd fad1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 80035b2:	2103      	movs	r1, #3
 80035b4:	f24d 2030 	movw	r0, #53808	; 0xd230
 80035b8:	f7fd facc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 80035bc:	2133      	movs	r1, #51	; 0x33
 80035be:	f24d 2031 	movw	r0, #53809	; 0xd231
 80035c2:	f7fd fac7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 80035c6:	2103      	movs	r1, #3
 80035c8:	f24d 2032 	movw	r0, #53810	; 0xd232
 80035cc:	f7fd fac2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 80035d0:	216d      	movs	r1, #109	; 0x6d
 80035d2:	f24d 2033 	movw	r0, #53811	; 0xd233
 80035d6:	f7fd fabd 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 80035da:	2100      	movs	r1, #0
 80035dc:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80035e0:	f7fd fab8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 80035e4:	2133      	movs	r1, #51	; 0x33
 80035e6:	f24d 3001 	movw	r0, #54017	; 0xd301
 80035ea:	f7fd fab3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 80035ee:	2100      	movs	r1, #0
 80035f0:	f24d 3002 	movw	r0, #54018	; 0xd302
 80035f4:	f7fd faae 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80035f8:	2134      	movs	r1, #52	; 0x34
 80035fa:	f24d 3003 	movw	r0, #54019	; 0xd303
 80035fe:	f7fd faa9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003602:	2100      	movs	r1, #0
 8003604:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003608:	f7fd faa4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 800360c:	213a      	movs	r1, #58	; 0x3a
 800360e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003612:	f7fd fa9f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003616:	2100      	movs	r1, #0
 8003618:	f24d 3006 	movw	r0, #54022	; 0xd306
 800361c:	f7fd fa9a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003620:	214a      	movs	r1, #74	; 0x4a
 8003622:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003626:	f7fd fa95 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 800362a:	2100      	movs	r1, #0
 800362c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003630:	f7fd fa90 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003634:	215c      	movs	r1, #92	; 0x5c
 8003636:	f24d 3009 	movw	r0, #54025	; 0xd309
 800363a:	f7fd fa8b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 800363e:	2100      	movs	r1, #0
 8003640:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003644:	f7fd fa86 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003648:	2181      	movs	r1, #129	; 0x81
 800364a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800364e:	f7fd fa81 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003652:	2100      	movs	r1, #0
 8003654:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003658:	f7fd fa7c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 800365c:	21a6      	movs	r1, #166	; 0xa6
 800365e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003662:	f7fd fa77 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003666:	2100      	movs	r1, #0
 8003668:	f24d 300e 	movw	r0, #54030	; 0xd30e
 800366c:	f7fd fa72 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003670:	21e5      	movs	r1, #229	; 0xe5
 8003672:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003676:	f7fd fa6d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 800367a:	2101      	movs	r1, #1
 800367c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003680:	f7fd fa68 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003684:	2113      	movs	r1, #19
 8003686:	f24d 3011 	movw	r0, #54033	; 0xd311
 800368a:	f7fd fa63 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 800368e:	2101      	movs	r1, #1
 8003690:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003694:	f7fd fa5e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003698:	2154      	movs	r1, #84	; 0x54
 800369a:	f24d 3013 	movw	r0, #54035	; 0xd313
 800369e:	f7fd fa59 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80036a2:	2101      	movs	r1, #1
 80036a4:	f24d 3014 	movw	r0, #54036	; 0xd314
 80036a8:	f7fd fa54 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80036ac:	2182      	movs	r1, #130	; 0x82
 80036ae:	f24d 3015 	movw	r0, #54037	; 0xd315
 80036b2:	f7fd fa4f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 80036b6:	2101      	movs	r1, #1
 80036b8:	f24d 3016 	movw	r0, #54038	; 0xd316
 80036bc:	f7fd fa4a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 80036c0:	21ca      	movs	r1, #202	; 0xca
 80036c2:	f24d 3017 	movw	r0, #54039	; 0xd317
 80036c6:	f7fd fa45 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 80036ca:	2102      	movs	r1, #2
 80036cc:	f24d 3018 	movw	r0, #54040	; 0xd318
 80036d0:	f7fd fa40 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 80036d4:	2100      	movs	r1, #0
 80036d6:	f24d 3019 	movw	r0, #54041	; 0xd319
 80036da:	f7fd fa3b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 80036de:	2102      	movs	r1, #2
 80036e0:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80036e4:	f7fd fa36 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 80036e8:	2101      	movs	r1, #1
 80036ea:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80036ee:	f7fd fa31 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 80036f2:	2102      	movs	r1, #2
 80036f4:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80036f8:	f7fd fa2c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 80036fc:	2134      	movs	r1, #52	; 0x34
 80036fe:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003702:	f7fd fa27 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003706:	2102      	movs	r1, #2
 8003708:	f24d 301e 	movw	r0, #54046	; 0xd31e
 800370c:	f7fd fa22 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003710:	2167      	movs	r1, #103	; 0x67
 8003712:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003716:	f7fd fa1d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 800371a:	2102      	movs	r1, #2
 800371c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003720:	f7fd fa18 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003724:	2184      	movs	r1, #132	; 0x84
 8003726:	f24d 3021 	movw	r0, #54049	; 0xd321
 800372a:	f7fd fa13 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 800372e:	2102      	movs	r1, #2
 8003730:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003734:	f7fd fa0e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003738:	21a4      	movs	r1, #164	; 0xa4
 800373a:	f24d 3023 	movw	r0, #54051	; 0xd323
 800373e:	f7fd fa09 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003742:	2102      	movs	r1, #2
 8003744:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003748:	f7fd fa04 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 800374c:	21b7      	movs	r1, #183	; 0xb7
 800374e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003752:	f7fd f9ff 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003756:	2102      	movs	r1, #2
 8003758:	f24d 3026 	movw	r0, #54054	; 0xd326
 800375c:	f7fd f9fa 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003760:	21cf      	movs	r1, #207	; 0xcf
 8003762:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003766:	f7fd f9f5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 800376a:	2102      	movs	r1, #2
 800376c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003770:	f7fd f9f0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003774:	21de      	movs	r1, #222	; 0xde
 8003776:	f24d 3029 	movw	r0, #54057	; 0xd329
 800377a:	f7fd f9eb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 800377e:	2102      	movs	r1, #2
 8003780:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003784:	f7fd f9e6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003788:	21f2      	movs	r1, #242	; 0xf2
 800378a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 800378e:	f7fd f9e1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003792:	2102      	movs	r1, #2
 8003794:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003798:	f7fd f9dc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 800379c:	21fe      	movs	r1, #254	; 0xfe
 800379e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80037a2:	f7fd f9d7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 80037a6:	2103      	movs	r1, #3
 80037a8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80037ac:	f7fd f9d2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 80037b0:	2110      	movs	r1, #16
 80037b2:	f24d 302f 	movw	r0, #54063	; 0xd32f
 80037b6:	f7fd f9cd 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 80037ba:	2103      	movs	r1, #3
 80037bc:	f24d 3030 	movw	r0, #54064	; 0xd330
 80037c0:	f7fd f9c8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 80037c4:	2133      	movs	r1, #51	; 0x33
 80037c6:	f24d 3031 	movw	r0, #54065	; 0xd331
 80037ca:	f7fd f9c3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 80037ce:	2103      	movs	r1, #3
 80037d0:	f24d 3032 	movw	r0, #54066	; 0xd332
 80037d4:	f7fd f9be 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 80037d8:	216d      	movs	r1, #109	; 0x6d
 80037da:	f24d 3033 	movw	r0, #54067	; 0xd333
 80037de:	f7fd f9b9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 80037e2:	2100      	movs	r1, #0
 80037e4:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80037e8:	f7fd f9b4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 80037ec:	2133      	movs	r1, #51	; 0x33
 80037ee:	f24d 4001 	movw	r0, #54273	; 0xd401
 80037f2:	f7fd f9af 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 80037f6:	2100      	movs	r1, #0
 80037f8:	f24d 4002 	movw	r0, #54274	; 0xd402
 80037fc:	f7fd f9aa 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003800:	2134      	movs	r1, #52	; 0x34
 8003802:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003806:	f7fd f9a5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 800380a:	2100      	movs	r1, #0
 800380c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003810:	f7fd f9a0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003814:	213a      	movs	r1, #58	; 0x3a
 8003816:	f24d 4005 	movw	r0, #54277	; 0xd405
 800381a:	f7fd f99b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 800381e:	2100      	movs	r1, #0
 8003820:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003824:	f7fd f996 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003828:	214a      	movs	r1, #74	; 0x4a
 800382a:	f24d 4007 	movw	r0, #54279	; 0xd407
 800382e:	f7fd f991 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003832:	2100      	movs	r1, #0
 8003834:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003838:	f7fd f98c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 800383c:	215c      	movs	r1, #92	; 0x5c
 800383e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003842:	f7fd f987 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003846:	2100      	movs	r1, #0
 8003848:	f24d 400a 	movw	r0, #54282	; 0xd40a
 800384c:	f7fd f982 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003850:	2181      	movs	r1, #129	; 0x81
 8003852:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003856:	f7fd f97d 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 800385a:	2100      	movs	r1, #0
 800385c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003860:	f7fd f978 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003864:	21a6      	movs	r1, #166	; 0xa6
 8003866:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800386a:	f7fd f973 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 800386e:	2100      	movs	r1, #0
 8003870:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003874:	f7fd f96e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003878:	21e5      	movs	r1, #229	; 0xe5
 800387a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800387e:	f7fd f969 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003882:	2101      	movs	r1, #1
 8003884:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003888:	f7fd f964 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 800388c:	2113      	movs	r1, #19
 800388e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003892:	f7fd f95f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003896:	2101      	movs	r1, #1
 8003898:	f24d 4012 	movw	r0, #54290	; 0xd412
 800389c:	f7fd f95a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 80038a0:	2154      	movs	r1, #84	; 0x54
 80038a2:	f24d 4013 	movw	r0, #54291	; 0xd413
 80038a6:	f7fd f955 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 80038aa:	2101      	movs	r1, #1
 80038ac:	f24d 4014 	movw	r0, #54292	; 0xd414
 80038b0:	f7fd f950 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 80038b4:	2182      	movs	r1, #130	; 0x82
 80038b6:	f24d 4015 	movw	r0, #54293	; 0xd415
 80038ba:	f7fd f94b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 80038be:	2101      	movs	r1, #1
 80038c0:	f24d 4016 	movw	r0, #54294	; 0xd416
 80038c4:	f7fd f946 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 80038c8:	21ca      	movs	r1, #202	; 0xca
 80038ca:	f24d 4017 	movw	r0, #54295	; 0xd417
 80038ce:	f7fd f941 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 80038d2:	2102      	movs	r1, #2
 80038d4:	f24d 4018 	movw	r0, #54296	; 0xd418
 80038d8:	f7fd f93c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 80038dc:	2100      	movs	r1, #0
 80038de:	f24d 4019 	movw	r0, #54297	; 0xd419
 80038e2:	f7fd f937 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 80038e6:	2102      	movs	r1, #2
 80038e8:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80038ec:	f7fd f932 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 80038f0:	2101      	movs	r1, #1
 80038f2:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80038f6:	f7fd f92d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 80038fa:	2102      	movs	r1, #2
 80038fc:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003900:	f7fd f928 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003904:	2134      	movs	r1, #52	; 0x34
 8003906:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800390a:	f7fd f923 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 800390e:	2102      	movs	r1, #2
 8003910:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003914:	f7fd f91e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003918:	2167      	movs	r1, #103	; 0x67
 800391a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800391e:	f7fd f919 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003922:	2102      	movs	r1, #2
 8003924:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003928:	f7fd f914 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 800392c:	2184      	movs	r1, #132	; 0x84
 800392e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003932:	f7fd f90f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003936:	2102      	movs	r1, #2
 8003938:	f24d 4022 	movw	r0, #54306	; 0xd422
 800393c:	f7fd f90a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003940:	21a4      	movs	r1, #164	; 0xa4
 8003942:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003946:	f7fd f905 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 800394a:	2102      	movs	r1, #2
 800394c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003950:	f7fd f900 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003954:	21b7      	movs	r1, #183	; 0xb7
 8003956:	f24d 4025 	movw	r0, #54309	; 0xd425
 800395a:	f7fd f8fb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 800395e:	2102      	movs	r1, #2
 8003960:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003964:	f7fd f8f6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003968:	21cf      	movs	r1, #207	; 0xcf
 800396a:	f24d 4027 	movw	r0, #54311	; 0xd427
 800396e:	f7fd f8f1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003972:	2102      	movs	r1, #2
 8003974:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003978:	f7fd f8ec 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 800397c:	21de      	movs	r1, #222	; 0xde
 800397e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003982:	f7fd f8e7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003986:	2102      	movs	r1, #2
 8003988:	f24d 402a 	movw	r0, #54314	; 0xd42a
 800398c:	f7fd f8e2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003990:	21f2      	movs	r1, #242	; 0xf2
 8003992:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003996:	f7fd f8dd 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 800399a:	2102      	movs	r1, #2
 800399c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80039a0:	f7fd f8d8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 80039a4:	21fe      	movs	r1, #254	; 0xfe
 80039a6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80039aa:	f7fd f8d3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 80039ae:	2103      	movs	r1, #3
 80039b0:	f24d 402e 	movw	r0, #54318	; 0xd42e
 80039b4:	f7fd f8ce 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 80039b8:	2110      	movs	r1, #16
 80039ba:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80039be:	f7fd f8c9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 80039c2:	2103      	movs	r1, #3
 80039c4:	f24d 4030 	movw	r0, #54320	; 0xd430
 80039c8:	f7fd f8c4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 80039cc:	2133      	movs	r1, #51	; 0x33
 80039ce:	f24d 4031 	movw	r0, #54321	; 0xd431
 80039d2:	f7fd f8bf 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 80039d6:	2103      	movs	r1, #3
 80039d8:	f24d 4032 	movw	r0, #54322	; 0xd432
 80039dc:	f7fd f8ba 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 80039e0:	216d      	movs	r1, #109	; 0x6d
 80039e2:	f24d 4033 	movw	r0, #54323	; 0xd433
 80039e6:	f7fd f8b5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 80039ea:	2100      	movs	r1, #0
 80039ec:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80039f0:	f7fd f8b0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 80039f4:	2133      	movs	r1, #51	; 0x33
 80039f6:	f24d 5001 	movw	r0, #54529	; 0xd501
 80039fa:	f7fd f8ab 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 80039fe:	2100      	movs	r1, #0
 8003a00:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003a04:	f7fd f8a6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003a08:	2134      	movs	r1, #52	; 0x34
 8003a0a:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003a0e:	f7fd f8a1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003a12:	2100      	movs	r1, #0
 8003a14:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003a18:	f7fd f89c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003a1c:	213a      	movs	r1, #58	; 0x3a
 8003a1e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003a22:	f7fd f897 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003a26:	2100      	movs	r1, #0
 8003a28:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003a2c:	f7fd f892 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003a30:	214a      	movs	r1, #74	; 0x4a
 8003a32:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003a36:	f7fd f88d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003a40:	f7fd f888 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003a44:	215c      	movs	r1, #92	; 0x5c
 8003a46:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003a4a:	f7fd f883 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003a4e:	2100      	movs	r1, #0
 8003a50:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003a54:	f7fd f87e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003a58:	2181      	movs	r1, #129	; 0x81
 8003a5a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003a5e:	f7fd f879 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003a62:	2100      	movs	r1, #0
 8003a64:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003a68:	f7fd f874 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003a6c:	21a6      	movs	r1, #166	; 0xa6
 8003a6e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003a72:	f7fd f86f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003a76:	2100      	movs	r1, #0
 8003a78:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003a7c:	f7fd f86a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003a80:	21e5      	movs	r1, #229	; 0xe5
 8003a82:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003a86:	f7fd f865 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003a90:	f7fd f860 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003a94:	2113      	movs	r1, #19
 8003a96:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003a9a:	f7fd f85b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003aa4:	f7fd f856 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003aa8:	2154      	movs	r1, #84	; 0x54
 8003aaa:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003aae:	f7fd f851 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003ab8:	f7fd f84c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003abc:	2182      	movs	r1, #130	; 0x82
 8003abe:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003ac2:	f7fd f847 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003acc:	f7fd f842 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003ad0:	21ca      	movs	r1, #202	; 0xca
 8003ad2:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003ad6:	f7fd f83d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003ada:	2102      	movs	r1, #2
 8003adc:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003ae0:	f7fd f838 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003aea:	f7fd f833 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003aee:	2102      	movs	r1, #2
 8003af0:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003af4:	f7fd f82e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003af8:	2101      	movs	r1, #1
 8003afa:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003afe:	f7fd f829 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003b02:	2102      	movs	r1, #2
 8003b04:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003b08:	f7fd f824 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003b0c:	2134      	movs	r1, #52	; 0x34
 8003b0e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003b12:	f7fd f81f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003b16:	2102      	movs	r1, #2
 8003b18:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003b1c:	f7fd f81a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003b20:	2167      	movs	r1, #103	; 0x67
 8003b22:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003b26:	f7fd f815 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003b30:	f7fd f810 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003b34:	2184      	movs	r1, #132	; 0x84
 8003b36:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003b3a:	f7fd f80b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003b3e:	2102      	movs	r1, #2
 8003b40:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003b44:	f7fd f806 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003b48:	21a4      	movs	r1, #164	; 0xa4
 8003b4a:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003b4e:	f7fd f801 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003b52:	2102      	movs	r1, #2
 8003b54:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003b58:	f7fc fffc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003b5c:	21b7      	movs	r1, #183	; 0xb7
 8003b5e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003b62:	f7fc fff7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003b66:	2102      	movs	r1, #2
 8003b68:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003b6c:	f7fc fff2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003b70:	21cf      	movs	r1, #207	; 0xcf
 8003b72:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003b76:	f7fc ffed 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003b80:	f7fc ffe8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003b84:	21de      	movs	r1, #222	; 0xde
 8003b86:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003b8a:	f7fc ffe3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003b8e:	2102      	movs	r1, #2
 8003b90:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003b94:	f7fc ffde 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003b98:	21f2      	movs	r1, #242	; 0xf2
 8003b9a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003b9e:	f7fc ffd9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003ba8:	f7fc ffd4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003bac:	21fe      	movs	r1, #254	; 0xfe
 8003bae:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003bb2:	f7fc ffcf 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003bbc:	f7fc ffca 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003bc0:	2110      	movs	r1, #16
 8003bc2:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003bc6:	f7fc ffc5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003bca:	2103      	movs	r1, #3
 8003bcc:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003bd0:	f7fc ffc0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003bd4:	2133      	movs	r1, #51	; 0x33
 8003bd6:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003bda:	f7fc ffbb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003bde:	2103      	movs	r1, #3
 8003be0:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003be4:	f7fc ffb6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003be8:	216d      	movs	r1, #109	; 0x6d
 8003bea:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003bee:	f7fc ffb1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003bf8:	f7fc ffac 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003bfc:	2133      	movs	r1, #51	; 0x33
 8003bfe:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003c02:	f7fc ffa7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003c06:	2100      	movs	r1, #0
 8003c08:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003c0c:	f7fc ffa2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003c10:	2134      	movs	r1, #52	; 0x34
 8003c12:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003c16:	f7fc ff9d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003c20:	f7fc ff98 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003c24:	213a      	movs	r1, #58	; 0x3a
 8003c26:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003c2a:	f7fc ff93 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003c34:	f7fc ff8e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003c38:	214a      	movs	r1, #74	; 0x4a
 8003c3a:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003c3e:	f7fc ff89 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003c42:	2100      	movs	r1, #0
 8003c44:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003c48:	f7fc ff84 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003c4c:	215c      	movs	r1, #92	; 0x5c
 8003c4e:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003c52:	f7fc ff7f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003c56:	2100      	movs	r1, #0
 8003c58:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003c5c:	f7fc ff7a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003c60:	2181      	movs	r1, #129	; 0x81
 8003c62:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003c66:	f7fc ff75 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003c70:	f7fc ff70 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003c74:	21a6      	movs	r1, #166	; 0xa6
 8003c76:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003c7a:	f7fc ff6b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003c84:	f7fc ff66 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003c88:	21e5      	movs	r1, #229	; 0xe5
 8003c8a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003c8e:	f7fc ff61 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003c92:	2101      	movs	r1, #1
 8003c94:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003c98:	f7fc ff5c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8003c9c:	2113      	movs	r1, #19
 8003c9e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003ca2:	f7fc ff57 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003cac:	f7fc ff52 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8003cb0:	2154      	movs	r1, #84	; 0x54
 8003cb2:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003cb6:	f7fc ff4d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8003cba:	2101      	movs	r1, #1
 8003cbc:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003cc0:	f7fc ff48 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8003cc4:	2182      	movs	r1, #130	; 0x82
 8003cc6:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003cca:	f7fc ff43 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8003cce:	2101      	movs	r1, #1
 8003cd0:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003cd4:	f7fc ff3e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8003cd8:	21ca      	movs	r1, #202	; 0xca
 8003cda:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003cde:	f7fc ff39 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003ce8:	f7fc ff34 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8003cec:	2100      	movs	r1, #0
 8003cee:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003cf2:	f7fc ff2f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003cfc:	f7fc ff2a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8003d00:	2101      	movs	r1, #1
 8003d02:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003d06:	f7fc ff25 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003d10:	f7fc ff20 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8003d14:	2134      	movs	r1, #52	; 0x34
 8003d16:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003d1a:	f7fc ff1b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8003d1e:	2102      	movs	r1, #2
 8003d20:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003d24:	f7fc ff16 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8003d28:	2167      	movs	r1, #103	; 0x67
 8003d2a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003d2e:	f7fc ff11 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8003d32:	2102      	movs	r1, #2
 8003d34:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003d38:	f7fc ff0c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8003d3c:	2184      	movs	r1, #132	; 0x84
 8003d3e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003d42:	f7fc ff07 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8003d46:	2102      	movs	r1, #2
 8003d48:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003d4c:	f7fc ff02 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8003d50:	21a4      	movs	r1, #164	; 0xa4
 8003d52:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003d56:	f7fc fefd 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003d60:	f7fc fef8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8003d64:	21b7      	movs	r1, #183	; 0xb7
 8003d66:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003d6a:	f7fc fef3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8003d6e:	2102      	movs	r1, #2
 8003d70:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003d74:	f7fc feee 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8003d78:	21cf      	movs	r1, #207	; 0xcf
 8003d7a:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003d7e:	f7fc fee9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8003d82:	2102      	movs	r1, #2
 8003d84:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003d88:	f7fc fee4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8003d8c:	21de      	movs	r1, #222	; 0xde
 8003d8e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003d92:	f7fc fedf 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8003d96:	2102      	movs	r1, #2
 8003d98:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003d9c:	f7fc feda 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8003da0:	21f2      	movs	r1, #242	; 0xf2
 8003da2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003da6:	f7fc fed5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8003daa:	2102      	movs	r1, #2
 8003dac:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003db0:	f7fc fed0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8003db4:	21fe      	movs	r1, #254	; 0xfe
 8003db6:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003dba:	f7fc fecb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8003dbe:	2103      	movs	r1, #3
 8003dc0:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003dc4:	f7fc fec6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8003dc8:	2110      	movs	r1, #16
 8003dca:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003dce:	f7fc fec1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8003dd2:	2103      	movs	r1, #3
 8003dd4:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003dd8:	f7fc febc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8003ddc:	2133      	movs	r1, #51	; 0x33
 8003dde:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003de2:	f7fc feb7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8003de6:	2103      	movs	r1, #3
 8003de8:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003dec:	f7fc feb2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8003df0:	216d      	movs	r1, #109	; 0x6d
 8003df2:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003df6:	f7fc fead 	bl	8000b54 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8003dfa:	2155      	movs	r1, #85	; 0x55
 8003dfc:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003e00:	f7fc fea8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003e04:	21aa      	movs	r1, #170	; 0xaa
 8003e06:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003e0a:	f7fc fea3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003e0e:	2152      	movs	r1, #82	; 0x52
 8003e10:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003e14:	f7fc fe9e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003e18:	2108      	movs	r1, #8
 8003e1a:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003e1e:	f7fc fe99 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8003e22:	2100      	movs	r1, #0
 8003e24:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003e28:	f7fc fe94 	bl	8000b54 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003e2c:	21cc      	movs	r1, #204	; 0xcc
 8003e2e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003e32:	f7fc fe8f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003e36:	2100      	movs	r1, #0
 8003e38:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003e3c:	f7fc fe8a 	bl	8000b54 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8003e40:	2105      	movs	r1, #5
 8003e42:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003e46:	f7fc fe85 	bl	8000b54 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8003e4a:	2170      	movs	r1, #112	; 0x70
 8003e4c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003e50:	f7fc fe80 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8003e54:	2170      	movs	r1, #112	; 0x70
 8003e56:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003e5a:	f7fc fe7b 	bl	8000b54 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8003e5e:	2101      	movs	r1, #1
 8003e60:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003e64:	f7fc fe76 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8003e68:	2103      	movs	r1, #3
 8003e6a:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003e6e:	f7fc fe71 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8003e72:	2103      	movs	r1, #3
 8003e74:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003e78:	f7fc fe6c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8003e7c:	2103      	movs	r1, #3
 8003e7e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003e82:	f7fc fe67 	bl	8000b54 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8003e86:	2102      	movs	r1, #2
 8003e88:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003e8c:	f7fc fe62 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8003e90:	2100      	movs	r1, #0
 8003e92:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003e96:	f7fc fe5d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003ea0:	f7fc fe58 	bl	8000b54 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8003ea4:	21d0      	movs	r1, #208	; 0xd0
 8003ea6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003eaa:	f7fc fe53 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8003eae:	2102      	movs	r1, #2
 8003eb0:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003eb4:	f7fc fe4e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8003eb8:	2150      	movs	r1, #80	; 0x50
 8003eba:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003ebe:	f7fc fe49 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8003ec2:	2150      	movs	r1, #80	; 0x50
 8003ec4:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003ec8:	f7fc fe44 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8003ecc:	2150      	movs	r1, #80	; 0x50
 8003ece:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003ed2:	f7fc fe3f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003edc:	f7fc fe3a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8003ee0:	2155      	movs	r1, #85	; 0x55
 8003ee2:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003ee6:	f7fc fe35 	bl	8000b54 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003eea:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003eee:	f7fc fda5 	bl	8000a3c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	f001 ffae 	bl	8005e54 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8003ef8:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003efc:	f7fc fd9e 	bl	8000a3c <LCD_WR_REG>
 8003f00:	f001 bd18 	b.w	8005934 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8003f04:	4bec      	ldr	r3, [pc, #944]	; (80042b8 <LCD_Init+0x27b8>)
 8003f06:	889b      	ldrh	r3, [r3, #4]
 8003f08:	f249 3225 	movw	r2, #37669	; 0x9325
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	f040 80d7 	bne.w	80040c0 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8003f12:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8003f16:	20e5      	movs	r0, #229	; 0xe5
 8003f18:	f7fc fe1c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8003f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f20:	2001      	movs	r0, #1
 8003f22:	f7fc fe17 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8003f26:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003f2a:	2002      	movs	r0, #2
 8003f2c:	f7fc fe12 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8003f30:	f241 0130 	movw	r1, #4144	; 0x1030
 8003f34:	2003      	movs	r0, #3
 8003f36:	f7fc fe0d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	2004      	movs	r0, #4
 8003f3e:	f7fc fe09 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8003f42:	f240 2102 	movw	r1, #514	; 0x202
 8003f46:	2008      	movs	r0, #8
 8003f48:	f7fc fe04 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	2009      	movs	r0, #9
 8003f50:	f7fc fe00 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8003f54:	2100      	movs	r1, #0
 8003f56:	200a      	movs	r0, #10
 8003f58:	f7fc fdfc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	200c      	movs	r0, #12
 8003f60:	f7fc fdf8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8003f64:	2100      	movs	r1, #0
 8003f66:	200d      	movs	r0, #13
 8003f68:	f7fc fdf4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	200f      	movs	r0, #15
 8003f70:	f7fc fdf0 	bl	8000b54 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8003f74:	2100      	movs	r1, #0
 8003f76:	2010      	movs	r0, #16
 8003f78:	f7fc fdec 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8003f7c:	2107      	movs	r1, #7
 8003f7e:	2011      	movs	r0, #17
 8003f80:	f7fc fde8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8003f84:	2100      	movs	r1, #0
 8003f86:	2012      	movs	r0, #18
 8003f88:	f7fc fde4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	2013      	movs	r0, #19
 8003f90:	f7fc fde0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8003f94:	2100      	movs	r1, #0
 8003f96:	2007      	movs	r0, #7
 8003f98:	f7fc fddc 	bl	8000b54 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8003f9c:	f241 6190 	movw	r1, #5776	; 0x1690
 8003fa0:	2010      	movs	r0, #16
 8003fa2:	f7fc fdd7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8003fa6:	f240 2127 	movw	r1, #551	; 0x227
 8003faa:	2011      	movs	r0, #17
 8003fac:	f7fc fdd2 	bl	8000b54 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8003fb0:	219d      	movs	r1, #157	; 0x9d
 8003fb2:	2012      	movs	r0, #18
 8003fb4:	f7fc fdce 	bl	8000b54 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8003fb8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8003fbc:	2013      	movs	r0, #19
 8003fbe:	f7fc fdc9 	bl	8000b54 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8003fc2:	2125      	movs	r1, #37	; 0x25
 8003fc4:	2029      	movs	r0, #41	; 0x29
 8003fc6:	f7fc fdc5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8003fca:	210d      	movs	r1, #13
 8003fcc:	202b      	movs	r0, #43	; 0x2b
 8003fce:	f7fc fdc1 	bl	8000b54 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8003fd2:	2107      	movs	r1, #7
 8003fd4:	2030      	movs	r0, #48	; 0x30
 8003fd6:	f7fc fdbd 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8003fda:	f240 3103 	movw	r1, #771	; 0x303
 8003fde:	2031      	movs	r0, #49	; 0x31
 8003fe0:	f7fc fdb8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8003fe4:	2103      	movs	r1, #3
 8003fe6:	2032      	movs	r0, #50	; 0x32
 8003fe8:	f7fc fdb4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8003fec:	f240 2106 	movw	r1, #518	; 0x206
 8003ff0:	2035      	movs	r0, #53	; 0x35
 8003ff2:	f7fc fdaf 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8003ff6:	2108      	movs	r1, #8
 8003ff8:	2036      	movs	r0, #54	; 0x36
 8003ffa:	f7fc fdab 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8003ffe:	f240 4106 	movw	r1, #1030	; 0x406
 8004002:	2037      	movs	r0, #55	; 0x37
 8004004:	f7fc fda6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004008:	f44f 7141 	mov.w	r1, #772	; 0x304
 800400c:	2038      	movs	r0, #56	; 0x38
 800400e:	f7fc fda1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004012:	2107      	movs	r1, #7
 8004014:	2039      	movs	r0, #57	; 0x39
 8004016:	f7fc fd9d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800401a:	f240 6102 	movw	r1, #1538	; 0x602
 800401e:	203c      	movs	r0, #60	; 0x3c
 8004020:	f7fc fd98 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004024:	2108      	movs	r1, #8
 8004026:	203d      	movs	r0, #61	; 0x3d
 8004028:	f7fc fd94 	bl	8000b54 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 800402c:	2100      	movs	r1, #0
 800402e:	2050      	movs	r0, #80	; 0x50
 8004030:	f7fc fd90 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004034:	21ef      	movs	r1, #239	; 0xef
 8004036:	2051      	movs	r0, #81	; 0x51
 8004038:	f7fc fd8c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800403c:	2100      	movs	r1, #0
 800403e:	2052      	movs	r0, #82	; 0x52
 8004040:	f7fc fd88 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004044:	f240 113f 	movw	r1, #319	; 0x13f
 8004048:	2053      	movs	r0, #83	; 0x53
 800404a:	f7fc fd83 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 800404e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004052:	2060      	movs	r0, #96	; 0x60
 8004054:	f7fc fd7e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004058:	2101      	movs	r1, #1
 800405a:	2061      	movs	r0, #97	; 0x61
 800405c:	f7fc fd7a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004060:	2100      	movs	r1, #0
 8004062:	206a      	movs	r0, #106	; 0x6a
 8004064:	f7fc fd76 	bl	8000b54 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004068:	2100      	movs	r1, #0
 800406a:	2080      	movs	r0, #128	; 0x80
 800406c:	f7fc fd72 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004070:	2100      	movs	r1, #0
 8004072:	2081      	movs	r0, #129	; 0x81
 8004074:	f7fc fd6e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004078:	2100      	movs	r1, #0
 800407a:	2082      	movs	r0, #130	; 0x82
 800407c:	f7fc fd6a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004080:	2100      	movs	r1, #0
 8004082:	2083      	movs	r0, #131	; 0x83
 8004084:	f7fc fd66 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004088:	2100      	movs	r1, #0
 800408a:	2084      	movs	r0, #132	; 0x84
 800408c:	f7fc fd62 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004090:	2100      	movs	r1, #0
 8004092:	2085      	movs	r0, #133	; 0x85
 8004094:	f7fc fd5e 	bl	8000b54 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004098:	2110      	movs	r1, #16
 800409a:	2090      	movs	r0, #144	; 0x90
 800409c:	f7fc fd5a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80040a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040a4:	2092      	movs	r0, #146	; 0x92
 80040a6:	f7fc fd55 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80040aa:	f240 1133 	movw	r1, #307	; 0x133
 80040ae:	2007      	movs	r0, #7
 80040b0:	f7fc fd50 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80040b4:	2122      	movs	r1, #34	; 0x22
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7fc fd4c 	bl	8000b54 <LCD_WriteReg>
 80040bc:	f001 bc3a 	b.w	8005934 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 80040c0:	4b7d      	ldr	r3, [pc, #500]	; (80042b8 <LCD_Init+0x27b8>)
 80040c2:	889b      	ldrh	r3, [r3, #4]
 80040c4:	f249 3228 	movw	r2, #37672	; 0x9328
 80040c8:	4293      	cmp	r3, r2
 80040ca:	f040 80f7 	bne.w	80042bc <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80040ce:	f241 018f 	movw	r1, #4239	; 0x108f
 80040d2:	20ec      	movs	r0, #236	; 0xec
 80040d4:	f7fc fd3e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80040d8:	f241 2134 	movw	r1, #4660	; 0x1234
 80040dc:	20ef      	movs	r0, #239	; 0xef
 80040de:	f7fc fd39 	bl	8000b54 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80040e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7fc fd34 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80040ec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80040f0:	2002      	movs	r0, #2
 80040f2:	f7fc fd2f 	bl	8000b54 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80040f6:	f241 0130 	movw	r1, #4144	; 0x1030
 80040fa:	2003      	movs	r0, #3
 80040fc:	f7fc fd2a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004100:	2100      	movs	r1, #0
 8004102:	2004      	movs	r0, #4
 8004104:	f7fc fd26 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004108:	f240 2102 	movw	r1, #514	; 0x202
 800410c:	2008      	movs	r0, #8
 800410e:	f7fc fd21 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004112:	2100      	movs	r1, #0
 8004114:	2009      	movs	r0, #9
 8004116:	f7fc fd1d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800411a:	2100      	movs	r1, #0
 800411c:	200a      	movs	r0, #10
 800411e:	f7fc fd19 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004122:	2101      	movs	r1, #1
 8004124:	200c      	movs	r0, #12
 8004126:	f7fc fd15 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800412a:	2100      	movs	r1, #0
 800412c:	200d      	movs	r0, #13
 800412e:	f7fc fd11 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004132:	2100      	movs	r1, #0
 8004134:	200f      	movs	r0, #15
 8004136:	f7fc fd0d 	bl	8000b54 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800413a:	2100      	movs	r1, #0
 800413c:	2010      	movs	r0, #16
 800413e:	f7fc fd09 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004142:	2107      	movs	r1, #7
 8004144:	2011      	movs	r0, #17
 8004146:	f7fc fd05 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800414a:	2100      	movs	r1, #0
 800414c:	2012      	movs	r0, #18
 800414e:	f7fc fd01 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004152:	2100      	movs	r1, #0
 8004154:	2013      	movs	r0, #19
 8004156:	f7fc fcfd 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800415a:	2101      	movs	r1, #1
 800415c:	2007      	movs	r0, #7
 800415e:	f7fc fcf9 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 8004162:	2032      	movs	r0, #50	; 0x32
 8004164:	f001 fe76 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004168:	f241 4190 	movw	r1, #5264	; 0x1490
 800416c:	2010      	movs	r0, #16
 800416e:	f7fc fcf1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004172:	f240 2127 	movw	r1, #551	; 0x227
 8004176:	2011      	movs	r0, #17
 8004178:	f7fc fcec 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 800417c:	2032      	movs	r0, #50	; 0x32
 800417e:	f001 fe69 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004182:	218a      	movs	r1, #138	; 0x8a
 8004184:	2012      	movs	r0, #18
 8004186:	f7fc fce5 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 800418a:	2032      	movs	r0, #50	; 0x32
 800418c:	f001 fe62 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004190:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004194:	2013      	movs	r0, #19
 8004196:	f7fc fcdd 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 800419a:	2106      	movs	r1, #6
 800419c:	2029      	movs	r0, #41	; 0x29
 800419e:	f7fc fcd9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80041a2:	210d      	movs	r1, #13
 80041a4:	202b      	movs	r0, #43	; 0x2b
 80041a6:	f7fc fcd5 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 80041aa:	2032      	movs	r0, #50	; 0x32
 80041ac:	f001 fe52 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80041b0:	2100      	movs	r1, #0
 80041b2:	2020      	movs	r0, #32
 80041b4:	f7fc fcce 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80041b8:	2100      	movs	r1, #0
 80041ba:	2021      	movs	r0, #33	; 0x21
 80041bc:	f7fc fcca 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 80041c0:	2032      	movs	r0, #50	; 0x32
 80041c2:	f001 fe47 	bl	8005e54 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80041c6:	2100      	movs	r1, #0
 80041c8:	2030      	movs	r0, #48	; 0x30
 80041ca:	f7fc fcc3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80041ce:	f240 6104 	movw	r1, #1540	; 0x604
 80041d2:	2031      	movs	r0, #49	; 0x31
 80041d4:	f7fc fcbe 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80041d8:	f240 3105 	movw	r1, #773	; 0x305
 80041dc:	2032      	movs	r0, #50	; 0x32
 80041de:	f7fc fcb9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80041e2:	2100      	movs	r1, #0
 80041e4:	2035      	movs	r0, #53	; 0x35
 80041e6:	f7fc fcb5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80041ea:	f640 4109 	movw	r1, #3081	; 0xc09
 80041ee:	2036      	movs	r0, #54	; 0x36
 80041f0:	f7fc fcb0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80041f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80041f8:	2037      	movs	r0, #55	; 0x37
 80041fa:	f7fc fcab 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80041fe:	f240 3101 	movw	r1, #769	; 0x301
 8004202:	2038      	movs	r0, #56	; 0x38
 8004204:	f7fc fca6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004208:	f240 7107 	movw	r1, #1799	; 0x707
 800420c:	2039      	movs	r0, #57	; 0x39
 800420e:	f7fc fca1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004212:	2100      	movs	r1, #0
 8004214:	203c      	movs	r0, #60	; 0x3c
 8004216:	f7fc fc9d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800421a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800421e:	203d      	movs	r0, #61	; 0x3d
 8004220:	f7fc fc98 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 8004224:	2032      	movs	r0, #50	; 0x32
 8004226:	f001 fe15 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 800422a:	2100      	movs	r1, #0
 800422c:	2050      	movs	r0, #80	; 0x50
 800422e:	f7fc fc91 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004232:	21ef      	movs	r1, #239	; 0xef
 8004234:	2051      	movs	r0, #81	; 0x51
 8004236:	f7fc fc8d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 800423a:	2100      	movs	r1, #0
 800423c:	2052      	movs	r0, #82	; 0x52
 800423e:	f7fc fc89 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8004242:	f240 113f 	movw	r1, #319	; 0x13f
 8004246:	2053      	movs	r0, #83	; 0x53
 8004248:	f7fc fc84 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 800424c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004250:	2060      	movs	r0, #96	; 0x60
 8004252:	f7fc fc7f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004256:	2101      	movs	r1, #1
 8004258:	2061      	movs	r0, #97	; 0x61
 800425a:	f7fc fc7b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800425e:	2100      	movs	r1, #0
 8004260:	206a      	movs	r0, #106	; 0x6a
 8004262:	f7fc fc77 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004266:	2100      	movs	r1, #0
 8004268:	2080      	movs	r0, #128	; 0x80
 800426a:	f7fc fc73 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800426e:	2100      	movs	r1, #0
 8004270:	2081      	movs	r0, #129	; 0x81
 8004272:	f7fc fc6f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004276:	2100      	movs	r1, #0
 8004278:	2082      	movs	r0, #130	; 0x82
 800427a:	f7fc fc6b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800427e:	2100      	movs	r1, #0
 8004280:	2083      	movs	r0, #131	; 0x83
 8004282:	f7fc fc67 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004286:	2100      	movs	r1, #0
 8004288:	2084      	movs	r0, #132	; 0x84
 800428a:	f7fc fc63 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800428e:	2100      	movs	r1, #0
 8004290:	2085      	movs	r0, #133	; 0x85
 8004292:	f7fc fc5f 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8004296:	2110      	movs	r1, #16
 8004298:	2090      	movs	r0, #144	; 0x90
 800429a:	f7fc fc5b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800429e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042a2:	2092      	movs	r0, #146	; 0x92
 80042a4:	f7fc fc56 	bl	8000b54 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80042a8:	f240 1133 	movw	r1, #307	; 0x133
 80042ac:	2007      	movs	r0, #7
 80042ae:	f7fc fc51 	bl	8000b54 <LCD_WriteReg>
 80042b2:	f001 bb3f 	b.w	8005934 <LCD_Init+0x3e34>
 80042b6:	bf00      	nop
 80042b8:	20000fcc 	.word	0x20000fcc
	} else if (lcddev.id == 0x9320) //测试OK.
 80042bc:	4bce      	ldr	r3, [pc, #824]	; (80045f8 <LCD_Init+0x2af8>)
 80042be:	889b      	ldrh	r3, [r3, #4]
 80042c0:	f249 3220 	movw	r2, #37664	; 0x9320
 80042c4:	4293      	cmp	r3, r2
 80042c6:	f040 80ad 	bne.w	8004424 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80042ca:	2100      	movs	r1, #0
 80042cc:	2000      	movs	r0, #0
 80042ce:	f7fc fc41 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80042d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042d6:	2001      	movs	r0, #1
 80042d8:	f7fc fc3c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80042dc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80042e0:	2002      	movs	r0, #2
 80042e2:	f7fc fc37 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80042e6:	f241 0130 	movw	r1, #4144	; 0x1030
 80042ea:	2003      	movs	r0, #3
 80042ec:	f7fc fc32 	bl	8000b54 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80042f0:	2100      	movs	r1, #0
 80042f2:	2004      	movs	r0, #4
 80042f4:	f7fc fc2e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80042f8:	f240 2102 	movw	r1, #514	; 0x202
 80042fc:	2008      	movs	r0, #8
 80042fe:	f7fc fc29 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004302:	2100      	movs	r1, #0
 8004304:	2009      	movs	r0, #9
 8004306:	f7fc fc25 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800430a:	2100      	movs	r1, #0
 800430c:	200a      	movs	r0, #10
 800430e:	f7fc fc21 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004312:	2101      	movs	r1, #1
 8004314:	200c      	movs	r0, #12
 8004316:	f7fc fc1d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 800431a:	2100      	movs	r1, #0
 800431c:	200d      	movs	r0, #13
 800431e:	f7fc fc19 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004322:	2100      	movs	r1, #0
 8004324:	200f      	movs	r0, #15
 8004326:	f7fc fc15 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 800432a:	2032      	movs	r0, #50	; 0x32
 800432c:	f001 fd92 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004330:	f240 1101 	movw	r1, #257	; 0x101
 8004334:	2007      	movs	r0, #7
 8004336:	f7fc fc0d 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 800433a:	2032      	movs	r0, #50	; 0x32
 800433c:	f001 fd8a 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004340:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004344:	2010      	movs	r0, #16
 8004346:	f7fc fc05 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 800434a:	2107      	movs	r1, #7
 800434c:	2011      	movs	r0, #17
 800434e:	f7fc fc01 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004352:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004356:	2012      	movs	r0, #18
 8004358:	f7fc fbfc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 800435c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004360:	2013      	movs	r0, #19
 8004362:	f7fc fbf7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8004366:	2100      	movs	r1, #0
 8004368:	2029      	movs	r0, #41	; 0x29
 800436a:	f7fc fbf3 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 800436e:	f244 0110 	movw	r1, #16400	; 0x4010
 8004372:	202b      	movs	r0, #43	; 0x2b
 8004374:	f7fc fbee 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004378:	2100      	movs	r1, #0
 800437a:	2050      	movs	r0, #80	; 0x50
 800437c:	f7fc fbea 	bl	8000b54 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004380:	21ef      	movs	r1, #239	; 0xef
 8004382:	2051      	movs	r0, #81	; 0x51
 8004384:	f7fc fbe6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004388:	2100      	movs	r1, #0
 800438a:	2052      	movs	r0, #82	; 0x52
 800438c:	f7fc fbe2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004390:	f240 113f 	movw	r1, #319	; 0x13f
 8004394:	2053      	movs	r0, #83	; 0x53
 8004396:	f7fc fbdd 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 800439a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800439e:	2060      	movs	r0, #96	; 0x60
 80043a0:	f7fc fbd8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80043a4:	2101      	movs	r1, #1
 80043a6:	2061      	movs	r0, #97	; 0x61
 80043a8:	f7fc fbd4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80043ac:	2100      	movs	r1, #0
 80043ae:	206a      	movs	r0, #106	; 0x6a
 80043b0:	f7fc fbd0 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80043b4:	2100      	movs	r1, #0
 80043b6:	2080      	movs	r0, #128	; 0x80
 80043b8:	f7fc fbcc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80043bc:	2100      	movs	r1, #0
 80043be:	2081      	movs	r0, #129	; 0x81
 80043c0:	f7fc fbc8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80043c4:	2100      	movs	r1, #0
 80043c6:	2082      	movs	r0, #130	; 0x82
 80043c8:	f7fc fbc4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80043cc:	2100      	movs	r1, #0
 80043ce:	2083      	movs	r0, #131	; 0x83
 80043d0:	f7fc fbc0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80043d4:	2100      	movs	r1, #0
 80043d6:	2084      	movs	r0, #132	; 0x84
 80043d8:	f7fc fbbc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80043dc:	2100      	movs	r1, #0
 80043de:	2085      	movs	r0, #133	; 0x85
 80043e0:	f7fc fbb8 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80043e4:	2110      	movs	r1, #16
 80043e6:	2090      	movs	r0, #144	; 0x90
 80043e8:	f7fc fbb4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80043ec:	2100      	movs	r1, #0
 80043ee:	2092      	movs	r0, #146	; 0x92
 80043f0:	f7fc fbb0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80043f4:	2101      	movs	r1, #1
 80043f6:	2093      	movs	r0, #147	; 0x93
 80043f8:	f7fc fbac 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80043fc:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004400:	2095      	movs	r0, #149	; 0x95
 8004402:	f7fc fba7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004406:	2100      	movs	r1, #0
 8004408:	2097      	movs	r0, #151	; 0x97
 800440a:	f7fc fba3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 800440e:	2100      	movs	r1, #0
 8004410:	2098      	movs	r0, #152	; 0x98
 8004412:	f7fc fb9f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004416:	f240 1173 	movw	r1, #371	; 0x173
 800441a:	2007      	movs	r0, #7
 800441c:	f7fc fb9a 	bl	8000b54 <LCD_WriteReg>
 8004420:	f001 ba88 	b.w	8005934 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004424:	4b74      	ldr	r3, [pc, #464]	; (80045f8 <LCD_Init+0x2af8>)
 8004426:	889b      	ldrh	r3, [r3, #4]
 8004428:	f249 3231 	movw	r2, #37681	; 0x9331
 800442c:	4293      	cmp	r3, r2
 800442e:	f040 80e5 	bne.w	80045fc <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004432:	f241 0114 	movw	r1, #4116	; 0x1014
 8004436:	20e7      	movs	r0, #231	; 0xe7
 8004438:	f7fc fb8c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 800443c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004440:	2001      	movs	r0, #1
 8004442:	f7fc fb87 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800444a:	2002      	movs	r0, #2
 800444c:	f7fc fb82 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004450:	f241 0138 	movw	r1, #4152	; 0x1038
 8004454:	2003      	movs	r0, #3
 8004456:	f7fc fb7d 	bl	8000b54 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 800445a:	f240 2102 	movw	r1, #514	; 0x202
 800445e:	2008      	movs	r0, #8
 8004460:	f7fc fb78 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004464:	2100      	movs	r1, #0
 8004466:	2009      	movs	r0, #9
 8004468:	f7fc fb74 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 800446c:	2100      	movs	r1, #0
 800446e:	200a      	movs	r0, #10
 8004470:	f7fc fb70 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004474:	2100      	movs	r1, #0
 8004476:	200c      	movs	r0, #12
 8004478:	f7fc fb6c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 800447c:	2100      	movs	r1, #0
 800447e:	200d      	movs	r0, #13
 8004480:	f7fc fb68 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004484:	2100      	movs	r1, #0
 8004486:	200f      	movs	r0, #15
 8004488:	f7fc fb64 	bl	8000b54 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800448c:	2100      	movs	r1, #0
 800448e:	2010      	movs	r0, #16
 8004490:	f7fc fb60 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004494:	2107      	movs	r1, #7
 8004496:	2011      	movs	r0, #17
 8004498:	f7fc fb5c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 800449c:	2100      	movs	r1, #0
 800449e:	2012      	movs	r0, #18
 80044a0:	f7fc fb58 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80044a4:	2100      	movs	r1, #0
 80044a6:	2013      	movs	r0, #19
 80044a8:	f7fc fb54 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80044ac:	20c8      	movs	r0, #200	; 0xc8
 80044ae:	f001 fcd1 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80044b2:	f241 6190 	movw	r1, #5776	; 0x1690
 80044b6:	2010      	movs	r0, #16
 80044b8:	f7fc fb4c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80044bc:	f240 2127 	movw	r1, #551	; 0x227
 80044c0:	2011      	movs	r0, #17
 80044c2:	f7fc fb47 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80044c6:	2032      	movs	r0, #50	; 0x32
 80044c8:	f001 fcc4 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80044cc:	210c      	movs	r1, #12
 80044ce:	2012      	movs	r0, #18
 80044d0:	f7fc fb40 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80044d4:	2032      	movs	r0, #50	; 0x32
 80044d6:	f001 fcbd 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80044da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044de:	2013      	movs	r0, #19
 80044e0:	f7fc fb38 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80044e4:	2111      	movs	r1, #17
 80044e6:	2029      	movs	r0, #41	; 0x29
 80044e8:	f7fc fb34 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80044ec:	210b      	movs	r1, #11
 80044ee:	202b      	movs	r0, #43	; 0x2b
 80044f0:	f7fc fb30 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80044f4:	2032      	movs	r0, #50	; 0x32
 80044f6:	f001 fcad 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80044fa:	2100      	movs	r1, #0
 80044fc:	2020      	movs	r0, #32
 80044fe:	f7fc fb29 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004502:	f240 113f 	movw	r1, #319	; 0x13f
 8004506:	2021      	movs	r0, #33	; 0x21
 8004508:	f7fc fb24 	bl	8000b54 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 800450c:	2100      	movs	r1, #0
 800450e:	2030      	movs	r0, #48	; 0x30
 8004510:	f7fc fb20 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004514:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004518:	2031      	movs	r0, #49	; 0x31
 800451a:	f7fc fb1b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 800451e:	2100      	movs	r1, #0
 8004520:	2032      	movs	r0, #50	; 0x32
 8004522:	f7fc fb17 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004526:	f44f 7101 	mov.w	r1, #516	; 0x204
 800452a:	2035      	movs	r0, #53	; 0x35
 800452c:	f7fc fb12 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004530:	f241 610a 	movw	r1, #5642	; 0x160a
 8004534:	2036      	movs	r0, #54	; 0x36
 8004536:	f7fc fb0d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 800453a:	f240 7107 	movw	r1, #1799	; 0x707
 800453e:	2037      	movs	r0, #55	; 0x37
 8004540:	f7fc fb08 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004544:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004548:	2038      	movs	r0, #56	; 0x38
 800454a:	f7fc fb03 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 800454e:	f240 7107 	movw	r1, #1799	; 0x707
 8004552:	2039      	movs	r0, #57	; 0x39
 8004554:	f7fc fafe 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004558:	f240 4102 	movw	r1, #1026	; 0x402
 800455c:	203c      	movs	r0, #60	; 0x3c
 800455e:	f7fc faf9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004562:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004566:	203d      	movs	r0, #61	; 0x3d
 8004568:	f7fc faf4 	bl	8000b54 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 800456c:	2100      	movs	r1, #0
 800456e:	2050      	movs	r0, #80	; 0x50
 8004570:	f7fc faf0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004574:	21ef      	movs	r1, #239	; 0xef
 8004576:	2051      	movs	r0, #81	; 0x51
 8004578:	f7fc faec 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 800457c:	2100      	movs	r1, #0
 800457e:	2052      	movs	r0, #82	; 0x52
 8004580:	f7fc fae8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004584:	f240 113f 	movw	r1, #319	; 0x13f
 8004588:	2053      	movs	r0, #83	; 0x53
 800458a:	f7fc fae3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 800458e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004592:	2060      	movs	r0, #96	; 0x60
 8004594:	f7fc fade 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004598:	2101      	movs	r1, #1
 800459a:	2061      	movs	r0, #97	; 0x61
 800459c:	f7fc fada 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80045a0:	2100      	movs	r1, #0
 80045a2:	206a      	movs	r0, #106	; 0x6a
 80045a4:	f7fc fad6 	bl	8000b54 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80045a8:	2100      	movs	r1, #0
 80045aa:	2080      	movs	r0, #128	; 0x80
 80045ac:	f7fc fad2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80045b0:	2100      	movs	r1, #0
 80045b2:	2081      	movs	r0, #129	; 0x81
 80045b4:	f7fc face 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80045b8:	2100      	movs	r1, #0
 80045ba:	2082      	movs	r0, #130	; 0x82
 80045bc:	f7fc faca 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80045c0:	2100      	movs	r1, #0
 80045c2:	2083      	movs	r0, #131	; 0x83
 80045c4:	f7fc fac6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80045c8:	2100      	movs	r1, #0
 80045ca:	2084      	movs	r0, #132	; 0x84
 80045cc:	f7fc fac2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80045d0:	2100      	movs	r1, #0
 80045d2:	2085      	movs	r0, #133	; 0x85
 80045d4:	f7fc fabe 	bl	8000b54 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80045d8:	2110      	movs	r1, #16
 80045da:	2090      	movs	r0, #144	; 0x90
 80045dc:	f7fc faba 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80045e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045e4:	2092      	movs	r0, #146	; 0x92
 80045e6:	f7fc fab5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80045ea:	f240 1133 	movw	r1, #307	; 0x133
 80045ee:	2007      	movs	r0, #7
 80045f0:	f7fc fab0 	bl	8000b54 <LCD_WriteReg>
 80045f4:	f001 b99e 	b.w	8005934 <LCD_Init+0x3e34>
 80045f8:	20000fcc 	.word	0x20000fcc
	} else if (lcddev.id == 0x5408) {
 80045fc:	4be2      	ldr	r3, [pc, #904]	; (8004988 <LCD_Init+0x2e88>)
 80045fe:	889b      	ldrh	r3, [r3, #4]
 8004600:	f245 4208 	movw	r2, #21512	; 0x5408
 8004604:	4293      	cmp	r3, r2
 8004606:	f040 80a3 	bne.w	8004750 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 800460a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800460e:	2001      	movs	r0, #1
 8004610:	f7fc faa0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004614:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004618:	2002      	movs	r0, #2
 800461a:	f7fc fa9b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 800461e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004622:	2003      	movs	r0, #3
 8004624:	f7fc fa96 	bl	8000b54 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004628:	2100      	movs	r1, #0
 800462a:	2004      	movs	r0, #4
 800462c:	f7fc fa92 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004630:	f240 2107 	movw	r1, #519	; 0x207
 8004634:	2008      	movs	r0, #8
 8004636:	f7fc fa8d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 800463a:	2100      	movs	r1, #0
 800463c:	2009      	movs	r0, #9
 800463e:	f7fc fa89 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004642:	2100      	movs	r1, #0
 8004644:	200a      	movs	r0, #10
 8004646:	f7fc fa85 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 800464a:	2100      	movs	r1, #0
 800464c:	200c      	movs	r0, #12
 800464e:	f7fc fa81 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004652:	2100      	movs	r1, #0
 8004654:	200d      	movs	r0, #13
 8004656:	f7fc fa7d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 800465a:	2100      	movs	r1, #0
 800465c:	200f      	movs	r0, #15
 800465e:	f7fc fa79 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004662:	2014      	movs	r0, #20
 8004664:	f001 fbf6 	bl	8005e54 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004668:	f241 61b0 	movw	r1, #5808	; 0x16b0
 800466c:	2010      	movs	r0, #16
 800466e:	f7fc fa71 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004672:	2101      	movs	r1, #1
 8004674:	2011      	movs	r0, #17
 8004676:	f7fc fa6d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 800467a:	2101      	movs	r1, #1
 800467c:	2017      	movs	r0, #23
 800467e:	f7fc fa69 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004682:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004686:	2012      	movs	r0, #18
 8004688:	f7fc fa64 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 800468c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004690:	2013      	movs	r0, #19
 8004692:	f7fc fa5f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004696:	2109      	movs	r1, #9
 8004698:	2029      	movs	r0, #41	; 0x29
 800469a:	f7fc fa5b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 800469e:	2109      	movs	r1, #9
 80046a0:	202a      	movs	r0, #42	; 0x2a
 80046a2:	f7fc fa57 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80046a6:	2100      	movs	r1, #0
 80046a8:	20a4      	movs	r0, #164	; 0xa4
 80046aa:	f7fc fa53 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80046ae:	2100      	movs	r1, #0
 80046b0:	2050      	movs	r0, #80	; 0x50
 80046b2:	f7fc fa4f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 80046b6:	21ef      	movs	r1, #239	; 0xef
 80046b8:	2051      	movs	r0, #81	; 0x51
 80046ba:	f7fc fa4b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 80046be:	2100      	movs	r1, #0
 80046c0:	2052      	movs	r0, #82	; 0x52
 80046c2:	f7fc fa47 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 80046c6:	f240 113f 	movw	r1, #319	; 0x13f
 80046ca:	2053      	movs	r0, #83	; 0x53
 80046cc:	f7fc fa42 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 80046d0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80046d4:	2060      	movs	r0, #96	; 0x60
 80046d6:	f7fc fa3d 	bl	8000b54 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 80046da:	2101      	movs	r1, #1
 80046dc:	2061      	movs	r0, #97	; 0x61
 80046de:	f7fc fa39 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 80046e2:	2100      	movs	r1, #0
 80046e4:	206a      	movs	r0, #106	; 0x6a
 80046e6:	f7fc fa35 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 80046ea:	2100      	movs	r1, #0
 80046ec:	2080      	movs	r0, #128	; 0x80
 80046ee:	f7fc fa31 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 80046f2:	2100      	movs	r1, #0
 80046f4:	2081      	movs	r0, #129	; 0x81
 80046f6:	f7fc fa2d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 80046fa:	2100      	movs	r1, #0
 80046fc:	2082      	movs	r0, #130	; 0x82
 80046fe:	f7fc fa29 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004702:	2100      	movs	r1, #0
 8004704:	2083      	movs	r0, #131	; 0x83
 8004706:	f7fc fa25 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 800470a:	2100      	movs	r1, #0
 800470c:	2084      	movs	r0, #132	; 0x84
 800470e:	f7fc fa21 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004712:	2100      	movs	r1, #0
 8004714:	2085      	movs	r0, #133	; 0x85
 8004716:	f7fc fa1d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 800471a:	2113      	movs	r1, #19
 800471c:	2090      	movs	r0, #144	; 0x90
 800471e:	f7fc fa19 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004722:	2100      	movs	r1, #0
 8004724:	2092      	movs	r0, #146	; 0x92
 8004726:	f7fc fa15 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 800472a:	2103      	movs	r1, #3
 800472c:	2093      	movs	r0, #147	; 0x93
 800472e:	f7fc fa11 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004732:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004736:	2095      	movs	r0, #149	; 0x95
 8004738:	f7fc fa0c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 800473c:	f240 1173 	movw	r1, #371	; 0x173
 8004740:	2007      	movs	r0, #7
 8004742:	f7fc fa07 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 8004746:	2032      	movs	r0, #50	; 0x32
 8004748:	f001 fb84 	bl	8005e54 <HAL_Delay>
 800474c:	f001 b8f2 	b.w	8005934 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004750:	4b8d      	ldr	r3, [pc, #564]	; (8004988 <LCD_Init+0x2e88>)
 8004752:	889b      	ldrh	r3, [r3, #4]
 8004754:	f241 5205 	movw	r2, #5381	; 0x1505
 8004758:	4293      	cmp	r3, r2
 800475a:	f040 8117 	bne.w	800498c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 800475e:	2100      	movs	r1, #0
 8004760:	2007      	movs	r0, #7
 8004762:	f7fc f9f7 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 8004766:	2032      	movs	r0, #50	; 0x32
 8004768:	f001 fb74 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 800476c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004770:	2012      	movs	r0, #18
 8004772:	f7fc f9ef 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004776:	2101      	movs	r1, #1
 8004778:	20a4      	movs	r0, #164	; 0xa4
 800477a:	f7fc f9eb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 800477e:	210f      	movs	r1, #15
 8004780:	2008      	movs	r0, #8
 8004782:	f7fc f9e7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004786:	2108      	movs	r1, #8
 8004788:	200a      	movs	r0, #10
 800478a:	f7fc f9e3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 800478e:	2108      	movs	r1, #8
 8004790:	200d      	movs	r0, #13
 8004792:	f7fc f9df 	bl	8000b54 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004796:	f240 7107 	movw	r1, #1799	; 0x707
 800479a:	2030      	movs	r0, #48	; 0x30
 800479c:	f7fc f9da 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 80047a0:	2107      	movs	r1, #7
 80047a2:	2031      	movs	r0, #49	; 0x31
 80047a4:	f7fc f9d6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 80047a8:	f240 6103 	movw	r1, #1539	; 0x603
 80047ac:	2032      	movs	r0, #50	; 0x32
 80047ae:	f7fc f9d1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 80047b2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80047b6:	2033      	movs	r0, #51	; 0x33
 80047b8:	f7fc f9cc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 80047bc:	f240 2102 	movw	r1, #514	; 0x202
 80047c0:	2034      	movs	r0, #52	; 0x34
 80047c2:	f7fc f9c7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 80047c6:	2102      	movs	r1, #2
 80047c8:	2035      	movs	r0, #53	; 0x35
 80047ca:	f7fc f9c3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 80047ce:	f641 710f 	movw	r1, #7951	; 0x1f0f
 80047d2:	2036      	movs	r0, #54	; 0x36
 80047d4:	f7fc f9be 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 80047d8:	f240 7107 	movw	r1, #1799	; 0x707
 80047dc:	2037      	movs	r0, #55	; 0x37
 80047de:	f7fc f9b9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 80047e2:	2100      	movs	r1, #0
 80047e4:	2038      	movs	r0, #56	; 0x38
 80047e6:	f7fc f9b5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 80047ea:	2100      	movs	r1, #0
 80047ec:	2039      	movs	r0, #57	; 0x39
 80047ee:	f7fc f9b1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 80047f2:	f240 7107 	movw	r1, #1799	; 0x707
 80047f6:	203a      	movs	r0, #58	; 0x3a
 80047f8:	f7fc f9ac 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 80047fc:	2100      	movs	r1, #0
 80047fe:	203b      	movs	r0, #59	; 0x3b
 8004800:	f7fc f9a8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004804:	2107      	movs	r1, #7
 8004806:	203c      	movs	r0, #60	; 0x3c
 8004808:	f7fc f9a4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 800480c:	2100      	movs	r1, #0
 800480e:	203d      	movs	r0, #61	; 0x3d
 8004810:	f7fc f9a0 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 8004814:	2032      	movs	r0, #50	; 0x32
 8004816:	f001 fb1d 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 800481a:	2101      	movs	r1, #1
 800481c:	2007      	movs	r0, #7
 800481e:	f7fc f999 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004822:	2101      	movs	r1, #1
 8004824:	2017      	movs	r0, #23
 8004826:	f7fc f995 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(50);
 800482a:	2032      	movs	r0, #50	; 0x32
 800482c:	f001 fb12 	bl	8005e54 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004830:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004834:	2010      	movs	r0, #16
 8004836:	f7fc f98d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 800483a:	f240 2117 	movw	r1, #535	; 0x217
 800483e:	2011      	movs	r0, #17
 8004840:	f7fc f988 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004844:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004848:	2012      	movs	r0, #18
 800484a:	f7fc f983 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 800484e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004852:	2013      	movs	r0, #19
 8004854:	f7fc f97e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004858:	2100      	movs	r1, #0
 800485a:	202a      	movs	r0, #42	; 0x2a
 800485c:	f7fc f97a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004860:	210a      	movs	r1, #10
 8004862:	2029      	movs	r0, #41	; 0x29
 8004864:	f7fc f976 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004868:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800486c:	2012      	movs	r0, #18
 800486e:	f7fc f971 	bl	8000b54 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004872:	2100      	movs	r1, #0
 8004874:	2050      	movs	r0, #80	; 0x50
 8004876:	f7fc f96d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800487a:	21ef      	movs	r1, #239	; 0xef
 800487c:	2051      	movs	r0, #81	; 0x51
 800487e:	f7fc f969 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004882:	2100      	movs	r1, #0
 8004884:	2052      	movs	r0, #82	; 0x52
 8004886:	f7fc f965 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800488a:	f240 113f 	movw	r1, #319	; 0x13f
 800488e:	2053      	movs	r0, #83	; 0x53
 8004890:	f7fc f960 	bl	8000b54 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004894:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004898:	2060      	movs	r0, #96	; 0x60
 800489a:	f7fc f95b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800489e:	2101      	movs	r1, #1
 80048a0:	2061      	movs	r0, #97	; 0x61
 80048a2:	f7fc f957 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80048a6:	2100      	movs	r1, #0
 80048a8:	206a      	movs	r0, #106	; 0x6a
 80048aa:	f7fc f953 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80048ae:	2100      	movs	r1, #0
 80048b0:	2080      	movs	r0, #128	; 0x80
 80048b2:	f7fc f94f 	bl	8000b54 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 80048b6:	2100      	movs	r1, #0
 80048b8:	2081      	movs	r0, #129	; 0x81
 80048ba:	f7fc f94b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80048be:	2100      	movs	r1, #0
 80048c0:	2082      	movs	r0, #130	; 0x82
 80048c2:	f7fc f947 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80048c6:	2100      	movs	r1, #0
 80048c8:	2083      	movs	r0, #131	; 0x83
 80048ca:	f7fc f943 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80048ce:	2100      	movs	r1, #0
 80048d0:	2084      	movs	r0, #132	; 0x84
 80048d2:	f7fc f93f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80048d6:	2100      	movs	r1, #0
 80048d8:	2085      	movs	r0, #133	; 0x85
 80048da:	f7fc f93b 	bl	8000b54 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 80048de:	2113      	movs	r1, #19
 80048e0:	2090      	movs	r0, #144	; 0x90
 80048e2:	f7fc f937 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80048e6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80048ea:	2092      	movs	r0, #146	; 0x92
 80048ec:	f7fc f932 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 80048f0:	2105      	movs	r1, #5
 80048f2:	2093      	movs	r0, #147	; 0x93
 80048f4:	f7fc f92e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 80048f8:	2100      	movs	r1, #0
 80048fa:	2095      	movs	r0, #149	; 0x95
 80048fc:	f7fc f92a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004900:	2100      	movs	r1, #0
 8004902:	2097      	movs	r0, #151	; 0x97
 8004904:	f7fc f926 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004908:	2100      	movs	r1, #0
 800490a:	2098      	movs	r0, #152	; 0x98
 800490c:	f7fc f922 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004914:	2001      	movs	r0, #1
 8004916:	f7fc f91d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800491a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800491e:	2002      	movs	r0, #2
 8004920:	f7fc f918 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004924:	f241 0138 	movw	r1, #4152	; 0x1038
 8004928:	2003      	movs	r0, #3
 800492a:	f7fc f913 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800492e:	2100      	movs	r1, #0
 8004930:	2004      	movs	r0, #4
 8004932:	f7fc f90f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004936:	2100      	movs	r1, #0
 8004938:	200c      	movs	r0, #12
 800493a:	f7fc f90b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800493e:	2100      	movs	r1, #0
 8004940:	200f      	movs	r0, #15
 8004942:	f7fc f907 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004946:	2100      	movs	r1, #0
 8004948:	2020      	movs	r0, #32
 800494a:	f7fc f903 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800494e:	2100      	movs	r1, #0
 8004950:	2021      	movs	r0, #33	; 0x21
 8004952:	f7fc f8ff 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004956:	2121      	movs	r1, #33	; 0x21
 8004958:	2007      	movs	r0, #7
 800495a:	f7fc f8fb 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 800495e:	2014      	movs	r0, #20
 8004960:	f001 fa78 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004964:	2161      	movs	r1, #97	; 0x61
 8004966:	2007      	movs	r0, #7
 8004968:	f7fc f8f4 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 800496c:	2014      	movs	r0, #20
 800496e:	f001 fa71 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004972:	f240 1173 	movw	r1, #371	; 0x173
 8004976:	2007      	movs	r0, #7
 8004978:	f7fc f8ec 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 800497c:	2014      	movs	r0, #20
 800497e:	f001 fa69 	bl	8005e54 <HAL_Delay>
 8004982:	f000 bfd7 	b.w	8005934 <LCD_Init+0x3e34>
 8004986:	bf00      	nop
 8004988:	20000fcc 	.word	0x20000fcc
	} else if (lcddev.id == 0xB505) {
 800498c:	4bf0      	ldr	r3, [pc, #960]	; (8004d50 <LCD_Init+0x3250>)
 800498e:	889b      	ldrh	r3, [r3, #4]
 8004990:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004994:	4293      	cmp	r3, r2
 8004996:	f040 8103 	bne.w	8004ba0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 800499a:	2100      	movs	r1, #0
 800499c:	2000      	movs	r0, #0
 800499e:	f7fc f8d9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80049a2:	2100      	movs	r1, #0
 80049a4:	2000      	movs	r0, #0
 80049a6:	f7fc f8d5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80049aa:	2100      	movs	r1, #0
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fc f8d1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80049b2:	2100      	movs	r1, #0
 80049b4:	2000      	movs	r0, #0
 80049b6:	f7fc f8cd 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 80049ba:	2101      	movs	r1, #1
 80049bc:	20a4      	movs	r0, #164	; 0xa4
 80049be:	f7fc f8c9 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 80049c2:	2014      	movs	r0, #20
 80049c4:	f001 fa46 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80049c8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80049cc:	2060      	movs	r0, #96	; 0x60
 80049ce:	f7fc f8c1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80049d2:	f240 2102 	movw	r1, #514	; 0x202
 80049d6:	2008      	movs	r0, #8
 80049d8:	f7fc f8bc 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 80049dc:	f44f 7105 	mov.w	r1, #532	; 0x214
 80049e0:	2030      	movs	r0, #48	; 0x30
 80049e2:	f7fc f8b7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 80049e6:	f243 7115 	movw	r1, #14101	; 0x3715
 80049ea:	2031      	movs	r0, #49	; 0x31
 80049ec:	f7fc f8b2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 80049f0:	f240 6104 	movw	r1, #1540	; 0x604
 80049f4:	2032      	movs	r0, #50	; 0x32
 80049f6:	f7fc f8ad 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 80049fa:	f640 6116 	movw	r1, #3606	; 0xe16
 80049fe:	2033      	movs	r0, #51	; 0x33
 8004a00:	f7fc f8a8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004a04:	f242 2111 	movw	r1, #8721	; 0x2211
 8004a08:	2034      	movs	r0, #52	; 0x34
 8004a0a:	f7fc f8a3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004a0e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004a12:	2035      	movs	r0, #53	; 0x35
 8004a14:	f7fc f89e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004a18:	f248 5107 	movw	r1, #34055	; 0x8507
 8004a1c:	2036      	movs	r0, #54	; 0x36
 8004a1e:	f7fc f899 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004a22:	f241 4107 	movw	r1, #5127	; 0x1407
 8004a26:	2037      	movs	r0, #55	; 0x37
 8004a28:	f7fc f894 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004a2c:	f241 4103 	movw	r1, #5123	; 0x1403
 8004a30:	2038      	movs	r0, #56	; 0x38
 8004a32:	f7fc f88f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004a36:	2120      	movs	r1, #32
 8004a38:	2039      	movs	r0, #57	; 0x39
 8004a3a:	f7fc f88b 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004a3e:	211a      	movs	r1, #26
 8004a40:	2090      	movs	r0, #144	; 0x90
 8004a42:	f7fc f887 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004a46:	2100      	movs	r1, #0
 8004a48:	2010      	movs	r0, #16
 8004a4a:	f7fc f883 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004a4e:	2107      	movs	r1, #7
 8004a50:	2011      	movs	r0, #17
 8004a52:	f7fc f87f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004a56:	2100      	movs	r1, #0
 8004a58:	2012      	movs	r0, #18
 8004a5a:	f7fc f87b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2013      	movs	r0, #19
 8004a62:	f7fc f877 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004a66:	2014      	movs	r0, #20
 8004a68:	f001 f9f4 	bl	8005e54 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004a6c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004a70:	2010      	movs	r0, #16
 8004a72:	f7fc f86f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004a76:	f240 1137 	movw	r1, #311	; 0x137
 8004a7a:	2011      	movs	r0, #17
 8004a7c:	f7fc f86a 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004a80:	2014      	movs	r0, #20
 8004a82:	f001 f9e7 	bl	8005e54 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004a86:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004a8a:	2012      	movs	r0, #18
 8004a8c:	f7fc f862 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004a90:	2014      	movs	r0, #20
 8004a92:	f001 f9df 	bl	8005e54 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004a96:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004a9a:	2013      	movs	r0, #19
 8004a9c:	f7fc f85a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	202a      	movs	r0, #42	; 0x2a
 8004aa4:	f7fc f856 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004aa8:	2148      	movs	r1, #72	; 0x48
 8004aaa:	2029      	movs	r0, #41	; 0x29
 8004aac:	f7fc f852 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004ab0:	2014      	movs	r0, #20
 8004ab2:	f001 f9cf 	bl	8005e54 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aba:	2001      	movs	r0, #1
 8004abc:	f7fc f84a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004ac0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ac4:	2002      	movs	r0, #2
 8004ac6:	f7fc f845 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004aca:	f241 0138 	movw	r1, #4152	; 0x1038
 8004ace:	2003      	movs	r0, #3
 8004ad0:	f7fc f840 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004ad4:	f240 2102 	movw	r1, #514	; 0x202
 8004ad8:	2008      	movs	r0, #8
 8004ada:	f7fc f83b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004ade:	2100      	movs	r1, #0
 8004ae0:	200a      	movs	r0, #10
 8004ae2:	f7fc f837 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	200c      	movs	r0, #12
 8004aea:	f7fc f833 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004aee:	2100      	movs	r1, #0
 8004af0:	200d      	movs	r0, #13
 8004af2:	f7fc f82f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004af6:	2130      	movs	r1, #48	; 0x30
 8004af8:	200e      	movs	r0, #14
 8004afa:	f7fc f82b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004afe:	2100      	movs	r1, #0
 8004b00:	2050      	movs	r0, #80	; 0x50
 8004b02:	f7fc f827 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004b06:	21ef      	movs	r1, #239	; 0xef
 8004b08:	2051      	movs	r0, #81	; 0x51
 8004b0a:	f7fc f823 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2052      	movs	r0, #82	; 0x52
 8004b12:	f7fc f81f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004b16:	f240 113f 	movw	r1, #319	; 0x13f
 8004b1a:	2053      	movs	r0, #83	; 0x53
 8004b1c:	f7fc f81a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004b20:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b24:	2060      	movs	r0, #96	; 0x60
 8004b26:	f7fc f815 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	2061      	movs	r0, #97	; 0x61
 8004b2e:	f7fc f811 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004b32:	2100      	movs	r1, #0
 8004b34:	206a      	movs	r0, #106	; 0x6a
 8004b36:	f7fc f80d 	bl	8000b54 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004b3a:	2111      	movs	r1, #17
 8004b3c:	2090      	movs	r0, #144	; 0x90
 8004b3e:	f7fc f809 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004b42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b46:	2092      	movs	r0, #146	; 0x92
 8004b48:	f7fc f804 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004b4c:	f240 4102 	movw	r1, #1026	; 0x402
 8004b50:	2093      	movs	r0, #147	; 0x93
 8004b52:	f7fb ffff 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004b56:	2102      	movs	r1, #2
 8004b58:	2094      	movs	r0, #148	; 0x94
 8004b5a:	f7fb fffb 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004b5e:	2014      	movs	r0, #20
 8004b60:	f001 f978 	bl	8005e54 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004b64:	2101      	movs	r1, #1
 8004b66:	2007      	movs	r0, #7
 8004b68:	f7fb fff4 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004b6c:	2014      	movs	r0, #20
 8004b6e:	f001 f971 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004b72:	2161      	movs	r1, #97	; 0x61
 8004b74:	2007      	movs	r0, #7
 8004b76:	f7fb ffed 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004b7a:	f240 1173 	movw	r1, #371	; 0x173
 8004b7e:	2007      	movs	r0, #7
 8004b80:	f7fb ffe8 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004b84:	2100      	movs	r1, #0
 8004b86:	2020      	movs	r0, #32
 8004b88:	f7fb ffe4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2021      	movs	r0, #33	; 0x21
 8004b90:	f7fb ffe0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004b94:	2122      	movs	r1, #34	; 0x22
 8004b96:	2000      	movs	r0, #0
 8004b98:	f7fb ffdc 	bl	8000b54 <LCD_WriteReg>
 8004b9c:	f000 beca 	b.w	8005934 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004ba0:	4b6b      	ldr	r3, [pc, #428]	; (8004d50 <LCD_Init+0x3250>)
 8004ba2:	889b      	ldrh	r3, [r3, #4]
 8004ba4:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	f040 80d3 	bne.w	8004d54 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f7fb ffcf 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f7fb ffcb 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004bbe:	2014      	movs	r0, #20
 8004bc0:	f001 f948 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	f7fb ffc4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004bcc:	2100      	movs	r1, #0
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7fb ffc0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7fb ffbc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004bdc:	2100      	movs	r1, #0
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7fb ffb8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004be4:	2101      	movs	r1, #1
 8004be6:	20a4      	movs	r0, #164	; 0xa4
 8004be8:	f7fb ffb4 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004bec:	2014      	movs	r0, #20
 8004bee:	f001 f931 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004bf2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004bf6:	2060      	movs	r0, #96	; 0x60
 8004bf8:	f7fb ffac 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004bfc:	f640 0106 	movw	r1, #2054	; 0x806
 8004c00:	2008      	movs	r0, #8
 8004c02:	f7fb ffa7 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004c06:	f240 7103 	movw	r1, #1795	; 0x703
 8004c0a:	2030      	movs	r0, #48	; 0x30
 8004c0c:	f7fb ffa2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004c10:	2101      	movs	r1, #1
 8004c12:	2031      	movs	r0, #49	; 0x31
 8004c14:	f7fb ff9e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004c18:	2104      	movs	r1, #4
 8004c1a:	2032      	movs	r0, #50	; 0x32
 8004c1c:	f7fb ff9a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004c20:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004c24:	2033      	movs	r0, #51	; 0x33
 8004c26:	f7fb ff95 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004c2a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004c2e:	2034      	movs	r0, #52	; 0x34
 8004c30:	f7fb ff90 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004c34:	f240 1103 	movw	r1, #259	; 0x103
 8004c38:	2035      	movs	r0, #53	; 0x35
 8004c3a:	f7fb ff8b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004c3e:	211f      	movs	r1, #31
 8004c40:	2036      	movs	r0, #54	; 0x36
 8004c42:	f7fb ff87 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004c46:	f240 7103 	movw	r1, #1795	; 0x703
 8004c4a:	2037      	movs	r0, #55	; 0x37
 8004c4c:	f7fb ff82 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004c50:	2101      	movs	r1, #1
 8004c52:	2038      	movs	r0, #56	; 0x38
 8004c54:	f7fb ff7e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004c58:	2104      	movs	r1, #4
 8004c5a:	2039      	movs	r0, #57	; 0x39
 8004c5c:	f7fb ff7a 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004c60:	2115      	movs	r1, #21
 8004c62:	2090      	movs	r0, #144	; 0x90
 8004c64:	f7fb ff76 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004c68:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004c6c:	2010      	movs	r0, #16
 8004c6e:	f7fb ff71 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004c72:	f240 2147 	movw	r1, #583	; 0x247
 8004c76:	2011      	movs	r0, #17
 8004c78:	f7fb ff6c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004c7c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004c80:	2012      	movs	r0, #18
 8004c82:	f7fb ff67 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004c86:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004c8a:	2013      	movs	r0, #19
 8004c8c:	f7fb ff62 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(120);
 8004c90:	2078      	movs	r0, #120	; 0x78
 8004c92:	f001 f8df 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	f7fb ff5a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ca4:	2002      	movs	r0, #2
 8004ca6:	f7fb ff55 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004caa:	f241 0130 	movw	r1, #4144	; 0x1030
 8004cae:	2003      	movs	r0, #3
 8004cb0:	f7fb ff50 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004cb4:	2108      	movs	r1, #8
 8004cb6:	200a      	movs	r0, #10
 8004cb8:	f7fb ff4c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	200c      	movs	r0, #12
 8004cc0:	f7fb ff48 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004cc4:	2120      	movs	r1, #32
 8004cc6:	200e      	movs	r0, #14
 8004cc8:	f7fb ff44 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004ccc:	2100      	movs	r1, #0
 8004cce:	200f      	movs	r0, #15
 8004cd0:	f7fb ff40 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	2020      	movs	r0, #32
 8004cd8:	f7fb ff3c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004cdc:	2100      	movs	r1, #0
 8004cde:	2021      	movs	r0, #33	; 0x21
 8004ce0:	f7fb ff38 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8004ce4:	213d      	movs	r1, #61	; 0x3d
 8004ce6:	202a      	movs	r0, #42	; 0x2a
 8004ce8:	f7fb ff34 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(20);
 8004cec:	2014      	movs	r0, #20
 8004cee:	f001 f8b1 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8004cf2:	212d      	movs	r1, #45	; 0x2d
 8004cf4:	2029      	movs	r0, #41	; 0x29
 8004cf6:	f7fb ff2d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2050      	movs	r0, #80	; 0x50
 8004cfe:	f7fb ff29 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8004d02:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8004d06:	2051      	movs	r0, #81	; 0x51
 8004d08:	f7fb ff24 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2052      	movs	r0, #82	; 0x52
 8004d10:	f7fb ff20 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004d14:	f240 113f 	movw	r1, #319	; 0x13f
 8004d18:	2053      	movs	r0, #83	; 0x53
 8004d1a:	f7fb ff1b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	2061      	movs	r0, #97	; 0x61
 8004d22:	f7fb ff17 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004d26:	2100      	movs	r1, #0
 8004d28:	206a      	movs	r0, #106	; 0x6a
 8004d2a:	f7fb ff13 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004d2e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d32:	2092      	movs	r0, #146	; 0x92
 8004d34:	f7fb ff0e 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8004d38:	2105      	movs	r1, #5
 8004d3a:	2093      	movs	r0, #147	; 0x93
 8004d3c:	f7fb ff0a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8004d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d44:	2007      	movs	r0, #7
 8004d46:	f7fb ff05 	bl	8000b54 <LCD_WriteReg>
 8004d4a:	f000 bdf3 	b.w	8005934 <LCD_Init+0x3e34>
 8004d4e:	bf00      	nop
 8004d50:	20000fcc 	.word	0x20000fcc
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8004d54:	4bc2      	ldr	r3, [pc, #776]	; (8005060 <LCD_Init+0x3560>)
 8004d56:	889b      	ldrh	r3, [r3, #4]
 8004d58:	f648 1289 	movw	r2, #35209	; 0x8989
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	f040 80bc 	bne.w	8004eda <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8004d62:	2101      	movs	r1, #1
 8004d64:	2000      	movs	r0, #0
 8004d66:	f7fb fef5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8004d6a:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8004d6e:	2003      	movs	r0, #3
 8004d70:	f7fb fef0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004d74:	2100      	movs	r1, #0
 8004d76:	200c      	movs	r0, #12
 8004d78:	f7fb feec 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8004d7c:	f640 010c 	movw	r1, #2060	; 0x80c
 8004d80:	200d      	movs	r0, #13
 8004d82:	f7fb fee7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8004d86:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8004d8a:	200e      	movs	r0, #14
 8004d8c:	f7fb fee2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8004d90:	21b0      	movs	r1, #176	; 0xb0
 8004d92:	201e      	movs	r0, #30
 8004d94:	f7fb fede 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8004d98:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f7fb fed9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8004da2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004da6:	2002      	movs	r0, #2
 8004da8:	f7fb fed4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004dac:	2100      	movs	r1, #0
 8004dae:	2010      	movs	r0, #16
 8004db0:	f7fb fed0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8004db4:	f246 0178 	movw	r1, #24696	; 0x6078
 8004db8:	2011      	movs	r0, #17
 8004dba:	f7fb fecb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	2005      	movs	r0, #5
 8004dc2:	f7fb fec7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2006      	movs	r0, #6
 8004dca:	f7fb fec3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8004dce:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8004dd2:	2016      	movs	r0, #22
 8004dd4:	f7fb febe 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8004dd8:	2103      	movs	r1, #3
 8004dda:	2017      	movs	r0, #23
 8004ddc:	f7fb feba 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8004de0:	f240 2133 	movw	r1, #563	; 0x233
 8004de4:	2007      	movs	r0, #7
 8004de6:	f7fb feb5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8004dea:	2100      	movs	r1, #0
 8004dec:	200b      	movs	r0, #11
 8004dee:	f7fb feb1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8004df2:	2100      	movs	r1, #0
 8004df4:	200f      	movs	r0, #15
 8004df6:	f7fb fead 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	2041      	movs	r0, #65	; 0x41
 8004dfe:	f7fb fea9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8004e02:	2100      	movs	r1, #0
 8004e04:	2042      	movs	r0, #66	; 0x42
 8004e06:	f7fb fea5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2048      	movs	r0, #72	; 0x48
 8004e0e:	f7fb fea1 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8004e12:	f240 113f 	movw	r1, #319	; 0x13f
 8004e16:	2049      	movs	r0, #73	; 0x49
 8004e18:	f7fb fe9c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	204a      	movs	r0, #74	; 0x4a
 8004e20:	f7fb fe98 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8004e24:	2100      	movs	r1, #0
 8004e26:	204b      	movs	r0, #75	; 0x4b
 8004e28:	f7fb fe94 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8004e2c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8004e30:	2044      	movs	r0, #68	; 0x44
 8004e32:	f7fb fe8f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8004e36:	2100      	movs	r1, #0
 8004e38:	2045      	movs	r0, #69	; 0x45
 8004e3a:	f7fb fe8b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8004e3e:	f240 113f 	movw	r1, #319	; 0x13f
 8004e42:	2046      	movs	r0, #70	; 0x46
 8004e44:	f7fb fe86 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8004e48:	f240 7107 	movw	r1, #1799	; 0x707
 8004e4c:	2030      	movs	r0, #48	; 0x30
 8004e4e:	f7fb fe81 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8004e52:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e56:	2031      	movs	r0, #49	; 0x31
 8004e58:	f7fb fe7c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8004e5c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e60:	2032      	movs	r0, #50	; 0x32
 8004e62:	f7fb fe77 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8004e66:	f240 5102 	movw	r1, #1282	; 0x502
 8004e6a:	2033      	movs	r0, #51	; 0x33
 8004e6c:	f7fb fe72 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8004e70:	f240 5107 	movw	r1, #1287	; 0x507
 8004e74:	2034      	movs	r0, #52	; 0x34
 8004e76:	f7fb fe6d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004e7a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e7e:	2035      	movs	r0, #53	; 0x35
 8004e80:	f7fb fe68 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8004e84:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e88:	2036      	movs	r0, #54	; 0x36
 8004e8a:	f7fb fe63 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8004e8e:	f240 5102 	movw	r1, #1282	; 0x502
 8004e92:	2037      	movs	r0, #55	; 0x37
 8004e94:	f7fb fe5e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8004e98:	f240 3102 	movw	r1, #770	; 0x302
 8004e9c:	203a      	movs	r0, #58	; 0x3a
 8004e9e:	f7fb fe59 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8004ea2:	f240 3102 	movw	r1, #770	; 0x302
 8004ea6:	203b      	movs	r0, #59	; 0x3b
 8004ea8:	f7fb fe54 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8004eac:	2100      	movs	r1, #0
 8004eae:	2023      	movs	r0, #35	; 0x23
 8004eb0:	f7fb fe50 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	2024      	movs	r0, #36	; 0x24
 8004eb8:	f7fb fe4c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8004ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ec0:	2025      	movs	r0, #37	; 0x25
 8004ec2:	f7fb fe47 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	204f      	movs	r0, #79	; 0x4f
 8004eca:	f7fb fe43 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8004ece:	2100      	movs	r1, #0
 8004ed0:	204e      	movs	r0, #78	; 0x4e
 8004ed2:	f7fb fe3f 	bl	8000b54 <LCD_WriteReg>
 8004ed6:	f000 bd2d 	b.w	8005934 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8004eda:	4b61      	ldr	r3, [pc, #388]	; (8005060 <LCD_Init+0x3560>)
 8004edc:	889b      	ldrh	r3, [r3, #4]
 8004ede:	f244 5231 	movw	r2, #17713	; 0x4531
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	f040 80be 	bne.w	8005064 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8004ee8:	2101      	movs	r1, #1
 8004eea:	2000      	movs	r0, #0
 8004eec:	f7fb fe32 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(10);
 8004ef0:	200a      	movs	r0, #10
 8004ef2:	f000 ffaf 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8004ef6:	f241 6128 	movw	r1, #5672	; 0x1628
 8004efa:	2010      	movs	r0, #16
 8004efc:	f7fb fe2a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8004f00:	210e      	movs	r1, #14
 8004f02:	2012      	movs	r0, #18
 8004f04:	f7fb fe26 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8004f08:	f640 2139 	movw	r1, #2617	; 0xa39
 8004f0c:	2013      	movs	r0, #19
 8004f0e:	f7fb fe21 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(10);
 8004f12:	200a      	movs	r0, #10
 8004f14:	f000 ff9e 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8004f18:	2140      	movs	r1, #64	; 0x40
 8004f1a:	2011      	movs	r0, #17
 8004f1c:	f7fb fe1a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8004f20:	2150      	movs	r1, #80	; 0x50
 8004f22:	2015      	movs	r0, #21
 8004f24:	f7fb fe16 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(10);
 8004f28:	200a      	movs	r0, #10
 8004f2a:	f000 ff93 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8004f2e:	211e      	movs	r1, #30
 8004f30:	2012      	movs	r0, #18
 8004f32:	f7fb fe0f 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(10);
 8004f36:	200a      	movs	r0, #10
 8004f38:	f000 ff8c 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8004f3c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8004f40:	2010      	movs	r0, #16
 8004f42:	f7fb fe07 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8004f46:	f642 2139 	movw	r1, #10809	; 0x2a39
 8004f4a:	2013      	movs	r0, #19
 8004f4c:	f7fb fe02 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(10);
 8004f50:	200a      	movs	r0, #10
 8004f52:	f000 ff7f 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8004f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	f7fb fdfa 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8004f60:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f64:	2002      	movs	r0, #2
 8004f66:	f7fb fdf5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8004f6a:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f6e:	2003      	movs	r0, #3
 8004f70:	f7fb fdf0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8004f74:	f240 2102 	movw	r1, #514	; 0x202
 8004f78:	2008      	movs	r0, #8
 8004f7a:	f7fb fdeb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8004f7e:	2108      	movs	r1, #8
 8004f80:	200a      	movs	r0, #10
 8004f82:	f7fb fde7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8004f86:	2100      	movs	r1, #0
 8004f88:	2030      	movs	r0, #48	; 0x30
 8004f8a:	f7fb fde3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8004f8e:	f240 4102 	movw	r1, #1026	; 0x402
 8004f92:	2031      	movs	r0, #49	; 0x31
 8004f94:	f7fb fdde 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8004f98:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004f9c:	2032      	movs	r0, #50	; 0x32
 8004f9e:	f7fb fdd9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8004fa2:	f240 5103 	movw	r1, #1283	; 0x503
 8004fa6:	2033      	movs	r0, #51	; 0x33
 8004fa8:	f7fb fdd4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8004fac:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004fb0:	2034      	movs	r0, #52	; 0x34
 8004fb2:	f7fb fdcf 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8004fb6:	f240 3101 	movw	r1, #769	; 0x301
 8004fba:	2035      	movs	r0, #53	; 0x35
 8004fbc:	f7fb fdca 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8004fc0:	f240 7107 	movw	r1, #1799	; 0x707
 8004fc4:	2036      	movs	r0, #54	; 0x36
 8004fc6:	f7fb fdc5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8004fca:	f240 3105 	movw	r1, #773	; 0x305
 8004fce:	2037      	movs	r0, #55	; 0x37
 8004fd0:	f7fb fdc0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8004fd4:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004fd8:	2038      	movs	r0, #56	; 0x38
 8004fda:	f7fb fdbb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8004fde:	f640 710b 	movw	r1, #3851	; 0xf0b
 8004fe2:	2039      	movs	r0, #57	; 0x39
 8004fe4:	f7fb fdb6 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8004fe8:	2102      	movs	r1, #2
 8004fea:	2041      	movs	r0, #65	; 0x41
 8004fec:	f7fb fdb2 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8004ff0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ff4:	2060      	movs	r0, #96	; 0x60
 8004ff6:	f7fb fdad 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	2061      	movs	r0, #97	; 0x61
 8004ffe:	f7fb fda9 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005002:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005006:	2090      	movs	r0, #144	; 0x90
 8005008:	f7fb fda4 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800500c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005010:	2092      	movs	r0, #146	; 0x92
 8005012:	f7fb fd9f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005016:	2104      	movs	r1, #4
 8005018:	2093      	movs	r0, #147	; 0x93
 800501a:	f7fb fd9b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800501e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005022:	20a0      	movs	r0, #160	; 0xa0
 8005024:	f7fb fd96 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005028:	2101      	movs	r1, #1
 800502a:	2007      	movs	r0, #7
 800502c:	f7fb fd92 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005030:	2121      	movs	r1, #33	; 0x21
 8005032:	2007      	movs	r0, #7
 8005034:	f7fb fd8e 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005038:	2123      	movs	r1, #35	; 0x23
 800503a:	2007      	movs	r0, #7
 800503c:	f7fb fd8a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005040:	2133      	movs	r1, #51	; 0x33
 8005042:	2007      	movs	r0, #7
 8005044:	f7fb fd86 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005048:	f240 1133 	movw	r1, #307	; 0x133
 800504c:	2007      	movs	r0, #7
 800504e:	f7fb fd81 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8005052:	2100      	movs	r1, #0
 8005054:	20a0      	movs	r0, #160	; 0xa0
 8005056:	f7fb fd7d 	bl	8000b54 <LCD_WriteReg>
 800505a:	f000 bc6b 	b.w	8005934 <LCD_Init+0x3e34>
 800505e:	bf00      	nop
 8005060:	20000fcc 	.word	0x20000fcc
	} else if (lcddev.id == 0x4535) {
 8005064:	4b5b      	ldr	r3, [pc, #364]	; (80051d4 <LCD_Init+0x36d4>)
 8005066:	889b      	ldrh	r3, [r3, #4]
 8005068:	f244 5235 	movw	r2, #17717	; 0x4535
 800506c:	4293      	cmp	r3, r2
 800506e:	f040 80b3 	bne.w	80051d8 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005072:	2130      	movs	r1, #48	; 0x30
 8005074:	2015      	movs	r0, #21
 8005076:	f7fb fd6d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800507a:	2110      	movs	r1, #16
 800507c:	209a      	movs	r0, #154	; 0x9a
 800507e:	f7fb fd69 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005082:	2120      	movs	r1, #32
 8005084:	2011      	movs	r0, #17
 8005086:	f7fb fd65 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800508a:	f243 4128 	movw	r1, #13352	; 0x3428
 800508e:	2010      	movs	r0, #16
 8005090:	f7fb fd60 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8005094:	2102      	movs	r1, #2
 8005096:	2012      	movs	r0, #18
 8005098:	f7fb fd5c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 800509c:	f241 0138 	movw	r1, #4152	; 0x1038
 80050a0:	2013      	movs	r0, #19
 80050a2:	f7fb fd57 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(40);
 80050a6:	2028      	movs	r0, #40	; 0x28
 80050a8:	f000 fed4 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80050ac:	2112      	movs	r1, #18
 80050ae:	2012      	movs	r0, #18
 80050b0:	f7fb fd50 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(40);
 80050b4:	2028      	movs	r0, #40	; 0x28
 80050b6:	f000 fecd 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80050ba:	f243 4120 	movw	r1, #13344	; 0x3420
 80050be:	2010      	movs	r0, #16
 80050c0:	f7fb fd48 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 80050c4:	f243 0138 	movw	r1, #12344	; 0x3038
 80050c8:	2013      	movs	r0, #19
 80050ca:	f7fb fd43 	bl	8000b54 <LCD_WriteReg>
		HAL_Delay(70);
 80050ce:	2046      	movs	r0, #70	; 0x46
 80050d0:	f000 fec0 	bl	8005e54 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80050d4:	2100      	movs	r1, #0
 80050d6:	2030      	movs	r0, #48	; 0x30
 80050d8:	f7fb fd3c 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80050dc:	f240 4102 	movw	r1, #1026	; 0x402
 80050e0:	2031      	movs	r0, #49	; 0x31
 80050e2:	f7fb fd37 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80050e6:	f240 3107 	movw	r1, #775	; 0x307
 80050ea:	2032      	movs	r0, #50	; 0x32
 80050ec:	f7fb fd32 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80050f0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80050f4:	2033      	movs	r0, #51	; 0x33
 80050f6:	f7fb fd2d 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80050fa:	2104      	movs	r1, #4
 80050fc:	2034      	movs	r0, #52	; 0x34
 80050fe:	f7fb fd29 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005102:	f240 4101 	movw	r1, #1025	; 0x401
 8005106:	2035      	movs	r0, #53	; 0x35
 8005108:	f7fb fd24 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800510c:	f240 7107 	movw	r1, #1799	; 0x707
 8005110:	2036      	movs	r0, #54	; 0x36
 8005112:	f7fb fd1f 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005116:	f240 3105 	movw	r1, #773	; 0x305
 800511a:	2037      	movs	r0, #55	; 0x37
 800511c:	f7fb fd1a 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005120:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005124:	2038      	movs	r0, #56	; 0x38
 8005126:	f7fb fd15 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800512a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800512e:	2039      	movs	r0, #57	; 0x39
 8005130:	f7fb fd10 	bl	8000b54 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005138:	2001      	movs	r0, #1
 800513a:	f7fb fd0b 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800513e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005142:	2002      	movs	r0, #2
 8005144:	f7fb fd06 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005148:	f241 0130 	movw	r1, #4144	; 0x1030
 800514c:	2003      	movs	r0, #3
 800514e:	f7fb fd01 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005152:	f640 0108 	movw	r1, #2056	; 0x808
 8005156:	2008      	movs	r0, #8
 8005158:	f7fb fcfc 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800515c:	2108      	movs	r1, #8
 800515e:	200a      	movs	r0, #10
 8005160:	f7fb fcf8 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005164:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005168:	2060      	movs	r0, #96	; 0x60
 800516a:	f7fb fcf3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800516e:	2101      	movs	r1, #1
 8005170:	2061      	movs	r0, #97	; 0x61
 8005172:	f7fb fcef 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005176:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800517a:	2090      	movs	r0, #144	; 0x90
 800517c:	f7fb fcea 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005180:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005184:	2092      	movs	r0, #146	; 0x92
 8005186:	f7fb fce5 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800518a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800518e:	2093      	movs	r0, #147	; 0x93
 8005190:	f7fb fce0 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8005194:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005198:	20a0      	movs	r0, #160	; 0xa0
 800519a:	f7fb fcdb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 800519e:	2110      	movs	r1, #16
 80051a0:	20a3      	movs	r0, #163	; 0xa3
 80051a2:	f7fb fcd7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80051a6:	2101      	movs	r1, #1
 80051a8:	2007      	movs	r0, #7
 80051aa:	f7fb fcd3 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80051ae:	2121      	movs	r1, #33	; 0x21
 80051b0:	2007      	movs	r0, #7
 80051b2:	f7fb fccf 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80051b6:	2123      	movs	r1, #35	; 0x23
 80051b8:	2007      	movs	r0, #7
 80051ba:	f7fb fccb 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80051be:	2133      	movs	r1, #51	; 0x33
 80051c0:	2007      	movs	r0, #7
 80051c2:	f7fb fcc7 	bl	8000b54 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80051c6:	f240 1133 	movw	r1, #307	; 0x133
 80051ca:	2007      	movs	r0, #7
 80051cc:	f7fb fcc2 	bl	8000b54 <LCD_WriteReg>
 80051d0:	e3b0      	b.n	8005934 <LCD_Init+0x3e34>
 80051d2:	bf00      	nop
 80051d4:	20000fcc 	.word	0x20000fcc
	} else if (lcddev.id == 0X1963) {
 80051d8:	4ba8      	ldr	r3, [pc, #672]	; (800547c <LCD_Init+0x397c>)
 80051da:	889b      	ldrh	r3, [r3, #4]
 80051dc:	f641 1263 	movw	r2, #6499	; 0x1963
 80051e0:	4293      	cmp	r3, r2
 80051e2:	f040 83a7 	bne.w	8005934 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80051e6:	20e2      	movs	r0, #226	; 0xe2
 80051e8:	f7fb fc28 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80051ec:	4ba4      	ldr	r3, [pc, #656]	; (8005480 <LCD_Init+0x3980>)
 80051ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051f2:	611a      	str	r2, [r3, #16]
 80051f4:	4ba2      	ldr	r3, [pc, #648]	; (8005480 <LCD_Init+0x3980>)
 80051f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051fa:	615a      	str	r2, [r3, #20]
 80051fc:	4ba1      	ldr	r3, [pc, #644]	; (8005484 <LCD_Init+0x3984>)
 80051fe:	221d      	movs	r2, #29
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	4b9f      	ldr	r3, [pc, #636]	; (8005480 <LCD_Init+0x3980>)
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	615a      	str	r2, [r3, #20]
 8005208:	4b9d      	ldr	r3, [pc, #628]	; (8005480 <LCD_Init+0x3980>)
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	611a      	str	r2, [r3, #16]
 800520e:	4b9c      	ldr	r3, [pc, #624]	; (8005480 <LCD_Init+0x3980>)
 8005210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005214:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005216:	4b9a      	ldr	r3, [pc, #616]	; (8005480 <LCD_Init+0x3980>)
 8005218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	4b98      	ldr	r3, [pc, #608]	; (8005480 <LCD_Init+0x3980>)
 8005220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005224:	615a      	str	r2, [r3, #20]
 8005226:	4b97      	ldr	r3, [pc, #604]	; (8005484 <LCD_Init+0x3984>)
 8005228:	2202      	movs	r2, #2
 800522a:	60da      	str	r2, [r3, #12]
 800522c:	4b94      	ldr	r3, [pc, #592]	; (8005480 <LCD_Init+0x3980>)
 800522e:	2280      	movs	r2, #128	; 0x80
 8005230:	615a      	str	r2, [r3, #20]
 8005232:	4b93      	ldr	r3, [pc, #588]	; (8005480 <LCD_Init+0x3980>)
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	611a      	str	r2, [r3, #16]
 8005238:	4b91      	ldr	r3, [pc, #580]	; (8005480 <LCD_Init+0x3980>)
 800523a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005240:	4b8f      	ldr	r3, [pc, #572]	; (8005480 <LCD_Init+0x3980>)
 8005242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005246:	611a      	str	r2, [r3, #16]
 8005248:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <LCD_Init+0x3980>)
 800524a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524e:	615a      	str	r2, [r3, #20]
 8005250:	4b8c      	ldr	r3, [pc, #560]	; (8005484 <LCD_Init+0x3984>)
 8005252:	2204      	movs	r2, #4
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	4b8a      	ldr	r3, [pc, #552]	; (8005480 <LCD_Init+0x3980>)
 8005258:	2280      	movs	r2, #128	; 0x80
 800525a:	615a      	str	r2, [r3, #20]
 800525c:	4b88      	ldr	r3, [pc, #544]	; (8005480 <LCD_Init+0x3980>)
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	611a      	str	r2, [r3, #16]
 8005262:	4b87      	ldr	r3, [pc, #540]	; (8005480 <LCD_Init+0x3980>)
 8005264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005268:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 800526a:	2001      	movs	r0, #1
 800526c:	f000 fdf2 	bl	8005e54 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005270:	20e0      	movs	r0, #224	; 0xe0
 8005272:	f7fb fbe3 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005276:	4b82      	ldr	r3, [pc, #520]	; (8005480 <LCD_Init+0x3980>)
 8005278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800527c:	611a      	str	r2, [r3, #16]
 800527e:	4b80      	ldr	r3, [pc, #512]	; (8005480 <LCD_Init+0x3980>)
 8005280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005284:	615a      	str	r2, [r3, #20]
 8005286:	4b7f      	ldr	r3, [pc, #508]	; (8005484 <LCD_Init+0x3984>)
 8005288:	2201      	movs	r2, #1
 800528a:	60da      	str	r2, [r3, #12]
 800528c:	4b7c      	ldr	r3, [pc, #496]	; (8005480 <LCD_Init+0x3980>)
 800528e:	2280      	movs	r2, #128	; 0x80
 8005290:	615a      	str	r2, [r3, #20]
 8005292:	4b7b      	ldr	r3, [pc, #492]	; (8005480 <LCD_Init+0x3980>)
 8005294:	2280      	movs	r2, #128	; 0x80
 8005296:	611a      	str	r2, [r3, #16]
 8005298:	4b79      	ldr	r3, [pc, #484]	; (8005480 <LCD_Init+0x3980>)
 800529a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529e:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80052a0:	200a      	movs	r0, #10
 80052a2:	f000 fdd7 	bl	8005e54 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80052a6:	20e0      	movs	r0, #224	; 0xe0
 80052a8:	f7fb fbc8 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80052ac:	4b74      	ldr	r3, [pc, #464]	; (8005480 <LCD_Init+0x3980>)
 80052ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052b2:	611a      	str	r2, [r3, #16]
 80052b4:	4b72      	ldr	r3, [pc, #456]	; (8005480 <LCD_Init+0x3980>)
 80052b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ba:	615a      	str	r2, [r3, #20]
 80052bc:	4b71      	ldr	r3, [pc, #452]	; (8005484 <LCD_Init+0x3984>)
 80052be:	2203      	movs	r2, #3
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	4b6f      	ldr	r3, [pc, #444]	; (8005480 <LCD_Init+0x3980>)
 80052c4:	2280      	movs	r2, #128	; 0x80
 80052c6:	615a      	str	r2, [r3, #20]
 80052c8:	4b6d      	ldr	r3, [pc, #436]	; (8005480 <LCD_Init+0x3980>)
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	611a      	str	r2, [r3, #16]
 80052ce:	4b6c      	ldr	r3, [pc, #432]	; (8005480 <LCD_Init+0x3980>)
 80052d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d4:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80052d6:	200c      	movs	r0, #12
 80052d8:	f000 fdbc 	bl	8005e54 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80052dc:	2001      	movs	r0, #1
 80052de:	f7fb fbad 	bl	8000a3c <LCD_WR_REG>
		HAL_Delay(10);
 80052e2:	200a      	movs	r0, #10
 80052e4:	f000 fdb6 	bl	8005e54 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80052e8:	20e6      	movs	r0, #230	; 0xe6
 80052ea:	f7fb fba7 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80052ee:	4b64      	ldr	r3, [pc, #400]	; (8005480 <LCD_Init+0x3980>)
 80052f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f4:	611a      	str	r2, [r3, #16]
 80052f6:	4b62      	ldr	r3, [pc, #392]	; (8005480 <LCD_Init+0x3980>)
 80052f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052fc:	615a      	str	r2, [r3, #20]
 80052fe:	4b61      	ldr	r3, [pc, #388]	; (8005484 <LCD_Init+0x3984>)
 8005300:	222f      	movs	r2, #47	; 0x2f
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	4b5e      	ldr	r3, [pc, #376]	; (8005480 <LCD_Init+0x3980>)
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	615a      	str	r2, [r3, #20]
 800530a:	4b5d      	ldr	r3, [pc, #372]	; (8005480 <LCD_Init+0x3980>)
 800530c:	2280      	movs	r2, #128	; 0x80
 800530e:	611a      	str	r2, [r3, #16]
 8005310:	4b5b      	ldr	r3, [pc, #364]	; (8005480 <LCD_Init+0x3980>)
 8005312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005316:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005318:	4b59      	ldr	r3, [pc, #356]	; (8005480 <LCD_Init+0x3980>)
 800531a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800531e:	611a      	str	r2, [r3, #16]
 8005320:	4b57      	ldr	r3, [pc, #348]	; (8005480 <LCD_Init+0x3980>)
 8005322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005326:	615a      	str	r2, [r3, #20]
 8005328:	4b56      	ldr	r3, [pc, #344]	; (8005484 <LCD_Init+0x3984>)
 800532a:	22ff      	movs	r2, #255	; 0xff
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	4b54      	ldr	r3, [pc, #336]	; (8005480 <LCD_Init+0x3980>)
 8005330:	2280      	movs	r2, #128	; 0x80
 8005332:	615a      	str	r2, [r3, #20]
 8005334:	4b52      	ldr	r3, [pc, #328]	; (8005480 <LCD_Init+0x3980>)
 8005336:	2280      	movs	r2, #128	; 0x80
 8005338:	611a      	str	r2, [r3, #16]
 800533a:	4b51      	ldr	r3, [pc, #324]	; (8005480 <LCD_Init+0x3980>)
 800533c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005340:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005342:	4b4f      	ldr	r3, [pc, #316]	; (8005480 <LCD_Init+0x3980>)
 8005344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005348:	611a      	str	r2, [r3, #16]
 800534a:	4b4d      	ldr	r3, [pc, #308]	; (8005480 <LCD_Init+0x3980>)
 800534c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005350:	615a      	str	r2, [r3, #20]
 8005352:	4b4c      	ldr	r3, [pc, #304]	; (8005484 <LCD_Init+0x3984>)
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	60da      	str	r2, [r3, #12]
 8005358:	4b49      	ldr	r3, [pc, #292]	; (8005480 <LCD_Init+0x3980>)
 800535a:	2280      	movs	r2, #128	; 0x80
 800535c:	615a      	str	r2, [r3, #20]
 800535e:	4b48      	ldr	r3, [pc, #288]	; (8005480 <LCD_Init+0x3980>)
 8005360:	2280      	movs	r2, #128	; 0x80
 8005362:	611a      	str	r2, [r3, #16]
 8005364:	4b46      	ldr	r3, [pc, #280]	; (8005480 <LCD_Init+0x3980>)
 8005366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800536a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 800536c:	20b0      	movs	r0, #176	; 0xb0
 800536e:	f7fb fb65 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005372:	4b43      	ldr	r3, [pc, #268]	; (8005480 <LCD_Init+0x3980>)
 8005374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005378:	611a      	str	r2, [r3, #16]
 800537a:	4b41      	ldr	r3, [pc, #260]	; (8005480 <LCD_Init+0x3980>)
 800537c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005380:	615a      	str	r2, [r3, #20]
 8005382:	4b40      	ldr	r3, [pc, #256]	; (8005484 <LCD_Init+0x3984>)
 8005384:	2220      	movs	r2, #32
 8005386:	60da      	str	r2, [r3, #12]
 8005388:	4b3d      	ldr	r3, [pc, #244]	; (8005480 <LCD_Init+0x3980>)
 800538a:	2280      	movs	r2, #128	; 0x80
 800538c:	615a      	str	r2, [r3, #20]
 800538e:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <LCD_Init+0x3980>)
 8005390:	2280      	movs	r2, #128	; 0x80
 8005392:	611a      	str	r2, [r3, #16]
 8005394:	4b3a      	ldr	r3, [pc, #232]	; (8005480 <LCD_Init+0x3980>)
 8005396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 800539c:	4b38      	ldr	r3, [pc, #224]	; (8005480 <LCD_Init+0x3980>)
 800539e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a2:	611a      	str	r2, [r3, #16]
 80053a4:	4b36      	ldr	r3, [pc, #216]	; (8005480 <LCD_Init+0x3980>)
 80053a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053aa:	615a      	str	r2, [r3, #20]
 80053ac:	4b35      	ldr	r3, [pc, #212]	; (8005484 <LCD_Init+0x3984>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	4b33      	ldr	r3, [pc, #204]	; (8005480 <LCD_Init+0x3980>)
 80053b4:	2280      	movs	r2, #128	; 0x80
 80053b6:	615a      	str	r2, [r3, #20]
 80053b8:	4b31      	ldr	r3, [pc, #196]	; (8005480 <LCD_Init+0x3980>)
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	611a      	str	r2, [r3, #16]
 80053be:	4b30      	ldr	r3, [pc, #192]	; (8005480 <LCD_Init+0x3980>)
 80053c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c4:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 80053c6:	4b2e      	ldr	r3, [pc, #184]	; (8005480 <LCD_Init+0x3980>)
 80053c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053cc:	611a      	str	r2, [r3, #16]
 80053ce:	4b2c      	ldr	r3, [pc, #176]	; (8005480 <LCD_Init+0x3980>)
 80053d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d4:	615a      	str	r2, [r3, #20]
 80053d6:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <LCD_Init+0x3984>)
 80053d8:	2203      	movs	r2, #3
 80053da:	60da      	str	r2, [r3, #12]
 80053dc:	4b28      	ldr	r3, [pc, #160]	; (8005480 <LCD_Init+0x3980>)
 80053de:	2280      	movs	r2, #128	; 0x80
 80053e0:	615a      	str	r2, [r3, #20]
 80053e2:	4b27      	ldr	r3, [pc, #156]	; (8005480 <LCD_Init+0x3980>)
 80053e4:	2280      	movs	r2, #128	; 0x80
 80053e6:	611a      	str	r2, [r3, #16]
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <LCD_Init+0x3980>)
 80053ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80053f0:	4b23      	ldr	r3, [pc, #140]	; (8005480 <LCD_Init+0x3980>)
 80053f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053f6:	611a      	str	r2, [r3, #16]
 80053f8:	4b21      	ldr	r3, [pc, #132]	; (8005480 <LCD_Init+0x3980>)
 80053fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053fe:	615a      	str	r2, [r3, #20]
 8005400:	4b20      	ldr	r3, [pc, #128]	; (8005484 <LCD_Init+0x3984>)
 8005402:	f240 321f 	movw	r2, #799	; 0x31f
 8005406:	60da      	str	r2, [r3, #12]
 8005408:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <LCD_Init+0x3980>)
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	615a      	str	r2, [r3, #20]
 800540e:	4b1c      	ldr	r3, [pc, #112]	; (8005480 <LCD_Init+0x3980>)
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	611a      	str	r2, [r3, #16]
 8005414:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <LCD_Init+0x3980>)
 8005416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 800541c:	4b18      	ldr	r3, [pc, #96]	; (8005480 <LCD_Init+0x3980>)
 800541e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005422:	611a      	str	r2, [r3, #16]
 8005424:	4b16      	ldr	r3, [pc, #88]	; (8005480 <LCD_Init+0x3980>)
 8005426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542a:	615a      	str	r2, [r3, #20]
 800542c:	4b15      	ldr	r3, [pc, #84]	; (8005484 <LCD_Init+0x3984>)
 800542e:	2201      	movs	r2, #1
 8005430:	60da      	str	r2, [r3, #12]
 8005432:	4b13      	ldr	r3, [pc, #76]	; (8005480 <LCD_Init+0x3980>)
 8005434:	2280      	movs	r2, #128	; 0x80
 8005436:	615a      	str	r2, [r3, #20]
 8005438:	4b11      	ldr	r3, [pc, #68]	; (8005480 <LCD_Init+0x3980>)
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	611a      	str	r2, [r3, #16]
 800543e:	4b10      	ldr	r3, [pc, #64]	; (8005480 <LCD_Init+0x3980>)
 8005440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005444:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005446:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <LCD_Init+0x3980>)
 8005448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800544c:	611a      	str	r2, [r3, #16]
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <LCD_Init+0x3980>)
 8005450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005454:	615a      	str	r2, [r3, #20]
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <LCD_Init+0x3984>)
 8005458:	f240 12df 	movw	r2, #479	; 0x1df
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <LCD_Init+0x3980>)
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	615a      	str	r2, [r3, #20]
 8005464:	4b06      	ldr	r3, [pc, #24]	; (8005480 <LCD_Init+0x3980>)
 8005466:	2280      	movs	r2, #128	; 0x80
 8005468:	611a      	str	r2, [r3, #16]
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <LCD_Init+0x3980>)
 800546c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005470:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005472:	4b03      	ldr	r3, [pc, #12]	; (8005480 <LCD_Init+0x3980>)
 8005474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005478:	e006      	b.n	8005488 <LCD_Init+0x3988>
 800547a:	bf00      	nop
 800547c:	20000fcc 	.word	0x20000fcc
 8005480:	40011000 	.word	0x40011000
 8005484:	40010c00 	.word	0x40010c00
 8005488:	611a      	str	r2, [r3, #16]
 800548a:	4ba3      	ldr	r3, [pc, #652]	; (8005718 <LCD_Init+0x3c18>)
 800548c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005490:	615a      	str	r2, [r3, #20]
 8005492:	4ba2      	ldr	r3, [pc, #648]	; (800571c <LCD_Init+0x3c1c>)
 8005494:	2200      	movs	r2, #0
 8005496:	60da      	str	r2, [r3, #12]
 8005498:	4b9f      	ldr	r3, [pc, #636]	; (8005718 <LCD_Init+0x3c18>)
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	615a      	str	r2, [r3, #20]
 800549e:	4b9e      	ldr	r3, [pc, #632]	; (8005718 <LCD_Init+0x3c18>)
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	611a      	str	r2, [r3, #16]
 80054a4:	4b9c      	ldr	r3, [pc, #624]	; (8005718 <LCD_Init+0x3c18>)
 80054a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054aa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80054ac:	20b4      	movs	r0, #180	; 0xb4
 80054ae:	f7fb fac5 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80054b2:	4b99      	ldr	r3, [pc, #612]	; (8005718 <LCD_Init+0x3c18>)
 80054b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054b8:	611a      	str	r2, [r3, #16]
 80054ba:	4b97      	ldr	r3, [pc, #604]	; (8005718 <LCD_Init+0x3c18>)
 80054bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c0:	615a      	str	r2, [r3, #20]
 80054c2:	4b96      	ldr	r3, [pc, #600]	; (800571c <LCD_Init+0x3c1c>)
 80054c4:	2204      	movs	r2, #4
 80054c6:	60da      	str	r2, [r3, #12]
 80054c8:	4b93      	ldr	r3, [pc, #588]	; (8005718 <LCD_Init+0x3c18>)
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	615a      	str	r2, [r3, #20]
 80054ce:	4b92      	ldr	r3, [pc, #584]	; (8005718 <LCD_Init+0x3c18>)
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	611a      	str	r2, [r3, #16]
 80054d4:	4b90      	ldr	r3, [pc, #576]	; (8005718 <LCD_Init+0x3c18>)
 80054d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054da:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80054dc:	4b8e      	ldr	r3, [pc, #568]	; (8005718 <LCD_Init+0x3c18>)
 80054de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054e2:	611a      	str	r2, [r3, #16]
 80054e4:	4b8c      	ldr	r3, [pc, #560]	; (8005718 <LCD_Init+0x3c18>)
 80054e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ea:	615a      	str	r2, [r3, #20]
 80054ec:	4b8b      	ldr	r3, [pc, #556]	; (800571c <LCD_Init+0x3c1c>)
 80054ee:	f240 421f 	movw	r2, #1055	; 0x41f
 80054f2:	60da      	str	r2, [r3, #12]
 80054f4:	4b88      	ldr	r3, [pc, #544]	; (8005718 <LCD_Init+0x3c18>)
 80054f6:	2280      	movs	r2, #128	; 0x80
 80054f8:	615a      	str	r2, [r3, #20]
 80054fa:	4b87      	ldr	r3, [pc, #540]	; (8005718 <LCD_Init+0x3c18>)
 80054fc:	2280      	movs	r2, #128	; 0x80
 80054fe:	611a      	str	r2, [r3, #16]
 8005500:	4b85      	ldr	r3, [pc, #532]	; (8005718 <LCD_Init+0x3c18>)
 8005502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005506:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005508:	4b83      	ldr	r3, [pc, #524]	; (8005718 <LCD_Init+0x3c18>)
 800550a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550e:	611a      	str	r2, [r3, #16]
 8005510:	4b81      	ldr	r3, [pc, #516]	; (8005718 <LCD_Init+0x3c18>)
 8005512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005516:	615a      	str	r2, [r3, #20]
 8005518:	4b80      	ldr	r3, [pc, #512]	; (800571c <LCD_Init+0x3c1c>)
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	4b7e      	ldr	r3, [pc, #504]	; (8005718 <LCD_Init+0x3c18>)
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	615a      	str	r2, [r3, #20]
 8005524:	4b7c      	ldr	r3, [pc, #496]	; (8005718 <LCD_Init+0x3c18>)
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	611a      	str	r2, [r3, #16]
 800552a:	4b7b      	ldr	r3, [pc, #492]	; (8005718 <LCD_Init+0x3c18>)
 800552c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005530:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005532:	4b79      	ldr	r3, [pc, #484]	; (8005718 <LCD_Init+0x3c18>)
 8005534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005538:	611a      	str	r2, [r3, #16]
 800553a:	4b77      	ldr	r3, [pc, #476]	; (8005718 <LCD_Init+0x3c18>)
 800553c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005540:	615a      	str	r2, [r3, #20]
 8005542:	4b76      	ldr	r3, [pc, #472]	; (800571c <LCD_Init+0x3c1c>)
 8005544:	222e      	movs	r2, #46	; 0x2e
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	4b73      	ldr	r3, [pc, #460]	; (8005718 <LCD_Init+0x3c18>)
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	615a      	str	r2, [r3, #20]
 800554e:	4b72      	ldr	r3, [pc, #456]	; (8005718 <LCD_Init+0x3c18>)
 8005550:	2280      	movs	r2, #128	; 0x80
 8005552:	611a      	str	r2, [r3, #16]
 8005554:	4b70      	ldr	r3, [pc, #448]	; (8005718 <LCD_Init+0x3c18>)
 8005556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 800555c:	4b6e      	ldr	r3, [pc, #440]	; (8005718 <LCD_Init+0x3c18>)
 800555e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005562:	611a      	str	r2, [r3, #16]
 8005564:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <LCD_Init+0x3c18>)
 8005566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556a:	615a      	str	r2, [r3, #20]
 800556c:	4b6b      	ldr	r3, [pc, #428]	; (800571c <LCD_Init+0x3c1c>)
 800556e:	2200      	movs	r2, #0
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	4b69      	ldr	r3, [pc, #420]	; (8005718 <LCD_Init+0x3c18>)
 8005574:	2280      	movs	r2, #128	; 0x80
 8005576:	615a      	str	r2, [r3, #20]
 8005578:	4b67      	ldr	r3, [pc, #412]	; (8005718 <LCD_Init+0x3c18>)
 800557a:	2280      	movs	r2, #128	; 0x80
 800557c:	611a      	str	r2, [r3, #16]
 800557e:	4b66      	ldr	r3, [pc, #408]	; (8005718 <LCD_Init+0x3c18>)
 8005580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005584:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005586:	4b64      	ldr	r3, [pc, #400]	; (8005718 <LCD_Init+0x3c18>)
 8005588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800558c:	611a      	str	r2, [r3, #16]
 800558e:	4b62      	ldr	r3, [pc, #392]	; (8005718 <LCD_Init+0x3c18>)
 8005590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005594:	615a      	str	r2, [r3, #20]
 8005596:	4b61      	ldr	r3, [pc, #388]	; (800571c <LCD_Init+0x3c1c>)
 8005598:	2200      	movs	r2, #0
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	4b5e      	ldr	r3, [pc, #376]	; (8005718 <LCD_Init+0x3c18>)
 800559e:	2280      	movs	r2, #128	; 0x80
 80055a0:	615a      	str	r2, [r3, #20]
 80055a2:	4b5d      	ldr	r3, [pc, #372]	; (8005718 <LCD_Init+0x3c18>)
 80055a4:	2280      	movs	r2, #128	; 0x80
 80055a6:	611a      	str	r2, [r3, #16]
 80055a8:	4b5b      	ldr	r3, [pc, #364]	; (8005718 <LCD_Init+0x3c18>)
 80055aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80055b0:	4b59      	ldr	r3, [pc, #356]	; (8005718 <LCD_Init+0x3c18>)
 80055b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055b6:	611a      	str	r2, [r3, #16]
 80055b8:	4b57      	ldr	r3, [pc, #348]	; (8005718 <LCD_Init+0x3c18>)
 80055ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055be:	615a      	str	r2, [r3, #20]
 80055c0:	4b56      	ldr	r3, [pc, #344]	; (800571c <LCD_Init+0x3c1c>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	4b54      	ldr	r3, [pc, #336]	; (8005718 <LCD_Init+0x3c18>)
 80055c8:	2280      	movs	r2, #128	; 0x80
 80055ca:	615a      	str	r2, [r3, #20]
 80055cc:	4b52      	ldr	r3, [pc, #328]	; (8005718 <LCD_Init+0x3c18>)
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	611a      	str	r2, [r3, #16]
 80055d2:	4b51      	ldr	r3, [pc, #324]	; (8005718 <LCD_Init+0x3c18>)
 80055d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80055da:	4b4f      	ldr	r3, [pc, #316]	; (8005718 <LCD_Init+0x3c18>)
 80055dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055e0:	611a      	str	r2, [r3, #16]
 80055e2:	4b4d      	ldr	r3, [pc, #308]	; (8005718 <LCD_Init+0x3c18>)
 80055e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e8:	615a      	str	r2, [r3, #20]
 80055ea:	4b4c      	ldr	r3, [pc, #304]	; (800571c <LCD_Init+0x3c1c>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	60da      	str	r2, [r3, #12]
 80055f0:	4b49      	ldr	r3, [pc, #292]	; (8005718 <LCD_Init+0x3c18>)
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	615a      	str	r2, [r3, #20]
 80055f6:	4b48      	ldr	r3, [pc, #288]	; (8005718 <LCD_Init+0x3c18>)
 80055f8:	2280      	movs	r2, #128	; 0x80
 80055fa:	611a      	str	r2, [r3, #16]
 80055fc:	4b46      	ldr	r3, [pc, #280]	; (8005718 <LCD_Init+0x3c18>)
 80055fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005602:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005604:	20b6      	movs	r0, #182	; 0xb6
 8005606:	f7fb fa19 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 800560a:	4b43      	ldr	r3, [pc, #268]	; (8005718 <LCD_Init+0x3c18>)
 800560c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005610:	611a      	str	r2, [r3, #16]
 8005612:	4b41      	ldr	r3, [pc, #260]	; (8005718 <LCD_Init+0x3c18>)
 8005614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005618:	615a      	str	r2, [r3, #20]
 800561a:	4b40      	ldr	r3, [pc, #256]	; (800571c <LCD_Init+0x3c1c>)
 800561c:	2202      	movs	r2, #2
 800561e:	60da      	str	r2, [r3, #12]
 8005620:	4b3d      	ldr	r3, [pc, #244]	; (8005718 <LCD_Init+0x3c18>)
 8005622:	2280      	movs	r2, #128	; 0x80
 8005624:	615a      	str	r2, [r3, #20]
 8005626:	4b3c      	ldr	r3, [pc, #240]	; (8005718 <LCD_Init+0x3c18>)
 8005628:	2280      	movs	r2, #128	; 0x80
 800562a:	611a      	str	r2, [r3, #16]
 800562c:	4b3a      	ldr	r3, [pc, #232]	; (8005718 <LCD_Init+0x3c18>)
 800562e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005632:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005634:	4b38      	ldr	r3, [pc, #224]	; (8005718 <LCD_Init+0x3c18>)
 8005636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800563a:	611a      	str	r2, [r3, #16]
 800563c:	4b36      	ldr	r3, [pc, #216]	; (8005718 <LCD_Init+0x3c18>)
 800563e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005642:	615a      	str	r2, [r3, #20]
 8005644:	4b35      	ldr	r3, [pc, #212]	; (800571c <LCD_Init+0x3c1c>)
 8005646:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	4b32      	ldr	r3, [pc, #200]	; (8005718 <LCD_Init+0x3c18>)
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	615a      	str	r2, [r3, #20]
 8005652:	4b31      	ldr	r3, [pc, #196]	; (8005718 <LCD_Init+0x3c18>)
 8005654:	2280      	movs	r2, #128	; 0x80
 8005656:	611a      	str	r2, [r3, #16]
 8005658:	4b2f      	ldr	r3, [pc, #188]	; (8005718 <LCD_Init+0x3c18>)
 800565a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800565e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005660:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <LCD_Init+0x3c18>)
 8005662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005666:	611a      	str	r2, [r3, #16]
 8005668:	4b2b      	ldr	r3, [pc, #172]	; (8005718 <LCD_Init+0x3c18>)
 800566a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566e:	615a      	str	r2, [r3, #20]
 8005670:	4b2a      	ldr	r3, [pc, #168]	; (800571c <LCD_Init+0x3c1c>)
 8005672:	2200      	movs	r2, #0
 8005674:	60da      	str	r2, [r3, #12]
 8005676:	4b28      	ldr	r3, [pc, #160]	; (8005718 <LCD_Init+0x3c18>)
 8005678:	2280      	movs	r2, #128	; 0x80
 800567a:	615a      	str	r2, [r3, #20]
 800567c:	4b26      	ldr	r3, [pc, #152]	; (8005718 <LCD_Init+0x3c18>)
 800567e:	2280      	movs	r2, #128	; 0x80
 8005680:	611a      	str	r2, [r3, #16]
 8005682:	4b25      	ldr	r3, [pc, #148]	; (8005718 <LCD_Init+0x3c18>)
 8005684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005688:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 800568a:	4b23      	ldr	r3, [pc, #140]	; (8005718 <LCD_Init+0x3c18>)
 800568c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005690:	611a      	str	r2, [r3, #16]
 8005692:	4b21      	ldr	r3, [pc, #132]	; (8005718 <LCD_Init+0x3c18>)
 8005694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005698:	615a      	str	r2, [r3, #20]
 800569a:	4b20      	ldr	r3, [pc, #128]	; (800571c <LCD_Init+0x3c1c>)
 800569c:	2217      	movs	r2, #23
 800569e:	60da      	str	r2, [r3, #12]
 80056a0:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <LCD_Init+0x3c18>)
 80056a2:	2280      	movs	r2, #128	; 0x80
 80056a4:	615a      	str	r2, [r3, #20]
 80056a6:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <LCD_Init+0x3c18>)
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	611a      	str	r2, [r3, #16]
 80056ac:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <LCD_Init+0x3c18>)
 80056ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80056b4:	4b18      	ldr	r3, [pc, #96]	; (8005718 <LCD_Init+0x3c18>)
 80056b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ba:	611a      	str	r2, [r3, #16]
 80056bc:	4b16      	ldr	r3, [pc, #88]	; (8005718 <LCD_Init+0x3c18>)
 80056be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c2:	615a      	str	r2, [r3, #20]
 80056c4:	4b15      	ldr	r3, [pc, #84]	; (800571c <LCD_Init+0x3c1c>)
 80056c6:	2215      	movs	r2, #21
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	4b13      	ldr	r3, [pc, #76]	; (8005718 <LCD_Init+0x3c18>)
 80056cc:	2280      	movs	r2, #128	; 0x80
 80056ce:	615a      	str	r2, [r3, #20]
 80056d0:	4b11      	ldr	r3, [pc, #68]	; (8005718 <LCD_Init+0x3c18>)
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	611a      	str	r2, [r3, #16]
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <LCD_Init+0x3c18>)
 80056d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80056de:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <LCD_Init+0x3c18>)
 80056e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e4:	611a      	str	r2, [r3, #16]
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <LCD_Init+0x3c18>)
 80056e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ec:	615a      	str	r2, [r3, #20]
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <LCD_Init+0x3c1c>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	60da      	str	r2, [r3, #12]
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <LCD_Init+0x3c18>)
 80056f6:	2280      	movs	r2, #128	; 0x80
 80056f8:	615a      	str	r2, [r3, #20]
 80056fa:	4b07      	ldr	r3, [pc, #28]	; (8005718 <LCD_Init+0x3c18>)
 80056fc:	2280      	movs	r2, #128	; 0x80
 80056fe:	611a      	str	r2, [r3, #16]
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <LCD_Init+0x3c18>)
 8005702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005706:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005708:	4b03      	ldr	r3, [pc, #12]	; (8005718 <LCD_Init+0x3c18>)
 800570a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800570e:	611a      	str	r2, [r3, #16]
 8005710:	4b01      	ldr	r3, [pc, #4]	; (8005718 <LCD_Init+0x3c18>)
 8005712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005716:	e003      	b.n	8005720 <LCD_Init+0x3c20>
 8005718:	40011000 	.word	0x40011000
 800571c:	40010c00 	.word	0x40010c00
 8005720:	615a      	str	r2, [r3, #20]
 8005722:	4b8b      	ldr	r3, [pc, #556]	; (8005950 <LCD_Init+0x3e50>)
 8005724:	2200      	movs	r2, #0
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	4b8a      	ldr	r3, [pc, #552]	; (8005954 <LCD_Init+0x3e54>)
 800572a:	2280      	movs	r2, #128	; 0x80
 800572c:	615a      	str	r2, [r3, #20]
 800572e:	4b89      	ldr	r3, [pc, #548]	; (8005954 <LCD_Init+0x3e54>)
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	611a      	str	r2, [r3, #16]
 8005734:	4b87      	ldr	r3, [pc, #540]	; (8005954 <LCD_Init+0x3e54>)
 8005736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 800573c:	20f0      	movs	r0, #240	; 0xf0
 800573e:	f7fb f97d 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005742:	4b84      	ldr	r3, [pc, #528]	; (8005954 <LCD_Init+0x3e54>)
 8005744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005748:	611a      	str	r2, [r3, #16]
 800574a:	4b82      	ldr	r3, [pc, #520]	; (8005954 <LCD_Init+0x3e54>)
 800574c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005750:	615a      	str	r2, [r3, #20]
 8005752:	4b7f      	ldr	r3, [pc, #508]	; (8005950 <LCD_Init+0x3e50>)
 8005754:	2203      	movs	r2, #3
 8005756:	60da      	str	r2, [r3, #12]
 8005758:	4b7e      	ldr	r3, [pc, #504]	; (8005954 <LCD_Init+0x3e54>)
 800575a:	2280      	movs	r2, #128	; 0x80
 800575c:	615a      	str	r2, [r3, #20]
 800575e:	4b7d      	ldr	r3, [pc, #500]	; (8005954 <LCD_Init+0x3e54>)
 8005760:	2280      	movs	r2, #128	; 0x80
 8005762:	611a      	str	r2, [r3, #16]
 8005764:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <LCD_Init+0x3e54>)
 8005766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800576a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 800576c:	2029      	movs	r0, #41	; 0x29
 800576e:	f7fb f965 	bl	8000a3c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005772:	20d0      	movs	r0, #208	; 0xd0
 8005774:	f7fb f962 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005778:	4b76      	ldr	r3, [pc, #472]	; (8005954 <LCD_Init+0x3e54>)
 800577a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800577e:	611a      	str	r2, [r3, #16]
 8005780:	4b74      	ldr	r3, [pc, #464]	; (8005954 <LCD_Init+0x3e54>)
 8005782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005786:	615a      	str	r2, [r3, #20]
 8005788:	4b71      	ldr	r3, [pc, #452]	; (8005950 <LCD_Init+0x3e50>)
 800578a:	2200      	movs	r2, #0
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	4b71      	ldr	r3, [pc, #452]	; (8005954 <LCD_Init+0x3e54>)
 8005790:	2280      	movs	r2, #128	; 0x80
 8005792:	615a      	str	r2, [r3, #20]
 8005794:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <LCD_Init+0x3e54>)
 8005796:	2280      	movs	r2, #128	; 0x80
 8005798:	611a      	str	r2, [r3, #16]
 800579a:	4b6e      	ldr	r3, [pc, #440]	; (8005954 <LCD_Init+0x3e54>)
 800579c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 80057a2:	20be      	movs	r0, #190	; 0xbe
 80057a4:	f7fb f94a 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80057a8:	4b6a      	ldr	r3, [pc, #424]	; (8005954 <LCD_Init+0x3e54>)
 80057aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ae:	611a      	str	r2, [r3, #16]
 80057b0:	4b68      	ldr	r3, [pc, #416]	; (8005954 <LCD_Init+0x3e54>)
 80057b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b6:	615a      	str	r2, [r3, #20]
 80057b8:	4b65      	ldr	r3, [pc, #404]	; (8005950 <LCD_Init+0x3e50>)
 80057ba:	2205      	movs	r2, #5
 80057bc:	60da      	str	r2, [r3, #12]
 80057be:	4b65      	ldr	r3, [pc, #404]	; (8005954 <LCD_Init+0x3e54>)
 80057c0:	2280      	movs	r2, #128	; 0x80
 80057c2:	615a      	str	r2, [r3, #20]
 80057c4:	4b63      	ldr	r3, [pc, #396]	; (8005954 <LCD_Init+0x3e54>)
 80057c6:	2280      	movs	r2, #128	; 0x80
 80057c8:	611a      	str	r2, [r3, #16]
 80057ca:	4b62      	ldr	r3, [pc, #392]	; (8005954 <LCD_Init+0x3e54>)
 80057cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 80057d2:	4b60      	ldr	r3, [pc, #384]	; (8005954 <LCD_Init+0x3e54>)
 80057d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d8:	611a      	str	r2, [r3, #16]
 80057da:	4b5e      	ldr	r3, [pc, #376]	; (8005954 <LCD_Init+0x3e54>)
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	615a      	str	r2, [r3, #20]
 80057e2:	4b5b      	ldr	r3, [pc, #364]	; (8005950 <LCD_Init+0x3e50>)
 80057e4:	22fe      	movs	r2, #254	; 0xfe
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	4b5a      	ldr	r3, [pc, #360]	; (8005954 <LCD_Init+0x3e54>)
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	615a      	str	r2, [r3, #20]
 80057ee:	4b59      	ldr	r3, [pc, #356]	; (8005954 <LCD_Init+0x3e54>)
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	611a      	str	r2, [r3, #16]
 80057f4:	4b57      	ldr	r3, [pc, #348]	; (8005954 <LCD_Init+0x3e54>)
 80057f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 80057fc:	4b55      	ldr	r3, [pc, #340]	; (8005954 <LCD_Init+0x3e54>)
 80057fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005802:	611a      	str	r2, [r3, #16]
 8005804:	4b53      	ldr	r3, [pc, #332]	; (8005954 <LCD_Init+0x3e54>)
 8005806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580a:	615a      	str	r2, [r3, #20]
 800580c:	4b50      	ldr	r3, [pc, #320]	; (8005950 <LCD_Init+0x3e50>)
 800580e:	2201      	movs	r2, #1
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	4b50      	ldr	r3, [pc, #320]	; (8005954 <LCD_Init+0x3e54>)
 8005814:	2280      	movs	r2, #128	; 0x80
 8005816:	615a      	str	r2, [r3, #20]
 8005818:	4b4e      	ldr	r3, [pc, #312]	; (8005954 <LCD_Init+0x3e54>)
 800581a:	2280      	movs	r2, #128	; 0x80
 800581c:	611a      	str	r2, [r3, #16]
 800581e:	4b4d      	ldr	r3, [pc, #308]	; (8005954 <LCD_Init+0x3e54>)
 8005820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005824:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005826:	4b4b      	ldr	r3, [pc, #300]	; (8005954 <LCD_Init+0x3e54>)
 8005828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800582c:	611a      	str	r2, [r3, #16]
 800582e:	4b49      	ldr	r3, [pc, #292]	; (8005954 <LCD_Init+0x3e54>)
 8005830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005834:	615a      	str	r2, [r3, #20]
 8005836:	4b46      	ldr	r3, [pc, #280]	; (8005950 <LCD_Init+0x3e50>)
 8005838:	2200      	movs	r2, #0
 800583a:	60da      	str	r2, [r3, #12]
 800583c:	4b45      	ldr	r3, [pc, #276]	; (8005954 <LCD_Init+0x3e54>)
 800583e:	2280      	movs	r2, #128	; 0x80
 8005840:	615a      	str	r2, [r3, #20]
 8005842:	4b44      	ldr	r3, [pc, #272]	; (8005954 <LCD_Init+0x3e54>)
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	611a      	str	r2, [r3, #16]
 8005848:	4b42      	ldr	r3, [pc, #264]	; (8005954 <LCD_Init+0x3e54>)
 800584a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005850:	4b40      	ldr	r3, [pc, #256]	; (8005954 <LCD_Init+0x3e54>)
 8005852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005856:	611a      	str	r2, [r3, #16]
 8005858:	4b3e      	ldr	r3, [pc, #248]	; (8005954 <LCD_Init+0x3e54>)
 800585a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585e:	615a      	str	r2, [r3, #20]
 8005860:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <LCD_Init+0x3e50>)
 8005862:	2200      	movs	r2, #0
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	4b3b      	ldr	r3, [pc, #236]	; (8005954 <LCD_Init+0x3e54>)
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	615a      	str	r2, [r3, #20]
 800586c:	4b39      	ldr	r3, [pc, #228]	; (8005954 <LCD_Init+0x3e54>)
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	611a      	str	r2, [r3, #16]
 8005872:	4b38      	ldr	r3, [pc, #224]	; (8005954 <LCD_Init+0x3e54>)
 8005874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005878:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 800587a:	4b36      	ldr	r3, [pc, #216]	; (8005954 <LCD_Init+0x3e54>)
 800587c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005880:	611a      	str	r2, [r3, #16]
 8005882:	4b34      	ldr	r3, [pc, #208]	; (8005954 <LCD_Init+0x3e54>)
 8005884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005888:	615a      	str	r2, [r3, #20]
 800588a:	4b31      	ldr	r3, [pc, #196]	; (8005950 <LCD_Init+0x3e50>)
 800588c:	2200      	movs	r2, #0
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	4b30      	ldr	r3, [pc, #192]	; (8005954 <LCD_Init+0x3e54>)
 8005892:	2280      	movs	r2, #128	; 0x80
 8005894:	615a      	str	r2, [r3, #20]
 8005896:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <LCD_Init+0x3e54>)
 8005898:	2280      	movs	r2, #128	; 0x80
 800589a:	611a      	str	r2, [r3, #16]
 800589c:	4b2d      	ldr	r3, [pc, #180]	; (8005954 <LCD_Init+0x3e54>)
 800589e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80058a4:	20b8      	movs	r0, #184	; 0xb8
 80058a6:	f7fb f8c9 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80058aa:	4b2a      	ldr	r3, [pc, #168]	; (8005954 <LCD_Init+0x3e54>)
 80058ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058b0:	611a      	str	r2, [r3, #16]
 80058b2:	4b28      	ldr	r3, [pc, #160]	; (8005954 <LCD_Init+0x3e54>)
 80058b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b8:	615a      	str	r2, [r3, #20]
 80058ba:	4b25      	ldr	r3, [pc, #148]	; (8005950 <LCD_Init+0x3e50>)
 80058bc:	2203      	movs	r2, #3
 80058be:	60da      	str	r2, [r3, #12]
 80058c0:	4b24      	ldr	r3, [pc, #144]	; (8005954 <LCD_Init+0x3e54>)
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	615a      	str	r2, [r3, #20]
 80058c6:	4b23      	ldr	r3, [pc, #140]	; (8005954 <LCD_Init+0x3e54>)
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	611a      	str	r2, [r3, #16]
 80058cc:	4b21      	ldr	r3, [pc, #132]	; (8005954 <LCD_Init+0x3e54>)
 80058ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 80058d4:	4b1f      	ldr	r3, [pc, #124]	; (8005954 <LCD_Init+0x3e54>)
 80058d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058da:	611a      	str	r2, [r3, #16]
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <LCD_Init+0x3e54>)
 80058de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e2:	615a      	str	r2, [r3, #20]
 80058e4:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <LCD_Init+0x3e50>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <LCD_Init+0x3e54>)
 80058ec:	2280      	movs	r2, #128	; 0x80
 80058ee:	615a      	str	r2, [r3, #20]
 80058f0:	4b18      	ldr	r3, [pc, #96]	; (8005954 <LCD_Init+0x3e54>)
 80058f2:	2280      	movs	r2, #128	; 0x80
 80058f4:	611a      	str	r2, [r3, #16]
 80058f6:	4b17      	ldr	r3, [pc, #92]	; (8005954 <LCD_Init+0x3e54>)
 80058f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 80058fe:	20ba      	movs	r0, #186	; 0xba
 8005900:	f7fb f89c 	bl	8000a3c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005904:	4b13      	ldr	r3, [pc, #76]	; (8005954 <LCD_Init+0x3e54>)
 8005906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800590a:	611a      	str	r2, [r3, #16]
 800590c:	4b11      	ldr	r3, [pc, #68]	; (8005954 <LCD_Init+0x3e54>)
 800590e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005912:	615a      	str	r2, [r3, #20]
 8005914:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <LCD_Init+0x3e50>)
 8005916:	2201      	movs	r2, #1
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <LCD_Init+0x3e54>)
 800591c:	2280      	movs	r2, #128	; 0x80
 800591e:	615a      	str	r2, [r3, #20]
 8005920:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <LCD_Init+0x3e54>)
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	611a      	str	r2, [r3, #16]
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <LCD_Init+0x3e54>)
 8005928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 800592e:	2064      	movs	r0, #100	; 0x64
 8005930:	f7fb ff36 	bl	80017a0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005934:	2000      	movs	r0, #0
 8005936:	f7fb ffd7 	bl	80018e8 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 800593a:	4b07      	ldr	r3, [pc, #28]	; (8005958 <LCD_Init+0x3e58>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005940:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005944:	f000 f80a 	bl	800595c <LCD_Clear>
}
 8005948:	bf00      	nop
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40010c00 	.word	0x40010c00
 8005954:	40011000 	.word	0x40011000
 8005958:	422201a8 	.word	0x422201a8

0800595c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 800596a:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <LCD_Clear+0xb8>)
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005970:	4b28      	ldr	r3, [pc, #160]	; (8005a14 <LCD_Clear+0xb8>)
 8005972:	885b      	ldrh	r3, [r3, #2]
 8005974:	461a      	mov	r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	fb02 f303 	mul.w	r3, r2, r3
 800597c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 800597e:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <LCD_Clear+0xb8>)
 8005980:	889b      	ldrh	r3, [r3, #4]
 8005982:	f646 0204 	movw	r2, #26628	; 0x6804
 8005986:	4293      	cmp	r3, r2
 8005988:	d11a      	bne.n	80059c0 <LCD_Clear+0x64>
 800598a:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <LCD_Clear+0xb8>)
 800598c:	799b      	ldrb	r3, [r3, #6]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d116      	bne.n	80059c0 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005992:	4b20      	ldr	r3, [pc, #128]	; (8005a14 <LCD_Clear+0xb8>)
 8005994:	2200      	movs	r2, #0
 8005996:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <LCD_Clear+0xb8>)
 800599a:	222a      	movs	r2, #42	; 0x2a
 800599c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 800599e:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <LCD_Clear+0xb8>)
 80059a0:	222b      	movs	r2, #43	; 0x2b
 80059a2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 80059a4:	2100      	movs	r1, #0
 80059a6:	2000      	movs	r0, #0
 80059a8:	f7fb f91a 	bl	8000be0 <LCD_SetCursor>
		lcddev.dir = 1;
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <LCD_Clear+0xb8>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <LCD_Clear+0xb8>)
 80059b4:	222b      	movs	r2, #43	; 0x2b
 80059b6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80059b8:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <LCD_Clear+0xb8>)
 80059ba:	222a      	movs	r2, #42	; 0x2a
 80059bc:	819a      	strh	r2, [r3, #12]
 80059be:	e003      	b.n	80059c8 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 80059c0:	2100      	movs	r1, #0
 80059c2:	2000      	movs	r0, #0
 80059c4:	f7fb f90c 	bl	8000be0 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 80059c8:	f7fb f8fe 	bl	8000bc8 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	e017      	b.n	8005a02 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <LCD_Clear+0xbc>)
 80059d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d8:	611a      	str	r2, [r3, #16]
 80059da:	4b0f      	ldr	r3, [pc, #60]	; (8005a18 <LCD_Clear+0xbc>)
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	615a      	str	r2, [r3, #20]
 80059e2:	4a0e      	ldr	r2, [pc, #56]	; (8005a1c <LCD_Clear+0xc0>)
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	60d3      	str	r3, [r2, #12]
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <LCD_Clear+0xbc>)
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	615a      	str	r2, [r3, #20]
 80059ee:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <LCD_Clear+0xbc>)
 80059f0:	2280      	movs	r2, #128	; 0x80
 80059f2:	611a      	str	r2, [r3, #16]
 80059f4:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <LCD_Clear+0xbc>)
 80059f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fa:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d3e3      	bcc.n	80059d2 <LCD_Clear+0x76>
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000fcc 	.word	0x20000fcc
 8005a18:	40011000 	.word	0x40011000
 8005a1c:	40010c00 	.word	0x40010c00

08005a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a20:	b5b0      	push	{r4, r5, r7, lr}
 8005a22:	b08e      	sub	sp, #56	; 0x38
 8005a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a26:	f000 f9e3 	bl	8005df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a2a:	f000 f833 	bl	8005a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a2e:	f000 f877 	bl	8005b20 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8005a32:	f7fc f865 	bl	8001b00 <LCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_LED0 */
  osThreadDef(Task_LED0, Func_LED0, osPriorityNormal, 0, 128);
 8005a36:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <main+0x64>)
 8005a38:	f107 041c 	add.w	r4, r7, #28
 8005a3c:	461d      	mov	r5, r3
 8005a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_LED0Handle = osThreadCreate(osThread(Task_LED0), NULL);
 8005a4a:	f107 031c 	add.w	r3, r7, #28
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 fb49 	bl	80070e8 <osThreadCreate>
 8005a56:	4602      	mov	r2, r0
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <main+0x68>)
 8005a5a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_LED1 */
  osThreadDef(Task_LED1, Func_LED1, osPriorityIdle, 0, 128);
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <main+0x6c>)
 8005a5e:	463c      	mov	r4, r7
 8005a60:	461d      	mov	r5, r3
 8005a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_LED1Handle = osThreadCreate(osThread(Task_LED1), NULL);
 8005a6e:	463b      	mov	r3, r7
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fb38 	bl	80070e8 <osThreadCreate>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <main+0x70>)
 8005a7c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005a7e:	f001 fb2c 	bl	80070da <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005a82:	e7fe      	b.n	8005a82 <main+0x62>
 8005a84:	080084a0 	.word	0x080084a0
 8005a88:	20000fdc 	.word	0x20000fdc
 8005a8c:	080084c8 	.word	0x080084c8
 8005a90:	20000fe0 	.word	0x20000fe0

08005a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b090      	sub	sp, #64	; 0x40
 8005a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a9a:	f107 0318 	add.w	r3, r7, #24
 8005a9e:	2228      	movs	r2, #40	; 0x28
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f002 fce2 	bl	800846c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	605a      	str	r2, [r3, #4]
 8005ab0:	609a      	str	r2, [r3, #8]
 8005ab2:	60da      	str	r2, [r3, #12]
 8005ab4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005ad2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ad8:	f107 0318 	add.w	r3, r7, #24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fc3d 	bl	800635c <HAL_RCC_OscConfig>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005ae8:	f000 f89e 	bl	8005c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005aec:	230f      	movs	r3, #15
 8005aee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005af0:	2302      	movs	r3, #2
 8005af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005b02:	1d3b      	adds	r3, r7, #4
 8005b04:	2102      	movs	r1, #2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fea8 	bl	800685c <HAL_RCC_ClockConfig>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005b12:	f000 f889 	bl	8005c28 <Error_Handler>
  }
}
 8005b16:	bf00      	nop
 8005b18:	3740      	adds	r7, #64	; 0x40
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b26:	f107 0308 	add.w	r3, r7, #8
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	609a      	str	r2, [r3, #8]
 8005b32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b34:	4b21      	ldr	r3, [pc, #132]	; (8005bbc <MX_GPIO_Init+0x9c>)
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	4a20      	ldr	r2, [pc, #128]	; (8005bbc <MX_GPIO_Init+0x9c>)
 8005b3a:	f043 0320 	orr.w	r3, r3, #32
 8005b3e:	6193      	str	r3, [r2, #24]
 8005b40:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <MX_GPIO_Init+0x9c>)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	607b      	str	r3, [r7, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <MX_GPIO_Init+0x9c>)
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <MX_GPIO_Init+0x9c>)
 8005b52:	f043 0304 	orr.w	r3, r3, #4
 8005b56:	6193      	str	r3, [r2, #24]
 8005b58:	4b18      	ldr	r3, [pc, #96]	; (8005bbc <MX_GPIO_Init+0x9c>)
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8005b64:	2200      	movs	r2, #0
 8005b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b6a:	4815      	ldr	r0, [pc, #84]	; (8005bc0 <MX_GPIO_Init+0xa0>)
 8005b6c:	f000 fbde 	bl	800632c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8005b70:	2200      	movs	r2, #0
 8005b72:	2104      	movs	r1, #4
 8005b74:	4813      	ldr	r0, [pc, #76]	; (8005bc4 <MX_GPIO_Init+0xa4>)
 8005b76:	f000 fbd9 	bl	800632c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8005b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b80:	2301      	movs	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8005b8c:	f107 0308 	add.w	r3, r7, #8
 8005b90:	4619      	mov	r1, r3
 8005b92:	480b      	ldr	r0, [pc, #44]	; (8005bc0 <MX_GPIO_Init+0xa0>)
 8005b94:	f000 fa60 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8005b98:	2304      	movs	r3, #4
 8005b9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8005ba8:	f107 0308 	add.w	r3, r7, #8
 8005bac:	4619      	mov	r1, r3
 8005bae:	4805      	ldr	r0, [pc, #20]	; (8005bc4 <MX_GPIO_Init+0xa4>)
 8005bb0:	f000 fa52 	bl	8006058 <HAL_GPIO_Init>

}
 8005bb4:	bf00      	nop
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40010800 	.word	0x40010800
 8005bc4:	40011400 	.word	0x40011400

08005bc8 <Func_LED0>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Func_LED0 */
void Func_LED0(void const * argument)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
	  LCD_Clear(WHITE);
 8005bd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005bd4:	f7ff fec2 	bl	800595c <LCD_Clear>
//	  HAL_Delay(1000);
	  osDelay(1000);
 8005bd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bdc:	f001 fad0 	bl	8007180 <osDelay>
	  LCD_Clear(WHITE);
 8005be0:	e7f6      	b.n	8005bd0 <Func_LED0+0x8>

08005be2 <Func_LED1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Func_LED1 */
void Func_LED1(void const * argument)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);

	  LCD_Clear(BLUE);
 8005bea:	201f      	movs	r0, #31
 8005bec:	f7ff feb6 	bl	800595c <LCD_Clear>
	  HAL_Delay(1000);
 8005bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bf4:	f000 f92e 	bl	8005e54 <HAL_Delay>
	  osDelay(1000);
 8005bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bfc:	f001 fac0 	bl	8007180 <osDelay>
	  LCD_Clear(BLUE);
 8005c00:	e7f3      	b.n	8005bea <Func_LED1+0x8>
	...

08005c04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d101      	bne.n	8005c1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005c16:	f000 f901 	bl	8005e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005c1a:	bf00      	nop
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40000400 	.word	0x40000400

08005c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c3a:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <HAL_MspInit+0x68>)
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <HAL_MspInit+0x68>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	6193      	str	r3, [r2, #24]
 8005c46:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <HAL_MspInit+0x68>)
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c52:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <HAL_MspInit+0x68>)
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <HAL_MspInit+0x68>)
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	61d3      	str	r3, [r2, #28]
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <HAL_MspInit+0x68>)
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c66:	607b      	str	r3, [r7, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	210f      	movs	r1, #15
 8005c6e:	f06f 0001 	mvn.w	r0, #1
 8005c72:	f000 f9c6 	bl	8006002 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <HAL_MspInit+0x6c>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <HAL_MspInit+0x6c>)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	40010000 	.word	0x40010000

08005ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08c      	sub	sp, #48	; 0x30
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	201d      	movs	r0, #29
 8005cba:	f000 f9a2 	bl	8006002 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8005cbe:	201d      	movs	r0, #29
 8005cc0:	f000 f9bb 	bl	800603a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005cc4:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <HAL_InitTick+0xa0>)
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <HAL_InitTick+0xa0>)
 8005cca:	f043 0302 	orr.w	r3, r3, #2
 8005cce:	61d3      	str	r3, [r2, #28]
 8005cd0:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <HAL_InitTick+0xa0>)
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cdc:	f107 0210 	add.w	r2, r7, #16
 8005ce0:	f107 0314 	add.w	r3, r7, #20
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 ff22 	bl	8006b30 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005cec:	f000 ff0c 	bl	8006b08 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <HAL_InitTick+0xa4>)
 8005cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfe:	0c9b      	lsrs	r3, r3, #18
 8005d00:	3b01      	subs	r3, #1
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8005d04:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d06:	4a12      	ldr	r2, [pc, #72]	; (8005d50 <HAL_InitTick+0xac>)
 8005d08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8005d0a:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d10:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8005d12:	4a0e      	ldr	r2, [pc, #56]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8005d18:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8005d24:	4809      	ldr	r0, [pc, #36]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d26:	f000 ff51 	bl	8006bcc <HAL_TIM_Base_Init>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8005d30:	4806      	ldr	r0, [pc, #24]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d32:	f000 ffa3 	bl	8006c7c <HAL_TIM_Base_Start_IT>
 8005d36:	4603      	mov	r3, r0
 8005d38:	e000      	b.n	8005d3c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3730      	adds	r7, #48	; 0x30
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	431bde83 	.word	0x431bde83
 8005d4c:	20000fe4 	.word	0x20000fe4
 8005d50:	40000400 	.word	0x40000400

08005d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d64:	e7fe      	b.n	8005d64 <HardFault_Handler+0x4>

08005d66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d6a:	e7fe      	b.n	8005d6a <MemManage_Handler+0x4>

08005d6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d70:	e7fe      	b.n	8005d70 <BusFault_Handler+0x4>

08005d72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d76:	e7fe      	b.n	8005d76 <UsageFault_Handler+0x4>

08005d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d7c:	bf00      	nop
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr

08005d84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005d88:	4802      	ldr	r0, [pc, #8]	; (8005d94 <TIM3_IRQHandler+0x10>)
 8005d8a:	f000 ffd7 	bl	8006d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005d8e:	bf00      	nop
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000fe4 	.word	0x20000fe4

08005d98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d9c:	bf00      	nop
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr

08005da4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005da4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005da6:	e003      	b.n	8005db0 <LoopCopyDataInit>

08005da8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005daa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005dac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005dae:	3104      	adds	r1, #4

08005db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005db0:	480a      	ldr	r0, [pc, #40]	; (8005ddc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005db4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005db6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005db8:	d3f6      	bcc.n	8005da8 <CopyDataInit>
  ldr r2, =_sbss
 8005dba:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005dbc:	e002      	b.n	8005dc4 <LoopFillZerobss>

08005dbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005dbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005dc0:	f842 3b04 	str.w	r3, [r2], #4

08005dc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005dc4:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005dc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005dc8:	d3f9      	bcc.n	8005dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005dca:	f7ff ffe5 	bl	8005d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dce:	f002 fb29 	bl	8008424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005dd2:	f7ff fe25 	bl	8005a20 <main>
  bx lr
 8005dd6:	4770      	bx	lr
  ldr r3, =_sidata
 8005dd8:	08008520 	.word	0x08008520
  ldr r0, =_sdata
 8005ddc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005de0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8005de4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8005de8:	20001030 	.word	0x20001030

08005dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005dec:	e7fe      	b.n	8005dec <ADC1_2_IRQHandler>
	...

08005df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005df4:	4b08      	ldr	r3, [pc, #32]	; (8005e18 <HAL_Init+0x28>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a07      	ldr	r2, [pc, #28]	; (8005e18 <HAL_Init+0x28>)
 8005dfa:	f043 0310 	orr.w	r3, r3, #16
 8005dfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e00:	2003      	movs	r0, #3
 8005e02:	f000 f8f3 	bl	8005fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e06:	2000      	movs	r0, #0
 8005e08:	f7ff ff4c 	bl	8005ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e0c:	f7ff ff12 	bl	8005c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40022000 	.word	0x40022000

08005e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_IncTick+0x1c>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <HAL_IncTick+0x20>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	4a03      	ldr	r2, [pc, #12]	; (8005e3c <HAL_IncTick+0x20>)
 8005e2e:	6013      	str	r3, [r2, #0]
}
 8005e30:	bf00      	nop
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr
 8005e38:	20000008 	.word	0x20000008
 8005e3c:	2000102c 	.word	0x2000102c

08005e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  return uwTick;
 8005e44:	4b02      	ldr	r3, [pc, #8]	; (8005e50 <HAL_GetTick+0x10>)
 8005e46:	681b      	ldr	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	2000102c 	.word	0x2000102c

08005e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e5c:	f7ff fff0 	bl	8005e40 <HAL_GetTick>
 8005e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d005      	beq.n	8005e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e6e:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <HAL_Delay+0x40>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e7a:	bf00      	nop
 8005e7c:	f7ff ffe0 	bl	8005e40 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d8f7      	bhi.n	8005e7c <HAL_Delay+0x28>
  {
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000008 	.word	0x20000008

08005e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ea8:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <__NVIC_SetPriorityGrouping+0x44>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eca:	4a04      	ldr	r2, [pc, #16]	; (8005edc <__NVIC_SetPriorityGrouping+0x44>)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	60d3      	str	r3, [r2, #12]
}
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	e000ed00 	.word	0xe000ed00

08005ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ee4:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	f003 0307 	and.w	r3, r3, #7
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	e000ed00 	.word	0xe000ed00

08005efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	db0b      	blt.n	8005f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	f003 021f 	and.w	r2, r3, #31
 8005f14:	4906      	ldr	r1, [pc, #24]	; (8005f30 <__NVIC_EnableIRQ+0x34>)
 8005f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr
 8005f30:	e000e100 	.word	0xe000e100

08005f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	db0a      	blt.n	8005f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	490c      	ldr	r1, [pc, #48]	; (8005f80 <__NVIC_SetPriority+0x4c>)
 8005f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f52:	0112      	lsls	r2, r2, #4
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	440b      	add	r3, r1
 8005f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f5c:	e00a      	b.n	8005f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	4908      	ldr	r1, [pc, #32]	; (8005f84 <__NVIC_SetPriority+0x50>)
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	3b04      	subs	r3, #4
 8005f6c:	0112      	lsls	r2, r2, #4
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	440b      	add	r3, r1
 8005f72:	761a      	strb	r2, [r3, #24]
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	e000e100 	.word	0xe000e100
 8005f84:	e000ed00 	.word	0xe000ed00

08005f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f1c3 0307 	rsb	r3, r3, #7
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	bf28      	it	cs
 8005fa6:	2304      	movcs	r3, #4
 8005fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2b06      	cmp	r3, #6
 8005fb0:	d902      	bls.n	8005fb8 <NVIC_EncodePriority+0x30>
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	3b03      	subs	r3, #3
 8005fb6:	e000      	b.n	8005fba <NVIC_EncodePriority+0x32>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43da      	mvns	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	401a      	ands	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fda:	43d9      	mvns	r1, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fe0:	4313      	orrs	r3, r2
         );
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3724      	adds	r7, #36	; 0x24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ff4f 	bl	8005e98 <__NVIC_SetPriorityGrouping>
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006002:	b580      	push	{r7, lr}
 8006004:	b086      	sub	sp, #24
 8006006:	af00      	add	r7, sp, #0
 8006008:	4603      	mov	r3, r0
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006014:	f7ff ff64 	bl	8005ee0 <__NVIC_GetPriorityGrouping>
 8006018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	6978      	ldr	r0, [r7, #20]
 8006020:	f7ff ffb2 	bl	8005f88 <NVIC_EncodePriority>
 8006024:	4602      	mov	r2, r0
 8006026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff ff81 	bl	8005f34 <__NVIC_SetPriority>
}
 8006032:	bf00      	nop
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	4603      	mov	r3, r0
 8006042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff57 	bl	8005efc <__NVIC_EnableIRQ>
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006058:	b480      	push	{r7}
 800605a:	b08b      	sub	sp, #44	; 0x2c
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006062:	2300      	movs	r3, #0
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006066:	2300      	movs	r3, #0
 8006068:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800606a:	e133      	b.n	80062d4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800606c:	2201      	movs	r2, #1
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	429a      	cmp	r2, r3
 8006086:	f040 8122 	bne.w	80062ce <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b12      	cmp	r3, #18
 8006090:	d034      	beq.n	80060fc <HAL_GPIO_Init+0xa4>
 8006092:	2b12      	cmp	r3, #18
 8006094:	d80d      	bhi.n	80060b2 <HAL_GPIO_Init+0x5a>
 8006096:	2b02      	cmp	r3, #2
 8006098:	d02b      	beq.n	80060f2 <HAL_GPIO_Init+0x9a>
 800609a:	2b02      	cmp	r3, #2
 800609c:	d804      	bhi.n	80060a8 <HAL_GPIO_Init+0x50>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d031      	beq.n	8006106 <HAL_GPIO_Init+0xae>
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d01c      	beq.n	80060e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80060a6:	e048      	b.n	800613a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d043      	beq.n	8006134 <HAL_GPIO_Init+0xdc>
 80060ac:	2b11      	cmp	r3, #17
 80060ae:	d01b      	beq.n	80060e8 <HAL_GPIO_Init+0x90>
          break;
 80060b0:	e043      	b.n	800613a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80060b2:	4a8f      	ldr	r2, [pc, #572]	; (80062f0 <HAL_GPIO_Init+0x298>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d026      	beq.n	8006106 <HAL_GPIO_Init+0xae>
 80060b8:	4a8d      	ldr	r2, [pc, #564]	; (80062f0 <HAL_GPIO_Init+0x298>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d806      	bhi.n	80060cc <HAL_GPIO_Init+0x74>
 80060be:	4a8d      	ldr	r2, [pc, #564]	; (80062f4 <HAL_GPIO_Init+0x29c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d020      	beq.n	8006106 <HAL_GPIO_Init+0xae>
 80060c4:	4a8c      	ldr	r2, [pc, #560]	; (80062f8 <HAL_GPIO_Init+0x2a0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01d      	beq.n	8006106 <HAL_GPIO_Init+0xae>
          break;
 80060ca:	e036      	b.n	800613a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80060cc:	4a8b      	ldr	r2, [pc, #556]	; (80062fc <HAL_GPIO_Init+0x2a4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d019      	beq.n	8006106 <HAL_GPIO_Init+0xae>
 80060d2:	4a8b      	ldr	r2, [pc, #556]	; (8006300 <HAL_GPIO_Init+0x2a8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d016      	beq.n	8006106 <HAL_GPIO_Init+0xae>
 80060d8:	4a8a      	ldr	r2, [pc, #552]	; (8006304 <HAL_GPIO_Init+0x2ac>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <HAL_GPIO_Init+0xae>
          break;
 80060de:	e02c      	b.n	800613a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	623b      	str	r3, [r7, #32]
          break;
 80060e6:	e028      	b.n	800613a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	3304      	adds	r3, #4
 80060ee:	623b      	str	r3, [r7, #32]
          break;
 80060f0:	e023      	b.n	800613a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	3308      	adds	r3, #8
 80060f8:	623b      	str	r3, [r7, #32]
          break;
 80060fa:	e01e      	b.n	800613a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	330c      	adds	r3, #12
 8006102:	623b      	str	r3, [r7, #32]
          break;
 8006104:	e019      	b.n	800613a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800610e:	2304      	movs	r3, #4
 8006110:	623b      	str	r3, [r7, #32]
          break;
 8006112:	e012      	b.n	800613a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d105      	bne.n	8006128 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800611c:	2308      	movs	r3, #8
 800611e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	611a      	str	r2, [r3, #16]
          break;
 8006126:	e008      	b.n	800613a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006128:	2308      	movs	r3, #8
 800612a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	615a      	str	r2, [r3, #20]
          break;
 8006132:	e002      	b.n	800613a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006134:	2300      	movs	r3, #0
 8006136:	623b      	str	r3, [r7, #32]
          break;
 8006138:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2bff      	cmp	r3, #255	; 0xff
 800613e:	d801      	bhi.n	8006144 <HAL_GPIO_Init+0xec>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	e001      	b.n	8006148 <HAL_GPIO_Init+0xf0>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3304      	adds	r3, #4
 8006148:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2bff      	cmp	r3, #255	; 0xff
 800614e:	d802      	bhi.n	8006156 <HAL_GPIO_Init+0xfe>
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	e002      	b.n	800615c <HAL_GPIO_Init+0x104>
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	3b08      	subs	r3, #8
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	210f      	movs	r1, #15
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	fa01 f303 	lsl.w	r3, r1, r3
 800616a:	43db      	mvns	r3, r3
 800616c:	401a      	ands	r2, r3
 800616e:	6a39      	ldr	r1, [r7, #32]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	431a      	orrs	r2, r3
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80a2 	beq.w	80062ce <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800618a:	4b5f      	ldr	r3, [pc, #380]	; (8006308 <HAL_GPIO_Init+0x2b0>)
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	4a5e      	ldr	r2, [pc, #376]	; (8006308 <HAL_GPIO_Init+0x2b0>)
 8006190:	f043 0301 	orr.w	r3, r3, #1
 8006194:	6193      	str	r3, [r2, #24]
 8006196:	4b5c      	ldr	r3, [pc, #368]	; (8006308 <HAL_GPIO_Init+0x2b0>)
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	60bb      	str	r3, [r7, #8]
 80061a0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80061a2:	4a5a      	ldr	r2, [pc, #360]	; (800630c <HAL_GPIO_Init+0x2b4>)
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	089b      	lsrs	r3, r3, #2
 80061a8:	3302      	adds	r3, #2
 80061aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	220f      	movs	r2, #15
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4013      	ands	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a51      	ldr	r2, [pc, #324]	; (8006310 <HAL_GPIO_Init+0x2b8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01f      	beq.n	800620e <HAL_GPIO_Init+0x1b6>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a50      	ldr	r2, [pc, #320]	; (8006314 <HAL_GPIO_Init+0x2bc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d019      	beq.n	800620a <HAL_GPIO_Init+0x1b2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a4f      	ldr	r2, [pc, #316]	; (8006318 <HAL_GPIO_Init+0x2c0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <HAL_GPIO_Init+0x1ae>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a4e      	ldr	r2, [pc, #312]	; (800631c <HAL_GPIO_Init+0x2c4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00d      	beq.n	8006202 <HAL_GPIO_Init+0x1aa>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a4d      	ldr	r2, [pc, #308]	; (8006320 <HAL_GPIO_Init+0x2c8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d007      	beq.n	80061fe <HAL_GPIO_Init+0x1a6>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a4c      	ldr	r2, [pc, #304]	; (8006324 <HAL_GPIO_Init+0x2cc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d101      	bne.n	80061fa <HAL_GPIO_Init+0x1a2>
 80061f6:	2305      	movs	r3, #5
 80061f8:	e00a      	b.n	8006210 <HAL_GPIO_Init+0x1b8>
 80061fa:	2306      	movs	r3, #6
 80061fc:	e008      	b.n	8006210 <HAL_GPIO_Init+0x1b8>
 80061fe:	2304      	movs	r3, #4
 8006200:	e006      	b.n	8006210 <HAL_GPIO_Init+0x1b8>
 8006202:	2303      	movs	r3, #3
 8006204:	e004      	b.n	8006210 <HAL_GPIO_Init+0x1b8>
 8006206:	2302      	movs	r3, #2
 8006208:	e002      	b.n	8006210 <HAL_GPIO_Init+0x1b8>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <HAL_GPIO_Init+0x1b8>
 800620e:	2300      	movs	r3, #0
 8006210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006212:	f002 0203 	and.w	r2, r2, #3
 8006216:	0092      	lsls	r2, r2, #2
 8006218:	4093      	lsls	r3, r2
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006220:	493a      	ldr	r1, [pc, #232]	; (800630c <HAL_GPIO_Init+0x2b4>)
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	089b      	lsrs	r3, r3, #2
 8006226:	3302      	adds	r3, #2
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d006      	beq.n	8006248 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800623a:	4b3b      	ldr	r3, [pc, #236]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	493a      	ldr	r1, [pc, #232]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	4313      	orrs	r3, r2
 8006244:	600b      	str	r3, [r1, #0]
 8006246:	e006      	b.n	8006256 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006248:	4b37      	ldr	r3, [pc, #220]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	43db      	mvns	r3, r3
 8006250:	4935      	ldr	r1, [pc, #212]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 8006252:	4013      	ands	r3, r2
 8006254:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d006      	beq.n	8006270 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006262:	4b31      	ldr	r3, [pc, #196]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	4930      	ldr	r1, [pc, #192]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	4313      	orrs	r3, r2
 800626c:	604b      	str	r3, [r1, #4]
 800626e:	e006      	b.n	800627e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006270:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	43db      	mvns	r3, r3
 8006278:	492b      	ldr	r1, [pc, #172]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 800627a:	4013      	ands	r3, r2
 800627c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d006      	beq.n	8006298 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800628a:	4b27      	ldr	r3, [pc, #156]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	4926      	ldr	r1, [pc, #152]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
 8006296:	e006      	b.n	80062a6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006298:	4b23      	ldr	r3, [pc, #140]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	43db      	mvns	r3, r3
 80062a0:	4921      	ldr	r1, [pc, #132]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d006      	beq.n	80062c0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80062b2:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	491c      	ldr	r1, [pc, #112]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60cb      	str	r3, [r1, #12]
 80062be:	e006      	b.n	80062ce <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80062c0:	4b19      	ldr	r3, [pc, #100]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	43db      	mvns	r3, r3
 80062c8:	4917      	ldr	r1, [pc, #92]	; (8006328 <HAL_GPIO_Init+0x2d0>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	3301      	adds	r3, #1
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	fa22 f303 	lsr.w	r3, r2, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f47f aec4 	bne.w	800606c <HAL_GPIO_Init+0x14>
  }
}
 80062e4:	bf00      	nop
 80062e6:	372c      	adds	r7, #44	; 0x2c
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	10210000 	.word	0x10210000
 80062f4:	10110000 	.word	0x10110000
 80062f8:	10120000 	.word	0x10120000
 80062fc:	10310000 	.word	0x10310000
 8006300:	10320000 	.word	0x10320000
 8006304:	10220000 	.word	0x10220000
 8006308:	40021000 	.word	0x40021000
 800630c:	40010000 	.word	0x40010000
 8006310:	40010800 	.word	0x40010800
 8006314:	40010c00 	.word	0x40010c00
 8006318:	40011000 	.word	0x40011000
 800631c:	40011400 	.word	0x40011400
 8006320:	40011800 	.word	0x40011800
 8006324:	40011c00 	.word	0x40011c00
 8006328:	40010400 	.word	0x40010400

0800632c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	807b      	strh	r3, [r7, #2]
 8006338:	4613      	mov	r3, r2
 800633a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800633c:	787b      	ldrb	r3, [r7, #1]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006342:	887a      	ldrh	r2, [r7, #2]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006348:	e003      	b.n	8006352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800634a:	887b      	ldrh	r3, [r7, #2]
 800634c:	041a      	lsls	r2, r3, #16
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	611a      	str	r2, [r3, #16]
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e26c      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8087 	beq.w	800648a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800637c:	4b92      	ldr	r3, [pc, #584]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 030c 	and.w	r3, r3, #12
 8006384:	2b04      	cmp	r3, #4
 8006386:	d00c      	beq.n	80063a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006388:	4b8f      	ldr	r3, [pc, #572]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f003 030c 	and.w	r3, r3, #12
 8006390:	2b08      	cmp	r3, #8
 8006392:	d112      	bne.n	80063ba <HAL_RCC_OscConfig+0x5e>
 8006394:	4b8c      	ldr	r3, [pc, #560]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800639c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a0:	d10b      	bne.n	80063ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a2:	4b89      	ldr	r3, [pc, #548]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d06c      	beq.n	8006488 <HAL_RCC_OscConfig+0x12c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d168      	bne.n	8006488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e246      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c2:	d106      	bne.n	80063d2 <HAL_RCC_OscConfig+0x76>
 80063c4:	4b80      	ldr	r3, [pc, #512]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a7f      	ldr	r2, [pc, #508]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80063ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	e02e      	b.n	8006430 <HAL_RCC_OscConfig+0xd4>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x98>
 80063da:	4b7b      	ldr	r3, [pc, #492]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a7a      	ldr	r2, [pc, #488]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80063e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b78      	ldr	r3, [pc, #480]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a77      	ldr	r2, [pc, #476]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80063ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e01d      	b.n	8006430 <HAL_RCC_OscConfig+0xd4>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063fc:	d10c      	bne.n	8006418 <HAL_RCC_OscConfig+0xbc>
 80063fe:	4b72      	ldr	r3, [pc, #456]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a71      	ldr	r2, [pc, #452]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	4b6f      	ldr	r3, [pc, #444]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a6e      	ldr	r2, [pc, #440]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e00b      	b.n	8006430 <HAL_RCC_OscConfig+0xd4>
 8006418:	4b6b      	ldr	r3, [pc, #428]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a6a      	ldr	r2, [pc, #424]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 800641e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	4b68      	ldr	r3, [pc, #416]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a67      	ldr	r2, [pc, #412]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 800642a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800642e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d013      	beq.n	8006460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006438:	f7ff fd02 	bl	8005e40 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006440:	f7ff fcfe 	bl	8005e40 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	; 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e1fa      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006452:	4b5d      	ldr	r3, [pc, #372]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0f0      	beq.n	8006440 <HAL_RCC_OscConfig+0xe4>
 800645e:	e014      	b.n	800648a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006460:	f7ff fcee 	bl	8005e40 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006468:	f7ff fcea 	bl	8005e40 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b64      	cmp	r3, #100	; 0x64
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e1e6      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800647a:	4b53      	ldr	r3, [pc, #332]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1f0      	bne.n	8006468 <HAL_RCC_OscConfig+0x10c>
 8006486:	e000      	b.n	800648a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d063      	beq.n	800655e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006496:	4b4c      	ldr	r3, [pc, #304]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00b      	beq.n	80064ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064a2:	4b49      	ldr	r3, [pc, #292]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 030c 	and.w	r3, r3, #12
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d11c      	bne.n	80064e8 <HAL_RCC_OscConfig+0x18c>
 80064ae:	4b46      	ldr	r3, [pc, #280]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d116      	bne.n	80064e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ba:	4b43      	ldr	r3, [pc, #268]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_RCC_OscConfig+0x176>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d001      	beq.n	80064d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e1ba      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d2:	4b3d      	ldr	r3, [pc, #244]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4939      	ldr	r1, [pc, #228]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064e6:	e03a      	b.n	800655e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d020      	beq.n	8006532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064f0:	4b36      	ldr	r3, [pc, #216]	; (80065cc <HAL_RCC_OscConfig+0x270>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f6:	f7ff fca3 	bl	8005e40 <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064fe:	f7ff fc9f 	bl	8005e40 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e19b      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006510:	4b2d      	ldr	r3, [pc, #180]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f0      	beq.n	80064fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800651c:	4b2a      	ldr	r3, [pc, #168]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4927      	ldr	r1, [pc, #156]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 800652c:	4313      	orrs	r3, r2
 800652e:	600b      	str	r3, [r1, #0]
 8006530:	e015      	b.n	800655e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006532:	4b26      	ldr	r3, [pc, #152]	; (80065cc <HAL_RCC_OscConfig+0x270>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006538:	f7ff fc82 	bl	8005e40 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006540:	f7ff fc7e 	bl	8005e40 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e17a      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1f0      	bne.n	8006540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d03a      	beq.n	80065e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d019      	beq.n	80065a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006572:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <HAL_RCC_OscConfig+0x274>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006578:	f7ff fc62 	bl	8005e40 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006580:	f7ff fc5e 	bl	8005e40 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e15a      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006592:	4b0d      	ldr	r3, [pc, #52]	; (80065c8 <HAL_RCC_OscConfig+0x26c>)
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800659e:	2001      	movs	r0, #1
 80065a0:	f000 faf6 	bl	8006b90 <RCC_Delay>
 80065a4:	e01c      	b.n	80065e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <HAL_RCC_OscConfig+0x274>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ac:	f7ff fc48 	bl	8005e40 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b2:	e00f      	b.n	80065d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065b4:	f7ff fc44 	bl	8005e40 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d908      	bls.n	80065d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e140      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	42420000 	.word	0x42420000
 80065d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d4:	4b9e      	ldr	r3, [pc, #632]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e9      	bne.n	80065b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80a6 	beq.w	800673a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f2:	4b97      	ldr	r3, [pc, #604]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10d      	bne.n	800661a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065fe:	4b94      	ldr	r3, [pc, #592]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	4a93      	ldr	r2, [pc, #588]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006608:	61d3      	str	r3, [r2, #28]
 800660a:	4b91      	ldr	r3, [pc, #580]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006612:	60bb      	str	r3, [r7, #8]
 8006614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006616:	2301      	movs	r3, #1
 8006618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661a:	4b8e      	ldr	r3, [pc, #568]	; (8006854 <HAL_RCC_OscConfig+0x4f8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d118      	bne.n	8006658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006626:	4b8b      	ldr	r3, [pc, #556]	; (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a8a      	ldr	r2, [pc, #552]	; (8006854 <HAL_RCC_OscConfig+0x4f8>)
 800662c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006632:	f7ff fc05 	bl	8005e40 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800663a:	f7ff fc01 	bl	8005e40 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b64      	cmp	r3, #100	; 0x64
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e0fd      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664c:	4b81      	ldr	r3, [pc, #516]	; (8006854 <HAL_RCC_OscConfig+0x4f8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d106      	bne.n	800666e <HAL_RCC_OscConfig+0x312>
 8006660:	4b7b      	ldr	r3, [pc, #492]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	4a7a      	ldr	r2, [pc, #488]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	6213      	str	r3, [r2, #32]
 800666c:	e02d      	b.n	80066ca <HAL_RCC_OscConfig+0x36e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10c      	bne.n	8006690 <HAL_RCC_OscConfig+0x334>
 8006676:	4b76      	ldr	r3, [pc, #472]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	4a75      	ldr	r2, [pc, #468]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	6213      	str	r3, [r2, #32]
 8006682:	4b73      	ldr	r3, [pc, #460]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	4a72      	ldr	r2, [pc, #456]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006688:	f023 0304 	bic.w	r3, r3, #4
 800668c:	6213      	str	r3, [r2, #32]
 800668e:	e01c      	b.n	80066ca <HAL_RCC_OscConfig+0x36e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b05      	cmp	r3, #5
 8006696:	d10c      	bne.n	80066b2 <HAL_RCC_OscConfig+0x356>
 8006698:	4b6d      	ldr	r3, [pc, #436]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	4a6c      	ldr	r2, [pc, #432]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 800669e:	f043 0304 	orr.w	r3, r3, #4
 80066a2:	6213      	str	r3, [r2, #32]
 80066a4:	4b6a      	ldr	r3, [pc, #424]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	4a69      	ldr	r2, [pc, #420]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	6213      	str	r3, [r2, #32]
 80066b0:	e00b      	b.n	80066ca <HAL_RCC_OscConfig+0x36e>
 80066b2:	4b67      	ldr	r3, [pc, #412]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	4a66      	ldr	r2, [pc, #408]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	6213      	str	r3, [r2, #32]
 80066be:	4b64      	ldr	r3, [pc, #400]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	4a63      	ldr	r2, [pc, #396]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80066c4:	f023 0304 	bic.w	r3, r3, #4
 80066c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d015      	beq.n	80066fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d2:	f7ff fbb5 	bl	8005e40 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d8:	e00a      	b.n	80066f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7ff fbb1 	bl	8005e40 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e0ab      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f0:	4b57      	ldr	r3, [pc, #348]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0ee      	beq.n	80066da <HAL_RCC_OscConfig+0x37e>
 80066fc:	e014      	b.n	8006728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066fe:	f7ff fb9f 	bl	8005e40 <HAL_GetTick>
 8006702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006704:	e00a      	b.n	800671c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006706:	f7ff fb9b 	bl	8005e40 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f241 3288 	movw	r2, #5000	; 0x1388
 8006714:	4293      	cmp	r3, r2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e095      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800671c:	4b4c      	ldr	r3, [pc, #304]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1ee      	bne.n	8006706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006728:	7dfb      	ldrb	r3, [r7, #23]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d105      	bne.n	800673a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800672e:	4b48      	ldr	r3, [pc, #288]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	4a47      	ldr	r2, [pc, #284]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8081 	beq.w	8006846 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006744:	4b42      	ldr	r3, [pc, #264]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f003 030c 	and.w	r3, r3, #12
 800674c:	2b08      	cmp	r3, #8
 800674e:	d061      	beq.n	8006814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d146      	bne.n	80067e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006758:	4b3f      	ldr	r3, [pc, #252]	; (8006858 <HAL_RCC_OscConfig+0x4fc>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675e:	f7ff fb6f 	bl	8005e40 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006766:	f7ff fb6b 	bl	8005e40 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e067      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006778:	4b35      	ldr	r3, [pc, #212]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f0      	bne.n	8006766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d108      	bne.n	80067a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800678e:	4b30      	ldr	r3, [pc, #192]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	492d      	ldr	r1, [pc, #180]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 800679c:	4313      	orrs	r3, r2
 800679e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067a0:	4b2b      	ldr	r3, [pc, #172]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a19      	ldr	r1, [r3, #32]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	430b      	orrs	r3, r1
 80067b2:	4927      	ldr	r1, [pc, #156]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067b8:	4b27      	ldr	r3, [pc, #156]	; (8006858 <HAL_RCC_OscConfig+0x4fc>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067be:	f7ff fb3f 	bl	8005e40 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c6:	f7ff fb3b 	bl	8005e40 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e037      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067d8:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <HAL_RCC_OscConfig+0x46a>
 80067e4:	e02f      	b.n	8006846 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e6:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <HAL_RCC_OscConfig+0x4fc>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ec:	f7ff fb28 	bl	8005e40 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f4:	f7ff fb24 	bl	8005e40 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e020      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006806:	4b12      	ldr	r3, [pc, #72]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f0      	bne.n	80067f4 <HAL_RCC_OscConfig+0x498>
 8006812:	e018      	b.n	8006846 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e013      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_RCC_OscConfig+0x4f4>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	429a      	cmp	r2, r3
 8006832:	d106      	bne.n	8006842 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800683e:	429a      	cmp	r2, r3
 8006840:	d001      	beq.n	8006846 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40021000 	.word	0x40021000
 8006854:	40007000 	.word	0x40007000
 8006858:	42420060 	.word	0x42420060

0800685c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e0d0      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006870:	4b6a      	ldr	r3, [pc, #424]	; (8006a1c <HAL_RCC_ClockConfig+0x1c0>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d910      	bls.n	80068a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800687e:	4b67      	ldr	r3, [pc, #412]	; (8006a1c <HAL_RCC_ClockConfig+0x1c0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f023 0207 	bic.w	r2, r3, #7
 8006886:	4965      	ldr	r1, [pc, #404]	; (8006a1c <HAL_RCC_ClockConfig+0x1c0>)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	4313      	orrs	r3, r2
 800688c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b63      	ldr	r3, [pc, #396]	; (8006a1c <HAL_RCC_ClockConfig+0x1c0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0b8      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d020      	beq.n	80068ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068b8:	4b59      	ldr	r3, [pc, #356]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	4a58      	ldr	r2, [pc, #352]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80068be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068d0:	4b53      	ldr	r3, [pc, #332]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4a52      	ldr	r2, [pc, #328]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80068d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068dc:	4b50      	ldr	r3, [pc, #320]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	494d      	ldr	r1, [pc, #308]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d040      	beq.n	800697c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d107      	bne.n	8006912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006902:	4b47      	ldr	r3, [pc, #284]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d115      	bne.n	800693a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e07f      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d107      	bne.n	800692a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800691a:	4b41      	ldr	r3, [pc, #260]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e073      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800692a:	4b3d      	ldr	r3, [pc, #244]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e06b      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800693a:	4b39      	ldr	r3, [pc, #228]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f023 0203 	bic.w	r2, r3, #3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	4936      	ldr	r1, [pc, #216]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 8006948:	4313      	orrs	r3, r2
 800694a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800694c:	f7ff fa78 	bl	8005e40 <HAL_GetTick>
 8006950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006952:	e00a      	b.n	800696a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006954:	f7ff fa74 	bl	8005e40 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006962:	4293      	cmp	r3, r2
 8006964:	d901      	bls.n	800696a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e053      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696a:	4b2d      	ldr	r3, [pc, #180]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 020c 	and.w	r2, r3, #12
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	429a      	cmp	r2, r3
 800697a:	d1eb      	bne.n	8006954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800697c:	4b27      	ldr	r3, [pc, #156]	; (8006a1c <HAL_RCC_ClockConfig+0x1c0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d210      	bcs.n	80069ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698a:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <HAL_RCC_ClockConfig+0x1c0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f023 0207 	bic.w	r2, r3, #7
 8006992:	4922      	ldr	r1, [pc, #136]	; (8006a1c <HAL_RCC_ClockConfig+0x1c0>)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b20      	ldr	r3, [pc, #128]	; (8006a1c <HAL_RCC_ClockConfig+0x1c0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e032      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b8:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4916      	ldr	r1, [pc, #88]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069d6:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	490e      	ldr	r1, [pc, #56]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069ea:	f000 f821 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 80069ee:	4601      	mov	r1, r0
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <HAL_RCC_ClockConfig+0x1c4>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <HAL_RCC_ClockConfig+0x1c8>)
 80069fc:	5cd3      	ldrb	r3, [r2, r3]
 80069fe:	fa21 f303 	lsr.w	r3, r1, r3
 8006a02:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <HAL_RCC_ClockConfig+0x1cc>)
 8006a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a06:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <HAL_RCC_ClockConfig+0x1d0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff f94a 	bl	8005ca4 <HAL_InitTick>

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40022000 	.word	0x40022000
 8006a20:	40021000 	.word	0x40021000
 8006a24:	08008500 	.word	0x08008500
 8006a28:	20000000 	.word	0x20000000
 8006a2c:	20000004 	.word	0x20000004

08006a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a30:	b490      	push	{r4, r7}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a36:	4b2a      	ldr	r3, [pc, #168]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a38:	1d3c      	adds	r4, r7, #4
 8006a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a40:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
 8006a52:	2300      	movs	r3, #0
 8006a54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a5a:	4b23      	ldr	r3, [pc, #140]	; (8006ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f003 030c 	and.w	r3, r3, #12
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d002      	beq.n	8006a70 <HAL_RCC_GetSysClockFreq+0x40>
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d003      	beq.n	8006a76 <HAL_RCC_GetSysClockFreq+0x46>
 8006a6e:	e02d      	b.n	8006acc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a70:	4b1e      	ldr	r3, [pc, #120]	; (8006aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a72:	623b      	str	r3, [r7, #32]
      break;
 8006a74:	e02d      	b.n	8006ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	0c9b      	lsrs	r3, r3, #18
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a82:	4413      	add	r3, r2
 8006a84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d013      	beq.n	8006abc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a94:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	0c5b      	lsrs	r3, r3, #17
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006aa8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	4a0f      	ldr	r2, [pc, #60]	; (8006aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aae:	fb02 f203 	mul.w	r2, r2, r3
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aba:	e004      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	4a0c      	ldr	r2, [pc, #48]	; (8006af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	623b      	str	r3, [r7, #32]
      break;
 8006aca:	e002      	b.n	8006ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006acc:	4b07      	ldr	r3, [pc, #28]	; (8006aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ace:	623b      	str	r3, [r7, #32]
      break;
 8006ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3728      	adds	r7, #40	; 0x28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc90      	pop	{r4, r7}
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	080084e4 	.word	0x080084e4
 8006ae4:	080084f4 	.word	0x080084f4
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	007a1200 	.word	0x007a1200
 8006af0:	003d0900 	.word	0x003d0900

08006af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006af8:	4b02      	ldr	r3, [pc, #8]	; (8006b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8006afa:	681b      	ldr	r3, [r3, #0]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr
 8006b04:	20000000 	.word	0x20000000

08006b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b0c:	f7ff fff2 	bl	8006af4 <HAL_RCC_GetHCLKFreq>
 8006b10:	4601      	mov	r1, r0
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4a03      	ldr	r2, [pc, #12]	; (8006b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b1e:	5cd3      	ldrb	r3, [r2, r3]
 8006b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	08008510 	.word	0x08008510

08006b30 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	220f      	movs	r2, #15
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b40:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <HAL_RCC_GetClockConfig+0x58>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 0203 	and.w	r2, r3, #3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b4c:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <HAL_RCC_GetClockConfig+0x58>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_RCC_GetClockConfig+0x58>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006b64:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <HAL_RCC_GetClockConfig+0x58>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <HAL_RCC_GetClockConfig+0x5c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0207 	and.w	r2, r3, #7
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40022000 	.word	0x40022000

08006b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <RCC_Delay+0x34>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <RCC_Delay+0x38>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	0a5b      	lsrs	r3, r3, #9
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
 8006baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006bac:	bf00      	nop
  }
  while (Delay --);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1e5a      	subs	r2, r3, #1
 8006bb2:	60fa      	str	r2, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f9      	bne.n	8006bac <RCC_Delay+0x1c>
}
 8006bb8:	bf00      	nop
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000000 	.word	0x20000000
 8006bc8:	10624dd3 	.word	0x10624dd3

08006bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e041      	b.n	8006c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f839 	bl	8006c6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f000 f9c2 	bl	8006f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d001      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e044      	b.n	8006d1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	; (8006d28 <HAL_TIM_Base_Start_IT+0xac>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d018      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1c      	ldr	r2, [pc, #112]	; (8006d2c <HAL_TIM_Base_Start_IT+0xb0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <HAL_TIM_Base_Start_IT+0xb4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a16      	ldr	r2, [pc, #88]	; (8006d34 <HAL_TIM_Base_Start_IT+0xb8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x6c>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d111      	bne.n	8006d0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b06      	cmp	r3, #6
 8006cf8:	d010      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0201 	orr.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0a:	e007      	b.n	8006d1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0201 	orr.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40013400 	.word	0x40013400
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40000c00 	.word	0x40000c00

08006d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d122      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d11b      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0202 	mvn.w	r2, #2
 8006d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f8ed 	bl	8006f5e <HAL_TIM_IC_CaptureCallback>
 8006d84:	e005      	b.n	8006d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f8e0 	bl	8006f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f8ef 	bl	8006f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d122      	bne.n	8006dec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d11b      	bne.n	8006dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0204 	mvn.w	r2, #4
 8006dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f8c3 	bl	8006f5e <HAL_TIM_IC_CaptureCallback>
 8006dd8:	e005      	b.n	8006de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f8b6 	bl	8006f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f8c5 	bl	8006f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d122      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d11b      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0208 	mvn.w	r2, #8
 8006e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2204      	movs	r2, #4
 8006e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f899 	bl	8006f5e <HAL_TIM_IC_CaptureCallback>
 8006e2c:	e005      	b.n	8006e3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f88c 	bl	8006f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f89b 	bl	8006f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b10      	cmp	r3, #16
 8006e4c:	d122      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b10      	cmp	r3, #16
 8006e5a:	d11b      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0210 	mvn.w	r2, #16
 8006e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2208      	movs	r2, #8
 8006e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f86f 	bl	8006f5e <HAL_TIM_IC_CaptureCallback>
 8006e80:	e005      	b.n	8006e8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f862 	bl	8006f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f871 	bl	8006f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d10e      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d107      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0201 	mvn.w	r2, #1
 8006eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe fea2 	bl	8005c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d10e      	bne.n	8006eec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed8:	2b80      	cmp	r3, #128	; 0x80
 8006eda:	d107      	bne.n	8006eec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f8d7 	bl	800709a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d10e      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b40      	cmp	r3, #64	; 0x40
 8006f06:	d107      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f835 	bl	8006f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d10e      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d107      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0220 	mvn.w	r2, #32
 8006f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f8a2 	bl	8007088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr

08006f82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a33      	ldr	r2, [pc, #204]	; (8007074 <TIM_Base_SetConfig+0xe0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d013      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a32      	ldr	r2, [pc, #200]	; (8007078 <TIM_Base_SetConfig+0xe4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00f      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fba:	d00b      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a2f      	ldr	r2, [pc, #188]	; (800707c <TIM_Base_SetConfig+0xe8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a2e      	ldr	r2, [pc, #184]	; (8007080 <TIM_Base_SetConfig+0xec>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_Base_SetConfig+0x40>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a2d      	ldr	r2, [pc, #180]	; (8007084 <TIM_Base_SetConfig+0xf0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d108      	bne.n	8006fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a22      	ldr	r2, [pc, #136]	; (8007074 <TIM_Base_SetConfig+0xe0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d013      	beq.n	8007016 <TIM_Base_SetConfig+0x82>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a21      	ldr	r2, [pc, #132]	; (8007078 <TIM_Base_SetConfig+0xe4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00f      	beq.n	8007016 <TIM_Base_SetConfig+0x82>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffc:	d00b      	beq.n	8007016 <TIM_Base_SetConfig+0x82>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a1e      	ldr	r2, [pc, #120]	; (800707c <TIM_Base_SetConfig+0xe8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d007      	beq.n	8007016 <TIM_Base_SetConfig+0x82>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <TIM_Base_SetConfig+0xec>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d003      	beq.n	8007016 <TIM_Base_SetConfig+0x82>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a1c      	ldr	r2, [pc, #112]	; (8007084 <TIM_Base_SetConfig+0xf0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d108      	bne.n	8007028 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a09      	ldr	r2, [pc, #36]	; (8007074 <TIM_Base_SetConfig+0xe0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_Base_SetConfig+0xc8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a08      	ldr	r2, [pc, #32]	; (8007078 <TIM_Base_SetConfig+0xe4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d103      	bne.n	8007064 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	615a      	str	r2, [r3, #20]
}
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40013400 	.word	0x40013400
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00

08007088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr

0800709a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr

080070ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070be:	2b84      	cmp	r3, #132	; 0x84
 80070c0:	d005      	beq.n	80070ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	3303      	adds	r3, #3
 80070cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070ce:	68fb      	ldr	r3, [r7, #12]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr

080070da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80070de:	f000 facd 	bl	800767c <vTaskStartScheduler>
  
  return osOK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ea:	b089      	sub	sp, #36	; 0x24
 80070ec:	af04      	add	r7, sp, #16
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d020      	beq.n	800713c <osThreadCreate+0x54>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01c      	beq.n	800713c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685c      	ldr	r4, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681d      	ldr	r5, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691e      	ldr	r6, [r3, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff ffc9 	bl	80070ac <makeFreeRtosPriority>
 800711a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007124:	9202      	str	r2, [sp, #8]
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	9100      	str	r1, [sp, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	4632      	mov	r2, r6
 800712e:	4629      	mov	r1, r5
 8007130:	4620      	mov	r0, r4
 8007132:	f000 f8e8 	bl	8007306 <xTaskCreateStatic>
 8007136:	4603      	mov	r3, r0
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e01c      	b.n	8007176 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685c      	ldr	r4, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007148:	b29e      	uxth	r6, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff ffab 	bl	80070ac <makeFreeRtosPriority>
 8007156:	4602      	mov	r2, r0
 8007158:	f107 030c 	add.w	r3, r7, #12
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	9200      	str	r2, [sp, #0]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	4632      	mov	r2, r6
 8007164:	4629      	mov	r1, r5
 8007166:	4620      	mov	r0, r4
 8007168:	f000 f926 	bl	80073b8 <xTaskCreate>
 800716c:	4603      	mov	r3, r0
 800716e:	2b01      	cmp	r3, #1
 8007170:	d001      	beq.n	8007176 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	e000      	b.n	8007178 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007176:	68fb      	ldr	r3, [r7, #12]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007180 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <osDelay+0x16>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	e000      	b.n	8007198 <osDelay+0x18>
 8007196:	2301      	movs	r3, #1
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fa3b 	bl	8007614 <vTaskDelay>
  
  return osOK;
 800719e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f103 0208 	add.w	r2, r3, #8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f04f 32ff 	mov.w	r2, #4294967295
 80071c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f103 0208 	add.w	r2, r3, #8
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f103 0208 	add.w	r2, r3, #8
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr

080071e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr

08007244 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d103      	bne.n	8007264 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	e00c      	b.n	800727e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3308      	adds	r3, #8
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	e002      	b.n	8007272 <vListInsert+0x2e>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	d2f6      	bcs.n	800726c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	601a      	str	r2, [r3, #0]
}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr

080072b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6892      	ldr	r2, [r2, #8]
 80072ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6852      	ldr	r2, [r2, #4]
 80072d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d103      	bne.n	80072e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	1e5a      	subs	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr

08007306 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007306:	b580      	push	{r7, lr}
 8007308:	b08e      	sub	sp, #56	; 0x38
 800730a:	af04      	add	r7, sp, #16
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
 8007312:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	623b      	str	r3, [r7, #32]
 800732c:	e7fe      	b.n	800732c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	2b00      	cmp	r3, #0
 8007332:	d109      	bne.n	8007348 <xTaskCreateStatic+0x42>
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	e7fe      	b.n	8007346 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007348:	2354      	movs	r3, #84	; 0x54
 800734a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b54      	cmp	r3, #84	; 0x54
 8007350:	d009      	beq.n	8007366 <xTaskCreateStatic+0x60>
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	e7fe      	b.n	8007364 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01e      	beq.n	80073aa <xTaskCreateStatic+0xa4>
 800736c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01b      	beq.n	80073aa <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800737a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	2202      	movs	r2, #2
 8007380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007384:	2300      	movs	r3, #0
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	9302      	str	r3, [sp, #8]
 800738c:	f107 0314 	add.w	r3, r7, #20
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f850 	bl	8007442 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073a4:	f000 f8cc 	bl	8007540 <prvAddNewTaskToReadyList>
 80073a8:	e001      	b.n	80073ae <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073ae:	697b      	ldr	r3, [r7, #20]
	}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3728      	adds	r7, #40	; 0x28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08c      	sub	sp, #48	; 0x30
 80073bc:	af04      	add	r7, sp, #16
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c8:	88fb      	ldrh	r3, [r7, #6]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fe55 	bl	800807c <pvPortMalloc>
 80073d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00e      	beq.n	80073f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80073da:	2054      	movs	r0, #84	; 0x54
 80073dc:	f000 fe4e 	bl	800807c <pvPortMalloc>
 80073e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	631a      	str	r2, [r3, #48]	; 0x30
 80073ee:	e005      	b.n	80073fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073f0:	6978      	ldr	r0, [r7, #20]
 80073f2:	f000 ff05 	bl	8008200 <vPortFree>
 80073f6:	e001      	b.n	80073fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073f8:	2300      	movs	r3, #0
 80073fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d017      	beq.n	8007432 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	2300      	movs	r3, #0
 800740e:	9303      	str	r3, [sp, #12]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	9302      	str	r3, [sp, #8]
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f80e 	bl	8007442 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007426:	69f8      	ldr	r0, [r7, #28]
 8007428:	f000 f88a 	bl	8007540 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800742c:	2301      	movs	r3, #1
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	e002      	b.n	8007438 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007432:	f04f 33ff 	mov.w	r3, #4294967295
 8007436:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007438:	69bb      	ldr	r3, [r7, #24]
	}
 800743a:	4618      	mov	r0, r3
 800743c:	3720      	adds	r7, #32
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b088      	sub	sp, #32
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800745a:	3b01      	subs	r3, #1
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	f023 0307 	bic.w	r3, r3, #7
 8007468:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <prvInitialiseNewTask+0x46>
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	e7fe      	b.n	8007486 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007488:	2300      	movs	r3, #0
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	e012      	b.n	80074b4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	7819      	ldrb	r1, [r3, #0]
 8007496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	3334      	adds	r3, #52	; 0x34
 800749e:	460a      	mov	r2, r1
 80074a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	4413      	add	r3, r2
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	3301      	adds	r3, #1
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2b0f      	cmp	r3, #15
 80074b8:	d9e9      	bls.n	800748e <prvInitialiseNewTask+0x4c>
 80074ba:	e000      	b.n	80074be <prvInitialiseNewTask+0x7c>
		{
			break;
 80074bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	2b06      	cmp	r3, #6
 80074ca:	d901      	bls.n	80074d0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074cc:	2306      	movs	r3, #6
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	2200      	movs	r2, #0
 80074e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	3304      	adds	r3, #4
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fe7d 	bl	80071e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	3318      	adds	r3, #24
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fe78 	bl	80071e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	f1c3 0207 	rsb	r2, r3, #7
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	2200      	movs	r2, #0
 8007510:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	68f9      	ldr	r1, [r7, #12]
 800751e:	69b8      	ldr	r0, [r7, #24]
 8007520:	f000 fc06 	bl	8007d30 <pxPortInitialiseStack>
 8007524:	4602      	mov	r2, r0
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007536:	bf00      	nop
 8007538:	3720      	adds	r7, #32
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007548:	f000 fcde 	bl	8007f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800754c:	4b2a      	ldr	r3, [pc, #168]	; (80075f8 <prvAddNewTaskToReadyList+0xb8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	4a29      	ldr	r2, [pc, #164]	; (80075f8 <prvAddNewTaskToReadyList+0xb8>)
 8007554:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007556:	4b29      	ldr	r3, [pc, #164]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d109      	bne.n	8007572 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800755e:	4a27      	ldr	r2, [pc, #156]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007564:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <prvAddNewTaskToReadyList+0xb8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d110      	bne.n	800758e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800756c:	f000 fabc 	bl	8007ae8 <prvInitialiseTaskLists>
 8007570:	e00d      	b.n	800758e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007572:	4b23      	ldr	r3, [pc, #140]	; (8007600 <prvAddNewTaskToReadyList+0xc0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800757a:	4b20      	ldr	r3, [pc, #128]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	429a      	cmp	r2, r3
 8007586:	d802      	bhi.n	800758e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007588:	4a1c      	ldr	r2, [pc, #112]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800758e:	4b1d      	ldr	r3, [pc, #116]	; (8007604 <prvAddNewTaskToReadyList+0xc4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	4a1b      	ldr	r2, [pc, #108]	; (8007604 <prvAddNewTaskToReadyList+0xc4>)
 8007596:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	2201      	movs	r2, #1
 800759e:	409a      	lsls	r2, r3
 80075a0:	4b19      	ldr	r3, [pc, #100]	; (8007608 <prvAddNewTaskToReadyList+0xc8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	4a18      	ldr	r2, [pc, #96]	; (8007608 <prvAddNewTaskToReadyList+0xc8>)
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4a15      	ldr	r2, [pc, #84]	; (800760c <prvAddNewTaskToReadyList+0xcc>)
 80075b8:	441a      	add	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3304      	adds	r3, #4
 80075be:	4619      	mov	r1, r3
 80075c0:	4610      	mov	r0, r2
 80075c2:	f7ff fe1c 	bl	80071fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075c6:	f000 fccd 	bl	8007f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <prvAddNewTaskToReadyList+0xc0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00e      	beq.n	80075f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d207      	bcs.n	80075f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075e0:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <prvAddNewTaskToReadyList+0xd0>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000380 	.word	0x20000380
 80075fc:	20000280 	.word	0x20000280
 8007600:	2000038c 	.word	0x2000038c
 8007604:	2000039c 	.word	0x2000039c
 8007608:	20000388 	.word	0x20000388
 800760c:	20000284 	.word	0x20000284
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d016      	beq.n	8007654 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <vTaskDelay+0x60>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <vTaskDelay+0x2e>
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	60bb      	str	r3, [r7, #8]
 8007640:	e7fe      	b.n	8007640 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007642:	f000 f879 	bl	8007738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007646:	2100      	movs	r1, #0
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb0b 	bl	8007c64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800764e:	f000 f881 	bl	8007754 <xTaskResumeAll>
 8007652:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d107      	bne.n	800766a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <vTaskDelay+0x64>)
 800765c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	200003a8 	.word	0x200003a8
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007686:	2300      	movs	r3, #0
 8007688:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800768a:	463a      	mov	r2, r7
 800768c:	1d39      	adds	r1, r7, #4
 800768e:	f107 0308 	add.w	r3, r7, #8
 8007692:	4618      	mov	r0, r3
 8007694:	f7f9 f9ba 	bl	8000a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	9202      	str	r2, [sp, #8]
 80076a0:	9301      	str	r3, [sp, #4]
 80076a2:	2300      	movs	r3, #0
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	2300      	movs	r3, #0
 80076a8:	460a      	mov	r2, r1
 80076aa:	491d      	ldr	r1, [pc, #116]	; (8007720 <vTaskStartScheduler+0xa4>)
 80076ac:	481d      	ldr	r0, [pc, #116]	; (8007724 <vTaskStartScheduler+0xa8>)
 80076ae:	f7ff fe2a 	bl	8007306 <xTaskCreateStatic>
 80076b2:	4602      	mov	r2, r0
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <vTaskStartScheduler+0xac>)
 80076b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076b8:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <vTaskStartScheduler+0xac>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076c0:	2301      	movs	r3, #1
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e001      	b.n	80076ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d115      	bne.n	80076fc <vTaskStartScheduler+0x80>
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <vTaskStartScheduler+0xb0>)
 80076e4:	f04f 32ff 	mov.w	r2, #4294967295
 80076e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076ea:	4b11      	ldr	r3, [pc, #68]	; (8007730 <vTaskStartScheduler+0xb4>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80076f0:	4b10      	ldr	r3, [pc, #64]	; (8007734 <vTaskStartScheduler+0xb8>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076f6:	f000 fb97 	bl	8007e28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076fa:	e00d      	b.n	8007718 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007702:	d109      	bne.n	8007718 <vTaskStartScheduler+0x9c>
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e7fe      	b.n	8007716 <vTaskStartScheduler+0x9a>
}
 8007718:	bf00      	nop
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	080084f8 	.word	0x080084f8
 8007724:	08007ab9 	.word	0x08007ab9
 8007728:	200003a4 	.word	0x200003a4
 800772c:	200003a0 	.word	0x200003a0
 8007730:	2000038c 	.word	0x2000038c
 8007734:	20000384 	.word	0x20000384

08007738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007738:	b480      	push	{r7}
 800773a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800773c:	4b04      	ldr	r3, [pc, #16]	; (8007750 <vTaskSuspendAll+0x18>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	4a03      	ldr	r2, [pc, #12]	; (8007750 <vTaskSuspendAll+0x18>)
 8007744:	6013      	str	r3, [r2, #0]
}
 8007746:	bf00      	nop
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	200003a8 	.word	0x200003a8

08007754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007762:	4b41      	ldr	r3, [pc, #260]	; (8007868 <xTaskResumeAll+0x114>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <xTaskResumeAll+0x2a>
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	e7fe      	b.n	800777c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800777e:	f000 fbc3 	bl	8007f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007782:	4b39      	ldr	r3, [pc, #228]	; (8007868 <xTaskResumeAll+0x114>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3b01      	subs	r3, #1
 8007788:	4a37      	ldr	r2, [pc, #220]	; (8007868 <xTaskResumeAll+0x114>)
 800778a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800778c:	4b36      	ldr	r3, [pc, #216]	; (8007868 <xTaskResumeAll+0x114>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d161      	bne.n	8007858 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007794:	4b35      	ldr	r3, [pc, #212]	; (800786c <xTaskResumeAll+0x118>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d05d      	beq.n	8007858 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800779c:	e02e      	b.n	80077fc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800779e:	4b34      	ldr	r3, [pc, #208]	; (8007870 <xTaskResumeAll+0x11c>)
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3318      	adds	r3, #24
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff fd82 	bl	80072b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff fd7d 	bl	80072b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	2201      	movs	r2, #1
 80077c0:	409a      	lsls	r2, r3
 80077c2:	4b2c      	ldr	r3, [pc, #176]	; (8007874 <xTaskResumeAll+0x120>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <xTaskResumeAll+0x120>)
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4a27      	ldr	r2, [pc, #156]	; (8007878 <xTaskResumeAll+0x124>)
 80077da:	441a      	add	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f7ff fd0b 	bl	80071fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ec:	4b23      	ldr	r3, [pc, #140]	; (800787c <xTaskResumeAll+0x128>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d302      	bcc.n	80077fc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80077f6:	4b22      	ldr	r3, [pc, #136]	; (8007880 <xTaskResumeAll+0x12c>)
 80077f8:	2201      	movs	r2, #1
 80077fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077fc:	4b1c      	ldr	r3, [pc, #112]	; (8007870 <xTaskResumeAll+0x11c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1cc      	bne.n	800779e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800780a:	f000 fa07 	bl	8007c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800780e:	4b1d      	ldr	r3, [pc, #116]	; (8007884 <xTaskResumeAll+0x130>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d010      	beq.n	800783c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800781a:	f000 f837 	bl	800788c <xTaskIncrementTick>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007824:	4b16      	ldr	r3, [pc, #88]	; (8007880 <xTaskResumeAll+0x12c>)
 8007826:	2201      	movs	r2, #1
 8007828:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3b01      	subs	r3, #1
 800782e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f1      	bne.n	800781a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007836:	4b13      	ldr	r3, [pc, #76]	; (8007884 <xTaskResumeAll+0x130>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800783c:	4b10      	ldr	r3, [pc, #64]	; (8007880 <xTaskResumeAll+0x12c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d009      	beq.n	8007858 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007844:	2301      	movs	r3, #1
 8007846:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007848:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <xTaskResumeAll+0x134>)
 800784a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007858:	f000 fb84 	bl	8007f64 <vPortExitCritical>

	return xAlreadyYielded;
 800785c:	68bb      	ldr	r3, [r7, #8]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200003a8 	.word	0x200003a8
 800786c:	20000380 	.word	0x20000380
 8007870:	20000340 	.word	0x20000340
 8007874:	20000388 	.word	0x20000388
 8007878:	20000284 	.word	0x20000284
 800787c:	20000280 	.word	0x20000280
 8007880:	20000394 	.word	0x20000394
 8007884:	20000390 	.word	0x20000390
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007896:	4b50      	ldr	r3, [pc, #320]	; (80079d8 <xTaskIncrementTick+0x14c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f040 808c 	bne.w	80079b8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078a0:	4b4e      	ldr	r3, [pc, #312]	; (80079dc <xTaskIncrementTick+0x150>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078a8:	4a4c      	ldr	r2, [pc, #304]	; (80079dc <xTaskIncrementTick+0x150>)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d11f      	bne.n	80078f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80078b4:	4b4a      	ldr	r3, [pc, #296]	; (80079e0 <xTaskIncrementTick+0x154>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <xTaskIncrementTick+0x46>
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	e7fe      	b.n	80078d0 <xTaskIncrementTick+0x44>
 80078d2:	4b43      	ldr	r3, [pc, #268]	; (80079e0 <xTaskIncrementTick+0x154>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	4b42      	ldr	r3, [pc, #264]	; (80079e4 <xTaskIncrementTick+0x158>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a40      	ldr	r2, [pc, #256]	; (80079e0 <xTaskIncrementTick+0x154>)
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	4a40      	ldr	r2, [pc, #256]	; (80079e4 <xTaskIncrementTick+0x158>)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	4b40      	ldr	r3, [pc, #256]	; (80079e8 <xTaskIncrementTick+0x15c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	4a3e      	ldr	r2, [pc, #248]	; (80079e8 <xTaskIncrementTick+0x15c>)
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	f000 f994 	bl	8007c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078f4:	4b3d      	ldr	r3, [pc, #244]	; (80079ec <xTaskIncrementTick+0x160>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d34d      	bcc.n	800799a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078fe:	4b38      	ldr	r3, [pc, #224]	; (80079e0 <xTaskIncrementTick+0x154>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <xTaskIncrementTick+0x80>
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <xTaskIncrementTick+0x82>
 800790c:	2300      	movs	r3, #0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d004      	beq.n	800791c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007912:	4b36      	ldr	r3, [pc, #216]	; (80079ec <xTaskIncrementTick+0x160>)
 8007914:	f04f 32ff 	mov.w	r2, #4294967295
 8007918:	601a      	str	r2, [r3, #0]
					break;
 800791a:	e03e      	b.n	800799a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800791c:	4b30      	ldr	r3, [pc, #192]	; (80079e0 <xTaskIncrementTick+0x154>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d203      	bcs.n	800793c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007934:	4a2d      	ldr	r2, [pc, #180]	; (80079ec <xTaskIncrementTick+0x160>)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6013      	str	r3, [r2, #0]
						break;
 800793a:	e02e      	b.n	800799a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	3304      	adds	r3, #4
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff fcb7 	bl	80072b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	3318      	adds	r3, #24
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff fcae 	bl	80072b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	2201      	movs	r2, #1
 800795e:	409a      	lsls	r2, r3
 8007960:	4b23      	ldr	r3, [pc, #140]	; (80079f0 <xTaskIncrementTick+0x164>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4313      	orrs	r3, r2
 8007966:	4a22      	ldr	r2, [pc, #136]	; (80079f0 <xTaskIncrementTick+0x164>)
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4a1f      	ldr	r2, [pc, #124]	; (80079f4 <xTaskIncrementTick+0x168>)
 8007978:	441a      	add	r2, r3
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	3304      	adds	r3, #4
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f7ff fc3c 	bl	80071fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798a:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <xTaskIncrementTick+0x16c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	429a      	cmp	r2, r3
 8007992:	d3b4      	bcc.n	80078fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007994:	2301      	movs	r3, #1
 8007996:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007998:	e7b1      	b.n	80078fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800799a:	4b17      	ldr	r3, [pc, #92]	; (80079f8 <xTaskIncrementTick+0x16c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a0:	4914      	ldr	r1, [pc, #80]	; (80079f4 <xTaskIncrementTick+0x168>)
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	440b      	add	r3, r1
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d907      	bls.n	80079c2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80079b2:	2301      	movs	r3, #1
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	e004      	b.n	80079c2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <xTaskIncrementTick+0x170>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	4a0f      	ldr	r2, [pc, #60]	; (80079fc <xTaskIncrementTick+0x170>)
 80079c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079c2:	4b0f      	ldr	r3, [pc, #60]	; (8007a00 <xTaskIncrementTick+0x174>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80079ca:	2301      	movs	r3, #1
 80079cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079ce:	697b      	ldr	r3, [r7, #20]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	200003a8 	.word	0x200003a8
 80079dc:	20000384 	.word	0x20000384
 80079e0:	20000338 	.word	0x20000338
 80079e4:	2000033c 	.word	0x2000033c
 80079e8:	20000398 	.word	0x20000398
 80079ec:	200003a0 	.word	0x200003a0
 80079f0:	20000388 	.word	0x20000388
 80079f4:	20000284 	.word	0x20000284
 80079f8:	20000280 	.word	0x20000280
 80079fc:	20000390 	.word	0x20000390
 8007a00:	20000394 	.word	0x20000394

08007a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a0a:	4b26      	ldr	r3, [pc, #152]	; (8007aa4 <vTaskSwitchContext+0xa0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a12:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <vTaskSwitchContext+0xa4>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a18:	e03e      	b.n	8007a98 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007a1a:	4b23      	ldr	r3, [pc, #140]	; (8007aa8 <vTaskSwitchContext+0xa4>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a20:	4b22      	ldr	r3, [pc, #136]	; (8007aac <vTaskSwitchContext+0xa8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	fab3 f383 	clz	r3, r3
 8007a2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a2e:	7afb      	ldrb	r3, [r7, #11]
 8007a30:	f1c3 031f 	rsb	r3, r3, #31
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	491e      	ldr	r1, [pc, #120]	; (8007ab0 <vTaskSwitchContext+0xac>)
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <vTaskSwitchContext+0x5a>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	607b      	str	r3, [r7, #4]
 8007a5c:	e7fe      	b.n	8007a5c <vTaskSwitchContext+0x58>
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4a11      	ldr	r2, [pc, #68]	; (8007ab0 <vTaskSwitchContext+0xac>)
 8007a6a:	4413      	add	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	605a      	str	r2, [r3, #4]
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d104      	bne.n	8007a8e <vTaskSwitchContext+0x8a>
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	605a      	str	r2, [r3, #4]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <vTaskSwitchContext+0xb0>)
 8007a96:	6013      	str	r3, [r2, #0]
}
 8007a98:	bf00      	nop
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	200003a8 	.word	0x200003a8
 8007aa8:	20000394 	.word	0x20000394
 8007aac:	20000388 	.word	0x20000388
 8007ab0:	20000284 	.word	0x20000284
 8007ab4:	20000280 	.word	0x20000280

08007ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ac0:	f000 f852 	bl	8007b68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ac4:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <prvIdleTask+0x28>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d9f9      	bls.n	8007ac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007acc:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <prvIdleTask+0x2c>)
 8007ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007adc:	e7f0      	b.n	8007ac0 <prvIdleTask+0x8>
 8007ade:	bf00      	nop
 8007ae0:	20000284 	.word	0x20000284
 8007ae4:	e000ed04 	.word	0xe000ed04

08007ae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aee:	2300      	movs	r3, #0
 8007af0:	607b      	str	r3, [r7, #4]
 8007af2:	e00c      	b.n	8007b0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4a12      	ldr	r2, [pc, #72]	; (8007b48 <prvInitialiseTaskLists+0x60>)
 8007b00:	4413      	add	r3, r2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fb50 	bl	80071a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	607b      	str	r3, [r7, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b06      	cmp	r3, #6
 8007b12:	d9ef      	bls.n	8007af4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b14:	480d      	ldr	r0, [pc, #52]	; (8007b4c <prvInitialiseTaskLists+0x64>)
 8007b16:	f7ff fb47 	bl	80071a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b1a:	480d      	ldr	r0, [pc, #52]	; (8007b50 <prvInitialiseTaskLists+0x68>)
 8007b1c:	f7ff fb44 	bl	80071a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b20:	480c      	ldr	r0, [pc, #48]	; (8007b54 <prvInitialiseTaskLists+0x6c>)
 8007b22:	f7ff fb41 	bl	80071a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b26:	480c      	ldr	r0, [pc, #48]	; (8007b58 <prvInitialiseTaskLists+0x70>)
 8007b28:	f7ff fb3e 	bl	80071a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b2c:	480b      	ldr	r0, [pc, #44]	; (8007b5c <prvInitialiseTaskLists+0x74>)
 8007b2e:	f7ff fb3b 	bl	80071a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b32:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <prvInitialiseTaskLists+0x78>)
 8007b34:	4a05      	ldr	r2, [pc, #20]	; (8007b4c <prvInitialiseTaskLists+0x64>)
 8007b36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b38:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <prvInitialiseTaskLists+0x7c>)
 8007b3a:	4a05      	ldr	r2, [pc, #20]	; (8007b50 <prvInitialiseTaskLists+0x68>)
 8007b3c:	601a      	str	r2, [r3, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000284 	.word	0x20000284
 8007b4c:	20000310 	.word	0x20000310
 8007b50:	20000324 	.word	0x20000324
 8007b54:	20000340 	.word	0x20000340
 8007b58:	20000354 	.word	0x20000354
 8007b5c:	2000036c 	.word	0x2000036c
 8007b60:	20000338 	.word	0x20000338
 8007b64:	2000033c 	.word	0x2000033c

08007b68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b6e:	e019      	b.n	8007ba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b70:	f000 f9ca 	bl	8007f08 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b74:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <prvCheckTasksWaitingTermination+0x4c>)
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fb97 	bl	80072b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b86:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <prvCheckTasksWaitingTermination+0x50>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	4a0a      	ldr	r2, [pc, #40]	; (8007bb8 <prvCheckTasksWaitingTermination+0x50>)
 8007b8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b90:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <prvCheckTasksWaitingTermination+0x54>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	4a09      	ldr	r2, [pc, #36]	; (8007bbc <prvCheckTasksWaitingTermination+0x54>)
 8007b98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b9a:	f000 f9e3 	bl	8007f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f80e 	bl	8007bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <prvCheckTasksWaitingTermination+0x54>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e1      	bne.n	8007b70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20000354 	.word	0x20000354
 8007bb8:	20000380 	.word	0x20000380
 8007bbc:	20000368 	.word	0x20000368

08007bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d108      	bne.n	8007be4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fb12 	bl	8008200 <vPortFree>
				vPortFree( pxTCB );
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fb0f 	bl	8008200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007be2:	e017      	b.n	8007c14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d103      	bne.n	8007bf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fb06 	bl	8008200 <vPortFree>
	}
 8007bf4:	e00e      	b.n	8007c14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d009      	beq.n	8007c14 <prvDeleteTCB+0x54>
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	e7fe      	b.n	8007c12 <prvDeleteTCB+0x52>
	}
 8007c14:	bf00      	nop
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c22:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <prvResetNextTaskUnblockTime+0x40>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <prvResetNextTaskUnblockTime+0x14>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e000      	b.n	8007c32 <prvResetNextTaskUnblockTime+0x16>
 8007c30:	2300      	movs	r3, #0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d004      	beq.n	8007c40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <prvResetNextTaskUnblockTime+0x44>)
 8007c38:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c3e:	e008      	b.n	8007c52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c40:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <prvResetNextTaskUnblockTime+0x40>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <prvResetNextTaskUnblockTime+0x44>)
 8007c50:	6013      	str	r3, [r2, #0]
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bc80      	pop	{r7}
 8007c5a:	4770      	bx	lr
 8007c5c:	20000338 	.word	0x20000338
 8007c60:	200003a0 	.word	0x200003a0

08007c64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c6e:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c74:	4b28      	ldr	r3, [pc, #160]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fb1a 	bl	80072b4 <uxListRemove>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007c86:	4b24      	ldr	r3, [pc, #144]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	43da      	mvns	r2, r3
 8007c94:	4b21      	ldr	r3, [pc, #132]	; (8007d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d10a      	bne.n	8007cbc <prvAddCurrentTaskToDelayedList+0x58>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d007      	beq.n	8007cbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cac:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	481a      	ldr	r0, [pc, #104]	; (8007d20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007cb6:	f7ff faa2 	bl	80071fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cba:	e026      	b.n	8007d0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cc4:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d209      	bcs.n	8007ce8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cd4:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f7ff faaf 	bl	8007244 <vListInsert>
}
 8007ce6:	e010      	b.n	8007d0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f7ff faa5 	bl	8007244 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d202      	bcs.n	8007d0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d04:	4a09      	ldr	r2, [pc, #36]	; (8007d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6013      	str	r3, [r2, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000384 	.word	0x20000384
 8007d18:	20000280 	.word	0x20000280
 8007d1c:	20000388 	.word	0x20000388
 8007d20:	2000036c 	.word	0x2000036c
 8007d24:	2000033c 	.word	0x2000033c
 8007d28:	20000338 	.word	0x20000338
 8007d2c:	200003a0 	.word	0x200003a0

08007d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3b04      	subs	r3, #4
 8007d40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3b04      	subs	r3, #4
 8007d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f023 0201 	bic.w	r2, r3, #1
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3b04      	subs	r3, #4
 8007d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d60:	4a08      	ldr	r2, [pc, #32]	; (8007d84 <pxPortInitialiseStack+0x54>)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3b14      	subs	r3, #20
 8007d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3b20      	subs	r3, #32
 8007d76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d78:	68fb      	ldr	r3, [r7, #12]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr
 8007d84:	08007d89 	.word	0x08007d89

08007d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <prvTaskExitError+0x4c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9a:	d009      	beq.n	8007db0 <prvTaskExitError+0x28>
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	e7fe      	b.n	8007dae <prvTaskExitError+0x26>
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dc2:	bf00      	nop
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0fc      	beq.n	8007dc4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr
 8007dd4:	2000000c 	.word	0x2000000c
	...

08007de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <pxCurrentTCBConst2>)
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	6808      	ldr	r0, [r1, #0]
 8007de6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007dea:	f380 8809 	msr	PSP, r0
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8811 	msr	BASEPRI, r0
 8007dfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dfe:	4770      	bx	lr

08007e00 <pxCurrentTCBConst2>:
 8007e00:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop

08007e08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007e08:	4806      	ldr	r0, [pc, #24]	; (8007e24 <prvPortStartFirstTask+0x1c>)
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f380 8808 	msr	MSP, r0
 8007e12:	b662      	cpsie	i
 8007e14:	b661      	cpsie	f
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	df00      	svc	0
 8007e20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e22:	bf00      	nop
 8007e24:	e000ed08 	.word	0xe000ed08

08007e28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e2e:	4b31      	ldr	r3, [pc, #196]	; (8007ef4 <xPortStartScheduler+0xcc>)
 8007e30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	22ff      	movs	r2, #255	; 0xff
 8007e3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	4b29      	ldr	r3, [pc, #164]	; (8007ef8 <xPortStartScheduler+0xd0>)
 8007e54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e56:	4b29      	ldr	r3, [pc, #164]	; (8007efc <xPortStartScheduler+0xd4>)
 8007e58:	2207      	movs	r2, #7
 8007e5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e5c:	e009      	b.n	8007e72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e5e:	4b27      	ldr	r3, [pc, #156]	; (8007efc <xPortStartScheduler+0xd4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	4a25      	ldr	r2, [pc, #148]	; (8007efc <xPortStartScheduler+0xd4>)
 8007e66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b80      	cmp	r3, #128	; 0x80
 8007e7c:	d0ef      	beq.n	8007e5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e7e:	4b1f      	ldr	r3, [pc, #124]	; (8007efc <xPortStartScheduler+0xd4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f1c3 0307 	rsb	r3, r3, #7
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d009      	beq.n	8007e9e <xPortStartScheduler+0x76>
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	60bb      	str	r3, [r7, #8]
 8007e9c:	e7fe      	b.n	8007e9c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e9e:	4b17      	ldr	r3, [pc, #92]	; (8007efc <xPortStartScheduler+0xd4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	4a15      	ldr	r2, [pc, #84]	; (8007efc <xPortStartScheduler+0xd4>)
 8007ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ea8:	4b14      	ldr	r3, [pc, #80]	; (8007efc <xPortStartScheduler+0xd4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eb0:	4a12      	ldr	r2, [pc, #72]	; (8007efc <xPortStartScheduler+0xd4>)
 8007eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ebc:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0f      	ldr	r2, [pc, #60]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007ec2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ec8:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a0c      	ldr	r2, [pc, #48]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007ece:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ed4:	f000 f8b0 	bl	8008038 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <xPortStartScheduler+0xdc>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ede:	f7ff ff93 	bl	8007e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ee2:	f7ff fd8f 	bl	8007a04 <vTaskSwitchContext>
	prvTaskExitError();
 8007ee6:	f7ff ff4f 	bl	8007d88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	e000e400 	.word	0xe000e400
 8007ef8:	200003ac 	.word	0x200003ac
 8007efc:	200003b0 	.word	0x200003b0
 8007f00:	e000ed20 	.word	0xe000ed20
 8007f04:	2000000c 	.word	0x2000000c

08007f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f20:	4b0e      	ldr	r3, [pc, #56]	; (8007f5c <vPortEnterCritical+0x54>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3301      	adds	r3, #1
 8007f26:	4a0d      	ldr	r2, [pc, #52]	; (8007f5c <vPortEnterCritical+0x54>)
 8007f28:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f2a:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <vPortEnterCritical+0x54>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d10e      	bne.n	8007f50 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <vPortEnterCritical+0x58>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <vPortEnterCritical+0x48>
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	603b      	str	r3, [r7, #0]
 8007f4e:	e7fe      	b.n	8007f4e <vPortEnterCritical+0x46>
	}
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	2000000c 	.word	0x2000000c
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f6a:	4b10      	ldr	r3, [pc, #64]	; (8007fac <vPortExitCritical+0x48>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d109      	bne.n	8007f86 <vPortExitCritical+0x22>
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	607b      	str	r3, [r7, #4]
 8007f84:	e7fe      	b.n	8007f84 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007f86:	4b09      	ldr	r3, [pc, #36]	; (8007fac <vPortExitCritical+0x48>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4a07      	ldr	r2, [pc, #28]	; (8007fac <vPortExitCritical+0x48>)
 8007f8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <vPortExitCritical+0x48>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <vPortExitCritical+0x3e>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bc80      	pop	{r7}
 8007faa:	4770      	bx	lr
 8007fac:	2000000c 	.word	0x2000000c

08007fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fb0:	f3ef 8009 	mrs	r0, PSP
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	4b0d      	ldr	r3, [pc, #52]	; (8007ff0 <pxCurrentTCBConst>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fc0:	6010      	str	r0, [r2, #0]
 8007fc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007fc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fca:	f380 8811 	msr	BASEPRI, r0
 8007fce:	f7ff fd19 	bl	8007a04 <vTaskSwitchContext>
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8811 	msr	BASEPRI, r0
 8007fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	6808      	ldr	r0, [r1, #0]
 8007fe2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fe6:	f380 8809 	msr	PSP, r0
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	4770      	bx	lr

08007ff0 <pxCurrentTCBConst>:
 8007ff0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop

08007ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008010:	f7ff fc3c 	bl	800788c <xTaskIncrementTick>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800801a:	4b06      	ldr	r3, [pc, #24]	; (8008034 <SysTick_Handler+0x3c>)
 800801c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	2300      	movs	r3, #0
 8008024:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	e000ed04 	.word	0xe000ed04

08008038 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800803c:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <vPortSetupTimerInterrupt+0x30>)
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008042:	4b0a      	ldr	r3, [pc, #40]	; (800806c <vPortSetupTimerInterrupt+0x34>)
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008048:	4b09      	ldr	r3, [pc, #36]	; (8008070 <vPortSetupTimerInterrupt+0x38>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a09      	ldr	r2, [pc, #36]	; (8008074 <vPortSetupTimerInterrupt+0x3c>)
 800804e:	fba2 2303 	umull	r2, r3, r2, r3
 8008052:	099b      	lsrs	r3, r3, #6
 8008054:	4a08      	ldr	r2, [pc, #32]	; (8008078 <vPortSetupTimerInterrupt+0x40>)
 8008056:	3b01      	subs	r3, #1
 8008058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800805a:	4b03      	ldr	r3, [pc, #12]	; (8008068 <vPortSetupTimerInterrupt+0x30>)
 800805c:	2207      	movs	r2, #7
 800805e:	601a      	str	r2, [r3, #0]
}
 8008060:	bf00      	nop
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr
 8008068:	e000e010 	.word	0xe000e010
 800806c:	e000e018 	.word	0xe000e018
 8008070:	20000000 	.word	0x20000000
 8008074:	10624dd3 	.word	0x10624dd3
 8008078:	e000e014 	.word	0xe000e014

0800807c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	; 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008088:	f7ff fb56 	bl	8007738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800808c:	4b57      	ldr	r3, [pc, #348]	; (80081ec <pvPortMalloc+0x170>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008094:	f000 f90c 	bl	80082b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008098:	4b55      	ldr	r3, [pc, #340]	; (80081f0 <pvPortMalloc+0x174>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f040 808c 	bne.w	80081be <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01c      	beq.n	80080e6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80080ac:	2208      	movs	r2, #8
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d013      	beq.n	80080e6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f023 0307 	bic.w	r3, r3, #7
 80080c4:	3308      	adds	r3, #8
 80080c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <pvPortMalloc+0x6a>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e7fe      	b.n	80080e4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d068      	beq.n	80081be <pvPortMalloc+0x142>
 80080ec:	4b41      	ldr	r3, [pc, #260]	; (80081f4 <pvPortMalloc+0x178>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d863      	bhi.n	80081be <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080f6:	4b40      	ldr	r3, [pc, #256]	; (80081f8 <pvPortMalloc+0x17c>)
 80080f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080fa:	4b3f      	ldr	r3, [pc, #252]	; (80081f8 <pvPortMalloc+0x17c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008100:	e004      	b.n	800810c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	429a      	cmp	r2, r3
 8008114:	d903      	bls.n	800811e <pvPortMalloc+0xa2>
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1f1      	bne.n	8008102 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800811e:	4b33      	ldr	r3, [pc, #204]	; (80081ec <pvPortMalloc+0x170>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008124:	429a      	cmp	r2, r3
 8008126:	d04a      	beq.n	80081be <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2208      	movs	r2, #8
 800812e:	4413      	add	r3, r2
 8008130:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	1ad2      	subs	r2, r2, r3
 8008142:	2308      	movs	r3, #8
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	429a      	cmp	r2, r3
 8008148:	d91e      	bls.n	8008188 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800814a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4413      	add	r3, r2
 8008150:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	2b00      	cmp	r3, #0
 800815a:	d009      	beq.n	8008170 <pvPortMalloc+0xf4>
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	e7fe      	b.n	800816e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	1ad2      	subs	r2, r2, r3
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008182:	69b8      	ldr	r0, [r7, #24]
 8008184:	f000 f8f6 	bl	8008374 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008188:	4b1a      	ldr	r3, [pc, #104]	; (80081f4 <pvPortMalloc+0x178>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	4a18      	ldr	r2, [pc, #96]	; (80081f4 <pvPortMalloc+0x178>)
 8008194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008196:	4b17      	ldr	r3, [pc, #92]	; (80081f4 <pvPortMalloc+0x178>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b18      	ldr	r3, [pc, #96]	; (80081fc <pvPortMalloc+0x180>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d203      	bcs.n	80081aa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081a2:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <pvPortMalloc+0x178>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a15      	ldr	r2, [pc, #84]	; (80081fc <pvPortMalloc+0x180>)
 80081a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	4b10      	ldr	r3, [pc, #64]	; (80081f0 <pvPortMalloc+0x174>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	431a      	orrs	r2, r3
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081be:	f7ff fac9 	bl	8007754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <pvPortMalloc+0x164>
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	e7fe      	b.n	80081de <pvPortMalloc+0x162>
	return pvReturn;
 80081e0:	69fb      	ldr	r3, [r7, #28]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3728      	adds	r7, #40	; 0x28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000fbc 	.word	0x20000fbc
 80081f0:	20000fc8 	.word	0x20000fc8
 80081f4:	20000fc0 	.word	0x20000fc0
 80081f8:	20000fb4 	.word	0x20000fb4
 80081fc:	20000fc4 	.word	0x20000fc4

08008200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d046      	beq.n	80082a0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008212:	2308      	movs	r3, #8
 8008214:	425b      	negs	r3, r3
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	4413      	add	r3, r2
 800821a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	4b20      	ldr	r3, [pc, #128]	; (80082a8 <vPortFree+0xa8>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4013      	ands	r3, r2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d109      	bne.n	8008242 <vPortFree+0x42>
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e7fe      	b.n	8008240 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <vPortFree+0x5e>
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	60bb      	str	r3, [r7, #8]
 800825c:	e7fe      	b.n	800825c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <vPortFree+0xa8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4013      	ands	r3, r2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d019      	beq.n	80082a0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d115      	bne.n	80082a0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <vPortFree+0xa8>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	43db      	mvns	r3, r3
 800827e:	401a      	ands	r2, r3
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008284:	f7ff fa58 	bl	8007738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	4b07      	ldr	r3, [pc, #28]	; (80082ac <vPortFree+0xac>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4413      	add	r3, r2
 8008292:	4a06      	ldr	r2, [pc, #24]	; (80082ac <vPortFree+0xac>)
 8008294:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008296:	6938      	ldr	r0, [r7, #16]
 8008298:	f000 f86c 	bl	8008374 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800829c:	f7ff fa5a 	bl	8007754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082a0:	bf00      	nop
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20000fc8 	.word	0x20000fc8
 80082ac:	20000fc0 	.word	0x20000fc0

080082b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80082ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082bc:	4b27      	ldr	r3, [pc, #156]	; (800835c <prvHeapInit+0xac>)
 80082be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00c      	beq.n	80082e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3307      	adds	r3, #7
 80082ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0307 	bic.w	r3, r3, #7
 80082d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	4a1f      	ldr	r2, [pc, #124]	; (800835c <prvHeapInit+0xac>)
 80082e0:	4413      	add	r3, r2
 80082e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082e8:	4a1d      	ldr	r2, [pc, #116]	; (8008360 <prvHeapInit+0xb0>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082ee:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <prvHeapInit+0xb0>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	4413      	add	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082fc:	2208      	movs	r2, #8
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	1a9b      	subs	r3, r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 0307 	bic.w	r3, r3, #7
 800830a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4a15      	ldr	r2, [pc, #84]	; (8008364 <prvHeapInit+0xb4>)
 8008310:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008312:	4b14      	ldr	r3, [pc, #80]	; (8008364 <prvHeapInit+0xb4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2200      	movs	r2, #0
 8008318:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <prvHeapInit+0xb4>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2200      	movs	r2, #0
 8008320:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	1ad2      	subs	r2, r2, r3
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <prvHeapInit+0xb4>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	4a0a      	ldr	r2, [pc, #40]	; (8008368 <prvHeapInit+0xb8>)
 800833e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	4a09      	ldr	r2, [pc, #36]	; (800836c <prvHeapInit+0xbc>)
 8008346:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008348:	4b09      	ldr	r3, [pc, #36]	; (8008370 <prvHeapInit+0xc0>)
 800834a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800834e:	601a      	str	r2, [r3, #0]
}
 8008350:	bf00      	nop
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	200003b4 	.word	0x200003b4
 8008360:	20000fb4 	.word	0x20000fb4
 8008364:	20000fbc 	.word	0x20000fbc
 8008368:	20000fc4 	.word	0x20000fc4
 800836c:	20000fc0 	.word	0x20000fc0
 8008370:	20000fc8 	.word	0x20000fc8

08008374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800837c:	4b27      	ldr	r3, [pc, #156]	; (800841c <prvInsertBlockIntoFreeList+0xa8>)
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e002      	b.n	8008388 <prvInsertBlockIntoFreeList+0x14>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	429a      	cmp	r2, r3
 8008390:	d8f7      	bhi.n	8008382 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	4413      	add	r3, r2
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d108      	bne.n	80083b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	441a      	add	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	441a      	add	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d118      	bne.n	80083fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b14      	ldr	r3, [pc, #80]	; (8008420 <prvInsertBlockIntoFreeList+0xac>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d00d      	beq.n	80083f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	441a      	add	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	e008      	b.n	8008404 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083f2:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <prvInsertBlockIntoFreeList+0xac>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	e003      	b.n	8008404 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	429a      	cmp	r2, r3
 800840a:	d002      	beq.n	8008412 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	bc80      	pop	{r7}
 800841a:	4770      	bx	lr
 800841c:	20000fb4 	.word	0x20000fb4
 8008420:	20000fbc 	.word	0x20000fbc

08008424 <__libc_init_array>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	2500      	movs	r5, #0
 8008428:	4e0c      	ldr	r6, [pc, #48]	; (800845c <__libc_init_array+0x38>)
 800842a:	4c0d      	ldr	r4, [pc, #52]	; (8008460 <__libc_init_array+0x3c>)
 800842c:	1ba4      	subs	r4, r4, r6
 800842e:	10a4      	asrs	r4, r4, #2
 8008430:	42a5      	cmp	r5, r4
 8008432:	d109      	bne.n	8008448 <__libc_init_array+0x24>
 8008434:	f000 f822 	bl	800847c <_init>
 8008438:	2500      	movs	r5, #0
 800843a:	4e0a      	ldr	r6, [pc, #40]	; (8008464 <__libc_init_array+0x40>)
 800843c:	4c0a      	ldr	r4, [pc, #40]	; (8008468 <__libc_init_array+0x44>)
 800843e:	1ba4      	subs	r4, r4, r6
 8008440:	10a4      	asrs	r4, r4, #2
 8008442:	42a5      	cmp	r5, r4
 8008444:	d105      	bne.n	8008452 <__libc_init_array+0x2e>
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800844c:	4798      	blx	r3
 800844e:	3501      	adds	r5, #1
 8008450:	e7ee      	b.n	8008430 <__libc_init_array+0xc>
 8008452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008456:	4798      	blx	r3
 8008458:	3501      	adds	r5, #1
 800845a:	e7f2      	b.n	8008442 <__libc_init_array+0x1e>
 800845c:	08008518 	.word	0x08008518
 8008460:	08008518 	.word	0x08008518
 8008464:	08008518 	.word	0x08008518
 8008468:	0800851c 	.word	0x0800851c

0800846c <memset>:
 800846c:	4603      	mov	r3, r0
 800846e:	4402      	add	r2, r0
 8008470:	4293      	cmp	r3, r2
 8008472:	d100      	bne.n	8008476 <memset+0xa>
 8008474:	4770      	bx	lr
 8008476:	f803 1b01 	strb.w	r1, [r3], #1
 800847a:	e7f9      	b.n	8008470 <memset+0x4>

0800847c <_init>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	bf00      	nop
 8008480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008482:	bc08      	pop	{r3}
 8008484:	469e      	mov	lr, r3
 8008486:	4770      	bx	lr

08008488 <_fini>:
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848a:	bf00      	nop
 800848c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848e:	bc08      	pop	{r3}
 8008490:	469e      	mov	lr, r3
 8008492:	4770      	bx	lr

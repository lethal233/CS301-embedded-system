
lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000538c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08005578  08005578  00015578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005820  08005820  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005820  08005820  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005820  08005820  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  200001dc  08005a04  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08005a04  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000763f  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000184e  00000000  00000000  00027844  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000798  00000000  00000000  00029098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  00029830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018ce5  00000000  00000000  00029ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007669  00000000  00000000  00042bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095d8c  00000000  00000000  0004a23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dffca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a0  00000000  00000000  000e0048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	0800555c 	.word	0x0800555c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	0800555c 	.word	0x0800555c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08d      	sub	sp, #52	; 0x34
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c06:	f000 fa91 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 f871 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f000 f935 	bl	8000e7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c12:	f000 f8cb 	bl	8000dac <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000c16:	f000 f907 	bl	8000e28 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  HAL_ADC_Start(&hadc1);
 8000c1a:	4831      	ldr	r0, [pc, #196]	; (8000ce0 <main+0xe0>)
 8000c1c:	f000 fbd2 	bl	80013c4 <HAL_ADC_Start>
  // Wait for regular group conversion to be completed
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	482e      	ldr	r0, [pc, #184]	; (8000ce0 <main+0xe0>)
 8000c26:	f000 fc7b 	bl	8001520 <HAL_ADC_PollForConversion>
  // Get ADC value
  raw = HAL_ADC_GetValue(&hadc1); // the voltage should be raw * (3.3/4096)(12bits)
 8000c2a:	482d      	ldr	r0, [pc, #180]	; (8000ce0 <main+0xe0>)
 8000c2c:	f000 fd72 	bl	8001714 <HAL_ADC_GetValue>
 8000c30:	4603      	mov	r3, r0
 8000c32:	85fb      	strh	r3, [r7, #46]	; 0x2e
  float voltage = (1.43 - (raw * (3.3/4096))) / 4.3 + 25;
 8000c34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc50 	bl	80004dc <__aeabi_i2d>
 8000c3c:	a322      	add	r3, pc, #136	; (adr r3, 8000cc8 <main+0xc8>)
 8000c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c42:	f7ff fcb5 	bl	80005b0 <__aeabi_dmul>
 8000c46:	4603      	mov	r3, r0
 8000c48:	460c      	mov	r4, r1
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	a120      	add	r1, pc, #128	; (adr r1, 8000cd0 <main+0xd0>)
 8000c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c54:	f7ff faf4 	bl	8000240 <__aeabi_dsub>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	460c      	mov	r4, r1
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	4621      	mov	r1, r4
 8000c60:	a31d      	add	r3, pc, #116	; (adr r3, 8000cd8 <main+0xd8>)
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	f7ff fdcd 	bl	8000804 <__aeabi_ddiv>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	4621      	mov	r1, r4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <main+0xe4>)
 8000c78:	f7ff fae4 	bl	8000244 <__adddf3>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	460c      	mov	r4, r1
 8000c80:	4618      	mov	r0, r3
 8000c82:	4621      	mov	r1, r4
 8000c84:	f7ff ff6c 	bl	8000b60 <__aeabi_d2f>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  // Convert to string and print
  sprintf(msg, "%.6f\r\n", voltage);
 8000c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c8e:	f7ff fc37 	bl	8000500 <__aeabi_f2d>
 8000c92:	4603      	mov	r3, r0
 8000c94:	460c      	mov	r4, r1
 8000c96:	f107 0014 	add.w	r0, r7, #20
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4623      	mov	r3, r4
 8000c9e:	4912      	ldr	r1, [pc, #72]	; (8000ce8 <main+0xe8>)
 8000ca0:	f003 f870 	bl	8003d84 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fabd 	bl	8000228 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	f107 0114 	add.w	r1, r7, #20
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <main+0xec>)
 8000cbc:	f002 f841 	bl	8002d42 <HAL_UART_Transmit>
  {
 8000cc0:	e7ab      	b.n	8000c1a <main+0x1a>
 8000cc2:	bf00      	nop
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	66666666 	.word	0x66666666
 8000ccc:	3f4a6666 	.word	0x3f4a6666
 8000cd0:	ae147ae1 	.word	0xae147ae1
 8000cd4:	3ff6e147 	.word	0x3ff6e147
 8000cd8:	33333333 	.word	0x33333333
 8000cdc:	40113333 	.word	0x40113333
 8000ce0:	20000204 	.word	0x20000204
 8000ce4:	40390000 	.word	0x40390000
 8000ce8:	08005578 	.word	0x08005578
 8000cec:	20000234 	.word	0x20000234

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b096      	sub	sp, #88	; 0x58
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cfa:	2228      	movs	r2, #40	; 0x28
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 fbe8 	bl	80034d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d32:	2301      	movs	r3, #1
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d40:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 f9f2 	bl	8002134 <HAL_RCC_OscConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d56:	f000 f8b3 	bl	8000ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2102      	movs	r1, #2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fc5c 	bl	8002634 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d82:	f000 f89d 	bl	8000ec0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d86:	2302      	movs	r3, #2
 8000d88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fdea 	bl	800296c <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d9e:	f000 f88f 	bl	8000ec0 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3758      	adds	r7, #88	; 0x58
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dbe:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <MX_ADC1_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dd6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dea:	f000 fa01 	bl	80011f0 <HAL_ADC_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000df4:	f000 f864 	bl	8000ec0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000e0a:	f000 fc8f 	bl	800172c <HAL_ADC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e14:	f000 f854 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000204 	.word	0x20000204
 8000e24:	40012400 	.word	0x40012400

08000e28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e60:	f001 ff22 	bl	8002ca8 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f000 f829 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000234 	.word	0x20000234
 8000e78:	40013800 	.word	0x40013800

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_GPIO_Init+0x40>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <MX_GPIO_Init+0x40>)
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_GPIO_Init+0x40>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_GPIO_Init+0x40>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <MX_GPIO_Init+0x40>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6193      	str	r3, [r2, #24]
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <MX_GPIO_Init+0x40>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_MspInit+0x5c>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_MspInit+0x5c>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_MspInit+0x60>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_MspInit+0x60>)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000

08000f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <HAL_ADC_MspInit+0x34>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10b      	bne.n	8000f5a <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_ADC_MspInit+0x38>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_ADC_MspInit+0x38>)
 8000f48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_ADC_MspInit+0x38>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	40012400 	.word	0x40012400
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a20      	ldr	r2, [pc, #128]	; (8001008 <HAL_UART_MspInit+0x9c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d139      	bne.n	8001000 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_UART_MspInit+0xa0>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a1e      	ldr	r2, [pc, #120]	; (800100c <HAL_UART_MspInit+0xa0>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_UART_MspInit+0xa0>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_UART_MspInit+0xa0>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a18      	ldr	r2, [pc, #96]	; (800100c <HAL_UART_MspInit+0xa0>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_UART_MspInit+0xa0>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <HAL_UART_MspInit+0xa4>)
 8000fd2:	f000 ff45 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4809      	ldr	r0, [pc, #36]	; (8001010 <HAL_UART_MspInit+0xa4>)
 8000fec:	f000 ff38 	bl	8001e60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2025      	movs	r0, #37	; 0x25
 8000ff6:	f000 fdf4 	bl	8001be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ffa:	2025      	movs	r0, #37	; 0x25
 8000ffc:	f000 fe0d 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40013800 	.word	0x40013800
 800100c:	40021000 	.word	0x40021000
 8001010:	40010800 	.word	0x40010800

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <HardFault_Handler+0x4>

08001026 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <MemManage_Handler+0x4>

0800102c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <BusFault_Handler+0x4>

08001032 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <UsageFault_Handler+0x4>

08001038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001060:	f000 f8aa 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <USART1_IRQHandler+0x10>)
 800106e:	f001 fefb 	bl	8002e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000234 	.word	0x20000234

0800107c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <_sbrk+0x50>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x16>
		heap_end = &end;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <_sbrk+0x50>)
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <_sbrk+0x54>)
 8001090:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <_sbrk+0x50>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <_sbrk+0x50>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	466a      	mov	r2, sp
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d907      	bls.n	80010b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010a6:	f002 f9eb 	bl	8003480 <__errno>
 80010aa:	4602      	mov	r2, r0
 80010ac:	230c      	movs	r3, #12
 80010ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	e006      	b.n	80010c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <_sbrk+0x50>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a03      	ldr	r2, [pc, #12]	; (80010cc <_sbrk+0x50>)
 80010c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001f8 	.word	0x200001f8
 80010d0:	20000280 	.word	0x20000280

080010d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010e2:	e003      	b.n	80010ec <LoopCopyDataInit>

080010e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010ea:	3104      	adds	r1, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010ec:	480a      	ldr	r0, [pc, #40]	; (8001118 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010f4:	d3f6      	bcc.n	80010e4 <CopyDataInit>
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010f8:	e002      	b.n	8001100 <LoopFillZerobss>

080010fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010fc:	f842 3b04 	str.w	r3, [r2], #4

08001100 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001102:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001104:	d3f9      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001106:	f7ff ffe5 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110a:	f002 f9bf 	bl	800348c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110e:	f7ff fd77 	bl	8000c00 <main>
  bx lr
 8001112:	4770      	bx	lr
  ldr r3, =_sidata
 8001114:	08005828 	.word	0x08005828
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800111c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001120:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001124:	2000027c 	.word	0x2000027c

08001128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_2_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x28>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x28>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 fd45 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fec0 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fd5d 	bl	8001c36 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 fd25 	bl	8001be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x1c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x20>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <HAL_IncTick+0x20>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000274 	.word	0x20000274

080011dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b02      	ldr	r3, [pc, #8]	; (80011ec <HAL_GetTick+0x10>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	20000274 	.word	0x20000274

080011f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0ce      	b.n	80013b0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fe7e 	bl	8000f30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fbc3 	bl	80019c0 <ADC_ConversionStop_Disable>
 800123a:	4603      	mov	r3, r0
 800123c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	2b00      	cmp	r3, #0
 8001248:	f040 80a9 	bne.w	800139e <HAL_ADC_Init+0x1ae>
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 80a5 	bne.w	800139e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001258:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800125c:	f023 0302 	bic.w	r3, r3, #2
 8001260:	f043 0202 	orr.w	r2, r3, #2
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4951      	ldr	r1, [pc, #324]	; (80013b8 <HAL_ADC_Init+0x1c8>)
 8001272:	428b      	cmp	r3, r1
 8001274:	d10a      	bne.n	800128c <HAL_ADC_Init+0x9c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800127e:	d002      	beq.n	8001286 <HAL_ADC_Init+0x96>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	e004      	b.n	8001290 <HAL_ADC_Init+0xa0>
 8001286:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800128a:	e001      	b.n	8001290 <HAL_ADC_Init+0xa0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7b1b      	ldrb	r3, [r3, #12]
 8001296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	4313      	orrs	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a8:	d003      	beq.n	80012b2 <HAL_ADC_Init+0xc2>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_ADC_Init+0xc8>
 80012b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b6:	e000      	b.n	80012ba <HAL_ADC_Init+0xca>
 80012b8:	2300      	movs	r3, #0
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7d1b      	ldrb	r3, [r3, #20]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d119      	bne.n	80012fc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7b1b      	ldrb	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d109      	bne.n	80012e4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	035a      	lsls	r2, r3, #13
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	e00b      	b.n	80012fc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	f043 0220 	orr.w	r2, r3, #32
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	f043 0201 	orr.w	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	430a      	orrs	r2, r1
 800130e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_ADC_Init+0x1cc>)
 8001318:	4013      	ands	r3, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	430b      	orrs	r3, r1
 8001322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800132c:	d003      	beq.n	8001336 <HAL_ADC_Init+0x146>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d104      	bne.n	8001340 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	3b01      	subs	r3, #1
 800133c:	051b      	lsls	r3, r3, #20
 800133e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	430a      	orrs	r2, r1
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_ADC_Init+0x1d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	429a      	cmp	r2, r3
 8001362:	d10b      	bne.n	800137c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	f023 0303 	bic.w	r3, r3, #3
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800137a:	e018      	b.n	80013ae <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f023 0312 	bic.w	r3, r3, #18
 8001384:	f043 0210 	orr.w	r2, r3, #16
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800139c:	e007      	b.n	80013ae <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f043 0210 	orr.w	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40013c00 	.word	0x40013c00
 80013bc:	ffe1f7fd 	.word	0xffe1f7fd
 80013c0:	ff1f0efe 	.word	0xff1f0efe

080013c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Start+0x1a>
 80013da:	2302      	movs	r3, #2
 80013dc:	e098      	b.n	8001510 <HAL_ADC_Start+0x14c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa98 	bl	800191c <ADC_Enable>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 8087 	bne.w	8001506 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a41      	ldr	r2, [pc, #260]	; (8001518 <HAL_ADC_Start+0x154>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d105      	bne.n	8001422 <HAL_ADC_Start+0x5e>
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <HAL_ADC_Start+0x158>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d115      	bne.n	800144e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001438:	2b00      	cmp	r3, #0
 800143a:	d026      	beq.n	800148a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800144c:	e01d      	b.n	800148a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2f      	ldr	r2, [pc, #188]	; (800151c <HAL_ADC_Start+0x158>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d004      	beq.n	800146e <HAL_ADC_Start+0xaa>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2b      	ldr	r2, [pc, #172]	; (8001518 <HAL_ADC_Start+0x154>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10d      	bne.n	800148a <HAL_ADC_Start+0xc6>
 800146e:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_ADC_Start+0x158>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001482:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	f023 0206 	bic.w	r2, r3, #6
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014a2:	e002      	b.n	80014aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f06f 0202 	mvn.w	r2, #2
 80014ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014ca:	d113      	bne.n	80014f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014d0:	4a11      	ldr	r2, [pc, #68]	; (8001518 <HAL_ADC_Start+0x154>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d105      	bne.n	80014e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_ADC_Start+0x158>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d108      	bne.n	80014f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	e00c      	b.n	800150e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e003      	b.n	800150e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40012800 	.word	0x40012800
 800151c:	40012400 	.word	0x40012400

08001520 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001536:	f7ff fe51 	bl	80011dc <HAL_GetTick>
 800153a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	f043 0220 	orr.w	r2, r3, #32
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0c8      	b.n	80016f4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d12a      	bne.n	80015c6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d123      	bne.n	80015c6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800157e:	e01a      	b.n	80015b6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001586:	d016      	beq.n	80015b6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_ADC_PollForConversion+0x7e>
 800158e:	f7ff fe25 	bl	80011dc <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d20b      	bcs.n	80015b6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	f043 0204 	orr.w	r2, r3, #4
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e09e      	b.n	80016f4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0dd      	beq.n	8001580 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015c4:	e06c      	b.n	80016a0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015c6:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <HAL_ADC_PollForConversion+0x1dc>)
 80015c8:	681c      	ldr	r4, [r3, #0]
 80015ca:	2002      	movs	r0, #2
 80015cc:	f001 fa84 	bl	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq>
 80015d0:	4603      	mov	r3, r0
 80015d2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6919      	ldr	r1, [r3, #16]
 80015dc:	4b48      	ldr	r3, [pc, #288]	; (8001700 <HAL_ADC_PollForConversion+0x1e0>)
 80015de:	400b      	ands	r3, r1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d118      	bne.n	8001616 <HAL_ADC_PollForConversion+0xf6>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68d9      	ldr	r1, [r3, #12]
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <HAL_ADC_PollForConversion+0x1e4>)
 80015ec:	400b      	ands	r3, r1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d111      	bne.n	8001616 <HAL_ADC_PollForConversion+0xf6>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6919      	ldr	r1, [r3, #16]
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_ADC_PollForConversion+0x1e8>)
 80015fa:	400b      	ands	r3, r1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <HAL_ADC_PollForConversion+0xf2>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68d9      	ldr	r1, [r3, #12]
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_ADC_PollForConversion+0x1ec>)
 8001608:	400b      	ands	r3, r1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_ADC_PollForConversion+0xf2>
 800160e:	2314      	movs	r3, #20
 8001610:	e020      	b.n	8001654 <HAL_ADC_PollForConversion+0x134>
 8001612:	2329      	movs	r3, #41	; 0x29
 8001614:	e01e      	b.n	8001654 <HAL_ADC_PollForConversion+0x134>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6919      	ldr	r1, [r3, #16]
 800161c:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <HAL_ADC_PollForConversion+0x1e8>)
 800161e:	400b      	ands	r3, r1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d106      	bne.n	8001632 <HAL_ADC_PollForConversion+0x112>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68d9      	ldr	r1, [r3, #12]
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <HAL_ADC_PollForConversion+0x1ec>)
 800162c:	400b      	ands	r3, r1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00d      	beq.n	800164e <HAL_ADC_PollForConversion+0x12e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6919      	ldr	r1, [r3, #16]
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <HAL_ADC_PollForConversion+0x1f0>)
 800163a:	400b      	ands	r3, r1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d108      	bne.n	8001652 <HAL_ADC_PollForConversion+0x132>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <HAL_ADC_PollForConversion+0x1f0>)
 8001648:	400b      	ands	r3, r1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_ADC_PollForConversion+0x132>
 800164e:	2354      	movs	r3, #84	; 0x54
 8001650:	e000      	b.n	8001654 <HAL_ADC_PollForConversion+0x134>
 8001652:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800165a:	e01d      	b.n	8001698 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001662:	d016      	beq.n	8001692 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_ADC_PollForConversion+0x15a>
 800166a:	f7ff fdb7 	bl	80011dc <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d20b      	bcs.n	8001692 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	f043 0204 	orr.w	r2, r3, #4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e030      	b.n	80016f4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3301      	adds	r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8dd      	bhi.n	800165c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 0212 	mvn.w	r2, #18
 80016a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016c4:	d115      	bne.n	80016f2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d111      	bne.n	80016f2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	f043 0201 	orr.w	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd90      	pop	{r4, r7, pc}
 80016fc:	20000000 	.word	0x20000000
 8001700:	24924924 	.word	0x24924924
 8001704:	00924924 	.word	0x00924924
 8001708:	12492492 	.word	0x12492492
 800170c:	00492492 	.word	0x00492492
 8001710:	00249249 	.word	0x00249249

08001714 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_ADC_ConfigChannel+0x20>
 8001748:	2302      	movs	r3, #2
 800174a:	e0dc      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1da>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b06      	cmp	r3, #6
 800175a:	d81c      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	3b05      	subs	r3, #5
 800176e:	221f      	movs	r2, #31
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b05      	subs	r3, #5
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
 8001794:	e03c      	b.n	8001810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d81c      	bhi.n	80017d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3b23      	subs	r3, #35	; 0x23
 80017b0:	221f      	movs	r2, #31
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4019      	ands	r1, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b23      	subs	r3, #35	; 0x23
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
 80017d6:	e01b      	b.n	8001810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	3b41      	subs	r3, #65	; 0x41
 80017ea:	221f      	movs	r2, #31
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4019      	ands	r1, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b41      	subs	r3, #65	; 0x41
 8001804:	fa00 f203 	lsl.w	r2, r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b09      	cmp	r3, #9
 8001816:	d91c      	bls.n	8001852 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68d9      	ldr	r1, [r3, #12]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	3b1e      	subs	r3, #30
 800182a:	2207      	movs	r2, #7
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	4019      	ands	r1, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6898      	ldr	r0, [r3, #8]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	3b1e      	subs	r3, #30
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	e019      	b.n	8001886 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6919      	ldr	r1, [r3, #16]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	2207      	movs	r2, #7
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	4019      	ands	r1, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6898      	ldr	r0, [r3, #8]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	fa00 f203 	lsl.w	r2, r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d003      	beq.n	8001896 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001892:	2b11      	cmp	r3, #17
 8001894:	d132      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <HAL_ADC_ConfigChannel+0x1e4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d125      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d126      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018bc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d11a      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_ADC_ConfigChannel+0x1e8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a13      	ldr	r2, [pc, #76]	; (8001918 <HAL_ADC_ConfigChannel+0x1ec>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9a      	lsrs	r2, r3, #18
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <HAL_ADC_ConfigChannel+0x1b2>
 80018ea:	e007      	b.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	f043 0220 	orr.w	r2, r3, #32
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40012400 	.word	0x40012400
 8001914:	20000000 	.word	0x20000000
 8001918:	431bde83 	.word	0x431bde83

0800191c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d039      	beq.n	80019ae <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0201 	orr.w	r2, r2, #1
 8001948:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <ADC_Enable+0x9c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <ADC_Enable+0xa0>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9b      	lsrs	r3, r3, #18
 8001956:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001958:	e002      	b.n	8001960 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3b01      	subs	r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f9      	bne.n	800195a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001966:	f7ff fc39 	bl	80011dc <HAL_GetTick>
 800196a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800196c:	e018      	b.n	80019a0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800196e:	f7ff fc35 	bl	80011dc <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d911      	bls.n	80019a0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f043 0210 	orr.w	r2, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e007      	b.n	80019b0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d1df      	bne.n	800196e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	431bde83 	.word	0x431bde83

080019c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d127      	bne.n	8001a2a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ea:	f7ff fbf7 	bl	80011dc <HAL_GetTick>
 80019ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019f0:	e014      	b.n	8001a1c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019f2:	f7ff fbf3 	bl	80011dc <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d90d      	bls.n	8001a1c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f043 0210 	orr.w	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e007      	b.n	8001a2c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d0e3      	beq.n	80019f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4906      	ldr	r1, [pc, #24]	; (8001acc <__NVIC_EnableIRQ+0x34>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff90 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff2d 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff42 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff90 	bl	8001b24 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5f 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff35 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa2 	bl	8001b88 <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d005      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e0d6      	b.n	8001e20 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 020e 	bic.w	r2, r2, #14
 8001c80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <HAL_DMA_Abort_IT+0x1dc>)
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d958      	bls.n	8001d50 <HAL_DMA_Abort_IT+0x100>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a63      	ldr	r2, [pc, #396]	; (8001e30 <HAL_DMA_Abort_IT+0x1e0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d04f      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xf8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a61      	ldr	r2, [pc, #388]	; (8001e34 <HAL_DMA_Abort_IT+0x1e4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d048      	beq.n	8001d44 <HAL_DMA_Abort_IT+0xf4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a60      	ldr	r2, [pc, #384]	; (8001e38 <HAL_DMA_Abort_IT+0x1e8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d040      	beq.n	8001d3e <HAL_DMA_Abort_IT+0xee>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5e      	ldr	r2, [pc, #376]	; (8001e3c <HAL_DMA_Abort_IT+0x1ec>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d038      	beq.n	8001d38 <HAL_DMA_Abort_IT+0xe8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a5d      	ldr	r2, [pc, #372]	; (8001e40 <HAL_DMA_Abort_IT+0x1f0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d030      	beq.n	8001d32 <HAL_DMA_Abort_IT+0xe2>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a5b      	ldr	r2, [pc, #364]	; (8001e44 <HAL_DMA_Abort_IT+0x1f4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d028      	beq.n	8001d2c <HAL_DMA_Abort_IT+0xdc>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a53      	ldr	r2, [pc, #332]	; (8001e2c <HAL_DMA_Abort_IT+0x1dc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d020      	beq.n	8001d26 <HAL_DMA_Abort_IT+0xd6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <HAL_DMA_Abort_IT+0x1f8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_DMA_Abort_IT+0xd2>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a56      	ldr	r2, [pc, #344]	; (8001e4c <HAL_DMA_Abort_IT+0x1fc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d012      	beq.n	8001d1e <HAL_DMA_Abort_IT+0xce>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a54      	ldr	r2, [pc, #336]	; (8001e50 <HAL_DMA_Abort_IT+0x200>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00a      	beq.n	8001d18 <HAL_DMA_Abort_IT+0xc8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <HAL_DMA_Abort_IT+0x204>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d102      	bne.n	8001d12 <HAL_DMA_Abort_IT+0xc2>
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	e01b      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d16:	e018      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1c:	e015      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d1e:	2310      	movs	r3, #16
 8001d20:	e013      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e011      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d2a:	e00e      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d30:	e00b      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d36:	e008      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	e005      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d42:	e002      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d44:	2310      	movs	r3, #16
 8001d46:	e000      	b.n	8001d4a <HAL_DMA_Abort_IT+0xfa>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4a43      	ldr	r2, [pc, #268]	; (8001e58 <HAL_DMA_Abort_IT+0x208>)
 8001d4c:	6053      	str	r3, [r2, #4]
 8001d4e:	e057      	b.n	8001e00 <HAL_DMA_Abort_IT+0x1b0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a36      	ldr	r2, [pc, #216]	; (8001e30 <HAL_DMA_Abort_IT+0x1e0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d04f      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x1aa>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a35      	ldr	r2, [pc, #212]	; (8001e34 <HAL_DMA_Abort_IT+0x1e4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d048      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x1a6>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a33      	ldr	r2, [pc, #204]	; (8001e38 <HAL_DMA_Abort_IT+0x1e8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d040      	beq.n	8001df0 <HAL_DMA_Abort_IT+0x1a0>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_DMA_Abort_IT+0x1ec>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d038      	beq.n	8001dea <HAL_DMA_Abort_IT+0x19a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <HAL_DMA_Abort_IT+0x1f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d030      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x194>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <HAL_DMA_Abort_IT+0x1f4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d028      	beq.n	8001dde <HAL_DMA_Abort_IT+0x18e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_DMA_Abort_IT+0x1dc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d020      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0x188>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2b      	ldr	r2, [pc, #172]	; (8001e48 <HAL_DMA_Abort_IT+0x1f8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d019      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x184>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a29      	ldr	r2, [pc, #164]	; (8001e4c <HAL_DMA_Abort_IT+0x1fc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d012      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x180>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a28      	ldr	r2, [pc, #160]	; (8001e50 <HAL_DMA_Abort_IT+0x200>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00a      	beq.n	8001dca <HAL_DMA_Abort_IT+0x17a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <HAL_DMA_Abort_IT+0x204>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d102      	bne.n	8001dc4 <HAL_DMA_Abort_IT+0x174>
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	e01b      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc8:	e018      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dce:	e015      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	e013      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e011      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ddc:	e00e      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001dde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001de2:	e00b      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de8:	e008      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dee:	e005      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df4:	e002      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001df6:	2310      	movs	r3, #16
 8001df8:	e000      	b.n	8001dfc <HAL_DMA_Abort_IT+0x1ac>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_DMA_Abort_IT+0x20c>)
 8001dfe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
    } 
  }
  return status;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40020080 	.word	0x40020080
 8001e30:	40020008 	.word	0x40020008
 8001e34:	4002001c 	.word	0x4002001c
 8001e38:	40020030 	.word	0x40020030
 8001e3c:	40020044 	.word	0x40020044
 8001e40:	40020058 	.word	0x40020058
 8001e44:	4002006c 	.word	0x4002006c
 8001e48:	40020408 	.word	0x40020408
 8001e4c:	4002041c 	.word	0x4002041c
 8001e50:	40020430 	.word	0x40020430
 8001e54:	40020444 	.word	0x40020444
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	40020000 	.word	0x40020000

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b08b      	sub	sp, #44	; 0x2c
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	e133      	b.n	80020dc <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e74:	2201      	movs	r2, #1
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8122 	bne.w	80020d6 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b12      	cmp	r3, #18
 8001e98:	d034      	beq.n	8001f04 <HAL_GPIO_Init+0xa4>
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d80d      	bhi.n	8001eba <HAL_GPIO_Init+0x5a>
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d02b      	beq.n	8001efa <HAL_GPIO_Init+0x9a>
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d804      	bhi.n	8001eb0 <HAL_GPIO_Init+0x50>
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d031      	beq.n	8001f0e <HAL_GPIO_Init+0xae>
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d01c      	beq.n	8001ee8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eae:	e048      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d043      	beq.n	8001f3c <HAL_GPIO_Init+0xdc>
 8001eb4:	2b11      	cmp	r3, #17
 8001eb6:	d01b      	beq.n	8001ef0 <HAL_GPIO_Init+0x90>
          break;
 8001eb8:	e043      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001eba:	4a8f      	ldr	r2, [pc, #572]	; (80020f8 <HAL_GPIO_Init+0x298>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d026      	beq.n	8001f0e <HAL_GPIO_Init+0xae>
 8001ec0:	4a8d      	ldr	r2, [pc, #564]	; (80020f8 <HAL_GPIO_Init+0x298>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d806      	bhi.n	8001ed4 <HAL_GPIO_Init+0x74>
 8001ec6:	4a8d      	ldr	r2, [pc, #564]	; (80020fc <HAL_GPIO_Init+0x29c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d020      	beq.n	8001f0e <HAL_GPIO_Init+0xae>
 8001ecc:	4a8c      	ldr	r2, [pc, #560]	; (8002100 <HAL_GPIO_Init+0x2a0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01d      	beq.n	8001f0e <HAL_GPIO_Init+0xae>
          break;
 8001ed2:	e036      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ed4:	4a8b      	ldr	r2, [pc, #556]	; (8002104 <HAL_GPIO_Init+0x2a4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d019      	beq.n	8001f0e <HAL_GPIO_Init+0xae>
 8001eda:	4a8b      	ldr	r2, [pc, #556]	; (8002108 <HAL_GPIO_Init+0x2a8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d016      	beq.n	8001f0e <HAL_GPIO_Init+0xae>
 8001ee0:	4a8a      	ldr	r2, [pc, #552]	; (800210c <HAL_GPIO_Init+0x2ac>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0xae>
          break;
 8001ee6:	e02c      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e028      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e023      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3308      	adds	r3, #8
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e01e      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	330c      	adds	r3, #12
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e019      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f16:	2304      	movs	r3, #4
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e012      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	611a      	str	r2, [r3, #16]
          break;
 8001f2e:	e008      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	615a      	str	r2, [r3, #20]
          break;
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2bff      	cmp	r3, #255	; 0xff
 8001f46:	d801      	bhi.n	8001f4c <HAL_GPIO_Init+0xec>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	e001      	b.n	8001f50 <HAL_GPIO_Init+0xf0>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2bff      	cmp	r3, #255	; 0xff
 8001f56:	d802      	bhi.n	8001f5e <HAL_GPIO_Init+0xfe>
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_Init+0x104>
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3b08      	subs	r3, #8
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	401a      	ands	r2, r3
 8001f76:	6a39      	ldr	r1, [r7, #32]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a2 	beq.w	80020d6 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f92:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <HAL_GPIO_Init+0x2b0>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	4a5e      	ldr	r2, [pc, #376]	; (8002110 <HAL_GPIO_Init+0x2b0>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6193      	str	r3, [r2, #24]
 8001f9e:	4b5c      	ldr	r3, [pc, #368]	; (8002110 <HAL_GPIO_Init+0x2b0>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001faa:	4a5a      	ldr	r2, [pc, #360]	; (8002114 <HAL_GPIO_Init+0x2b4>)
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a51      	ldr	r2, [pc, #324]	; (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01f      	beq.n	8002016 <HAL_GPIO_Init+0x1b6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a50      	ldr	r2, [pc, #320]	; (800211c <HAL_GPIO_Init+0x2bc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d019      	beq.n	8002012 <HAL_GPIO_Init+0x1b2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4f      	ldr	r2, [pc, #316]	; (8002120 <HAL_GPIO_Init+0x2c0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0x1ae>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4e      	ldr	r2, [pc, #312]	; (8002124 <HAL_GPIO_Init+0x2c4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00d      	beq.n	800200a <HAL_GPIO_Init+0x1aa>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4d      	ldr	r2, [pc, #308]	; (8002128 <HAL_GPIO_Init+0x2c8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <HAL_GPIO_Init+0x1a6>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4c      	ldr	r2, [pc, #304]	; (800212c <HAL_GPIO_Init+0x2cc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_GPIO_Init+0x1a2>
 8001ffe:	2305      	movs	r3, #5
 8002000:	e00a      	b.n	8002018 <HAL_GPIO_Init+0x1b8>
 8002002:	2306      	movs	r3, #6
 8002004:	e008      	b.n	8002018 <HAL_GPIO_Init+0x1b8>
 8002006:	2304      	movs	r3, #4
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x1b8>
 800200a:	2303      	movs	r3, #3
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x1b8>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x1b8>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x1b8>
 8002016:	2300      	movs	r3, #0
 8002018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002028:	493a      	ldr	r1, [pc, #232]	; (8002114 <HAL_GPIO_Init+0x2b4>)
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002042:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	493a      	ldr	r1, [pc, #232]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
 800204e:	e006      	b.n	800205e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002050:	4b37      	ldr	r3, [pc, #220]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	43db      	mvns	r3, r3
 8002058:	4935      	ldr	r1, [pc, #212]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 800205a:	4013      	ands	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800206a:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4930      	ldr	r1, [pc, #192]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
 8002076:	e006      	b.n	8002086 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	43db      	mvns	r3, r3
 8002080:	492b      	ldr	r1, [pc, #172]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002082:	4013      	ands	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002092:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	4926      	ldr	r1, [pc, #152]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
 800209e:	e006      	b.n	80020ae <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4921      	ldr	r1, [pc, #132]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	491c      	ldr	r1, [pc, #112]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60cb      	str	r3, [r1, #12]
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4917      	ldr	r1, [pc, #92]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f47f aec4 	bne.w	8001e74 <HAL_GPIO_Init+0x14>
  }
}
 80020ec:	bf00      	nop
 80020ee:	372c      	adds	r7, #44	; 0x2c
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	10210000 	.word	0x10210000
 80020fc:	10110000 	.word	0x10110000
 8002100:	10120000 	.word	0x10120000
 8002104:	10310000 	.word	0x10310000
 8002108:	10320000 	.word	0x10320000
 800210c:	10220000 	.word	0x10220000
 8002110:	40021000 	.word	0x40021000
 8002114:	40010000 	.word	0x40010000
 8002118:	40010800 	.word	0x40010800
 800211c:	40010c00 	.word	0x40010c00
 8002120:	40011000 	.word	0x40011000
 8002124:	40011400 	.word	0x40011400
 8002128:	40011800 	.word	0x40011800
 800212c:	40011c00 	.word	0x40011c00
 8002130:	40010400 	.word	0x40010400

08002134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e26c      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8087 	beq.w	8002262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002154:	4b92      	ldr	r3, [pc, #584]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b04      	cmp	r3, #4
 800215e:	d00c      	beq.n	800217a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002160:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d112      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
 800216c:	4b8c      	ldr	r3, [pc, #560]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d10b      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d06c      	beq.n	8002260 <HAL_RCC_OscConfig+0x12c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d168      	bne.n	8002260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e246      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x76>
 800219c:	4b80      	ldr	r3, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a7f      	ldr	r2, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e02e      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x98>
 80021b2:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7a      	ldr	r2, [pc, #488]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a77      	ldr	r2, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0xbc>
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a71      	ldr	r2, [pc, #452]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a6e      	ldr	r2, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021f0:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a6a      	ldr	r2, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a67      	ldr	r2, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe ffe4 	bl	80011dc <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7fe ffe0 	bl	80011dc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1fa      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xe4>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe ffd0 	bl	80011dc <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7fe ffcc 	bl	80011dc <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1e6      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x10c>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d063      	beq.n	8002336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b08      	cmp	r3, #8
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x18c>
 8002286:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d116      	bne.n	80022c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x176>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1ba      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4939      	ldr	r1, [pc, #228]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	e03a      	b.n	8002336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe ff85 	bl	80011dc <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d6:	f7fe ff81 	bl	80011dc <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e19b      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4927      	ldr	r1, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe ff64 	bl	80011dc <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002318:	f7fe ff60 	bl	80011dc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e17a      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03a      	beq.n	80023b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d019      	beq.n	800237e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_RCC_OscConfig+0x274>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7fe ff44 	bl	80011dc <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7fe ff40 	bl	80011dc <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e15a      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002376:	2001      	movs	r0, #1
 8002378:	f000 fada 	bl	8002930 <RCC_Delay>
 800237c:	e01c      	b.n	80023b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_RCC_OscConfig+0x274>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7fe ff2a 	bl	80011dc <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238a:	e00f      	b.n	80023ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238c:	f7fe ff26 	bl	80011dc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d908      	bls.n	80023ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e140      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	42420000 	.word	0x42420000
 80023a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e9      	bne.n	800238c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a6 	beq.w	8002512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b97      	ldr	r3, [pc, #604]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b94      	ldr	r3, [pc, #592]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a93      	ldr	r2, [pc, #588]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b91      	ldr	r3, [pc, #580]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ee:	2301      	movs	r3, #1
 80023f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b8e      	ldr	r3, [pc, #568]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b8b      	ldr	r3, [pc, #556]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a8a      	ldr	r2, [pc, #552]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7fe fee7 	bl	80011dc <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fee3 	bl	80011dc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0fd      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x312>
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	e02d      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x334>
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a75      	ldr	r2, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a72      	ldr	r2, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	e01c      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x356>
 8002470:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a6c      	ldr	r2, [pc, #432]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	e00b      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a66      	ldr	r2, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	4b64      	ldr	r3, [pc, #400]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a63      	ldr	r2, [pc, #396]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d015      	beq.n	80024d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fe97 	bl	80011dc <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fe93 	bl	80011dc <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0ab      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ee      	beq.n	80024b2 <HAL_RCC_OscConfig+0x37e>
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7fe fe81 	bl	80011dc <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe fe7d 	bl	80011dc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e095      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a47      	ldr	r2, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8081 	beq.w	800261e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d061      	beq.n	80025ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d146      	bne.n	80025be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe fe51 	bl	80011dc <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fe4d 	bl	80011dc <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e067      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	492d      	ldr	r1, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a19      	ldr	r1, [r3, #32]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	430b      	orrs	r3, r1
 800258a:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe fe21 	bl	80011dc <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259e:	f7fe fe1d 	bl	80011dc <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e037      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x46a>
 80025bc:	e02f      	b.n	800261e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fe0a 	bl	80011dc <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe fe06 	bl	80011dc <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e020      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x498>
 80025ea:	e018      	b.n	800261e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e013      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	42420060 	.word	0x42420060

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d0      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4965      	ldr	r1, [pc, #404]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800269a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	494d      	ldr	r1, [pc, #308]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d040      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e073      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4936      	ldr	r1, [pc, #216]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7fe fd5a 	bl	80011dc <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7fe fd56 	bl	80011dc <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e053      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d210      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4922      	ldr	r1, [pc, #136]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4916      	ldr	r1, [pc, #88]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490e      	ldr	r1, [pc, #56]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f821 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027c6:	4601      	mov	r1, r0
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	fa21 f303 	lsr.w	r3, r1, r3
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fcb8 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	080055a8 	.word	0x080055a8
 8002800:	20000000 	.word	0x20000000
 8002804:	20000004 	.word	0x20000004

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b490      	push	{r4, r7}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800280e:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002810:	1d3c      	adds	r4, r7, #4
 8002812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b04      	cmp	r3, #4
 8002840:	d002      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x40>
 8002842:	2b08      	cmp	r3, #8
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x46>
 8002846:	e02d      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800284a:	623b      	str	r3, [r7, #32]
      break;
 800284c:	e02d      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	0c9b      	lsrs	r3, r3, #18
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800285a:	4413      	add	r3, r2
 800285c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002860:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	0c5b      	lsrs	r3, r3, #17
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800287a:	4413      	add	r3, r2
 800287c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002880:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002886:	fb02 f203 	mul.w	r2, r2, r3
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	e004      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	623b      	str	r3, [r7, #32]
      break;
 80028a2:	e002      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028a6:	623b      	str	r3, [r7, #32]
      break;
 80028a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028aa:	6a3b      	ldr	r3, [r7, #32]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3728      	adds	r7, #40	; 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc90      	pop	{r4, r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	08005580 	.word	0x08005580
 80028bc:	08005590 	.word	0x08005590
 80028c0:	40021000 	.word	0x40021000
 80028c4:	007a1200 	.word	0x007a1200
 80028c8:	003d0900 	.word	0x003d0900

080028cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d0:	4b02      	ldr	r3, [pc, #8]	; (80028dc <HAL_RCC_GetHCLKFreq+0x10>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000000 	.word	0x20000000

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e4:	f7ff fff2 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 80028e8:	4601      	mov	r1, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	080055b8 	.word	0x080055b8

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800290c:	f7ff ffde 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8002910:	4601      	mov	r1, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	0adb      	lsrs	r3, r3, #11
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4a03      	ldr	r2, [pc, #12]	; (800292c <HAL_RCC_GetPCLK2Freq+0x24>)
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000
 800292c:	080055b8 	.word	0x080055b8

08002930 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <RCC_Delay+0x34>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <RCC_Delay+0x38>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0a5b      	lsrs	r3, r3, #9
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800294c:	bf00      	nop
  }
  while (Delay --);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e5a      	subs	r2, r3, #1
 8002952:	60fa      	str	r2, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f9      	bne.n	800294c <RCC_Delay+0x1c>
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000
 8002968:	10624dd3 	.word	0x10624dd3

0800296c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d07d      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002988:	2300      	movs	r3, #0
 800298a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298c:	4b4f      	ldr	r3, [pc, #316]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10d      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4a4b      	ldr	r2, [pc, #300]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	61d3      	str	r3, [r2, #28]
 80029a4:	4b49      	ldr	r3, [pc, #292]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b0:	2301      	movs	r3, #1
 80029b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d118      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c0:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a42      	ldr	r2, [pc, #264]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fc06 	bl	80011dc <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d2:	e008      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d4:	f7fe fc02 	bl	80011dc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e06d      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e6:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029f2:	4b36      	ldr	r3, [pc, #216]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d02e      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d027      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a10:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a20:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a26:	4a29      	ldr	r2, [pc, #164]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d014      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe fbd1 	bl	80011dc <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fbcd 	bl	80011dc <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e036      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ee      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4917      	ldr	r1, [pc, #92]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a13      	ldr	r2, [pc, #76]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	490b      	ldr	r1, [pc, #44]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	4904      	ldr	r1, [pc, #16]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	42420440 	.word	0x42420440

08002ad8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b08d      	sub	sp, #52	; 0x34
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	; (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002ae2:	f107 040c 	add.w	r4, r7, #12
 8002ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aec:	4b69      	ldr	r3, [pc, #420]	; (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	2300      	movs	r3, #0
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	2300      	movs	r3, #0
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	f200 80b6 	bhi.w	8002c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002bfb 	.word	0x08002bfb
 8002b1c:	08002c61 	.word	0x08002c61
 8002b20:	08002c7d 	.word	0x08002c7d
 8002b24:	08002beb 	.word	0x08002beb
 8002b28:	08002c7d 	.word	0x08002c7d
 8002b2c:	08002c7d 	.word	0x08002c7d
 8002b30:	08002c7d 	.word	0x08002c7d
 8002b34:	08002bf3 	.word	0x08002bf3
 8002b38:	08002c7d 	.word	0x08002c7d
 8002b3c:	08002c7d 	.word	0x08002c7d
 8002b40:	08002c7d 	.word	0x08002c7d
 8002b44:	08002c7d 	.word	0x08002c7d
 8002b48:	08002c7d 	.word	0x08002c7d
 8002b4c:	08002c7d 	.word	0x08002c7d
 8002b50:	08002c7d 	.word	0x08002c7d
 8002b54:	08002b59 	.word	0x08002b59
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002b58:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002b5e:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 808a 	beq.w	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	0c9b      	lsrs	r3, r3, #18
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b78:	4413      	add	r3, r2
 8002b7a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b7e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d018      	beq.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0c5b      	lsrs	r3, r3, #17
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b98:	4413      	add	r3, r2
 8002b9a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002baa:	4a3c      	ldr	r2, [pc, #240]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bba:	e004      	b.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	4a38      	ldr	r2, [pc, #224]	; (8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd2:	d102      	bne.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002bd8:	e052      	b.n	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4a31      	ldr	r2, [pc, #196]	; (8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002be8:	e04a      	b.n	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002bea:	f7ff fe0d 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8002bee:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002bf0:	e049      	b.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002bf2:	f7ff fe09 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8002bf6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002bf8:	e045      	b.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002bfa:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0a:	d108      	bne.n	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8002c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1c:	e01f      	b.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c28:	d109      	bne.n	8002c3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8002c36:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3c:	e00f      	b.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c48:	d11c      	bne.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8002c56:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002c5c:	e012      	b.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002c5e:	e011      	b.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c60:	f7ff fe52 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	0b9b      	lsrs	r3, r3, #14
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	3301      	adds	r3, #1
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c7a:	e004      	b.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8002c7c:	bf00      	nop
 8002c7e:	e002      	b.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002c80:	bf00      	nop
 8002c82:	e000      	b.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002c84:	bf00      	nop
    }
  }
  return (frequency);
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3734      	adds	r7, #52	; 0x34
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	08005594 	.word	0x08005594
 8002c94:	080055a4 	.word	0x080055a4
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	007a1200 	.word	0x007a1200
 8002ca0:	003d0900 	.word	0x003d0900
 8002ca4:	aaaaaaab 	.word	0xaaaaaaab

08002ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e03f      	b.n	8002d3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fe f94c 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	; 0x24
 8002cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fb39 	bl	8003364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08a      	sub	sp, #40	; 0x28
 8002d46:	af02      	add	r7, sp, #8
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d17c      	bne.n	8002e5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_UART_Transmit+0x2c>
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e075      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Transmit+0x3e>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e06e      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2221      	movs	r2, #33	; 0x21
 8002d92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d96:	f7fe fa21 	bl	80011dc <HAL_GetTick>
 8002d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	88fa      	ldrh	r2, [r7, #6]
 8002da6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db0:	d108      	bne.n	8002dc4 <HAL_UART_Transmit+0x82>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e003      	b.n	8002dcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002dd4:	e02a      	b.n	8002e2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f95c 	bl	800309e <UART_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e036      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e007      	b.n	8002e1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1cf      	bne.n	8002dd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2140      	movs	r1, #64	; 0x40
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f92c 	bl	800309e <UART_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e006      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10d      	bne.n	8002eba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_UART_IRQHandler+0x52>
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f9d5 	bl	8003262 <UART_Receive_IT>
      return;
 8002eb8:	e0d1      	b.n	800305e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80b0 	beq.w	8003022 <HAL_UART_IRQHandler+0x1ba>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x70>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80a5 	beq.w	8003022 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x90>
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_UART_IRQHandler+0xb0>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	f043 0202 	orr.w	r2, r3, #2
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_UART_IRQHandler+0xd0>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00f      	beq.n	8002f62 <HAL_UART_IRQHandler+0xfa>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <HAL_UART_IRQHandler+0xee>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	f043 0208 	orr.w	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d078      	beq.n	800305c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_UART_IRQHandler+0x11c>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f96f 	bl	8003262 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <HAL_UART_IRQHandler+0x144>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d031      	beq.n	8003010 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8c0 	bl	8003132 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d023      	beq.n	8003008 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <HAL_UART_IRQHandler+0x1fc>)
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe fe33 	bl	8001c50 <HAL_DMA_Abort_IT>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d016      	beq.n	800301e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffe:	e00e      	b.n	800301e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f843 	bl	800308c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003006:	e00a      	b.n	800301e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f83f 	bl	800308c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300e:	e006      	b.n	800301e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f83b 	bl	800308c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800301c:	e01e      	b.n	800305c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301e:	bf00      	nop
    return;
 8003020:	e01c      	b.n	800305c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_UART_IRQHandler+0x1d6>
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8ac 	bl	8003194 <UART_Transmit_IT>
    return;
 800303c:	e00f      	b.n	800305e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_UART_IRQHandler+0x1f6>
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8ed 	bl	8003232 <UART_EndTransmit_IT>
    return;
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <HAL_UART_IRQHandler+0x1f6>
    return;
 800305c:	bf00      	nop
  }
}
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	0800316d 	.word	0x0800316d

08003068 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	4613      	mov	r3, r2
 80030ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ae:	e02c      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d028      	beq.n	800310a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <UART_WaitOnFlagUntilTimeout+0x30>
 80030be:	f7fe f88d 	bl	80011dc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d21d      	bcs.n	800310a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e00f      	b.n	800312a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	429a      	cmp	r2, r3
 8003126:	d0c3      	beq.n	80030b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003148:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff ff80 	bl	800308c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b21      	cmp	r3, #33	; 0x21
 80031a6:	d13e      	bne.n	8003226 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b0:	d114      	bne.n	80031dc <UART_Transmit_IT+0x48>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d110      	bne.n	80031dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	1c9a      	adds	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]
 80031da:	e008      	b.n	80031ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	1c59      	adds	r1, r3, #1
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6211      	str	r1, [r2, #32]
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4619      	mov	r1, r3
 80031fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003210:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003220:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003248:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ff08 	bl	8003068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b22      	cmp	r3, #34	; 0x22
 8003274:	d170      	bne.n	8003358 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327e:	d117      	bne.n	80032b0 <UART_Receive_IT+0x4e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	b29b      	uxth	r3, r3
 800329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
 80032ae:	e026      	b.n	80032fe <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c2:	d007      	beq.n	80032d4 <UART_Receive_IT+0x72>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <UART_Receive_IT+0x80>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d106      	bne.n	80032e2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e008      	b.n	80032f4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29b      	uxth	r3, r3
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4619      	mov	r1, r3
 800330c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800330e:	2b00      	cmp	r3, #0
 8003310:	d120      	bne.n	8003354 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0220 	bic.w	r2, r2, #32
 8003320:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003330:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fe95 	bl	800307a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e002      	b.n	800335a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800339e:	f023 030c 	bic.w	r3, r3, #12
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2c      	ldr	r2, [pc, #176]	; (8003478 <UART_SetConfig+0x114>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033cc:	f7ff fa9c 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	e002      	b.n	80033da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033d4:	f7ff fa84 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 80033d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009a      	lsls	r2, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	4a22      	ldr	r2, [pc, #136]	; (800347c <UART_SetConfig+0x118>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	0119      	lsls	r1, r3, #4
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009a      	lsls	r2, r3, #2
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <UART_SetConfig+0x118>)
 8003412:	fba3 0302 	umull	r0, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2064      	movs	r0, #100	; 0x64
 800341a:	fb00 f303 	mul.w	r3, r0, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	3332      	adds	r3, #50	; 0x32
 8003424:	4a15      	ldr	r2, [pc, #84]	; (800347c <UART_SetConfig+0x118>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003430:	4419      	add	r1, r3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009a      	lsls	r2, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fbb2 f2f3 	udiv	r2, r2, r3
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <UART_SetConfig+0x118>)
 800344a:	fba3 0302 	umull	r0, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2064      	movs	r0, #100	; 0x64
 8003452:	fb00 f303 	mul.w	r3, r0, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	; 0x32
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <UART_SetConfig+0x118>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 020f 	and.w	r2, r3, #15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	440a      	add	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40013800 	.word	0x40013800
 800347c:	51eb851f 	.word	0x51eb851f

08003480 <__errno>:
 8003480:	4b01      	ldr	r3, [pc, #4]	; (8003488 <__errno+0x8>)
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	2000000c 	.word	0x2000000c

0800348c <__libc_init_array>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	2500      	movs	r5, #0
 8003490:	4e0c      	ldr	r6, [pc, #48]	; (80034c4 <__libc_init_array+0x38>)
 8003492:	4c0d      	ldr	r4, [pc, #52]	; (80034c8 <__libc_init_array+0x3c>)
 8003494:	1ba4      	subs	r4, r4, r6
 8003496:	10a4      	asrs	r4, r4, #2
 8003498:	42a5      	cmp	r5, r4
 800349a:	d109      	bne.n	80034b0 <__libc_init_array+0x24>
 800349c:	f002 f85e 	bl	800555c <_init>
 80034a0:	2500      	movs	r5, #0
 80034a2:	4e0a      	ldr	r6, [pc, #40]	; (80034cc <__libc_init_array+0x40>)
 80034a4:	4c0a      	ldr	r4, [pc, #40]	; (80034d0 <__libc_init_array+0x44>)
 80034a6:	1ba4      	subs	r4, r4, r6
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	42a5      	cmp	r5, r4
 80034ac:	d105      	bne.n	80034ba <__libc_init_array+0x2e>
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034b4:	4798      	blx	r3
 80034b6:	3501      	adds	r5, #1
 80034b8:	e7ee      	b.n	8003498 <__libc_init_array+0xc>
 80034ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034be:	4798      	blx	r3
 80034c0:	3501      	adds	r5, #1
 80034c2:	e7f2      	b.n	80034aa <__libc_init_array+0x1e>
 80034c4:	08005820 	.word	0x08005820
 80034c8:	08005820 	.word	0x08005820
 80034cc:	08005820 	.word	0x08005820
 80034d0:	08005824 	.word	0x08005824

080034d4 <memset>:
 80034d4:	4603      	mov	r3, r0
 80034d6:	4402      	add	r2, r0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <__cvt>:
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ea:	461e      	mov	r6, r3
 80034ec:	bfbb      	ittet	lt
 80034ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	461e      	movlt	r6, r3
 80034f4:	2300      	movge	r3, #0
 80034f6:	232d      	movlt	r3, #45	; 0x2d
 80034f8:	b088      	sub	sp, #32
 80034fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80034fc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003500:	f027 0720 	bic.w	r7, r7, #32
 8003504:	2f46      	cmp	r7, #70	; 0x46
 8003506:	4614      	mov	r4, r2
 8003508:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800350a:	700b      	strb	r3, [r1, #0]
 800350c:	d004      	beq.n	8003518 <__cvt+0x34>
 800350e:	2f45      	cmp	r7, #69	; 0x45
 8003510:	d100      	bne.n	8003514 <__cvt+0x30>
 8003512:	3501      	adds	r5, #1
 8003514:	2302      	movs	r3, #2
 8003516:	e000      	b.n	800351a <__cvt+0x36>
 8003518:	2303      	movs	r3, #3
 800351a:	aa07      	add	r2, sp, #28
 800351c:	9204      	str	r2, [sp, #16]
 800351e:	aa06      	add	r2, sp, #24
 8003520:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003524:	e9cd 3500 	strd	r3, r5, [sp]
 8003528:	4622      	mov	r2, r4
 800352a:	4633      	mov	r3, r6
 800352c:	f000 fcd8 	bl	8003ee0 <_dtoa_r>
 8003530:	2f47      	cmp	r7, #71	; 0x47
 8003532:	4680      	mov	r8, r0
 8003534:	d102      	bne.n	800353c <__cvt+0x58>
 8003536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003538:	07db      	lsls	r3, r3, #31
 800353a:	d526      	bpl.n	800358a <__cvt+0xa6>
 800353c:	2f46      	cmp	r7, #70	; 0x46
 800353e:	eb08 0905 	add.w	r9, r8, r5
 8003542:	d111      	bne.n	8003568 <__cvt+0x84>
 8003544:	f898 3000 	ldrb.w	r3, [r8]
 8003548:	2b30      	cmp	r3, #48	; 0x30
 800354a:	d10a      	bne.n	8003562 <__cvt+0x7e>
 800354c:	2200      	movs	r2, #0
 800354e:	2300      	movs	r3, #0
 8003550:	4620      	mov	r0, r4
 8003552:	4631      	mov	r1, r6
 8003554:	f7fd fa94 	bl	8000a80 <__aeabi_dcmpeq>
 8003558:	b918      	cbnz	r0, 8003562 <__cvt+0x7e>
 800355a:	f1c5 0501 	rsb	r5, r5, #1
 800355e:	f8ca 5000 	str.w	r5, [sl]
 8003562:	f8da 3000 	ldr.w	r3, [sl]
 8003566:	4499      	add	r9, r3
 8003568:	2200      	movs	r2, #0
 800356a:	2300      	movs	r3, #0
 800356c:	4620      	mov	r0, r4
 800356e:	4631      	mov	r1, r6
 8003570:	f7fd fa86 	bl	8000a80 <__aeabi_dcmpeq>
 8003574:	b938      	cbnz	r0, 8003586 <__cvt+0xa2>
 8003576:	2230      	movs	r2, #48	; 0x30
 8003578:	9b07      	ldr	r3, [sp, #28]
 800357a:	454b      	cmp	r3, r9
 800357c:	d205      	bcs.n	800358a <__cvt+0xa6>
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	9107      	str	r1, [sp, #28]
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	e7f8      	b.n	8003578 <__cvt+0x94>
 8003586:	f8cd 901c 	str.w	r9, [sp, #28]
 800358a:	4640      	mov	r0, r8
 800358c:	9b07      	ldr	r3, [sp, #28]
 800358e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003590:	eba3 0308 	sub.w	r3, r3, r8
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	b008      	add	sp, #32
 8003598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800359c <__exponent>:
 800359c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800359e:	2900      	cmp	r1, #0
 80035a0:	bfb4      	ite	lt
 80035a2:	232d      	movlt	r3, #45	; 0x2d
 80035a4:	232b      	movge	r3, #43	; 0x2b
 80035a6:	4604      	mov	r4, r0
 80035a8:	bfb8      	it	lt
 80035aa:	4249      	neglt	r1, r1
 80035ac:	2909      	cmp	r1, #9
 80035ae:	f804 2b02 	strb.w	r2, [r4], #2
 80035b2:	7043      	strb	r3, [r0, #1]
 80035b4:	dd21      	ble.n	80035fa <__exponent+0x5e>
 80035b6:	f10d 0307 	add.w	r3, sp, #7
 80035ba:	461f      	mov	r7, r3
 80035bc:	260a      	movs	r6, #10
 80035be:	fb91 f5f6 	sdiv	r5, r1, r6
 80035c2:	fb06 1115 	mls	r1, r6, r5, r1
 80035c6:	2d09      	cmp	r5, #9
 80035c8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80035cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80035d0:	f103 32ff 	add.w	r2, r3, #4294967295
 80035d4:	4629      	mov	r1, r5
 80035d6:	dc09      	bgt.n	80035ec <__exponent+0x50>
 80035d8:	3130      	adds	r1, #48	; 0x30
 80035da:	3b02      	subs	r3, #2
 80035dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80035e0:	42bb      	cmp	r3, r7
 80035e2:	4622      	mov	r2, r4
 80035e4:	d304      	bcc.n	80035f0 <__exponent+0x54>
 80035e6:	1a10      	subs	r0, r2, r0
 80035e8:	b003      	add	sp, #12
 80035ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ec:	4613      	mov	r3, r2
 80035ee:	e7e6      	b.n	80035be <__exponent+0x22>
 80035f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035f4:	f804 2b01 	strb.w	r2, [r4], #1
 80035f8:	e7f2      	b.n	80035e0 <__exponent+0x44>
 80035fa:	2330      	movs	r3, #48	; 0x30
 80035fc:	4419      	add	r1, r3
 80035fe:	7083      	strb	r3, [r0, #2]
 8003600:	1d02      	adds	r2, r0, #4
 8003602:	70c1      	strb	r1, [r0, #3]
 8003604:	e7ef      	b.n	80035e6 <__exponent+0x4a>
	...

08003608 <_printf_float>:
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360c:	b091      	sub	sp, #68	; 0x44
 800360e:	460c      	mov	r4, r1
 8003610:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003612:	4693      	mov	fp, r2
 8003614:	461e      	mov	r6, r3
 8003616:	4605      	mov	r5, r0
 8003618:	f001 fa16 	bl	8004a48 <_localeconv_r>
 800361c:	6803      	ldr	r3, [r0, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	9309      	str	r3, [sp, #36]	; 0x24
 8003622:	f7fc fe01 	bl	8000228 <strlen>
 8003626:	2300      	movs	r3, #0
 8003628:	930e      	str	r3, [sp, #56]	; 0x38
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	900a      	str	r0, [sp, #40]	; 0x28
 800362e:	3307      	adds	r3, #7
 8003630:	f023 0307 	bic.w	r3, r3, #7
 8003634:	f103 0208 	add.w	r2, r3, #8
 8003638:	f894 8018 	ldrb.w	r8, [r4, #24]
 800363c:	f8d4 a000 	ldr.w	sl, [r4]
 8003640:	603a      	str	r2, [r7, #0]
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800364a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800364e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003652:	930b      	str	r3, [sp, #44]	; 0x2c
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	4ba6      	ldr	r3, [pc, #664]	; (80038f4 <_printf_float+0x2ec>)
 800365a:	4638      	mov	r0, r7
 800365c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800365e:	f7fd fa41 	bl	8000ae4 <__aeabi_dcmpun>
 8003662:	bb68      	cbnz	r0, 80036c0 <_printf_float+0xb8>
 8003664:	f04f 32ff 	mov.w	r2, #4294967295
 8003668:	4ba2      	ldr	r3, [pc, #648]	; (80038f4 <_printf_float+0x2ec>)
 800366a:	4638      	mov	r0, r7
 800366c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800366e:	f7fd fa1b 	bl	8000aa8 <__aeabi_dcmple>
 8003672:	bb28      	cbnz	r0, 80036c0 <_printf_float+0xb8>
 8003674:	2200      	movs	r2, #0
 8003676:	2300      	movs	r3, #0
 8003678:	4638      	mov	r0, r7
 800367a:	4649      	mov	r1, r9
 800367c:	f7fd fa0a 	bl	8000a94 <__aeabi_dcmplt>
 8003680:	b110      	cbz	r0, 8003688 <_printf_float+0x80>
 8003682:	232d      	movs	r3, #45	; 0x2d
 8003684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003688:	4f9b      	ldr	r7, [pc, #620]	; (80038f8 <_printf_float+0x2f0>)
 800368a:	4b9c      	ldr	r3, [pc, #624]	; (80038fc <_printf_float+0x2f4>)
 800368c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003690:	bf98      	it	ls
 8003692:	461f      	movls	r7, r3
 8003694:	2303      	movs	r3, #3
 8003696:	f04f 0900 	mov.w	r9, #0
 800369a:	6123      	str	r3, [r4, #16]
 800369c:	f02a 0304 	bic.w	r3, sl, #4
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	9600      	str	r6, [sp, #0]
 80036a4:	465b      	mov	r3, fp
 80036a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80036a8:	4621      	mov	r1, r4
 80036aa:	4628      	mov	r0, r5
 80036ac:	f000 f9e2 	bl	8003a74 <_printf_common>
 80036b0:	3001      	adds	r0, #1
 80036b2:	f040 8090 	bne.w	80037d6 <_printf_float+0x1ce>
 80036b6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ba:	b011      	add	sp, #68	; 0x44
 80036bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c0:	463a      	mov	r2, r7
 80036c2:	464b      	mov	r3, r9
 80036c4:	4638      	mov	r0, r7
 80036c6:	4649      	mov	r1, r9
 80036c8:	f7fd fa0c 	bl	8000ae4 <__aeabi_dcmpun>
 80036cc:	b110      	cbz	r0, 80036d4 <_printf_float+0xcc>
 80036ce:	4f8c      	ldr	r7, [pc, #560]	; (8003900 <_printf_float+0x2f8>)
 80036d0:	4b8c      	ldr	r3, [pc, #560]	; (8003904 <_printf_float+0x2fc>)
 80036d2:	e7db      	b.n	800368c <_printf_float+0x84>
 80036d4:	6863      	ldr	r3, [r4, #4]
 80036d6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80036da:	1c59      	adds	r1, r3, #1
 80036dc:	a80d      	add	r0, sp, #52	; 0x34
 80036de:	a90e      	add	r1, sp, #56	; 0x38
 80036e0:	d140      	bne.n	8003764 <_printf_float+0x15c>
 80036e2:	2306      	movs	r3, #6
 80036e4:	6063      	str	r3, [r4, #4]
 80036e6:	f04f 0c00 	mov.w	ip, #0
 80036ea:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80036ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80036f2:	6863      	ldr	r3, [r4, #4]
 80036f4:	6022      	str	r2, [r4, #0]
 80036f6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	463a      	mov	r2, r7
 80036fe:	464b      	mov	r3, r9
 8003700:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003704:	4628      	mov	r0, r5
 8003706:	f7ff feed 	bl	80034e4 <__cvt>
 800370a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800370e:	2b47      	cmp	r3, #71	; 0x47
 8003710:	4607      	mov	r7, r0
 8003712:	d109      	bne.n	8003728 <_printf_float+0x120>
 8003714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003716:	1cd8      	adds	r0, r3, #3
 8003718:	db02      	blt.n	8003720 <_printf_float+0x118>
 800371a:	6862      	ldr	r2, [r4, #4]
 800371c:	4293      	cmp	r3, r2
 800371e:	dd47      	ble.n	80037b0 <_printf_float+0x1a8>
 8003720:	f1a8 0802 	sub.w	r8, r8, #2
 8003724:	fa5f f888 	uxtb.w	r8, r8
 8003728:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800372c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800372e:	d824      	bhi.n	800377a <_printf_float+0x172>
 8003730:	3901      	subs	r1, #1
 8003732:	4642      	mov	r2, r8
 8003734:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003738:	910d      	str	r1, [sp, #52]	; 0x34
 800373a:	f7ff ff2f 	bl	800359c <__exponent>
 800373e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003740:	4681      	mov	r9, r0
 8003742:	1813      	adds	r3, r2, r0
 8003744:	2a01      	cmp	r2, #1
 8003746:	6123      	str	r3, [r4, #16]
 8003748:	dc02      	bgt.n	8003750 <_printf_float+0x148>
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	07d1      	lsls	r1, r2, #31
 800374e:	d501      	bpl.n	8003754 <_printf_float+0x14c>
 8003750:	3301      	adds	r3, #1
 8003752:	6123      	str	r3, [r4, #16]
 8003754:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0a2      	beq.n	80036a2 <_printf_float+0x9a>
 800375c:	232d      	movs	r3, #45	; 0x2d
 800375e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003762:	e79e      	b.n	80036a2 <_printf_float+0x9a>
 8003764:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003768:	f000 816e 	beq.w	8003a48 <_printf_float+0x440>
 800376c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003770:	d1b9      	bne.n	80036e6 <_printf_float+0xde>
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1b7      	bne.n	80036e6 <_printf_float+0xde>
 8003776:	2301      	movs	r3, #1
 8003778:	e7b4      	b.n	80036e4 <_printf_float+0xdc>
 800377a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800377e:	d119      	bne.n	80037b4 <_printf_float+0x1ac>
 8003780:	2900      	cmp	r1, #0
 8003782:	6863      	ldr	r3, [r4, #4]
 8003784:	dd0c      	ble.n	80037a0 <_printf_float+0x198>
 8003786:	6121      	str	r1, [r4, #16]
 8003788:	b913      	cbnz	r3, 8003790 <_printf_float+0x188>
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	07d2      	lsls	r2, r2, #31
 800378e:	d502      	bpl.n	8003796 <_printf_float+0x18e>
 8003790:	3301      	adds	r3, #1
 8003792:	440b      	add	r3, r1
 8003794:	6123      	str	r3, [r4, #16]
 8003796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003798:	f04f 0900 	mov.w	r9, #0
 800379c:	65a3      	str	r3, [r4, #88]	; 0x58
 800379e:	e7d9      	b.n	8003754 <_printf_float+0x14c>
 80037a0:	b913      	cbnz	r3, 80037a8 <_printf_float+0x1a0>
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	07d0      	lsls	r0, r2, #31
 80037a6:	d501      	bpl.n	80037ac <_printf_float+0x1a4>
 80037a8:	3302      	adds	r3, #2
 80037aa:	e7f3      	b.n	8003794 <_printf_float+0x18c>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e7f1      	b.n	8003794 <_printf_float+0x18c>
 80037b0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80037b4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80037b8:	4293      	cmp	r3, r2
 80037ba:	db05      	blt.n	80037c8 <_printf_float+0x1c0>
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	07d1      	lsls	r1, r2, #31
 80037c2:	d5e8      	bpl.n	8003796 <_printf_float+0x18e>
 80037c4:	3301      	adds	r3, #1
 80037c6:	e7e5      	b.n	8003794 <_printf_float+0x18c>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bfcc      	ite	gt
 80037cc:	2301      	movgt	r3, #1
 80037ce:	f1c3 0302 	rsble	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	e7de      	b.n	8003794 <_printf_float+0x18c>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	055a      	lsls	r2, r3, #21
 80037da:	d407      	bmi.n	80037ec <_printf_float+0x1e4>
 80037dc:	6923      	ldr	r3, [r4, #16]
 80037de:	463a      	mov	r2, r7
 80037e0:	4659      	mov	r1, fp
 80037e2:	4628      	mov	r0, r5
 80037e4:	47b0      	blx	r6
 80037e6:	3001      	adds	r0, #1
 80037e8:	d129      	bne.n	800383e <_printf_float+0x236>
 80037ea:	e764      	b.n	80036b6 <_printf_float+0xae>
 80037ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80037f0:	f240 80d7 	bls.w	80039a2 <_printf_float+0x39a>
 80037f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037f8:	2200      	movs	r2, #0
 80037fa:	2300      	movs	r3, #0
 80037fc:	f7fd f940 	bl	8000a80 <__aeabi_dcmpeq>
 8003800:	b388      	cbz	r0, 8003866 <_printf_float+0x25e>
 8003802:	2301      	movs	r3, #1
 8003804:	4a40      	ldr	r2, [pc, #256]	; (8003908 <_printf_float+0x300>)
 8003806:	4659      	mov	r1, fp
 8003808:	4628      	mov	r0, r5
 800380a:	47b0      	blx	r6
 800380c:	3001      	adds	r0, #1
 800380e:	f43f af52 	beq.w	80036b6 <_printf_float+0xae>
 8003812:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003816:	429a      	cmp	r2, r3
 8003818:	db02      	blt.n	8003820 <_printf_float+0x218>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	07d8      	lsls	r0, r3, #31
 800381e:	d50e      	bpl.n	800383e <_printf_float+0x236>
 8003820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003824:	4659      	mov	r1, fp
 8003826:	4628      	mov	r0, r5
 8003828:	47b0      	blx	r6
 800382a:	3001      	adds	r0, #1
 800382c:	f43f af43 	beq.w	80036b6 <_printf_float+0xae>
 8003830:	2700      	movs	r7, #0
 8003832:	f104 081a 	add.w	r8, r4, #26
 8003836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003838:	3b01      	subs	r3, #1
 800383a:	42bb      	cmp	r3, r7
 800383c:	dc09      	bgt.n	8003852 <_printf_float+0x24a>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	079f      	lsls	r7, r3, #30
 8003842:	f100 80fd 	bmi.w	8003a40 <_printf_float+0x438>
 8003846:	68e0      	ldr	r0, [r4, #12]
 8003848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800384a:	4298      	cmp	r0, r3
 800384c:	bfb8      	it	lt
 800384e:	4618      	movlt	r0, r3
 8003850:	e733      	b.n	80036ba <_printf_float+0xb2>
 8003852:	2301      	movs	r3, #1
 8003854:	4642      	mov	r2, r8
 8003856:	4659      	mov	r1, fp
 8003858:	4628      	mov	r0, r5
 800385a:	47b0      	blx	r6
 800385c:	3001      	adds	r0, #1
 800385e:	f43f af2a 	beq.w	80036b6 <_printf_float+0xae>
 8003862:	3701      	adds	r7, #1
 8003864:	e7e7      	b.n	8003836 <_printf_float+0x22e>
 8003866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003868:	2b00      	cmp	r3, #0
 800386a:	dc2b      	bgt.n	80038c4 <_printf_float+0x2bc>
 800386c:	2301      	movs	r3, #1
 800386e:	4a26      	ldr	r2, [pc, #152]	; (8003908 <_printf_float+0x300>)
 8003870:	4659      	mov	r1, fp
 8003872:	4628      	mov	r0, r5
 8003874:	47b0      	blx	r6
 8003876:	3001      	adds	r0, #1
 8003878:	f43f af1d 	beq.w	80036b6 <_printf_float+0xae>
 800387c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800387e:	b923      	cbnz	r3, 800388a <_printf_float+0x282>
 8003880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003882:	b913      	cbnz	r3, 800388a <_printf_float+0x282>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	07d9      	lsls	r1, r3, #31
 8003888:	d5d9      	bpl.n	800383e <_printf_float+0x236>
 800388a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800388e:	4659      	mov	r1, fp
 8003890:	4628      	mov	r0, r5
 8003892:	47b0      	blx	r6
 8003894:	3001      	adds	r0, #1
 8003896:	f43f af0e 	beq.w	80036b6 <_printf_float+0xae>
 800389a:	f04f 0800 	mov.w	r8, #0
 800389e:	f104 091a 	add.w	r9, r4, #26
 80038a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038a4:	425b      	negs	r3, r3
 80038a6:	4543      	cmp	r3, r8
 80038a8:	dc01      	bgt.n	80038ae <_printf_float+0x2a6>
 80038aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038ac:	e797      	b.n	80037de <_printf_float+0x1d6>
 80038ae:	2301      	movs	r3, #1
 80038b0:	464a      	mov	r2, r9
 80038b2:	4659      	mov	r1, fp
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b0      	blx	r6
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f aefc 	beq.w	80036b6 <_printf_float+0xae>
 80038be:	f108 0801 	add.w	r8, r8, #1
 80038c2:	e7ee      	b.n	80038a2 <_printf_float+0x29a>
 80038c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038c8:	429a      	cmp	r2, r3
 80038ca:	bfa8      	it	ge
 80038cc:	461a      	movge	r2, r3
 80038ce:	2a00      	cmp	r2, #0
 80038d0:	4690      	mov	r8, r2
 80038d2:	dd07      	ble.n	80038e4 <_printf_float+0x2dc>
 80038d4:	4613      	mov	r3, r2
 80038d6:	4659      	mov	r1, fp
 80038d8:	463a      	mov	r2, r7
 80038da:	4628      	mov	r0, r5
 80038dc:	47b0      	blx	r6
 80038de:	3001      	adds	r0, #1
 80038e0:	f43f aee9 	beq.w	80036b6 <_printf_float+0xae>
 80038e4:	f104 031a 	add.w	r3, r4, #26
 80038e8:	f04f 0a00 	mov.w	sl, #0
 80038ec:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80038f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80038f2:	e015      	b.n	8003920 <_printf_float+0x318>
 80038f4:	7fefffff 	.word	0x7fefffff
 80038f8:	080055c4 	.word	0x080055c4
 80038fc:	080055c0 	.word	0x080055c0
 8003900:	080055cc 	.word	0x080055cc
 8003904:	080055c8 	.word	0x080055c8
 8003908:	080055d0 	.word	0x080055d0
 800390c:	2301      	movs	r3, #1
 800390e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003910:	4659      	mov	r1, fp
 8003912:	4628      	mov	r0, r5
 8003914:	47b0      	blx	r6
 8003916:	3001      	adds	r0, #1
 8003918:	f43f aecd 	beq.w	80036b6 <_printf_float+0xae>
 800391c:	f10a 0a01 	add.w	sl, sl, #1
 8003920:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003924:	eba9 0308 	sub.w	r3, r9, r8
 8003928:	4553      	cmp	r3, sl
 800392a:	dcef      	bgt.n	800390c <_printf_float+0x304>
 800392c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003930:	429a      	cmp	r2, r3
 8003932:	444f      	add	r7, r9
 8003934:	db14      	blt.n	8003960 <_printf_float+0x358>
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	07da      	lsls	r2, r3, #31
 800393a:	d411      	bmi.n	8003960 <_printf_float+0x358>
 800393c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800393e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003940:	eba3 0209 	sub.w	r2, r3, r9
 8003944:	eba3 0901 	sub.w	r9, r3, r1
 8003948:	4591      	cmp	r9, r2
 800394a:	bfa8      	it	ge
 800394c:	4691      	movge	r9, r2
 800394e:	f1b9 0f00 	cmp.w	r9, #0
 8003952:	dc0d      	bgt.n	8003970 <_printf_float+0x368>
 8003954:	2700      	movs	r7, #0
 8003956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800395a:	f104 081a 	add.w	r8, r4, #26
 800395e:	e018      	b.n	8003992 <_printf_float+0x38a>
 8003960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003964:	4659      	mov	r1, fp
 8003966:	4628      	mov	r0, r5
 8003968:	47b0      	blx	r6
 800396a:	3001      	adds	r0, #1
 800396c:	d1e6      	bne.n	800393c <_printf_float+0x334>
 800396e:	e6a2      	b.n	80036b6 <_printf_float+0xae>
 8003970:	464b      	mov	r3, r9
 8003972:	463a      	mov	r2, r7
 8003974:	4659      	mov	r1, fp
 8003976:	4628      	mov	r0, r5
 8003978:	47b0      	blx	r6
 800397a:	3001      	adds	r0, #1
 800397c:	d1ea      	bne.n	8003954 <_printf_float+0x34c>
 800397e:	e69a      	b.n	80036b6 <_printf_float+0xae>
 8003980:	2301      	movs	r3, #1
 8003982:	4642      	mov	r2, r8
 8003984:	4659      	mov	r1, fp
 8003986:	4628      	mov	r0, r5
 8003988:	47b0      	blx	r6
 800398a:	3001      	adds	r0, #1
 800398c:	f43f ae93 	beq.w	80036b6 <_printf_float+0xae>
 8003990:	3701      	adds	r7, #1
 8003992:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	eba3 0309 	sub.w	r3, r3, r9
 800399c:	42bb      	cmp	r3, r7
 800399e:	dcef      	bgt.n	8003980 <_printf_float+0x378>
 80039a0:	e74d      	b.n	800383e <_printf_float+0x236>
 80039a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039a4:	2a01      	cmp	r2, #1
 80039a6:	dc01      	bgt.n	80039ac <_printf_float+0x3a4>
 80039a8:	07db      	lsls	r3, r3, #31
 80039aa:	d538      	bpl.n	8003a1e <_printf_float+0x416>
 80039ac:	2301      	movs	r3, #1
 80039ae:	463a      	mov	r2, r7
 80039b0:	4659      	mov	r1, fp
 80039b2:	4628      	mov	r0, r5
 80039b4:	47b0      	blx	r6
 80039b6:	3001      	adds	r0, #1
 80039b8:	f43f ae7d 	beq.w	80036b6 <_printf_float+0xae>
 80039bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039c0:	4659      	mov	r1, fp
 80039c2:	4628      	mov	r0, r5
 80039c4:	47b0      	blx	r6
 80039c6:	3001      	adds	r0, #1
 80039c8:	f107 0701 	add.w	r7, r7, #1
 80039cc:	f43f ae73 	beq.w	80036b6 <_printf_float+0xae>
 80039d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039d6:	2200      	movs	r2, #0
 80039d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80039dc:	2300      	movs	r3, #0
 80039de:	f7fd f84f 	bl	8000a80 <__aeabi_dcmpeq>
 80039e2:	b9c0      	cbnz	r0, 8003a16 <_printf_float+0x40e>
 80039e4:	4643      	mov	r3, r8
 80039e6:	463a      	mov	r2, r7
 80039e8:	4659      	mov	r1, fp
 80039ea:	4628      	mov	r0, r5
 80039ec:	47b0      	blx	r6
 80039ee:	3001      	adds	r0, #1
 80039f0:	d10d      	bne.n	8003a0e <_printf_float+0x406>
 80039f2:	e660      	b.n	80036b6 <_printf_float+0xae>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4642      	mov	r2, r8
 80039f8:	4659      	mov	r1, fp
 80039fa:	4628      	mov	r0, r5
 80039fc:	47b0      	blx	r6
 80039fe:	3001      	adds	r0, #1
 8003a00:	f43f ae59 	beq.w	80036b6 <_printf_float+0xae>
 8003a04:	3701      	adds	r7, #1
 8003a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	42bb      	cmp	r3, r7
 8003a0c:	dcf2      	bgt.n	80039f4 <_printf_float+0x3ec>
 8003a0e:	464b      	mov	r3, r9
 8003a10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a14:	e6e4      	b.n	80037e0 <_printf_float+0x1d8>
 8003a16:	2700      	movs	r7, #0
 8003a18:	f104 081a 	add.w	r8, r4, #26
 8003a1c:	e7f3      	b.n	8003a06 <_printf_float+0x3fe>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e7e1      	b.n	80039e6 <_printf_float+0x3de>
 8003a22:	2301      	movs	r3, #1
 8003a24:	4642      	mov	r2, r8
 8003a26:	4659      	mov	r1, fp
 8003a28:	4628      	mov	r0, r5
 8003a2a:	47b0      	blx	r6
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	f43f ae42 	beq.w	80036b6 <_printf_float+0xae>
 8003a32:	3701      	adds	r7, #1
 8003a34:	68e3      	ldr	r3, [r4, #12]
 8003a36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	42bb      	cmp	r3, r7
 8003a3c:	dcf1      	bgt.n	8003a22 <_printf_float+0x41a>
 8003a3e:	e702      	b.n	8003846 <_printf_float+0x23e>
 8003a40:	2700      	movs	r7, #0
 8003a42:	f104 0819 	add.w	r8, r4, #25
 8003a46:	e7f5      	b.n	8003a34 <_printf_float+0x42c>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f43f ae94 	beq.w	8003776 <_printf_float+0x16e>
 8003a4e:	f04f 0c00 	mov.w	ip, #0
 8003a52:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003a56:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003a5a:	6022      	str	r2, [r4, #0]
 8003a5c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003a60:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	463a      	mov	r2, r7
 8003a68:	464b      	mov	r3, r9
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f7ff fd3a 	bl	80034e4 <__cvt>
 8003a70:	4607      	mov	r7, r0
 8003a72:	e64f      	b.n	8003714 <_printf_float+0x10c>

08003a74 <_printf_common>:
 8003a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a78:	4691      	mov	r9, r2
 8003a7a:	461f      	mov	r7, r3
 8003a7c:	688a      	ldr	r2, [r1, #8]
 8003a7e:	690b      	ldr	r3, [r1, #16]
 8003a80:	4606      	mov	r6, r0
 8003a82:	4293      	cmp	r3, r2
 8003a84:	bfb8      	it	lt
 8003a86:	4613      	movlt	r3, r2
 8003a88:	f8c9 3000 	str.w	r3, [r9]
 8003a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a90:	460c      	mov	r4, r1
 8003a92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a96:	b112      	cbz	r2, 8003a9e <_printf_common+0x2a>
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f8c9 3000 	str.w	r3, [r9]
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	0699      	lsls	r1, r3, #26
 8003aa2:	bf42      	ittt	mi
 8003aa4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003aa8:	3302      	addmi	r3, #2
 8003aaa:	f8c9 3000 	strmi.w	r3, [r9]
 8003aae:	6825      	ldr	r5, [r4, #0]
 8003ab0:	f015 0506 	ands.w	r5, r5, #6
 8003ab4:	d107      	bne.n	8003ac6 <_printf_common+0x52>
 8003ab6:	f104 0a19 	add.w	sl, r4, #25
 8003aba:	68e3      	ldr	r3, [r4, #12]
 8003abc:	f8d9 2000 	ldr.w	r2, [r9]
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	42ab      	cmp	r3, r5
 8003ac4:	dc29      	bgt.n	8003b1a <_printf_common+0xa6>
 8003ac6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	3300      	adds	r3, #0
 8003ace:	bf18      	it	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	0692      	lsls	r2, r2, #26
 8003ad4:	d42e      	bmi.n	8003b34 <_printf_common+0xc0>
 8003ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ada:	4639      	mov	r1, r7
 8003adc:	4630      	mov	r0, r6
 8003ade:	47c0      	blx	r8
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d021      	beq.n	8003b28 <_printf_common+0xb4>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	68e5      	ldr	r5, [r4, #12]
 8003ae8:	f003 0306 	and.w	r3, r3, #6
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	bf18      	it	ne
 8003af0:	2500      	movne	r5, #0
 8003af2:	f8d9 2000 	ldr.w	r2, [r9]
 8003af6:	f04f 0900 	mov.w	r9, #0
 8003afa:	bf08      	it	eq
 8003afc:	1aad      	subeq	r5, r5, r2
 8003afe:	68a3      	ldr	r3, [r4, #8]
 8003b00:	6922      	ldr	r2, [r4, #16]
 8003b02:	bf08      	it	eq
 8003b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bfc4      	itt	gt
 8003b0c:	1a9b      	subgt	r3, r3, r2
 8003b0e:	18ed      	addgt	r5, r5, r3
 8003b10:	341a      	adds	r4, #26
 8003b12:	454d      	cmp	r5, r9
 8003b14:	d11a      	bne.n	8003b4c <_printf_common+0xd8>
 8003b16:	2000      	movs	r0, #0
 8003b18:	e008      	b.n	8003b2c <_printf_common+0xb8>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	4652      	mov	r2, sl
 8003b1e:	4639      	mov	r1, r7
 8003b20:	4630      	mov	r0, r6
 8003b22:	47c0      	blx	r8
 8003b24:	3001      	adds	r0, #1
 8003b26:	d103      	bne.n	8003b30 <_printf_common+0xbc>
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b30:	3501      	adds	r5, #1
 8003b32:	e7c2      	b.n	8003aba <_printf_common+0x46>
 8003b34:	2030      	movs	r0, #48	; 0x30
 8003b36:	18e1      	adds	r1, r4, r3
 8003b38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b42:	4422      	add	r2, r4
 8003b44:	3302      	adds	r3, #2
 8003b46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b4a:	e7c4      	b.n	8003ad6 <_printf_common+0x62>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4622      	mov	r2, r4
 8003b50:	4639      	mov	r1, r7
 8003b52:	4630      	mov	r0, r6
 8003b54:	47c0      	blx	r8
 8003b56:	3001      	adds	r0, #1
 8003b58:	d0e6      	beq.n	8003b28 <_printf_common+0xb4>
 8003b5a:	f109 0901 	add.w	r9, r9, #1
 8003b5e:	e7d8      	b.n	8003b12 <_printf_common+0x9e>

08003b60 <_printf_i>:
 8003b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003b68:	460c      	mov	r4, r1
 8003b6a:	7e09      	ldrb	r1, [r1, #24]
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	296e      	cmp	r1, #110	; 0x6e
 8003b70:	4617      	mov	r7, r2
 8003b72:	4606      	mov	r6, r0
 8003b74:	4698      	mov	r8, r3
 8003b76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b78:	f000 80b3 	beq.w	8003ce2 <_printf_i+0x182>
 8003b7c:	d822      	bhi.n	8003bc4 <_printf_i+0x64>
 8003b7e:	2963      	cmp	r1, #99	; 0x63
 8003b80:	d036      	beq.n	8003bf0 <_printf_i+0x90>
 8003b82:	d80a      	bhi.n	8003b9a <_printf_i+0x3a>
 8003b84:	2900      	cmp	r1, #0
 8003b86:	f000 80b9 	beq.w	8003cfc <_printf_i+0x19c>
 8003b8a:	2958      	cmp	r1, #88	; 0x58
 8003b8c:	f000 8083 	beq.w	8003c96 <_printf_i+0x136>
 8003b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003b98:	e032      	b.n	8003c00 <_printf_i+0xa0>
 8003b9a:	2964      	cmp	r1, #100	; 0x64
 8003b9c:	d001      	beq.n	8003ba2 <_printf_i+0x42>
 8003b9e:	2969      	cmp	r1, #105	; 0x69
 8003ba0:	d1f6      	bne.n	8003b90 <_printf_i+0x30>
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	6813      	ldr	r3, [r2, #0]
 8003ba6:	0605      	lsls	r5, r0, #24
 8003ba8:	f103 0104 	add.w	r1, r3, #4
 8003bac:	d52a      	bpl.n	8003c04 <_printf_i+0xa4>
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	da03      	bge.n	8003bbe <_printf_i+0x5e>
 8003bb6:	222d      	movs	r2, #45	; 0x2d
 8003bb8:	425b      	negs	r3, r3
 8003bba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bbe:	486f      	ldr	r0, [pc, #444]	; (8003d7c <_printf_i+0x21c>)
 8003bc0:	220a      	movs	r2, #10
 8003bc2:	e039      	b.n	8003c38 <_printf_i+0xd8>
 8003bc4:	2973      	cmp	r1, #115	; 0x73
 8003bc6:	f000 809d 	beq.w	8003d04 <_printf_i+0x1a4>
 8003bca:	d808      	bhi.n	8003bde <_printf_i+0x7e>
 8003bcc:	296f      	cmp	r1, #111	; 0x6f
 8003bce:	d020      	beq.n	8003c12 <_printf_i+0xb2>
 8003bd0:	2970      	cmp	r1, #112	; 0x70
 8003bd2:	d1dd      	bne.n	8003b90 <_printf_i+0x30>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	f043 0320 	orr.w	r3, r3, #32
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	e003      	b.n	8003be6 <_printf_i+0x86>
 8003bde:	2975      	cmp	r1, #117	; 0x75
 8003be0:	d017      	beq.n	8003c12 <_printf_i+0xb2>
 8003be2:	2978      	cmp	r1, #120	; 0x78
 8003be4:	d1d4      	bne.n	8003b90 <_printf_i+0x30>
 8003be6:	2378      	movs	r3, #120	; 0x78
 8003be8:	4865      	ldr	r0, [pc, #404]	; (8003d80 <_printf_i+0x220>)
 8003bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bee:	e055      	b.n	8003c9c <_printf_i+0x13c>
 8003bf0:	6813      	ldr	r3, [r2, #0]
 8003bf2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bf6:	1d19      	adds	r1, r3, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6011      	str	r1, [r2, #0]
 8003bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c00:	2301      	movs	r3, #1
 8003c02:	e08c      	b.n	8003d1e <_printf_i+0x1be>
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c0a:	6011      	str	r1, [r2, #0]
 8003c0c:	bf18      	it	ne
 8003c0e:	b21b      	sxthne	r3, r3
 8003c10:	e7cf      	b.n	8003bb2 <_printf_i+0x52>
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	6825      	ldr	r5, [r4, #0]
 8003c16:	1d18      	adds	r0, r3, #4
 8003c18:	6010      	str	r0, [r2, #0]
 8003c1a:	0628      	lsls	r0, r5, #24
 8003c1c:	d501      	bpl.n	8003c22 <_printf_i+0xc2>
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	e002      	b.n	8003c28 <_printf_i+0xc8>
 8003c22:	0668      	lsls	r0, r5, #25
 8003c24:	d5fb      	bpl.n	8003c1e <_printf_i+0xbe>
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	296f      	cmp	r1, #111	; 0x6f
 8003c2a:	bf14      	ite	ne
 8003c2c:	220a      	movne	r2, #10
 8003c2e:	2208      	moveq	r2, #8
 8003c30:	4852      	ldr	r0, [pc, #328]	; (8003d7c <_printf_i+0x21c>)
 8003c32:	2100      	movs	r1, #0
 8003c34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c38:	6865      	ldr	r5, [r4, #4]
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	60a5      	str	r5, [r4, #8]
 8003c3e:	f2c0 8095 	blt.w	8003d6c <_printf_i+0x20c>
 8003c42:	6821      	ldr	r1, [r4, #0]
 8003c44:	f021 0104 	bic.w	r1, r1, #4
 8003c48:	6021      	str	r1, [r4, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d13d      	bne.n	8003cca <_printf_i+0x16a>
 8003c4e:	2d00      	cmp	r5, #0
 8003c50:	f040 808e 	bne.w	8003d70 <_printf_i+0x210>
 8003c54:	4665      	mov	r5, ip
 8003c56:	2a08      	cmp	r2, #8
 8003c58:	d10b      	bne.n	8003c72 <_printf_i+0x112>
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	07db      	lsls	r3, r3, #31
 8003c5e:	d508      	bpl.n	8003c72 <_printf_i+0x112>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	6862      	ldr	r2, [r4, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	bfde      	ittt	le
 8003c68:	2330      	movle	r3, #48	; 0x30
 8003c6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c72:	ebac 0305 	sub.w	r3, ip, r5
 8003c76:	6123      	str	r3, [r4, #16]
 8003c78:	f8cd 8000 	str.w	r8, [sp]
 8003c7c:	463b      	mov	r3, r7
 8003c7e:	aa03      	add	r2, sp, #12
 8003c80:	4621      	mov	r1, r4
 8003c82:	4630      	mov	r0, r6
 8003c84:	f7ff fef6 	bl	8003a74 <_printf_common>
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d14d      	bne.n	8003d28 <_printf_i+0x1c8>
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	b005      	add	sp, #20
 8003c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c96:	4839      	ldr	r0, [pc, #228]	; (8003d7c <_printf_i+0x21c>)
 8003c98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003c9c:	6813      	ldr	r3, [r2, #0]
 8003c9e:	6821      	ldr	r1, [r4, #0]
 8003ca0:	1d1d      	adds	r5, r3, #4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6015      	str	r5, [r2, #0]
 8003ca6:	060a      	lsls	r2, r1, #24
 8003ca8:	d50b      	bpl.n	8003cc2 <_printf_i+0x162>
 8003caa:	07ca      	lsls	r2, r1, #31
 8003cac:	bf44      	itt	mi
 8003cae:	f041 0120 	orrmi.w	r1, r1, #32
 8003cb2:	6021      	strmi	r1, [r4, #0]
 8003cb4:	b91b      	cbnz	r3, 8003cbe <_printf_i+0x15e>
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	f022 0220 	bic.w	r2, r2, #32
 8003cbc:	6022      	str	r2, [r4, #0]
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	e7b7      	b.n	8003c32 <_printf_i+0xd2>
 8003cc2:	064d      	lsls	r5, r1, #25
 8003cc4:	bf48      	it	mi
 8003cc6:	b29b      	uxthmi	r3, r3
 8003cc8:	e7ef      	b.n	8003caa <_printf_i+0x14a>
 8003cca:	4665      	mov	r5, ip
 8003ccc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cd0:	fb02 3311 	mls	r3, r2, r1, r3
 8003cd4:	5cc3      	ldrb	r3, [r0, r3]
 8003cd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003cda:	460b      	mov	r3, r1
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	d1f5      	bne.n	8003ccc <_printf_i+0x16c>
 8003ce0:	e7b9      	b.n	8003c56 <_printf_i+0xf6>
 8003ce2:	6813      	ldr	r3, [r2, #0]
 8003ce4:	6825      	ldr	r5, [r4, #0]
 8003ce6:	1d18      	adds	r0, r3, #4
 8003ce8:	6961      	ldr	r1, [r4, #20]
 8003cea:	6010      	str	r0, [r2, #0]
 8003cec:	0628      	lsls	r0, r5, #24
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	d501      	bpl.n	8003cf6 <_printf_i+0x196>
 8003cf2:	6019      	str	r1, [r3, #0]
 8003cf4:	e002      	b.n	8003cfc <_printf_i+0x19c>
 8003cf6:	066a      	lsls	r2, r5, #25
 8003cf8:	d5fb      	bpl.n	8003cf2 <_printf_i+0x192>
 8003cfa:	8019      	strh	r1, [r3, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4665      	mov	r5, ip
 8003d00:	6123      	str	r3, [r4, #16]
 8003d02:	e7b9      	b.n	8003c78 <_printf_i+0x118>
 8003d04:	6813      	ldr	r3, [r2, #0]
 8003d06:	1d19      	adds	r1, r3, #4
 8003d08:	6011      	str	r1, [r2, #0]
 8003d0a:	681d      	ldr	r5, [r3, #0]
 8003d0c:	6862      	ldr	r2, [r4, #4]
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4628      	mov	r0, r5
 8003d12:	f000 feaf 	bl	8004a74 <memchr>
 8003d16:	b108      	cbz	r0, 8003d1c <_printf_i+0x1bc>
 8003d18:	1b40      	subs	r0, r0, r5
 8003d1a:	6060      	str	r0, [r4, #4]
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	6123      	str	r3, [r4, #16]
 8003d20:	2300      	movs	r3, #0
 8003d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d26:	e7a7      	b.n	8003c78 <_printf_i+0x118>
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4639      	mov	r1, r7
 8003d2e:	4630      	mov	r0, r6
 8003d30:	47c0      	blx	r8
 8003d32:	3001      	adds	r0, #1
 8003d34:	d0aa      	beq.n	8003c8c <_printf_i+0x12c>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	079b      	lsls	r3, r3, #30
 8003d3a:	d413      	bmi.n	8003d64 <_printf_i+0x204>
 8003d3c:	68e0      	ldr	r0, [r4, #12]
 8003d3e:	9b03      	ldr	r3, [sp, #12]
 8003d40:	4298      	cmp	r0, r3
 8003d42:	bfb8      	it	lt
 8003d44:	4618      	movlt	r0, r3
 8003d46:	e7a3      	b.n	8003c90 <_printf_i+0x130>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	464a      	mov	r2, r9
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	4630      	mov	r0, r6
 8003d50:	47c0      	blx	r8
 8003d52:	3001      	adds	r0, #1
 8003d54:	d09a      	beq.n	8003c8c <_printf_i+0x12c>
 8003d56:	3501      	adds	r5, #1
 8003d58:	68e3      	ldr	r3, [r4, #12]
 8003d5a:	9a03      	ldr	r2, [sp, #12]
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	42ab      	cmp	r3, r5
 8003d60:	dcf2      	bgt.n	8003d48 <_printf_i+0x1e8>
 8003d62:	e7eb      	b.n	8003d3c <_printf_i+0x1dc>
 8003d64:	2500      	movs	r5, #0
 8003d66:	f104 0919 	add.w	r9, r4, #25
 8003d6a:	e7f5      	b.n	8003d58 <_printf_i+0x1f8>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ac      	bne.n	8003cca <_printf_i+0x16a>
 8003d70:	7803      	ldrb	r3, [r0, #0]
 8003d72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d7a:	e76c      	b.n	8003c56 <_printf_i+0xf6>
 8003d7c:	080055d2 	.word	0x080055d2
 8003d80:	080055e3 	.word	0x080055e3

08003d84 <siprintf>:
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d8a:	b500      	push	{lr}
 8003d8c:	b09c      	sub	sp, #112	; 0x70
 8003d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d90:	9002      	str	r0, [sp, #8]
 8003d92:	9006      	str	r0, [sp, #24]
 8003d94:	9107      	str	r1, [sp, #28]
 8003d96:	9104      	str	r1, [sp, #16]
 8003d98:	4808      	ldr	r0, [pc, #32]	; (8003dbc <siprintf+0x38>)
 8003d9a:	4909      	ldr	r1, [pc, #36]	; (8003dc0 <siprintf+0x3c>)
 8003d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	a902      	add	r1, sp, #8
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	f001 fa68 	bl	800527c <_svfiprintf_r>
 8003dac:	2200      	movs	r2, #0
 8003dae:	9b02      	ldr	r3, [sp, #8]
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	b01c      	add	sp, #112	; 0x70
 8003db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db8:	b003      	add	sp, #12
 8003dba:	4770      	bx	lr
 8003dbc:	2000000c 	.word	0x2000000c
 8003dc0:	ffff0208 	.word	0xffff0208

08003dc4 <quorem>:
 8003dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc8:	6903      	ldr	r3, [r0, #16]
 8003dca:	690c      	ldr	r4, [r1, #16]
 8003dcc:	4680      	mov	r8, r0
 8003dce:	42a3      	cmp	r3, r4
 8003dd0:	f2c0 8084 	blt.w	8003edc <quorem+0x118>
 8003dd4:	3c01      	subs	r4, #1
 8003dd6:	f101 0714 	add.w	r7, r1, #20
 8003dda:	f100 0614 	add.w	r6, r0, #20
 8003dde:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003de2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003de6:	3501      	adds	r5, #1
 8003de8:	fbb0 f5f5 	udiv	r5, r0, r5
 8003dec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003df0:	eb06 030c 	add.w	r3, r6, ip
 8003df4:	eb07 090c 	add.w	r9, r7, ip
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	b39d      	cbz	r5, 8003e64 <quorem+0xa0>
 8003dfc:	f04f 0a00 	mov.w	sl, #0
 8003e00:	4638      	mov	r0, r7
 8003e02:	46b6      	mov	lr, r6
 8003e04:	46d3      	mov	fp, sl
 8003e06:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e0a:	b293      	uxth	r3, r2
 8003e0c:	fb05 a303 	mla	r3, r5, r3, sl
 8003e10:	0c12      	lsrs	r2, r2, #16
 8003e12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e16:	fb05 a202 	mla	r2, r5, r2, sl
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	ebab 0303 	sub.w	r3, fp, r3
 8003e20:	f8de b000 	ldr.w	fp, [lr]
 8003e24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003e28:	fa1f fb8b 	uxth.w	fp, fp
 8003e2c:	445b      	add	r3, fp
 8003e2e:	fa1f fb82 	uxth.w	fp, r2
 8003e32:	f8de 2000 	ldr.w	r2, [lr]
 8003e36:	4581      	cmp	r9, r0
 8003e38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e46:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003e4a:	f84e 3b04 	str.w	r3, [lr], #4
 8003e4e:	d2da      	bcs.n	8003e06 <quorem+0x42>
 8003e50:	f856 300c 	ldr.w	r3, [r6, ip]
 8003e54:	b933      	cbnz	r3, 8003e64 <quorem+0xa0>
 8003e56:	9b01      	ldr	r3, [sp, #4]
 8003e58:	3b04      	subs	r3, #4
 8003e5a:	429e      	cmp	r6, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	d331      	bcc.n	8003ec4 <quorem+0x100>
 8003e60:	f8c8 4010 	str.w	r4, [r8, #16]
 8003e64:	4640      	mov	r0, r8
 8003e66:	f001 f833 	bl	8004ed0 <__mcmp>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	db26      	blt.n	8003ebc <quorem+0xf8>
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f04f 0c00 	mov.w	ip, #0
 8003e74:	3501      	adds	r5, #1
 8003e76:	f857 1b04 	ldr.w	r1, [r7], #4
 8003e7a:	f8d0 e000 	ldr.w	lr, [r0]
 8003e7e:	b28b      	uxth	r3, r1
 8003e80:	ebac 0303 	sub.w	r3, ip, r3
 8003e84:	fa1f f28e 	uxth.w	r2, lr
 8003e88:	4413      	add	r3, r2
 8003e8a:	0c0a      	lsrs	r2, r1, #16
 8003e8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e9a:	45b9      	cmp	r9, r7
 8003e9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003ea0:	f840 3b04 	str.w	r3, [r0], #4
 8003ea4:	d2e7      	bcs.n	8003e76 <quorem+0xb2>
 8003ea6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003eaa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003eae:	b92a      	cbnz	r2, 8003ebc <quorem+0xf8>
 8003eb0:	3b04      	subs	r3, #4
 8003eb2:	429e      	cmp	r6, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	d30b      	bcc.n	8003ed0 <quorem+0x10c>
 8003eb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	b003      	add	sp, #12
 8003ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	3b04      	subs	r3, #4
 8003ec8:	2a00      	cmp	r2, #0
 8003eca:	d1c9      	bne.n	8003e60 <quorem+0x9c>
 8003ecc:	3c01      	subs	r4, #1
 8003ece:	e7c4      	b.n	8003e5a <quorem+0x96>
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	3b04      	subs	r3, #4
 8003ed4:	2a00      	cmp	r2, #0
 8003ed6:	d1ef      	bne.n	8003eb8 <quorem+0xf4>
 8003ed8:	3c01      	subs	r4, #1
 8003eda:	e7ea      	b.n	8003eb2 <quorem+0xee>
 8003edc:	2000      	movs	r0, #0
 8003ede:	e7ee      	b.n	8003ebe <quorem+0xfa>

08003ee0 <_dtoa_r>:
 8003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee4:	4616      	mov	r6, r2
 8003ee6:	461f      	mov	r7, r3
 8003ee8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003eea:	b095      	sub	sp, #84	; 0x54
 8003eec:	4604      	mov	r4, r0
 8003eee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003ef2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003ef6:	b93d      	cbnz	r5, 8003f08 <_dtoa_r+0x28>
 8003ef8:	2010      	movs	r0, #16
 8003efa:	f000 fdb3 	bl	8004a64 <malloc>
 8003efe:	6260      	str	r0, [r4, #36]	; 0x24
 8003f00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003f04:	6005      	str	r5, [r0, #0]
 8003f06:	60c5      	str	r5, [r0, #12]
 8003f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f0a:	6819      	ldr	r1, [r3, #0]
 8003f0c:	b151      	cbz	r1, 8003f24 <_dtoa_r+0x44>
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	2301      	movs	r3, #1
 8003f12:	4093      	lsls	r3, r2
 8003f14:	604a      	str	r2, [r1, #4]
 8003f16:	608b      	str	r3, [r1, #8]
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f000 fdf8 	bl	8004b0e <_Bfree>
 8003f1e:	2200      	movs	r2, #0
 8003f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	1e3b      	subs	r3, r7, #0
 8003f26:	bfaf      	iteee	ge
 8003f28:	2300      	movge	r3, #0
 8003f2a:	2201      	movlt	r2, #1
 8003f2c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003f30:	9303      	strlt	r3, [sp, #12]
 8003f32:	bfac      	ite	ge
 8003f34:	f8c8 3000 	strge.w	r3, [r8]
 8003f38:	f8c8 2000 	strlt.w	r2, [r8]
 8003f3c:	4bae      	ldr	r3, [pc, #696]	; (80041f8 <_dtoa_r+0x318>)
 8003f3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003f42:	ea33 0308 	bics.w	r3, r3, r8
 8003f46:	d11b      	bne.n	8003f80 <_dtoa_r+0xa0>
 8003f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	9b02      	ldr	r3, [sp, #8]
 8003f52:	b923      	cbnz	r3, 8003f5e <_dtoa_r+0x7e>
 8003f54:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	f000 8545 	beq.w	80049e8 <_dtoa_r+0xb08>
 8003f5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f60:	b953      	cbnz	r3, 8003f78 <_dtoa_r+0x98>
 8003f62:	4ba6      	ldr	r3, [pc, #664]	; (80041fc <_dtoa_r+0x31c>)
 8003f64:	e021      	b.n	8003faa <_dtoa_r+0xca>
 8003f66:	4ba6      	ldr	r3, [pc, #664]	; (8004200 <_dtoa_r+0x320>)
 8003f68:	9306      	str	r3, [sp, #24]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	9806      	ldr	r0, [sp, #24]
 8003f72:	b015      	add	sp, #84	; 0x54
 8003f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f78:	4ba0      	ldr	r3, [pc, #640]	; (80041fc <_dtoa_r+0x31c>)
 8003f7a:	9306      	str	r3, [sp, #24]
 8003f7c:	3303      	adds	r3, #3
 8003f7e:	e7f5      	b.n	8003f6c <_dtoa_r+0x8c>
 8003f80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f84:	2200      	movs	r2, #0
 8003f86:	2300      	movs	r3, #0
 8003f88:	4630      	mov	r0, r6
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	f7fc fd78 	bl	8000a80 <__aeabi_dcmpeq>
 8003f90:	4682      	mov	sl, r0
 8003f92:	b160      	cbz	r0, 8003fae <_dtoa_r+0xce>
 8003f94:	2301      	movs	r3, #1
 8003f96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8520 	beq.w	80049e2 <_dtoa_r+0xb02>
 8003fa2:	4b98      	ldr	r3, [pc, #608]	; (8004204 <_dtoa_r+0x324>)
 8003fa4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	9306      	str	r3, [sp, #24]
 8003fac:	e7e0      	b.n	8003f70 <_dtoa_r+0x90>
 8003fae:	ab12      	add	r3, sp, #72	; 0x48
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	ab13      	add	r3, sp, #76	; 0x4c
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	463b      	mov	r3, r7
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f001 f800 	bl	8004fc0 <__d2b>
 8003fc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003fc4:	4683      	mov	fp, r0
 8003fc6:	2d00      	cmp	r5, #0
 8003fc8:	d07d      	beq.n	80040c6 <_dtoa_r+0x1e6>
 8003fca:	46b0      	mov	r8, r6
 8003fcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003fd0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003fd4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003fd8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003fdc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4b89      	ldr	r3, [pc, #548]	; (8004208 <_dtoa_r+0x328>)
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	f7fc f92a 	bl	8000240 <__aeabi_dsub>
 8003fec:	a37c      	add	r3, pc, #496	; (adr r3, 80041e0 <_dtoa_r+0x300>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f7fc fadd 	bl	80005b0 <__aeabi_dmul>
 8003ff6:	a37c      	add	r3, pc, #496	; (adr r3, 80041e8 <_dtoa_r+0x308>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f7fc f922 	bl	8000244 <__adddf3>
 8004000:	4606      	mov	r6, r0
 8004002:	4628      	mov	r0, r5
 8004004:	460f      	mov	r7, r1
 8004006:	f7fc fa69 	bl	80004dc <__aeabi_i2d>
 800400a:	a379      	add	r3, pc, #484	; (adr r3, 80041f0 <_dtoa_r+0x310>)
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f7fc face 	bl	80005b0 <__aeabi_dmul>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4630      	mov	r0, r6
 800401a:	4639      	mov	r1, r7
 800401c:	f7fc f912 	bl	8000244 <__adddf3>
 8004020:	4606      	mov	r6, r0
 8004022:	460f      	mov	r7, r1
 8004024:	f7fc fd74 	bl	8000b10 <__aeabi_d2iz>
 8004028:	2200      	movs	r2, #0
 800402a:	4682      	mov	sl, r0
 800402c:	2300      	movs	r3, #0
 800402e:	4630      	mov	r0, r6
 8004030:	4639      	mov	r1, r7
 8004032:	f7fc fd2f 	bl	8000a94 <__aeabi_dcmplt>
 8004036:	b148      	cbz	r0, 800404c <_dtoa_r+0x16c>
 8004038:	4650      	mov	r0, sl
 800403a:	f7fc fa4f 	bl	80004dc <__aeabi_i2d>
 800403e:	4632      	mov	r2, r6
 8004040:	463b      	mov	r3, r7
 8004042:	f7fc fd1d 	bl	8000a80 <__aeabi_dcmpeq>
 8004046:	b908      	cbnz	r0, 800404c <_dtoa_r+0x16c>
 8004048:	f10a 3aff 	add.w	sl, sl, #4294967295
 800404c:	f1ba 0f16 	cmp.w	sl, #22
 8004050:	d85a      	bhi.n	8004108 <_dtoa_r+0x228>
 8004052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004056:	496d      	ldr	r1, [pc, #436]	; (800420c <_dtoa_r+0x32c>)
 8004058:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800405c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004060:	f7fc fd36 	bl	8000ad0 <__aeabi_dcmpgt>
 8004064:	2800      	cmp	r0, #0
 8004066:	d051      	beq.n	800410c <_dtoa_r+0x22c>
 8004068:	2300      	movs	r3, #0
 800406a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800406e:	930d      	str	r3, [sp, #52]	; 0x34
 8004070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004072:	1b5d      	subs	r5, r3, r5
 8004074:	1e6b      	subs	r3, r5, #1
 8004076:	9307      	str	r3, [sp, #28]
 8004078:	bf43      	ittte	mi
 800407a:	2300      	movmi	r3, #0
 800407c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004080:	9307      	strmi	r3, [sp, #28]
 8004082:	f04f 0900 	movpl.w	r9, #0
 8004086:	f1ba 0f00 	cmp.w	sl, #0
 800408a:	db41      	blt.n	8004110 <_dtoa_r+0x230>
 800408c:	9b07      	ldr	r3, [sp, #28]
 800408e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004092:	4453      	add	r3, sl
 8004094:	9307      	str	r3, [sp, #28]
 8004096:	2300      	movs	r3, #0
 8004098:	9308      	str	r3, [sp, #32]
 800409a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800409c:	2b09      	cmp	r3, #9
 800409e:	f200 808f 	bhi.w	80041c0 <_dtoa_r+0x2e0>
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	bfc4      	itt	gt
 80040a6:	3b04      	subgt	r3, #4
 80040a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80040aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040ac:	bfc8      	it	gt
 80040ae:	2500      	movgt	r5, #0
 80040b0:	f1a3 0302 	sub.w	r3, r3, #2
 80040b4:	bfd8      	it	le
 80040b6:	2501      	movle	r5, #1
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	f200 808d 	bhi.w	80041d8 <_dtoa_r+0x2f8>
 80040be:	e8df f003 	tbb	[pc, r3]
 80040c2:	7d7b      	.short	0x7d7b
 80040c4:	6f2f      	.short	0x6f2f
 80040c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80040ca:	441d      	add	r5, r3
 80040cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80040d0:	2820      	cmp	r0, #32
 80040d2:	dd13      	ble.n	80040fc <_dtoa_r+0x21c>
 80040d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80040d8:	9b02      	ldr	r3, [sp, #8]
 80040da:	fa08 f800 	lsl.w	r8, r8, r0
 80040de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80040e2:	fa23 f000 	lsr.w	r0, r3, r0
 80040e6:	ea48 0000 	orr.w	r0, r8, r0
 80040ea:	f7fc f9e7 	bl	80004bc <__aeabi_ui2d>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4680      	mov	r8, r0
 80040f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80040f6:	3d01      	subs	r5, #1
 80040f8:	9310      	str	r3, [sp, #64]	; 0x40
 80040fa:	e771      	b.n	8003fe0 <_dtoa_r+0x100>
 80040fc:	9b02      	ldr	r3, [sp, #8]
 80040fe:	f1c0 0020 	rsb	r0, r0, #32
 8004102:	fa03 f000 	lsl.w	r0, r3, r0
 8004106:	e7f0      	b.n	80040ea <_dtoa_r+0x20a>
 8004108:	2301      	movs	r3, #1
 800410a:	e7b0      	b.n	800406e <_dtoa_r+0x18e>
 800410c:	900d      	str	r0, [sp, #52]	; 0x34
 800410e:	e7af      	b.n	8004070 <_dtoa_r+0x190>
 8004110:	f1ca 0300 	rsb	r3, sl, #0
 8004114:	9308      	str	r3, [sp, #32]
 8004116:	2300      	movs	r3, #0
 8004118:	eba9 090a 	sub.w	r9, r9, sl
 800411c:	930c      	str	r3, [sp, #48]	; 0x30
 800411e:	e7bc      	b.n	800409a <_dtoa_r+0x1ba>
 8004120:	2301      	movs	r3, #1
 8004122:	9309      	str	r3, [sp, #36]	; 0x24
 8004124:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004126:	2b00      	cmp	r3, #0
 8004128:	dd74      	ble.n	8004214 <_dtoa_r+0x334>
 800412a:	4698      	mov	r8, r3
 800412c:	9304      	str	r3, [sp, #16]
 800412e:	2200      	movs	r2, #0
 8004130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004132:	6072      	str	r2, [r6, #4]
 8004134:	2204      	movs	r2, #4
 8004136:	f102 0014 	add.w	r0, r2, #20
 800413a:	4298      	cmp	r0, r3
 800413c:	6871      	ldr	r1, [r6, #4]
 800413e:	d96e      	bls.n	800421e <_dtoa_r+0x33e>
 8004140:	4620      	mov	r0, r4
 8004142:	f000 fcb0 	bl	8004aa6 <_Balloc>
 8004146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004148:	6030      	str	r0, [r6, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b8 0f0e 	cmp.w	r8, #14
 8004150:	9306      	str	r3, [sp, #24]
 8004152:	f200 80ed 	bhi.w	8004330 <_dtoa_r+0x450>
 8004156:	2d00      	cmp	r5, #0
 8004158:	f000 80ea 	beq.w	8004330 <_dtoa_r+0x450>
 800415c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004160:	f1ba 0f00 	cmp.w	sl, #0
 8004164:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004168:	dd77      	ble.n	800425a <_dtoa_r+0x37a>
 800416a:	4a28      	ldr	r2, [pc, #160]	; (800420c <_dtoa_r+0x32c>)
 800416c:	f00a 030f 	and.w	r3, sl, #15
 8004170:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004174:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004178:	06f0      	lsls	r0, r6, #27
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004182:	d568      	bpl.n	8004256 <_dtoa_r+0x376>
 8004184:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004188:	4b21      	ldr	r3, [pc, #132]	; (8004210 <_dtoa_r+0x330>)
 800418a:	2503      	movs	r5, #3
 800418c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004190:	f7fc fb38 	bl	8000804 <__aeabi_ddiv>
 8004194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004198:	f006 060f 	and.w	r6, r6, #15
 800419c:	4f1c      	ldr	r7, [pc, #112]	; (8004210 <_dtoa_r+0x330>)
 800419e:	e04f      	b.n	8004240 <_dtoa_r+0x360>
 80041a0:	2301      	movs	r3, #1
 80041a2:	9309      	str	r3, [sp, #36]	; 0x24
 80041a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80041a6:	4453      	add	r3, sl
 80041a8:	f103 0801 	add.w	r8, r3, #1
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	4643      	mov	r3, r8
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	bfb8      	it	lt
 80041b4:	2301      	movlt	r3, #1
 80041b6:	e7ba      	b.n	800412e <_dtoa_r+0x24e>
 80041b8:	2300      	movs	r3, #0
 80041ba:	e7b2      	b.n	8004122 <_dtoa_r+0x242>
 80041bc:	2300      	movs	r3, #0
 80041be:	e7f0      	b.n	80041a2 <_dtoa_r+0x2c2>
 80041c0:	2501      	movs	r5, #1
 80041c2:	2300      	movs	r3, #0
 80041c4:	9509      	str	r5, [sp, #36]	; 0x24
 80041c6:	931e      	str	r3, [sp, #120]	; 0x78
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	2200      	movs	r2, #0
 80041ce:	9304      	str	r3, [sp, #16]
 80041d0:	4698      	mov	r8, r3
 80041d2:	2312      	movs	r3, #18
 80041d4:	921f      	str	r2, [sp, #124]	; 0x7c
 80041d6:	e7aa      	b.n	800412e <_dtoa_r+0x24e>
 80041d8:	2301      	movs	r3, #1
 80041da:	9309      	str	r3, [sp, #36]	; 0x24
 80041dc:	e7f4      	b.n	80041c8 <_dtoa_r+0x2e8>
 80041de:	bf00      	nop
 80041e0:	636f4361 	.word	0x636f4361
 80041e4:	3fd287a7 	.word	0x3fd287a7
 80041e8:	8b60c8b3 	.word	0x8b60c8b3
 80041ec:	3fc68a28 	.word	0x3fc68a28
 80041f0:	509f79fb 	.word	0x509f79fb
 80041f4:	3fd34413 	.word	0x3fd34413
 80041f8:	7ff00000 	.word	0x7ff00000
 80041fc:	080055fd 	.word	0x080055fd
 8004200:	080055f4 	.word	0x080055f4
 8004204:	080055d1 	.word	0x080055d1
 8004208:	3ff80000 	.word	0x3ff80000
 800420c:	08005630 	.word	0x08005630
 8004210:	08005608 	.word	0x08005608
 8004214:	2301      	movs	r3, #1
 8004216:	9304      	str	r3, [sp, #16]
 8004218:	4698      	mov	r8, r3
 800421a:	461a      	mov	r2, r3
 800421c:	e7da      	b.n	80041d4 <_dtoa_r+0x2f4>
 800421e:	3101      	adds	r1, #1
 8004220:	6071      	str	r1, [r6, #4]
 8004222:	0052      	lsls	r2, r2, #1
 8004224:	e787      	b.n	8004136 <_dtoa_r+0x256>
 8004226:	07f1      	lsls	r1, r6, #31
 8004228:	d508      	bpl.n	800423c <_dtoa_r+0x35c>
 800422a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800422e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004232:	f7fc f9bd 	bl	80005b0 <__aeabi_dmul>
 8004236:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800423a:	3501      	adds	r5, #1
 800423c:	1076      	asrs	r6, r6, #1
 800423e:	3708      	adds	r7, #8
 8004240:	2e00      	cmp	r6, #0
 8004242:	d1f0      	bne.n	8004226 <_dtoa_r+0x346>
 8004244:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800424c:	f7fc fada 	bl	8000804 <__aeabi_ddiv>
 8004250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004254:	e01b      	b.n	800428e <_dtoa_r+0x3ae>
 8004256:	2502      	movs	r5, #2
 8004258:	e7a0      	b.n	800419c <_dtoa_r+0x2bc>
 800425a:	f000 80a4 	beq.w	80043a6 <_dtoa_r+0x4c6>
 800425e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004262:	f1ca 0600 	rsb	r6, sl, #0
 8004266:	4ba0      	ldr	r3, [pc, #640]	; (80044e8 <_dtoa_r+0x608>)
 8004268:	f006 020f 	and.w	r2, r6, #15
 800426c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f7fc f99c 	bl	80005b0 <__aeabi_dmul>
 8004278:	2502      	movs	r5, #2
 800427a:	2300      	movs	r3, #0
 800427c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004280:	4f9a      	ldr	r7, [pc, #616]	; (80044ec <_dtoa_r+0x60c>)
 8004282:	1136      	asrs	r6, r6, #4
 8004284:	2e00      	cmp	r6, #0
 8004286:	f040 8083 	bne.w	8004390 <_dtoa_r+0x4b0>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e0      	bne.n	8004250 <_dtoa_r+0x370>
 800428e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 808a 	beq.w	80043aa <_dtoa_r+0x4ca>
 8004296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800429a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800429e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042a2:	2200      	movs	r2, #0
 80042a4:	4b92      	ldr	r3, [pc, #584]	; (80044f0 <_dtoa_r+0x610>)
 80042a6:	f7fc fbf5 	bl	8000a94 <__aeabi_dcmplt>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d07d      	beq.n	80043aa <_dtoa_r+0x4ca>
 80042ae:	f1b8 0f00 	cmp.w	r8, #0
 80042b2:	d07a      	beq.n	80043aa <_dtoa_r+0x4ca>
 80042b4:	9b04      	ldr	r3, [sp, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	dd36      	ble.n	8004328 <_dtoa_r+0x448>
 80042ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042be:	2200      	movs	r2, #0
 80042c0:	4b8c      	ldr	r3, [pc, #560]	; (80044f4 <_dtoa_r+0x614>)
 80042c2:	f7fc f975 	bl	80005b0 <__aeabi_dmul>
 80042c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042ca:	9e04      	ldr	r6, [sp, #16]
 80042cc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80042d0:	3501      	adds	r5, #1
 80042d2:	4628      	mov	r0, r5
 80042d4:	f7fc f902 	bl	80004dc <__aeabi_i2d>
 80042d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042dc:	f7fc f968 	bl	80005b0 <__aeabi_dmul>
 80042e0:	2200      	movs	r2, #0
 80042e2:	4b85      	ldr	r3, [pc, #532]	; (80044f8 <_dtoa_r+0x618>)
 80042e4:	f7fb ffae 	bl	8000244 <__adddf3>
 80042e8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80042ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80042f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80042f2:	2e00      	cmp	r6, #0
 80042f4:	d15c      	bne.n	80043b0 <_dtoa_r+0x4d0>
 80042f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	4b7f      	ldr	r3, [pc, #508]	; (80044fc <_dtoa_r+0x61c>)
 80042fe:	f7fb ff9f 	bl	8000240 <__aeabi_dsub>
 8004302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004304:	462b      	mov	r3, r5
 8004306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800430a:	f7fc fbe1 	bl	8000ad0 <__aeabi_dcmpgt>
 800430e:	2800      	cmp	r0, #0
 8004310:	f040 8281 	bne.w	8004816 <_dtoa_r+0x936>
 8004314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800431a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800431e:	f7fc fbb9 	bl	8000a94 <__aeabi_dcmplt>
 8004322:	2800      	cmp	r0, #0
 8004324:	f040 8275 	bne.w	8004812 <_dtoa_r+0x932>
 8004328:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800432c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004332:	2b00      	cmp	r3, #0
 8004334:	f2c0 814b 	blt.w	80045ce <_dtoa_r+0x6ee>
 8004338:	f1ba 0f0e 	cmp.w	sl, #14
 800433c:	f300 8147 	bgt.w	80045ce <_dtoa_r+0x6ee>
 8004340:	4b69      	ldr	r3, [pc, #420]	; (80044e8 <_dtoa_r+0x608>)
 8004342:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800434e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004350:	2b00      	cmp	r3, #0
 8004352:	f280 80d7 	bge.w	8004504 <_dtoa_r+0x624>
 8004356:	f1b8 0f00 	cmp.w	r8, #0
 800435a:	f300 80d3 	bgt.w	8004504 <_dtoa_r+0x624>
 800435e:	f040 8257 	bne.w	8004810 <_dtoa_r+0x930>
 8004362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004366:	2200      	movs	r2, #0
 8004368:	4b64      	ldr	r3, [pc, #400]	; (80044fc <_dtoa_r+0x61c>)
 800436a:	f7fc f921 	bl	80005b0 <__aeabi_dmul>
 800436e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004372:	f7fc fba3 	bl	8000abc <__aeabi_dcmpge>
 8004376:	4646      	mov	r6, r8
 8004378:	4647      	mov	r7, r8
 800437a:	2800      	cmp	r0, #0
 800437c:	f040 822d 	bne.w	80047da <_dtoa_r+0x8fa>
 8004380:	9b06      	ldr	r3, [sp, #24]
 8004382:	9a06      	ldr	r2, [sp, #24]
 8004384:	1c5d      	adds	r5, r3, #1
 8004386:	2331      	movs	r3, #49	; 0x31
 8004388:	f10a 0a01 	add.w	sl, sl, #1
 800438c:	7013      	strb	r3, [r2, #0]
 800438e:	e228      	b.n	80047e2 <_dtoa_r+0x902>
 8004390:	07f2      	lsls	r2, r6, #31
 8004392:	d505      	bpl.n	80043a0 <_dtoa_r+0x4c0>
 8004394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004398:	f7fc f90a 	bl	80005b0 <__aeabi_dmul>
 800439c:	2301      	movs	r3, #1
 800439e:	3501      	adds	r5, #1
 80043a0:	1076      	asrs	r6, r6, #1
 80043a2:	3708      	adds	r7, #8
 80043a4:	e76e      	b.n	8004284 <_dtoa_r+0x3a4>
 80043a6:	2502      	movs	r5, #2
 80043a8:	e771      	b.n	800428e <_dtoa_r+0x3ae>
 80043aa:	4657      	mov	r7, sl
 80043ac:	4646      	mov	r6, r8
 80043ae:	e790      	b.n	80042d2 <_dtoa_r+0x3f2>
 80043b0:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <_dtoa_r+0x608>)
 80043b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80043b6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80043ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d048      	beq.n	8004452 <_dtoa_r+0x572>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	2000      	movs	r0, #0
 80043c6:	494e      	ldr	r1, [pc, #312]	; (8004500 <_dtoa_r+0x620>)
 80043c8:	f7fc fa1c 	bl	8000804 <__aeabi_ddiv>
 80043cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043d0:	f7fb ff36 	bl	8000240 <__aeabi_dsub>
 80043d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80043d8:	9d06      	ldr	r5, [sp, #24]
 80043da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043de:	f7fc fb97 	bl	8000b10 <__aeabi_d2iz>
 80043e2:	9011      	str	r0, [sp, #68]	; 0x44
 80043e4:	f7fc f87a 	bl	80004dc <__aeabi_i2d>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043f0:	f7fb ff26 	bl	8000240 <__aeabi_dsub>
 80043f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043fa:	3330      	adds	r3, #48	; 0x30
 80043fc:	f805 3b01 	strb.w	r3, [r5], #1
 8004400:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004404:	f7fc fb46 	bl	8000a94 <__aeabi_dcmplt>
 8004408:	2800      	cmp	r0, #0
 800440a:	d163      	bne.n	80044d4 <_dtoa_r+0x5f4>
 800440c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004410:	2000      	movs	r0, #0
 8004412:	4937      	ldr	r1, [pc, #220]	; (80044f0 <_dtoa_r+0x610>)
 8004414:	f7fb ff14 	bl	8000240 <__aeabi_dsub>
 8004418:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800441c:	f7fc fb3a 	bl	8000a94 <__aeabi_dcmplt>
 8004420:	2800      	cmp	r0, #0
 8004422:	f040 80b5 	bne.w	8004590 <_dtoa_r+0x6b0>
 8004426:	9b06      	ldr	r3, [sp, #24]
 8004428:	1aeb      	subs	r3, r5, r3
 800442a:	429e      	cmp	r6, r3
 800442c:	f77f af7c 	ble.w	8004328 <_dtoa_r+0x448>
 8004430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004434:	2200      	movs	r2, #0
 8004436:	4b2f      	ldr	r3, [pc, #188]	; (80044f4 <_dtoa_r+0x614>)
 8004438:	f7fc f8ba 	bl	80005b0 <__aeabi_dmul>
 800443c:	2200      	movs	r2, #0
 800443e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004446:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <_dtoa_r+0x614>)
 8004448:	f7fc f8b2 	bl	80005b0 <__aeabi_dmul>
 800444c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004450:	e7c3      	b.n	80043da <_dtoa_r+0x4fa>
 8004452:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004456:	f7fc f8ab 	bl	80005b0 <__aeabi_dmul>
 800445a:	9b06      	ldr	r3, [sp, #24]
 800445c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004460:	199d      	adds	r5, r3, r6
 8004462:	461e      	mov	r6, r3
 8004464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004468:	f7fc fb52 	bl	8000b10 <__aeabi_d2iz>
 800446c:	9011      	str	r0, [sp, #68]	; 0x44
 800446e:	f7fc f835 	bl	80004dc <__aeabi_i2d>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800447a:	f7fb fee1 	bl	8000240 <__aeabi_dsub>
 800447e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004484:	3330      	adds	r3, #48	; 0x30
 8004486:	f806 3b01 	strb.w	r3, [r6], #1
 800448a:	42ae      	cmp	r6, r5
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	d124      	bne.n	80044dc <_dtoa_r+0x5fc>
 8004492:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <_dtoa_r+0x620>)
 8004498:	f7fb fed4 	bl	8000244 <__adddf3>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044a4:	f7fc fb14 	bl	8000ad0 <__aeabi_dcmpgt>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d171      	bne.n	8004590 <_dtoa_r+0x6b0>
 80044ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044b0:	2000      	movs	r0, #0
 80044b2:	4913      	ldr	r1, [pc, #76]	; (8004500 <_dtoa_r+0x620>)
 80044b4:	f7fb fec4 	bl	8000240 <__aeabi_dsub>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c0:	f7fc fae8 	bl	8000a94 <__aeabi_dcmplt>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	f43f af2f 	beq.w	8004328 <_dtoa_r+0x448>
 80044ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044ce:	1e6a      	subs	r2, r5, #1
 80044d0:	2b30      	cmp	r3, #48	; 0x30
 80044d2:	d001      	beq.n	80044d8 <_dtoa_r+0x5f8>
 80044d4:	46ba      	mov	sl, r7
 80044d6:	e04a      	b.n	800456e <_dtoa_r+0x68e>
 80044d8:	4615      	mov	r5, r2
 80044da:	e7f6      	b.n	80044ca <_dtoa_r+0x5ea>
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <_dtoa_r+0x614>)
 80044de:	f7fc f867 	bl	80005b0 <__aeabi_dmul>
 80044e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044e6:	e7bd      	b.n	8004464 <_dtoa_r+0x584>
 80044e8:	08005630 	.word	0x08005630
 80044ec:	08005608 	.word	0x08005608
 80044f0:	3ff00000 	.word	0x3ff00000
 80044f4:	40240000 	.word	0x40240000
 80044f8:	401c0000 	.word	0x401c0000
 80044fc:	40140000 	.word	0x40140000
 8004500:	3fe00000 	.word	0x3fe00000
 8004504:	9d06      	ldr	r5, [sp, #24]
 8004506:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800450a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800450e:	4630      	mov	r0, r6
 8004510:	4639      	mov	r1, r7
 8004512:	f7fc f977 	bl	8000804 <__aeabi_ddiv>
 8004516:	f7fc fafb 	bl	8000b10 <__aeabi_d2iz>
 800451a:	4681      	mov	r9, r0
 800451c:	f7fb ffde 	bl	80004dc <__aeabi_i2d>
 8004520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004524:	f7fc f844 	bl	80005b0 <__aeabi_dmul>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4630      	mov	r0, r6
 800452e:	4639      	mov	r1, r7
 8004530:	f7fb fe86 	bl	8000240 <__aeabi_dsub>
 8004534:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004538:	f805 6b01 	strb.w	r6, [r5], #1
 800453c:	9e06      	ldr	r6, [sp, #24]
 800453e:	4602      	mov	r2, r0
 8004540:	1bae      	subs	r6, r5, r6
 8004542:	45b0      	cmp	r8, r6
 8004544:	460b      	mov	r3, r1
 8004546:	d135      	bne.n	80045b4 <_dtoa_r+0x6d4>
 8004548:	f7fb fe7c 	bl	8000244 <__adddf3>
 800454c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004550:	4606      	mov	r6, r0
 8004552:	460f      	mov	r7, r1
 8004554:	f7fc fabc 	bl	8000ad0 <__aeabi_dcmpgt>
 8004558:	b9c8      	cbnz	r0, 800458e <_dtoa_r+0x6ae>
 800455a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800455e:	4630      	mov	r0, r6
 8004560:	4639      	mov	r1, r7
 8004562:	f7fc fa8d 	bl	8000a80 <__aeabi_dcmpeq>
 8004566:	b110      	cbz	r0, 800456e <_dtoa_r+0x68e>
 8004568:	f019 0f01 	tst.w	r9, #1
 800456c:	d10f      	bne.n	800458e <_dtoa_r+0x6ae>
 800456e:	4659      	mov	r1, fp
 8004570:	4620      	mov	r0, r4
 8004572:	f000 facc 	bl	8004b0e <_Bfree>
 8004576:	2300      	movs	r3, #0
 8004578:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800457a:	702b      	strb	r3, [r5, #0]
 800457c:	f10a 0301 	add.w	r3, sl, #1
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004584:	2b00      	cmp	r3, #0
 8004586:	f43f acf3 	beq.w	8003f70 <_dtoa_r+0x90>
 800458a:	601d      	str	r5, [r3, #0]
 800458c:	e4f0      	b.n	8003f70 <_dtoa_r+0x90>
 800458e:	4657      	mov	r7, sl
 8004590:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004594:	1e6b      	subs	r3, r5, #1
 8004596:	2a39      	cmp	r2, #57	; 0x39
 8004598:	d106      	bne.n	80045a8 <_dtoa_r+0x6c8>
 800459a:	9a06      	ldr	r2, [sp, #24]
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <_dtoa_r+0x6d0>
 80045a0:	2330      	movs	r3, #48	; 0x30
 80045a2:	7013      	strb	r3, [r2, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	3701      	adds	r7, #1
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	3201      	adds	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e791      	b.n	80044d4 <_dtoa_r+0x5f4>
 80045b0:	461d      	mov	r5, r3
 80045b2:	e7ed      	b.n	8004590 <_dtoa_r+0x6b0>
 80045b4:	2200      	movs	r2, #0
 80045b6:	4b99      	ldr	r3, [pc, #612]	; (800481c <_dtoa_r+0x93c>)
 80045b8:	f7fb fffa 	bl	80005b0 <__aeabi_dmul>
 80045bc:	2200      	movs	r2, #0
 80045be:	2300      	movs	r3, #0
 80045c0:	4606      	mov	r6, r0
 80045c2:	460f      	mov	r7, r1
 80045c4:	f7fc fa5c 	bl	8000a80 <__aeabi_dcmpeq>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d09e      	beq.n	800450a <_dtoa_r+0x62a>
 80045cc:	e7cf      	b.n	800456e <_dtoa_r+0x68e>
 80045ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045d0:	2a00      	cmp	r2, #0
 80045d2:	f000 8088 	beq.w	80046e6 <_dtoa_r+0x806>
 80045d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80045d8:	2a01      	cmp	r2, #1
 80045da:	dc6d      	bgt.n	80046b8 <_dtoa_r+0x7d8>
 80045dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045de:	2a00      	cmp	r2, #0
 80045e0:	d066      	beq.n	80046b0 <_dtoa_r+0x7d0>
 80045e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80045e6:	464d      	mov	r5, r9
 80045e8:	9e08      	ldr	r6, [sp, #32]
 80045ea:	9a07      	ldr	r2, [sp, #28]
 80045ec:	2101      	movs	r1, #1
 80045ee:	441a      	add	r2, r3
 80045f0:	4620      	mov	r0, r4
 80045f2:	4499      	add	r9, r3
 80045f4:	9207      	str	r2, [sp, #28]
 80045f6:	f000 fb2a 	bl	8004c4e <__i2b>
 80045fa:	4607      	mov	r7, r0
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	dd0b      	ble.n	8004618 <_dtoa_r+0x738>
 8004600:	9b07      	ldr	r3, [sp, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	dd08      	ble.n	8004618 <_dtoa_r+0x738>
 8004606:	42ab      	cmp	r3, r5
 8004608:	bfa8      	it	ge
 800460a:	462b      	movge	r3, r5
 800460c:	9a07      	ldr	r2, [sp, #28]
 800460e:	eba9 0903 	sub.w	r9, r9, r3
 8004612:	1aed      	subs	r5, r5, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	9307      	str	r3, [sp, #28]
 8004618:	9b08      	ldr	r3, [sp, #32]
 800461a:	b1eb      	cbz	r3, 8004658 <_dtoa_r+0x778>
 800461c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d065      	beq.n	80046ee <_dtoa_r+0x80e>
 8004622:	b18e      	cbz	r6, 8004648 <_dtoa_r+0x768>
 8004624:	4639      	mov	r1, r7
 8004626:	4632      	mov	r2, r6
 8004628:	4620      	mov	r0, r4
 800462a:	f000 fbaf 	bl	8004d8c <__pow5mult>
 800462e:	465a      	mov	r2, fp
 8004630:	4601      	mov	r1, r0
 8004632:	4607      	mov	r7, r0
 8004634:	4620      	mov	r0, r4
 8004636:	f000 fb13 	bl	8004c60 <__multiply>
 800463a:	4659      	mov	r1, fp
 800463c:	900a      	str	r0, [sp, #40]	; 0x28
 800463e:	4620      	mov	r0, r4
 8004640:	f000 fa65 	bl	8004b0e <_Bfree>
 8004644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004646:	469b      	mov	fp, r3
 8004648:	9b08      	ldr	r3, [sp, #32]
 800464a:	1b9a      	subs	r2, r3, r6
 800464c:	d004      	beq.n	8004658 <_dtoa_r+0x778>
 800464e:	4659      	mov	r1, fp
 8004650:	4620      	mov	r0, r4
 8004652:	f000 fb9b 	bl	8004d8c <__pow5mult>
 8004656:	4683      	mov	fp, r0
 8004658:	2101      	movs	r1, #1
 800465a:	4620      	mov	r0, r4
 800465c:	f000 faf7 	bl	8004c4e <__i2b>
 8004660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004662:	4606      	mov	r6, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 81c6 	beq.w	80049f6 <_dtoa_r+0xb16>
 800466a:	461a      	mov	r2, r3
 800466c:	4601      	mov	r1, r0
 800466e:	4620      	mov	r0, r4
 8004670:	f000 fb8c 	bl	8004d8c <__pow5mult>
 8004674:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004676:	4606      	mov	r6, r0
 8004678:	2b01      	cmp	r3, #1
 800467a:	dc3e      	bgt.n	80046fa <_dtoa_r+0x81a>
 800467c:	9b02      	ldr	r3, [sp, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d137      	bne.n	80046f2 <_dtoa_r+0x812>
 8004682:	9b03      	ldr	r3, [sp, #12]
 8004684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004688:	2b00      	cmp	r3, #0
 800468a:	d134      	bne.n	80046f6 <_dtoa_r+0x816>
 800468c:	9b03      	ldr	r3, [sp, #12]
 800468e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004692:	0d1b      	lsrs	r3, r3, #20
 8004694:	051b      	lsls	r3, r3, #20
 8004696:	b12b      	cbz	r3, 80046a4 <_dtoa_r+0x7c4>
 8004698:	9b07      	ldr	r3, [sp, #28]
 800469a:	f109 0901 	add.w	r9, r9, #1
 800469e:	3301      	adds	r3, #1
 80046a0:	9307      	str	r3, [sp, #28]
 80046a2:	2301      	movs	r3, #1
 80046a4:	9308      	str	r3, [sp, #32]
 80046a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d128      	bne.n	80046fe <_dtoa_r+0x81e>
 80046ac:	2001      	movs	r0, #1
 80046ae:	e02e      	b.n	800470e <_dtoa_r+0x82e>
 80046b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80046b6:	e796      	b.n	80045e6 <_dtoa_r+0x706>
 80046b8:	9b08      	ldr	r3, [sp, #32]
 80046ba:	f108 36ff 	add.w	r6, r8, #4294967295
 80046be:	42b3      	cmp	r3, r6
 80046c0:	bfb7      	itett	lt
 80046c2:	9b08      	ldrlt	r3, [sp, #32]
 80046c4:	1b9e      	subge	r6, r3, r6
 80046c6:	1af2      	sublt	r2, r6, r3
 80046c8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80046ca:	bfbf      	itttt	lt
 80046cc:	9608      	strlt	r6, [sp, #32]
 80046ce:	189b      	addlt	r3, r3, r2
 80046d0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80046d2:	2600      	movlt	r6, #0
 80046d4:	f1b8 0f00 	cmp.w	r8, #0
 80046d8:	bfb9      	ittee	lt
 80046da:	eba9 0508 	sublt.w	r5, r9, r8
 80046de:	2300      	movlt	r3, #0
 80046e0:	464d      	movge	r5, r9
 80046e2:	4643      	movge	r3, r8
 80046e4:	e781      	b.n	80045ea <_dtoa_r+0x70a>
 80046e6:	9e08      	ldr	r6, [sp, #32]
 80046e8:	464d      	mov	r5, r9
 80046ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80046ec:	e786      	b.n	80045fc <_dtoa_r+0x71c>
 80046ee:	9a08      	ldr	r2, [sp, #32]
 80046f0:	e7ad      	b.n	800464e <_dtoa_r+0x76e>
 80046f2:	2300      	movs	r3, #0
 80046f4:	e7d6      	b.n	80046a4 <_dtoa_r+0x7c4>
 80046f6:	9b02      	ldr	r3, [sp, #8]
 80046f8:	e7d4      	b.n	80046a4 <_dtoa_r+0x7c4>
 80046fa:	2300      	movs	r3, #0
 80046fc:	9308      	str	r3, [sp, #32]
 80046fe:	6933      	ldr	r3, [r6, #16]
 8004700:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004704:	6918      	ldr	r0, [r3, #16]
 8004706:	f000 fa54 	bl	8004bb2 <__hi0bits>
 800470a:	f1c0 0020 	rsb	r0, r0, #32
 800470e:	9b07      	ldr	r3, [sp, #28]
 8004710:	4418      	add	r0, r3
 8004712:	f010 001f 	ands.w	r0, r0, #31
 8004716:	d047      	beq.n	80047a8 <_dtoa_r+0x8c8>
 8004718:	f1c0 0320 	rsb	r3, r0, #32
 800471c:	2b04      	cmp	r3, #4
 800471e:	dd3b      	ble.n	8004798 <_dtoa_r+0x8b8>
 8004720:	9b07      	ldr	r3, [sp, #28]
 8004722:	f1c0 001c 	rsb	r0, r0, #28
 8004726:	4481      	add	r9, r0
 8004728:	4405      	add	r5, r0
 800472a:	4403      	add	r3, r0
 800472c:	9307      	str	r3, [sp, #28]
 800472e:	f1b9 0f00 	cmp.w	r9, #0
 8004732:	dd05      	ble.n	8004740 <_dtoa_r+0x860>
 8004734:	4659      	mov	r1, fp
 8004736:	464a      	mov	r2, r9
 8004738:	4620      	mov	r0, r4
 800473a:	f000 fb75 	bl	8004e28 <__lshift>
 800473e:	4683      	mov	fp, r0
 8004740:	9b07      	ldr	r3, [sp, #28]
 8004742:	2b00      	cmp	r3, #0
 8004744:	dd05      	ble.n	8004752 <_dtoa_r+0x872>
 8004746:	4631      	mov	r1, r6
 8004748:	461a      	mov	r2, r3
 800474a:	4620      	mov	r0, r4
 800474c:	f000 fb6c 	bl	8004e28 <__lshift>
 8004750:	4606      	mov	r6, r0
 8004752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004754:	b353      	cbz	r3, 80047ac <_dtoa_r+0x8cc>
 8004756:	4631      	mov	r1, r6
 8004758:	4658      	mov	r0, fp
 800475a:	f000 fbb9 	bl	8004ed0 <__mcmp>
 800475e:	2800      	cmp	r0, #0
 8004760:	da24      	bge.n	80047ac <_dtoa_r+0x8cc>
 8004762:	2300      	movs	r3, #0
 8004764:	4659      	mov	r1, fp
 8004766:	220a      	movs	r2, #10
 8004768:	4620      	mov	r0, r4
 800476a:	f000 f9e7 	bl	8004b3c <__multadd>
 800476e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004770:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004774:	4683      	mov	fp, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8144 	beq.w	8004a04 <_dtoa_r+0xb24>
 800477c:	2300      	movs	r3, #0
 800477e:	4639      	mov	r1, r7
 8004780:	220a      	movs	r2, #10
 8004782:	4620      	mov	r0, r4
 8004784:	f000 f9da 	bl	8004b3c <__multadd>
 8004788:	9b04      	ldr	r3, [sp, #16]
 800478a:	4607      	mov	r7, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	dc4d      	bgt.n	800482c <_dtoa_r+0x94c>
 8004790:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004792:	2b02      	cmp	r3, #2
 8004794:	dd4a      	ble.n	800482c <_dtoa_r+0x94c>
 8004796:	e011      	b.n	80047bc <_dtoa_r+0x8dc>
 8004798:	d0c9      	beq.n	800472e <_dtoa_r+0x84e>
 800479a:	9a07      	ldr	r2, [sp, #28]
 800479c:	331c      	adds	r3, #28
 800479e:	441a      	add	r2, r3
 80047a0:	4499      	add	r9, r3
 80047a2:	441d      	add	r5, r3
 80047a4:	4613      	mov	r3, r2
 80047a6:	e7c1      	b.n	800472c <_dtoa_r+0x84c>
 80047a8:	4603      	mov	r3, r0
 80047aa:	e7f6      	b.n	800479a <_dtoa_r+0x8ba>
 80047ac:	f1b8 0f00 	cmp.w	r8, #0
 80047b0:	dc36      	bgt.n	8004820 <_dtoa_r+0x940>
 80047b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	dd33      	ble.n	8004820 <_dtoa_r+0x940>
 80047b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80047bc:	9b04      	ldr	r3, [sp, #16]
 80047be:	b963      	cbnz	r3, 80047da <_dtoa_r+0x8fa>
 80047c0:	4631      	mov	r1, r6
 80047c2:	2205      	movs	r2, #5
 80047c4:	4620      	mov	r0, r4
 80047c6:	f000 f9b9 	bl	8004b3c <__multadd>
 80047ca:	4601      	mov	r1, r0
 80047cc:	4606      	mov	r6, r0
 80047ce:	4658      	mov	r0, fp
 80047d0:	f000 fb7e 	bl	8004ed0 <__mcmp>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	f73f add3 	bgt.w	8004380 <_dtoa_r+0x4a0>
 80047da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047dc:	9d06      	ldr	r5, [sp, #24]
 80047de:	ea6f 0a03 	mvn.w	sl, r3
 80047e2:	f04f 0900 	mov.w	r9, #0
 80047e6:	4631      	mov	r1, r6
 80047e8:	4620      	mov	r0, r4
 80047ea:	f000 f990 	bl	8004b0e <_Bfree>
 80047ee:	2f00      	cmp	r7, #0
 80047f0:	f43f aebd 	beq.w	800456e <_dtoa_r+0x68e>
 80047f4:	f1b9 0f00 	cmp.w	r9, #0
 80047f8:	d005      	beq.n	8004806 <_dtoa_r+0x926>
 80047fa:	45b9      	cmp	r9, r7
 80047fc:	d003      	beq.n	8004806 <_dtoa_r+0x926>
 80047fe:	4649      	mov	r1, r9
 8004800:	4620      	mov	r0, r4
 8004802:	f000 f984 	bl	8004b0e <_Bfree>
 8004806:	4639      	mov	r1, r7
 8004808:	4620      	mov	r0, r4
 800480a:	f000 f980 	bl	8004b0e <_Bfree>
 800480e:	e6ae      	b.n	800456e <_dtoa_r+0x68e>
 8004810:	2600      	movs	r6, #0
 8004812:	4637      	mov	r7, r6
 8004814:	e7e1      	b.n	80047da <_dtoa_r+0x8fa>
 8004816:	46ba      	mov	sl, r7
 8004818:	4637      	mov	r7, r6
 800481a:	e5b1      	b.n	8004380 <_dtoa_r+0x4a0>
 800481c:	40240000 	.word	0x40240000
 8004820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004822:	f8cd 8010 	str.w	r8, [sp, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80f3 	beq.w	8004a12 <_dtoa_r+0xb32>
 800482c:	2d00      	cmp	r5, #0
 800482e:	dd05      	ble.n	800483c <_dtoa_r+0x95c>
 8004830:	4639      	mov	r1, r7
 8004832:	462a      	mov	r2, r5
 8004834:	4620      	mov	r0, r4
 8004836:	f000 faf7 	bl	8004e28 <__lshift>
 800483a:	4607      	mov	r7, r0
 800483c:	9b08      	ldr	r3, [sp, #32]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d04c      	beq.n	80048dc <_dtoa_r+0x9fc>
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	4620      	mov	r0, r4
 8004846:	f000 f92e 	bl	8004aa6 <_Balloc>
 800484a:	4605      	mov	r5, r0
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	f107 010c 	add.w	r1, r7, #12
 8004852:	3202      	adds	r2, #2
 8004854:	0092      	lsls	r2, r2, #2
 8004856:	300c      	adds	r0, #12
 8004858:	f000 f91a 	bl	8004a90 <memcpy>
 800485c:	2201      	movs	r2, #1
 800485e:	4629      	mov	r1, r5
 8004860:	4620      	mov	r0, r4
 8004862:	f000 fae1 	bl	8004e28 <__lshift>
 8004866:	46b9      	mov	r9, r7
 8004868:	4607      	mov	r7, r0
 800486a:	9b06      	ldr	r3, [sp, #24]
 800486c:	9307      	str	r3, [sp, #28]
 800486e:	9b02      	ldr	r3, [sp, #8]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	9308      	str	r3, [sp, #32]
 8004876:	4631      	mov	r1, r6
 8004878:	4658      	mov	r0, fp
 800487a:	f7ff faa3 	bl	8003dc4 <quorem>
 800487e:	4649      	mov	r1, r9
 8004880:	4605      	mov	r5, r0
 8004882:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004886:	4658      	mov	r0, fp
 8004888:	f000 fb22 	bl	8004ed0 <__mcmp>
 800488c:	463a      	mov	r2, r7
 800488e:	9002      	str	r0, [sp, #8]
 8004890:	4631      	mov	r1, r6
 8004892:	4620      	mov	r0, r4
 8004894:	f000 fb36 	bl	8004f04 <__mdiff>
 8004898:	68c3      	ldr	r3, [r0, #12]
 800489a:	4602      	mov	r2, r0
 800489c:	bb03      	cbnz	r3, 80048e0 <_dtoa_r+0xa00>
 800489e:	4601      	mov	r1, r0
 80048a0:	9009      	str	r0, [sp, #36]	; 0x24
 80048a2:	4658      	mov	r0, fp
 80048a4:	f000 fb14 	bl	8004ed0 <__mcmp>
 80048a8:	4603      	mov	r3, r0
 80048aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048ac:	4611      	mov	r1, r2
 80048ae:	4620      	mov	r0, r4
 80048b0:	9309      	str	r3, [sp, #36]	; 0x24
 80048b2:	f000 f92c 	bl	8004b0e <_Bfree>
 80048b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b8:	b9a3      	cbnz	r3, 80048e4 <_dtoa_r+0xa04>
 80048ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80048bc:	b992      	cbnz	r2, 80048e4 <_dtoa_r+0xa04>
 80048be:	9a08      	ldr	r2, [sp, #32]
 80048c0:	b982      	cbnz	r2, 80048e4 <_dtoa_r+0xa04>
 80048c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80048c6:	d029      	beq.n	800491c <_dtoa_r+0xa3c>
 80048c8:	9b02      	ldr	r3, [sp, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	dd01      	ble.n	80048d2 <_dtoa_r+0x9f2>
 80048ce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80048d2:	9b07      	ldr	r3, [sp, #28]
 80048d4:	1c5d      	adds	r5, r3, #1
 80048d6:	f883 8000 	strb.w	r8, [r3]
 80048da:	e784      	b.n	80047e6 <_dtoa_r+0x906>
 80048dc:	4638      	mov	r0, r7
 80048de:	e7c2      	b.n	8004866 <_dtoa_r+0x986>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e7e3      	b.n	80048ac <_dtoa_r+0x9cc>
 80048e4:	9a02      	ldr	r2, [sp, #8]
 80048e6:	2a00      	cmp	r2, #0
 80048e8:	db04      	blt.n	80048f4 <_dtoa_r+0xa14>
 80048ea:	d123      	bne.n	8004934 <_dtoa_r+0xa54>
 80048ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80048ee:	bb0a      	cbnz	r2, 8004934 <_dtoa_r+0xa54>
 80048f0:	9a08      	ldr	r2, [sp, #32]
 80048f2:	b9fa      	cbnz	r2, 8004934 <_dtoa_r+0xa54>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	ddec      	ble.n	80048d2 <_dtoa_r+0x9f2>
 80048f8:	4659      	mov	r1, fp
 80048fa:	2201      	movs	r2, #1
 80048fc:	4620      	mov	r0, r4
 80048fe:	f000 fa93 	bl	8004e28 <__lshift>
 8004902:	4631      	mov	r1, r6
 8004904:	4683      	mov	fp, r0
 8004906:	f000 fae3 	bl	8004ed0 <__mcmp>
 800490a:	2800      	cmp	r0, #0
 800490c:	dc03      	bgt.n	8004916 <_dtoa_r+0xa36>
 800490e:	d1e0      	bne.n	80048d2 <_dtoa_r+0x9f2>
 8004910:	f018 0f01 	tst.w	r8, #1
 8004914:	d0dd      	beq.n	80048d2 <_dtoa_r+0x9f2>
 8004916:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800491a:	d1d8      	bne.n	80048ce <_dtoa_r+0x9ee>
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	9a07      	ldr	r2, [sp, #28]
 8004920:	1c5d      	adds	r5, r3, #1
 8004922:	2339      	movs	r3, #57	; 0x39
 8004924:	7013      	strb	r3, [r2, #0]
 8004926:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800492a:	1e6a      	subs	r2, r5, #1
 800492c:	2b39      	cmp	r3, #57	; 0x39
 800492e:	d04d      	beq.n	80049cc <_dtoa_r+0xaec>
 8004930:	3301      	adds	r3, #1
 8004932:	e052      	b.n	80049da <_dtoa_r+0xafa>
 8004934:	9a07      	ldr	r2, [sp, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f102 0501 	add.w	r5, r2, #1
 800493c:	dd06      	ble.n	800494c <_dtoa_r+0xa6c>
 800493e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004942:	d0eb      	beq.n	800491c <_dtoa_r+0xa3c>
 8004944:	f108 0801 	add.w	r8, r8, #1
 8004948:	9b07      	ldr	r3, [sp, #28]
 800494a:	e7c4      	b.n	80048d6 <_dtoa_r+0x9f6>
 800494c:	9b06      	ldr	r3, [sp, #24]
 800494e:	9a04      	ldr	r2, [sp, #16]
 8004950:	1aeb      	subs	r3, r5, r3
 8004952:	4293      	cmp	r3, r2
 8004954:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004958:	d021      	beq.n	800499e <_dtoa_r+0xabe>
 800495a:	4659      	mov	r1, fp
 800495c:	2300      	movs	r3, #0
 800495e:	220a      	movs	r2, #10
 8004960:	4620      	mov	r0, r4
 8004962:	f000 f8eb 	bl	8004b3c <__multadd>
 8004966:	45b9      	cmp	r9, r7
 8004968:	4683      	mov	fp, r0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	f04f 020a 	mov.w	r2, #10
 8004972:	4649      	mov	r1, r9
 8004974:	4620      	mov	r0, r4
 8004976:	d105      	bne.n	8004984 <_dtoa_r+0xaa4>
 8004978:	f000 f8e0 	bl	8004b3c <__multadd>
 800497c:	4681      	mov	r9, r0
 800497e:	4607      	mov	r7, r0
 8004980:	9507      	str	r5, [sp, #28]
 8004982:	e778      	b.n	8004876 <_dtoa_r+0x996>
 8004984:	f000 f8da 	bl	8004b3c <__multadd>
 8004988:	4639      	mov	r1, r7
 800498a:	4681      	mov	r9, r0
 800498c:	2300      	movs	r3, #0
 800498e:	220a      	movs	r2, #10
 8004990:	4620      	mov	r0, r4
 8004992:	f000 f8d3 	bl	8004b3c <__multadd>
 8004996:	4607      	mov	r7, r0
 8004998:	e7f2      	b.n	8004980 <_dtoa_r+0xaa0>
 800499a:	f04f 0900 	mov.w	r9, #0
 800499e:	4659      	mov	r1, fp
 80049a0:	2201      	movs	r2, #1
 80049a2:	4620      	mov	r0, r4
 80049a4:	f000 fa40 	bl	8004e28 <__lshift>
 80049a8:	4631      	mov	r1, r6
 80049aa:	4683      	mov	fp, r0
 80049ac:	f000 fa90 	bl	8004ed0 <__mcmp>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	dcb8      	bgt.n	8004926 <_dtoa_r+0xa46>
 80049b4:	d102      	bne.n	80049bc <_dtoa_r+0xadc>
 80049b6:	f018 0f01 	tst.w	r8, #1
 80049ba:	d1b4      	bne.n	8004926 <_dtoa_r+0xa46>
 80049bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049c0:	1e6a      	subs	r2, r5, #1
 80049c2:	2b30      	cmp	r3, #48	; 0x30
 80049c4:	f47f af0f 	bne.w	80047e6 <_dtoa_r+0x906>
 80049c8:	4615      	mov	r5, r2
 80049ca:	e7f7      	b.n	80049bc <_dtoa_r+0xadc>
 80049cc:	9b06      	ldr	r3, [sp, #24]
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d105      	bne.n	80049de <_dtoa_r+0xafe>
 80049d2:	2331      	movs	r3, #49	; 0x31
 80049d4:	9a06      	ldr	r2, [sp, #24]
 80049d6:	f10a 0a01 	add.w	sl, sl, #1
 80049da:	7013      	strb	r3, [r2, #0]
 80049dc:	e703      	b.n	80047e6 <_dtoa_r+0x906>
 80049de:	4615      	mov	r5, r2
 80049e0:	e7a1      	b.n	8004926 <_dtoa_r+0xa46>
 80049e2:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <_dtoa_r+0xb60>)
 80049e4:	f7ff bae1 	b.w	8003faa <_dtoa_r+0xca>
 80049e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f47f aabb 	bne.w	8003f66 <_dtoa_r+0x86>
 80049f0:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <_dtoa_r+0xb64>)
 80049f2:	f7ff bada 	b.w	8003faa <_dtoa_r+0xca>
 80049f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	f77f ae3f 	ble.w	800467c <_dtoa_r+0x79c>
 80049fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a00:	9308      	str	r3, [sp, #32]
 8004a02:	e653      	b.n	80046ac <_dtoa_r+0x7cc>
 8004a04:	9b04      	ldr	r3, [sp, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	dc03      	bgt.n	8004a12 <_dtoa_r+0xb32>
 8004a0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	f73f aed5 	bgt.w	80047bc <_dtoa_r+0x8dc>
 8004a12:	9d06      	ldr	r5, [sp, #24]
 8004a14:	4631      	mov	r1, r6
 8004a16:	4658      	mov	r0, fp
 8004a18:	f7ff f9d4 	bl	8003dc4 <quorem>
 8004a1c:	9b06      	ldr	r3, [sp, #24]
 8004a1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a22:	f805 8b01 	strb.w	r8, [r5], #1
 8004a26:	9a04      	ldr	r2, [sp, #16]
 8004a28:	1aeb      	subs	r3, r5, r3
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	ddb5      	ble.n	800499a <_dtoa_r+0xaba>
 8004a2e:	4659      	mov	r1, fp
 8004a30:	2300      	movs	r3, #0
 8004a32:	220a      	movs	r2, #10
 8004a34:	4620      	mov	r0, r4
 8004a36:	f000 f881 	bl	8004b3c <__multadd>
 8004a3a:	4683      	mov	fp, r0
 8004a3c:	e7ea      	b.n	8004a14 <_dtoa_r+0xb34>
 8004a3e:	bf00      	nop
 8004a40:	080055d0 	.word	0x080055d0
 8004a44:	080055f4 	.word	0x080055f4

08004a48 <_localeconv_r>:
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <_localeconv_r+0x14>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a18      	ldr	r0, [r3, #32]
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <_localeconv_r+0x18>)
 8004a50:	2800      	cmp	r0, #0
 8004a52:	bf08      	it	eq
 8004a54:	4618      	moveq	r0, r3
 8004a56:	30f0      	adds	r0, #240	; 0xf0
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	2000000c 	.word	0x2000000c
 8004a60:	20000070 	.word	0x20000070

08004a64 <malloc>:
 8004a64:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <malloc+0xc>)
 8004a66:	4601      	mov	r1, r0
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	f000 bb53 	b.w	8005114 <_malloc_r>
 8004a6e:	bf00      	nop
 8004a70:	2000000c 	.word	0x2000000c

08004a74 <memchr>:
 8004a74:	b510      	push	{r4, lr}
 8004a76:	b2c9      	uxtb	r1, r1
 8004a78:	4402      	add	r2, r0
 8004a7a:	4290      	cmp	r0, r2
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	d101      	bne.n	8004a84 <memchr+0x10>
 8004a80:	2300      	movs	r3, #0
 8004a82:	e003      	b.n	8004a8c <memchr+0x18>
 8004a84:	781c      	ldrb	r4, [r3, #0]
 8004a86:	3001      	adds	r0, #1
 8004a88:	428c      	cmp	r4, r1
 8004a8a:	d1f6      	bne.n	8004a7a <memchr+0x6>
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd10      	pop	{r4, pc}

08004a90 <memcpy>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	1e43      	subs	r3, r0, #1
 8004a94:	440a      	add	r2, r1
 8004a96:	4291      	cmp	r1, r2
 8004a98:	d100      	bne.n	8004a9c <memcpy+0xc>
 8004a9a:	bd10      	pop	{r4, pc}
 8004a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aa4:	e7f7      	b.n	8004a96 <memcpy+0x6>

08004aa6 <_Balloc>:
 8004aa6:	b570      	push	{r4, r5, r6, lr}
 8004aa8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004aaa:	4604      	mov	r4, r0
 8004aac:	460e      	mov	r6, r1
 8004aae:	b93d      	cbnz	r5, 8004ac0 <_Balloc+0x1a>
 8004ab0:	2010      	movs	r0, #16
 8004ab2:	f7ff ffd7 	bl	8004a64 <malloc>
 8004ab6:	6260      	str	r0, [r4, #36]	; 0x24
 8004ab8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004abc:	6005      	str	r5, [r0, #0]
 8004abe:	60c5      	str	r5, [r0, #12]
 8004ac0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004ac2:	68eb      	ldr	r3, [r5, #12]
 8004ac4:	b183      	cbz	r3, 8004ae8 <_Balloc+0x42>
 8004ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004ace:	b9b8      	cbnz	r0, 8004b00 <_Balloc+0x5a>
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	fa01 f506 	lsl.w	r5, r1, r6
 8004ad6:	1d6a      	adds	r2, r5, #5
 8004ad8:	0092      	lsls	r2, r2, #2
 8004ada:	4620      	mov	r0, r4
 8004adc:	f000 fabf 	bl	800505e <_calloc_r>
 8004ae0:	b160      	cbz	r0, 8004afc <_Balloc+0x56>
 8004ae2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004ae6:	e00e      	b.n	8004b06 <_Balloc+0x60>
 8004ae8:	2221      	movs	r2, #33	; 0x21
 8004aea:	2104      	movs	r1, #4
 8004aec:	4620      	mov	r0, r4
 8004aee:	f000 fab6 	bl	800505e <_calloc_r>
 8004af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004af4:	60e8      	str	r0, [r5, #12]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e4      	bne.n	8004ac6 <_Balloc+0x20>
 8004afc:	2000      	movs	r0, #0
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	6802      	ldr	r2, [r0, #0]
 8004b02:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004b06:	2300      	movs	r3, #0
 8004b08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b0c:	e7f7      	b.n	8004afe <_Balloc+0x58>

08004b0e <_Bfree>:
 8004b0e:	b570      	push	{r4, r5, r6, lr}
 8004b10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004b12:	4606      	mov	r6, r0
 8004b14:	460d      	mov	r5, r1
 8004b16:	b93c      	cbnz	r4, 8004b28 <_Bfree+0x1a>
 8004b18:	2010      	movs	r0, #16
 8004b1a:	f7ff ffa3 	bl	8004a64 <malloc>
 8004b1e:	6270      	str	r0, [r6, #36]	; 0x24
 8004b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b24:	6004      	str	r4, [r0, #0]
 8004b26:	60c4      	str	r4, [r0, #12]
 8004b28:	b13d      	cbz	r5, 8004b3a <_Bfree+0x2c>
 8004b2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004b2c:	686a      	ldr	r2, [r5, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b34:	6029      	str	r1, [r5, #0]
 8004b36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}

08004b3c <__multadd>:
 8004b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b40:	461f      	mov	r7, r3
 8004b42:	4606      	mov	r6, r0
 8004b44:	460c      	mov	r4, r1
 8004b46:	2300      	movs	r3, #0
 8004b48:	690d      	ldr	r5, [r1, #16]
 8004b4a:	f101 0c14 	add.w	ip, r1, #20
 8004b4e:	f8dc 0000 	ldr.w	r0, [ip]
 8004b52:	3301      	adds	r3, #1
 8004b54:	b281      	uxth	r1, r0
 8004b56:	fb02 7101 	mla	r1, r2, r1, r7
 8004b5a:	0c00      	lsrs	r0, r0, #16
 8004b5c:	0c0f      	lsrs	r7, r1, #16
 8004b5e:	fb02 7000 	mla	r0, r2, r0, r7
 8004b62:	b289      	uxth	r1, r1
 8004b64:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004b68:	429d      	cmp	r5, r3
 8004b6a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8004b72:	dcec      	bgt.n	8004b4e <__multadd+0x12>
 8004b74:	b1d7      	cbz	r7, 8004bac <__multadd+0x70>
 8004b76:	68a3      	ldr	r3, [r4, #8]
 8004b78:	42ab      	cmp	r3, r5
 8004b7a:	dc12      	bgt.n	8004ba2 <__multadd+0x66>
 8004b7c:	6861      	ldr	r1, [r4, #4]
 8004b7e:	4630      	mov	r0, r6
 8004b80:	3101      	adds	r1, #1
 8004b82:	f7ff ff90 	bl	8004aa6 <_Balloc>
 8004b86:	4680      	mov	r8, r0
 8004b88:	6922      	ldr	r2, [r4, #16]
 8004b8a:	f104 010c 	add.w	r1, r4, #12
 8004b8e:	3202      	adds	r2, #2
 8004b90:	0092      	lsls	r2, r2, #2
 8004b92:	300c      	adds	r0, #12
 8004b94:	f7ff ff7c 	bl	8004a90 <memcpy>
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	f7ff ffb7 	bl	8004b0e <_Bfree>
 8004ba0:	4644      	mov	r4, r8
 8004ba2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	615f      	str	r7, [r3, #20]
 8004baa:	6125      	str	r5, [r4, #16]
 8004bac:	4620      	mov	r0, r4
 8004bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bb2 <__hi0bits>:
 8004bb2:	0c02      	lsrs	r2, r0, #16
 8004bb4:	0412      	lsls	r2, r2, #16
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	b9b2      	cbnz	r2, 8004be8 <__hi0bits+0x36>
 8004bba:	0403      	lsls	r3, r0, #16
 8004bbc:	2010      	movs	r0, #16
 8004bbe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004bc2:	bf04      	itt	eq
 8004bc4:	021b      	lsleq	r3, r3, #8
 8004bc6:	3008      	addeq	r0, #8
 8004bc8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004bcc:	bf04      	itt	eq
 8004bce:	011b      	lsleq	r3, r3, #4
 8004bd0:	3004      	addeq	r0, #4
 8004bd2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004bd6:	bf04      	itt	eq
 8004bd8:	009b      	lsleq	r3, r3, #2
 8004bda:	3002      	addeq	r0, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	db06      	blt.n	8004bee <__hi0bits+0x3c>
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	d503      	bpl.n	8004bec <__hi0bits+0x3a>
 8004be4:	3001      	adds	r0, #1
 8004be6:	4770      	bx	lr
 8004be8:	2000      	movs	r0, #0
 8004bea:	e7e8      	b.n	8004bbe <__hi0bits+0xc>
 8004bec:	2020      	movs	r0, #32
 8004bee:	4770      	bx	lr

08004bf0 <__lo0bits>:
 8004bf0:	6803      	ldr	r3, [r0, #0]
 8004bf2:	4601      	mov	r1, r0
 8004bf4:	f013 0207 	ands.w	r2, r3, #7
 8004bf8:	d00b      	beq.n	8004c12 <__lo0bits+0x22>
 8004bfa:	07da      	lsls	r2, r3, #31
 8004bfc:	d423      	bmi.n	8004c46 <__lo0bits+0x56>
 8004bfe:	0798      	lsls	r0, r3, #30
 8004c00:	bf49      	itett	mi
 8004c02:	085b      	lsrmi	r3, r3, #1
 8004c04:	089b      	lsrpl	r3, r3, #2
 8004c06:	2001      	movmi	r0, #1
 8004c08:	600b      	strmi	r3, [r1, #0]
 8004c0a:	bf5c      	itt	pl
 8004c0c:	600b      	strpl	r3, [r1, #0]
 8004c0e:	2002      	movpl	r0, #2
 8004c10:	4770      	bx	lr
 8004c12:	b298      	uxth	r0, r3
 8004c14:	b9a8      	cbnz	r0, 8004c42 <__lo0bits+0x52>
 8004c16:	2010      	movs	r0, #16
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004c1e:	bf04      	itt	eq
 8004c20:	0a1b      	lsreq	r3, r3, #8
 8004c22:	3008      	addeq	r0, #8
 8004c24:	071a      	lsls	r2, r3, #28
 8004c26:	bf04      	itt	eq
 8004c28:	091b      	lsreq	r3, r3, #4
 8004c2a:	3004      	addeq	r0, #4
 8004c2c:	079a      	lsls	r2, r3, #30
 8004c2e:	bf04      	itt	eq
 8004c30:	089b      	lsreq	r3, r3, #2
 8004c32:	3002      	addeq	r0, #2
 8004c34:	07da      	lsls	r2, r3, #31
 8004c36:	d402      	bmi.n	8004c3e <__lo0bits+0x4e>
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	d006      	beq.n	8004c4a <__lo0bits+0x5a>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	600b      	str	r3, [r1, #0]
 8004c40:	4770      	bx	lr
 8004c42:	4610      	mov	r0, r2
 8004c44:	e7e9      	b.n	8004c1a <__lo0bits+0x2a>
 8004c46:	2000      	movs	r0, #0
 8004c48:	4770      	bx	lr
 8004c4a:	2020      	movs	r0, #32
 8004c4c:	4770      	bx	lr

08004c4e <__i2b>:
 8004c4e:	b510      	push	{r4, lr}
 8004c50:	460c      	mov	r4, r1
 8004c52:	2101      	movs	r1, #1
 8004c54:	f7ff ff27 	bl	8004aa6 <_Balloc>
 8004c58:	2201      	movs	r2, #1
 8004c5a:	6144      	str	r4, [r0, #20]
 8004c5c:	6102      	str	r2, [r0, #16]
 8004c5e:	bd10      	pop	{r4, pc}

08004c60 <__multiply>:
 8004c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	4614      	mov	r4, r2
 8004c66:	690a      	ldr	r2, [r1, #16]
 8004c68:	6923      	ldr	r3, [r4, #16]
 8004c6a:	4688      	mov	r8, r1
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	bfbe      	ittt	lt
 8004c70:	460b      	movlt	r3, r1
 8004c72:	46a0      	movlt	r8, r4
 8004c74:	461c      	movlt	r4, r3
 8004c76:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004c7a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004c7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004c82:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004c86:	eb07 0609 	add.w	r6, r7, r9
 8004c8a:	42b3      	cmp	r3, r6
 8004c8c:	bfb8      	it	lt
 8004c8e:	3101      	addlt	r1, #1
 8004c90:	f7ff ff09 	bl	8004aa6 <_Balloc>
 8004c94:	f100 0514 	add.w	r5, r0, #20
 8004c98:	462b      	mov	r3, r5
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004ca0:	4573      	cmp	r3, lr
 8004ca2:	d316      	bcc.n	8004cd2 <__multiply+0x72>
 8004ca4:	f104 0214 	add.w	r2, r4, #20
 8004ca8:	f108 0114 	add.w	r1, r8, #20
 8004cac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004cb0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	9b00      	ldr	r3, [sp, #0]
 8004cb8:	9201      	str	r2, [sp, #4]
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d80c      	bhi.n	8004cd8 <__multiply+0x78>
 8004cbe:	2e00      	cmp	r6, #0
 8004cc0:	dd03      	ble.n	8004cca <__multiply+0x6a>
 8004cc2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d05d      	beq.n	8004d86 <__multiply+0x126>
 8004cca:	6106      	str	r6, [r0, #16]
 8004ccc:	b003      	add	sp, #12
 8004cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd2:	f843 2b04 	str.w	r2, [r3], #4
 8004cd6:	e7e3      	b.n	8004ca0 <__multiply+0x40>
 8004cd8:	f8b2 b000 	ldrh.w	fp, [r2]
 8004cdc:	f1bb 0f00 	cmp.w	fp, #0
 8004ce0:	d023      	beq.n	8004d2a <__multiply+0xca>
 8004ce2:	4689      	mov	r9, r1
 8004ce4:	46ac      	mov	ip, r5
 8004ce6:	f04f 0800 	mov.w	r8, #0
 8004cea:	f859 4b04 	ldr.w	r4, [r9], #4
 8004cee:	f8dc a000 	ldr.w	sl, [ip]
 8004cf2:	b2a3      	uxth	r3, r4
 8004cf4:	fa1f fa8a 	uxth.w	sl, sl
 8004cf8:	fb0b a303 	mla	r3, fp, r3, sl
 8004cfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004d00:	f8dc 4000 	ldr.w	r4, [ip]
 8004d04:	4443      	add	r3, r8
 8004d06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004d0a:	fb0b 840a 	mla	r4, fp, sl, r8
 8004d0e:	46e2      	mov	sl, ip
 8004d10:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004d1a:	454f      	cmp	r7, r9
 8004d1c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004d20:	f84a 3b04 	str.w	r3, [sl], #4
 8004d24:	d82b      	bhi.n	8004d7e <__multiply+0x11e>
 8004d26:	f8cc 8004 	str.w	r8, [ip, #4]
 8004d2a:	9b01      	ldr	r3, [sp, #4]
 8004d2c:	3204      	adds	r2, #4
 8004d2e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004d32:	f1ba 0f00 	cmp.w	sl, #0
 8004d36:	d020      	beq.n	8004d7a <__multiply+0x11a>
 8004d38:	4689      	mov	r9, r1
 8004d3a:	46a8      	mov	r8, r5
 8004d3c:	f04f 0b00 	mov.w	fp, #0
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	f8b9 c000 	ldrh.w	ip, [r9]
 8004d46:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	fb0a 440c 	mla	r4, sl, ip, r4
 8004d50:	46c4      	mov	ip, r8
 8004d52:	445c      	add	r4, fp
 8004d54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004d58:	f84c 3b04 	str.w	r3, [ip], #4
 8004d5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004d60:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	fb0a b303 	mla	r3, sl, r3, fp
 8004d6a:	454f      	cmp	r7, r9
 8004d6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004d70:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004d74:	d805      	bhi.n	8004d82 <__multiply+0x122>
 8004d76:	f8c8 3004 	str.w	r3, [r8, #4]
 8004d7a:	3504      	adds	r5, #4
 8004d7c:	e79b      	b.n	8004cb6 <__multiply+0x56>
 8004d7e:	46d4      	mov	ip, sl
 8004d80:	e7b3      	b.n	8004cea <__multiply+0x8a>
 8004d82:	46e0      	mov	r8, ip
 8004d84:	e7dd      	b.n	8004d42 <__multiply+0xe2>
 8004d86:	3e01      	subs	r6, #1
 8004d88:	e799      	b.n	8004cbe <__multiply+0x5e>
	...

08004d8c <__pow5mult>:
 8004d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d90:	4615      	mov	r5, r2
 8004d92:	f012 0203 	ands.w	r2, r2, #3
 8004d96:	4606      	mov	r6, r0
 8004d98:	460f      	mov	r7, r1
 8004d9a:	d007      	beq.n	8004dac <__pow5mult+0x20>
 8004d9c:	4c21      	ldr	r4, [pc, #132]	; (8004e24 <__pow5mult+0x98>)
 8004d9e:	3a01      	subs	r2, #1
 8004da0:	2300      	movs	r3, #0
 8004da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004da6:	f7ff fec9 	bl	8004b3c <__multadd>
 8004daa:	4607      	mov	r7, r0
 8004dac:	10ad      	asrs	r5, r5, #2
 8004dae:	d035      	beq.n	8004e1c <__pow5mult+0x90>
 8004db0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004db2:	b93c      	cbnz	r4, 8004dc4 <__pow5mult+0x38>
 8004db4:	2010      	movs	r0, #16
 8004db6:	f7ff fe55 	bl	8004a64 <malloc>
 8004dba:	6270      	str	r0, [r6, #36]	; 0x24
 8004dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004dc0:	6004      	str	r4, [r0, #0]
 8004dc2:	60c4      	str	r4, [r0, #12]
 8004dc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004dcc:	b94c      	cbnz	r4, 8004de2 <__pow5mult+0x56>
 8004dce:	f240 2171 	movw	r1, #625	; 0x271
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f7ff ff3b 	bl	8004c4e <__i2b>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4604      	mov	r4, r0
 8004ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8004de0:	6003      	str	r3, [r0, #0]
 8004de2:	f04f 0800 	mov.w	r8, #0
 8004de6:	07eb      	lsls	r3, r5, #31
 8004de8:	d50a      	bpl.n	8004e00 <__pow5mult+0x74>
 8004dea:	4639      	mov	r1, r7
 8004dec:	4622      	mov	r2, r4
 8004dee:	4630      	mov	r0, r6
 8004df0:	f7ff ff36 	bl	8004c60 <__multiply>
 8004df4:	4681      	mov	r9, r0
 8004df6:	4639      	mov	r1, r7
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f7ff fe88 	bl	8004b0e <_Bfree>
 8004dfe:	464f      	mov	r7, r9
 8004e00:	106d      	asrs	r5, r5, #1
 8004e02:	d00b      	beq.n	8004e1c <__pow5mult+0x90>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	b938      	cbnz	r0, 8004e18 <__pow5mult+0x8c>
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f7ff ff27 	bl	8004c60 <__multiply>
 8004e12:	6020      	str	r0, [r4, #0]
 8004e14:	f8c0 8000 	str.w	r8, [r0]
 8004e18:	4604      	mov	r4, r0
 8004e1a:	e7e4      	b.n	8004de6 <__pow5mult+0x5a>
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e22:	bf00      	nop
 8004e24:	080056f8 	.word	0x080056f8

08004e28 <__lshift>:
 8004e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	4607      	mov	r7, r0
 8004e30:	4616      	mov	r6, r2
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e38:	eb0a 0903 	add.w	r9, sl, r3
 8004e3c:	6849      	ldr	r1, [r1, #4]
 8004e3e:	68a3      	ldr	r3, [r4, #8]
 8004e40:	f109 0501 	add.w	r5, r9, #1
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	db32      	blt.n	8004eae <__lshift+0x86>
 8004e48:	4638      	mov	r0, r7
 8004e4a:	f7ff fe2c 	bl	8004aa6 <_Balloc>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4680      	mov	r8, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	f100 0114 	add.w	r1, r0, #20
 8004e58:	4553      	cmp	r3, sl
 8004e5a:	db2b      	blt.n	8004eb4 <__lshift+0x8c>
 8004e5c:	6920      	ldr	r0, [r4, #16]
 8004e5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e62:	f104 0314 	add.w	r3, r4, #20
 8004e66:	f016 021f 	ands.w	r2, r6, #31
 8004e6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004e6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004e72:	d025      	beq.n	8004ec0 <__lshift+0x98>
 8004e74:	2000      	movs	r0, #0
 8004e76:	f1c2 0e20 	rsb	lr, r2, #32
 8004e7a:	468a      	mov	sl, r1
 8004e7c:	681e      	ldr	r6, [r3, #0]
 8004e7e:	4096      	lsls	r6, r2
 8004e80:	4330      	orrs	r0, r6
 8004e82:	f84a 0b04 	str.w	r0, [sl], #4
 8004e86:	f853 0b04 	ldr.w	r0, [r3], #4
 8004e8a:	459c      	cmp	ip, r3
 8004e8c:	fa20 f00e 	lsr.w	r0, r0, lr
 8004e90:	d814      	bhi.n	8004ebc <__lshift+0x94>
 8004e92:	6048      	str	r0, [r1, #4]
 8004e94:	b108      	cbz	r0, 8004e9a <__lshift+0x72>
 8004e96:	f109 0502 	add.w	r5, r9, #2
 8004e9a:	3d01      	subs	r5, #1
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	f7ff fe33 	bl	8004b0e <_Bfree>
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eae:	3101      	adds	r1, #1
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	e7c7      	b.n	8004e44 <__lshift+0x1c>
 8004eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	e7cd      	b.n	8004e58 <__lshift+0x30>
 8004ebc:	4651      	mov	r1, sl
 8004ebe:	e7dc      	b.n	8004e7a <__lshift+0x52>
 8004ec0:	3904      	subs	r1, #4
 8004ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ec6:	459c      	cmp	ip, r3
 8004ec8:	f841 2f04 	str.w	r2, [r1, #4]!
 8004ecc:	d8f9      	bhi.n	8004ec2 <__lshift+0x9a>
 8004ece:	e7e4      	b.n	8004e9a <__lshift+0x72>

08004ed0 <__mcmp>:
 8004ed0:	6903      	ldr	r3, [r0, #16]
 8004ed2:	690a      	ldr	r2, [r1, #16]
 8004ed4:	b530      	push	{r4, r5, lr}
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	d10c      	bne.n	8004ef4 <__mcmp+0x24>
 8004eda:	0092      	lsls	r2, r2, #2
 8004edc:	3014      	adds	r0, #20
 8004ede:	3114      	adds	r1, #20
 8004ee0:	1884      	adds	r4, r0, r2
 8004ee2:	4411      	add	r1, r2
 8004ee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004eec:	4295      	cmp	r5, r2
 8004eee:	d003      	beq.n	8004ef8 <__mcmp+0x28>
 8004ef0:	d305      	bcc.n	8004efe <__mcmp+0x2e>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd30      	pop	{r4, r5, pc}
 8004ef8:	42a0      	cmp	r0, r4
 8004efa:	d3f3      	bcc.n	8004ee4 <__mcmp+0x14>
 8004efc:	e7fa      	b.n	8004ef4 <__mcmp+0x24>
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
 8004f02:	e7f7      	b.n	8004ef4 <__mcmp+0x24>

08004f04 <__mdiff>:
 8004f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	460d      	mov	r5, r1
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4628      	mov	r0, r5
 8004f10:	4614      	mov	r4, r2
 8004f12:	f7ff ffdd 	bl	8004ed0 <__mcmp>
 8004f16:	1e06      	subs	r6, r0, #0
 8004f18:	d108      	bne.n	8004f2c <__mdiff+0x28>
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	f7ff fdc2 	bl	8004aa6 <_Balloc>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2c:	bfa4      	itt	ge
 8004f2e:	4623      	movge	r3, r4
 8004f30:	462c      	movge	r4, r5
 8004f32:	4638      	mov	r0, r7
 8004f34:	6861      	ldr	r1, [r4, #4]
 8004f36:	bfa6      	itte	ge
 8004f38:	461d      	movge	r5, r3
 8004f3a:	2600      	movge	r6, #0
 8004f3c:	2601      	movlt	r6, #1
 8004f3e:	f7ff fdb2 	bl	8004aa6 <_Balloc>
 8004f42:	f04f 0e00 	mov.w	lr, #0
 8004f46:	60c6      	str	r6, [r0, #12]
 8004f48:	692b      	ldr	r3, [r5, #16]
 8004f4a:	6926      	ldr	r6, [r4, #16]
 8004f4c:	f104 0214 	add.w	r2, r4, #20
 8004f50:	f105 0914 	add.w	r9, r5, #20
 8004f54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004f58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004f5c:	f100 0114 	add.w	r1, r0, #20
 8004f60:	f852 ab04 	ldr.w	sl, [r2], #4
 8004f64:	f859 5b04 	ldr.w	r5, [r9], #4
 8004f68:	fa1f f38a 	uxth.w	r3, sl
 8004f6c:	4473      	add	r3, lr
 8004f6e:	b2ac      	uxth	r4, r5
 8004f70:	1b1b      	subs	r3, r3, r4
 8004f72:	0c2c      	lsrs	r4, r5, #16
 8004f74:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004f78:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004f82:	45c8      	cmp	r8, r9
 8004f84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004f88:	4694      	mov	ip, r2
 8004f8a:	f841 4b04 	str.w	r4, [r1], #4
 8004f8e:	d8e7      	bhi.n	8004f60 <__mdiff+0x5c>
 8004f90:	45bc      	cmp	ip, r7
 8004f92:	d304      	bcc.n	8004f9e <__mdiff+0x9a>
 8004f94:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004f98:	b183      	cbz	r3, 8004fbc <__mdiff+0xb8>
 8004f9a:	6106      	str	r6, [r0, #16]
 8004f9c:	e7c4      	b.n	8004f28 <__mdiff+0x24>
 8004f9e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004fa2:	b2a2      	uxth	r2, r4
 8004fa4:	4472      	add	r2, lr
 8004fa6:	1413      	asrs	r3, r2, #16
 8004fa8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004fac:	b292      	uxth	r2, r2
 8004fae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004fb2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004fb6:	f841 2b04 	str.w	r2, [r1], #4
 8004fba:	e7e9      	b.n	8004f90 <__mdiff+0x8c>
 8004fbc:	3e01      	subs	r6, #1
 8004fbe:	e7e9      	b.n	8004f94 <__mdiff+0x90>

08004fc0 <__d2b>:
 8004fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004fc4:	461c      	mov	r4, r3
 8004fc6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4690      	mov	r8, r2
 8004fce:	f7ff fd6a 	bl	8004aa6 <_Balloc>
 8004fd2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004fd6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004fda:	4607      	mov	r7, r0
 8004fdc:	bb34      	cbnz	r4, 800502c <__d2b+0x6c>
 8004fde:	9201      	str	r2, [sp, #4]
 8004fe0:	f1b8 0200 	subs.w	r2, r8, #0
 8004fe4:	d027      	beq.n	8005036 <__d2b+0x76>
 8004fe6:	a802      	add	r0, sp, #8
 8004fe8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004fec:	f7ff fe00 	bl	8004bf0 <__lo0bits>
 8004ff0:	9900      	ldr	r1, [sp, #0]
 8004ff2:	b1f0      	cbz	r0, 8005032 <__d2b+0x72>
 8004ff4:	9a01      	ldr	r2, [sp, #4]
 8004ff6:	f1c0 0320 	rsb	r3, r0, #32
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	430b      	orrs	r3, r1
 8005000:	40c2      	lsrs	r2, r0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	9201      	str	r2, [sp, #4]
 8005006:	9b01      	ldr	r3, [sp, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf14      	ite	ne
 800500c:	2102      	movne	r1, #2
 800500e:	2101      	moveq	r1, #1
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	6139      	str	r1, [r7, #16]
 8005014:	b1c4      	cbz	r4, 8005048 <__d2b+0x88>
 8005016:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800501a:	4404      	add	r4, r0
 800501c:	6034      	str	r4, [r6, #0]
 800501e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005022:	6028      	str	r0, [r5, #0]
 8005024:	4638      	mov	r0, r7
 8005026:	b002      	add	sp, #8
 8005028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800502c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005030:	e7d5      	b.n	8004fde <__d2b+0x1e>
 8005032:	6179      	str	r1, [r7, #20]
 8005034:	e7e7      	b.n	8005006 <__d2b+0x46>
 8005036:	a801      	add	r0, sp, #4
 8005038:	f7ff fdda 	bl	8004bf0 <__lo0bits>
 800503c:	2101      	movs	r1, #1
 800503e:	9b01      	ldr	r3, [sp, #4]
 8005040:	6139      	str	r1, [r7, #16]
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	3020      	adds	r0, #32
 8005046:	e7e5      	b.n	8005014 <__d2b+0x54>
 8005048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800504c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005050:	6030      	str	r0, [r6, #0]
 8005052:	6918      	ldr	r0, [r3, #16]
 8005054:	f7ff fdad 	bl	8004bb2 <__hi0bits>
 8005058:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800505c:	e7e1      	b.n	8005022 <__d2b+0x62>

0800505e <_calloc_r>:
 800505e:	b538      	push	{r3, r4, r5, lr}
 8005060:	fb02 f401 	mul.w	r4, r2, r1
 8005064:	4621      	mov	r1, r4
 8005066:	f000 f855 	bl	8005114 <_malloc_r>
 800506a:	4605      	mov	r5, r0
 800506c:	b118      	cbz	r0, 8005076 <_calloc_r+0x18>
 800506e:	4622      	mov	r2, r4
 8005070:	2100      	movs	r1, #0
 8005072:	f7fe fa2f 	bl	80034d4 <memset>
 8005076:	4628      	mov	r0, r5
 8005078:	bd38      	pop	{r3, r4, r5, pc}
	...

0800507c <_free_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4605      	mov	r5, r0
 8005080:	2900      	cmp	r1, #0
 8005082:	d043      	beq.n	800510c <_free_r+0x90>
 8005084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005088:	1f0c      	subs	r4, r1, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfb8      	it	lt
 800508e:	18e4      	addlt	r4, r4, r3
 8005090:	f000 fa27 	bl	80054e2 <__malloc_lock>
 8005094:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <_free_r+0x94>)
 8005096:	6813      	ldr	r3, [r2, #0]
 8005098:	4610      	mov	r0, r2
 800509a:	b933      	cbnz	r3, 80050aa <_free_r+0x2e>
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	6014      	str	r4, [r2, #0]
 80050a0:	4628      	mov	r0, r5
 80050a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a6:	f000 ba1d 	b.w	80054e4 <__malloc_unlock>
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	d90b      	bls.n	80050c6 <_free_r+0x4a>
 80050ae:	6821      	ldr	r1, [r4, #0]
 80050b0:	1862      	adds	r2, r4, r1
 80050b2:	4293      	cmp	r3, r2
 80050b4:	bf01      	itttt	eq
 80050b6:	681a      	ldreq	r2, [r3, #0]
 80050b8:	685b      	ldreq	r3, [r3, #4]
 80050ba:	1852      	addeq	r2, r2, r1
 80050bc:	6022      	streq	r2, [r4, #0]
 80050be:	6063      	str	r3, [r4, #4]
 80050c0:	6004      	str	r4, [r0, #0]
 80050c2:	e7ed      	b.n	80050a0 <_free_r+0x24>
 80050c4:	4613      	mov	r3, r2
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	b10a      	cbz	r2, 80050ce <_free_r+0x52>
 80050ca:	42a2      	cmp	r2, r4
 80050cc:	d9fa      	bls.n	80050c4 <_free_r+0x48>
 80050ce:	6819      	ldr	r1, [r3, #0]
 80050d0:	1858      	adds	r0, r3, r1
 80050d2:	42a0      	cmp	r0, r4
 80050d4:	d10b      	bne.n	80050ee <_free_r+0x72>
 80050d6:	6820      	ldr	r0, [r4, #0]
 80050d8:	4401      	add	r1, r0
 80050da:	1858      	adds	r0, r3, r1
 80050dc:	4282      	cmp	r2, r0
 80050de:	6019      	str	r1, [r3, #0]
 80050e0:	d1de      	bne.n	80050a0 <_free_r+0x24>
 80050e2:	6810      	ldr	r0, [r2, #0]
 80050e4:	6852      	ldr	r2, [r2, #4]
 80050e6:	4401      	add	r1, r0
 80050e8:	6019      	str	r1, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	e7d8      	b.n	80050a0 <_free_r+0x24>
 80050ee:	d902      	bls.n	80050f6 <_free_r+0x7a>
 80050f0:	230c      	movs	r3, #12
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	e7d4      	b.n	80050a0 <_free_r+0x24>
 80050f6:	6820      	ldr	r0, [r4, #0]
 80050f8:	1821      	adds	r1, r4, r0
 80050fa:	428a      	cmp	r2, r1
 80050fc:	bf01      	itttt	eq
 80050fe:	6811      	ldreq	r1, [r2, #0]
 8005100:	6852      	ldreq	r2, [r2, #4]
 8005102:	1809      	addeq	r1, r1, r0
 8005104:	6021      	streq	r1, [r4, #0]
 8005106:	6062      	str	r2, [r4, #4]
 8005108:	605c      	str	r4, [r3, #4]
 800510a:	e7c9      	b.n	80050a0 <_free_r+0x24>
 800510c:	bd38      	pop	{r3, r4, r5, pc}
 800510e:	bf00      	nop
 8005110:	200001fc 	.word	0x200001fc

08005114 <_malloc_r>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	1ccd      	adds	r5, r1, #3
 8005118:	f025 0503 	bic.w	r5, r5, #3
 800511c:	3508      	adds	r5, #8
 800511e:	2d0c      	cmp	r5, #12
 8005120:	bf38      	it	cc
 8005122:	250c      	movcc	r5, #12
 8005124:	2d00      	cmp	r5, #0
 8005126:	4606      	mov	r6, r0
 8005128:	db01      	blt.n	800512e <_malloc_r+0x1a>
 800512a:	42a9      	cmp	r1, r5
 800512c:	d903      	bls.n	8005136 <_malloc_r+0x22>
 800512e:	230c      	movs	r3, #12
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	2000      	movs	r0, #0
 8005134:	bd70      	pop	{r4, r5, r6, pc}
 8005136:	f000 f9d4 	bl	80054e2 <__malloc_lock>
 800513a:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <_malloc_r+0xac>)
 800513c:	6814      	ldr	r4, [r2, #0]
 800513e:	4621      	mov	r1, r4
 8005140:	b991      	cbnz	r1, 8005168 <_malloc_r+0x54>
 8005142:	4c20      	ldr	r4, [pc, #128]	; (80051c4 <_malloc_r+0xb0>)
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	b91b      	cbnz	r3, 8005150 <_malloc_r+0x3c>
 8005148:	4630      	mov	r0, r6
 800514a:	f000 f98f 	bl	800546c <_sbrk_r>
 800514e:	6020      	str	r0, [r4, #0]
 8005150:	4629      	mov	r1, r5
 8005152:	4630      	mov	r0, r6
 8005154:	f000 f98a 	bl	800546c <_sbrk_r>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d124      	bne.n	80051a6 <_malloc_r+0x92>
 800515c:	230c      	movs	r3, #12
 800515e:	4630      	mov	r0, r6
 8005160:	6033      	str	r3, [r6, #0]
 8005162:	f000 f9bf 	bl	80054e4 <__malloc_unlock>
 8005166:	e7e4      	b.n	8005132 <_malloc_r+0x1e>
 8005168:	680b      	ldr	r3, [r1, #0]
 800516a:	1b5b      	subs	r3, r3, r5
 800516c:	d418      	bmi.n	80051a0 <_malloc_r+0x8c>
 800516e:	2b0b      	cmp	r3, #11
 8005170:	d90f      	bls.n	8005192 <_malloc_r+0x7e>
 8005172:	600b      	str	r3, [r1, #0]
 8005174:	18cc      	adds	r4, r1, r3
 8005176:	50cd      	str	r5, [r1, r3]
 8005178:	4630      	mov	r0, r6
 800517a:	f000 f9b3 	bl	80054e4 <__malloc_unlock>
 800517e:	f104 000b 	add.w	r0, r4, #11
 8005182:	1d23      	adds	r3, r4, #4
 8005184:	f020 0007 	bic.w	r0, r0, #7
 8005188:	1ac3      	subs	r3, r0, r3
 800518a:	d0d3      	beq.n	8005134 <_malloc_r+0x20>
 800518c:	425a      	negs	r2, r3
 800518e:	50e2      	str	r2, [r4, r3]
 8005190:	e7d0      	b.n	8005134 <_malloc_r+0x20>
 8005192:	684b      	ldr	r3, [r1, #4]
 8005194:	428c      	cmp	r4, r1
 8005196:	bf16      	itet	ne
 8005198:	6063      	strne	r3, [r4, #4]
 800519a:	6013      	streq	r3, [r2, #0]
 800519c:	460c      	movne	r4, r1
 800519e:	e7eb      	b.n	8005178 <_malloc_r+0x64>
 80051a0:	460c      	mov	r4, r1
 80051a2:	6849      	ldr	r1, [r1, #4]
 80051a4:	e7cc      	b.n	8005140 <_malloc_r+0x2c>
 80051a6:	1cc4      	adds	r4, r0, #3
 80051a8:	f024 0403 	bic.w	r4, r4, #3
 80051ac:	42a0      	cmp	r0, r4
 80051ae:	d005      	beq.n	80051bc <_malloc_r+0xa8>
 80051b0:	1a21      	subs	r1, r4, r0
 80051b2:	4630      	mov	r0, r6
 80051b4:	f000 f95a 	bl	800546c <_sbrk_r>
 80051b8:	3001      	adds	r0, #1
 80051ba:	d0cf      	beq.n	800515c <_malloc_r+0x48>
 80051bc:	6025      	str	r5, [r4, #0]
 80051be:	e7db      	b.n	8005178 <_malloc_r+0x64>
 80051c0:	200001fc 	.word	0x200001fc
 80051c4:	20000200 	.word	0x20000200

080051c8 <__ssputs_r>:
 80051c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051cc:	688e      	ldr	r6, [r1, #8]
 80051ce:	4682      	mov	sl, r0
 80051d0:	429e      	cmp	r6, r3
 80051d2:	460c      	mov	r4, r1
 80051d4:	4690      	mov	r8, r2
 80051d6:	4699      	mov	r9, r3
 80051d8:	d837      	bhi.n	800524a <__ssputs_r+0x82>
 80051da:	898a      	ldrh	r2, [r1, #12]
 80051dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051e0:	d031      	beq.n	8005246 <__ssputs_r+0x7e>
 80051e2:	2302      	movs	r3, #2
 80051e4:	6825      	ldr	r5, [r4, #0]
 80051e6:	6909      	ldr	r1, [r1, #16]
 80051e8:	1a6f      	subs	r7, r5, r1
 80051ea:	6965      	ldr	r5, [r4, #20]
 80051ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80051f4:	f109 0301 	add.w	r3, r9, #1
 80051f8:	443b      	add	r3, r7
 80051fa:	429d      	cmp	r5, r3
 80051fc:	bf38      	it	cc
 80051fe:	461d      	movcc	r5, r3
 8005200:	0553      	lsls	r3, r2, #21
 8005202:	d530      	bpl.n	8005266 <__ssputs_r+0x9e>
 8005204:	4629      	mov	r1, r5
 8005206:	f7ff ff85 	bl	8005114 <_malloc_r>
 800520a:	4606      	mov	r6, r0
 800520c:	b950      	cbnz	r0, 8005224 <__ssputs_r+0x5c>
 800520e:	230c      	movs	r3, #12
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	f8ca 3000 	str.w	r3, [sl]
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800521e:	81a3      	strh	r3, [r4, #12]
 8005220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005224:	463a      	mov	r2, r7
 8005226:	6921      	ldr	r1, [r4, #16]
 8005228:	f7ff fc32 	bl	8004a90 <memcpy>
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005236:	81a3      	strh	r3, [r4, #12]
 8005238:	6126      	str	r6, [r4, #16]
 800523a:	443e      	add	r6, r7
 800523c:	6026      	str	r6, [r4, #0]
 800523e:	464e      	mov	r6, r9
 8005240:	6165      	str	r5, [r4, #20]
 8005242:	1bed      	subs	r5, r5, r7
 8005244:	60a5      	str	r5, [r4, #8]
 8005246:	454e      	cmp	r6, r9
 8005248:	d900      	bls.n	800524c <__ssputs_r+0x84>
 800524a:	464e      	mov	r6, r9
 800524c:	4632      	mov	r2, r6
 800524e:	4641      	mov	r1, r8
 8005250:	6820      	ldr	r0, [r4, #0]
 8005252:	f000 f92d 	bl	80054b0 <memmove>
 8005256:	68a3      	ldr	r3, [r4, #8]
 8005258:	2000      	movs	r0, #0
 800525a:	1b9b      	subs	r3, r3, r6
 800525c:	60a3      	str	r3, [r4, #8]
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	441e      	add	r6, r3
 8005262:	6026      	str	r6, [r4, #0]
 8005264:	e7dc      	b.n	8005220 <__ssputs_r+0x58>
 8005266:	462a      	mov	r2, r5
 8005268:	f000 f93d 	bl	80054e6 <_realloc_r>
 800526c:	4606      	mov	r6, r0
 800526e:	2800      	cmp	r0, #0
 8005270:	d1e2      	bne.n	8005238 <__ssputs_r+0x70>
 8005272:	6921      	ldr	r1, [r4, #16]
 8005274:	4650      	mov	r0, sl
 8005276:	f7ff ff01 	bl	800507c <_free_r>
 800527a:	e7c8      	b.n	800520e <__ssputs_r+0x46>

0800527c <_svfiprintf_r>:
 800527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	461d      	mov	r5, r3
 8005282:	898b      	ldrh	r3, [r1, #12]
 8005284:	b09d      	sub	sp, #116	; 0x74
 8005286:	061f      	lsls	r7, r3, #24
 8005288:	4680      	mov	r8, r0
 800528a:	460c      	mov	r4, r1
 800528c:	4616      	mov	r6, r2
 800528e:	d50f      	bpl.n	80052b0 <_svfiprintf_r+0x34>
 8005290:	690b      	ldr	r3, [r1, #16]
 8005292:	b96b      	cbnz	r3, 80052b0 <_svfiprintf_r+0x34>
 8005294:	2140      	movs	r1, #64	; 0x40
 8005296:	f7ff ff3d 	bl	8005114 <_malloc_r>
 800529a:	6020      	str	r0, [r4, #0]
 800529c:	6120      	str	r0, [r4, #16]
 800529e:	b928      	cbnz	r0, 80052ac <_svfiprintf_r+0x30>
 80052a0:	230c      	movs	r3, #12
 80052a2:	f8c8 3000 	str.w	r3, [r8]
 80052a6:	f04f 30ff 	mov.w	r0, #4294967295
 80052aa:	e0c8      	b.n	800543e <_svfiprintf_r+0x1c2>
 80052ac:	2340      	movs	r3, #64	; 0x40
 80052ae:	6163      	str	r3, [r4, #20]
 80052b0:	2300      	movs	r3, #0
 80052b2:	9309      	str	r3, [sp, #36]	; 0x24
 80052b4:	2320      	movs	r3, #32
 80052b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052ba:	2330      	movs	r3, #48	; 0x30
 80052bc:	f04f 0b01 	mov.w	fp, #1
 80052c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052c4:	9503      	str	r5, [sp, #12]
 80052c6:	4637      	mov	r7, r6
 80052c8:	463d      	mov	r5, r7
 80052ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80052ce:	b10b      	cbz	r3, 80052d4 <_svfiprintf_r+0x58>
 80052d0:	2b25      	cmp	r3, #37	; 0x25
 80052d2:	d13e      	bne.n	8005352 <_svfiprintf_r+0xd6>
 80052d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80052d8:	d00b      	beq.n	80052f2 <_svfiprintf_r+0x76>
 80052da:	4653      	mov	r3, sl
 80052dc:	4632      	mov	r2, r6
 80052de:	4621      	mov	r1, r4
 80052e0:	4640      	mov	r0, r8
 80052e2:	f7ff ff71 	bl	80051c8 <__ssputs_r>
 80052e6:	3001      	adds	r0, #1
 80052e8:	f000 80a4 	beq.w	8005434 <_svfiprintf_r+0x1b8>
 80052ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ee:	4453      	add	r3, sl
 80052f0:	9309      	str	r3, [sp, #36]	; 0x24
 80052f2:	783b      	ldrb	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 809d 	beq.w	8005434 <_svfiprintf_r+0x1b8>
 80052fa:	2300      	movs	r3, #0
 80052fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005304:	9304      	str	r3, [sp, #16]
 8005306:	9307      	str	r3, [sp, #28]
 8005308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800530c:	931a      	str	r3, [sp, #104]	; 0x68
 800530e:	462f      	mov	r7, r5
 8005310:	2205      	movs	r2, #5
 8005312:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005316:	4850      	ldr	r0, [pc, #320]	; (8005458 <_svfiprintf_r+0x1dc>)
 8005318:	f7ff fbac 	bl	8004a74 <memchr>
 800531c:	9b04      	ldr	r3, [sp, #16]
 800531e:	b9d0      	cbnz	r0, 8005356 <_svfiprintf_r+0xda>
 8005320:	06d9      	lsls	r1, r3, #27
 8005322:	bf44      	itt	mi
 8005324:	2220      	movmi	r2, #32
 8005326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800532a:	071a      	lsls	r2, r3, #28
 800532c:	bf44      	itt	mi
 800532e:	222b      	movmi	r2, #43	; 0x2b
 8005330:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005334:	782a      	ldrb	r2, [r5, #0]
 8005336:	2a2a      	cmp	r2, #42	; 0x2a
 8005338:	d015      	beq.n	8005366 <_svfiprintf_r+0xea>
 800533a:	462f      	mov	r7, r5
 800533c:	2000      	movs	r0, #0
 800533e:	250a      	movs	r5, #10
 8005340:	9a07      	ldr	r2, [sp, #28]
 8005342:	4639      	mov	r1, r7
 8005344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005348:	3b30      	subs	r3, #48	; 0x30
 800534a:	2b09      	cmp	r3, #9
 800534c:	d94d      	bls.n	80053ea <_svfiprintf_r+0x16e>
 800534e:	b1b8      	cbz	r0, 8005380 <_svfiprintf_r+0x104>
 8005350:	e00f      	b.n	8005372 <_svfiprintf_r+0xf6>
 8005352:	462f      	mov	r7, r5
 8005354:	e7b8      	b.n	80052c8 <_svfiprintf_r+0x4c>
 8005356:	4a40      	ldr	r2, [pc, #256]	; (8005458 <_svfiprintf_r+0x1dc>)
 8005358:	463d      	mov	r5, r7
 800535a:	1a80      	subs	r0, r0, r2
 800535c:	fa0b f000 	lsl.w	r0, fp, r0
 8005360:	4318      	orrs	r0, r3
 8005362:	9004      	str	r0, [sp, #16]
 8005364:	e7d3      	b.n	800530e <_svfiprintf_r+0x92>
 8005366:	9a03      	ldr	r2, [sp, #12]
 8005368:	1d11      	adds	r1, r2, #4
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	9103      	str	r1, [sp, #12]
 800536e:	2a00      	cmp	r2, #0
 8005370:	db01      	blt.n	8005376 <_svfiprintf_r+0xfa>
 8005372:	9207      	str	r2, [sp, #28]
 8005374:	e004      	b.n	8005380 <_svfiprintf_r+0x104>
 8005376:	4252      	negs	r2, r2
 8005378:	f043 0302 	orr.w	r3, r3, #2
 800537c:	9207      	str	r2, [sp, #28]
 800537e:	9304      	str	r3, [sp, #16]
 8005380:	783b      	ldrb	r3, [r7, #0]
 8005382:	2b2e      	cmp	r3, #46	; 0x2e
 8005384:	d10c      	bne.n	80053a0 <_svfiprintf_r+0x124>
 8005386:	787b      	ldrb	r3, [r7, #1]
 8005388:	2b2a      	cmp	r3, #42	; 0x2a
 800538a:	d133      	bne.n	80053f4 <_svfiprintf_r+0x178>
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	3702      	adds	r7, #2
 8005390:	1d1a      	adds	r2, r3, #4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	9203      	str	r2, [sp, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	bfb8      	it	lt
 800539a:	f04f 33ff 	movlt.w	r3, #4294967295
 800539e:	9305      	str	r3, [sp, #20]
 80053a0:	4d2e      	ldr	r5, [pc, #184]	; (800545c <_svfiprintf_r+0x1e0>)
 80053a2:	2203      	movs	r2, #3
 80053a4:	7839      	ldrb	r1, [r7, #0]
 80053a6:	4628      	mov	r0, r5
 80053a8:	f7ff fb64 	bl	8004a74 <memchr>
 80053ac:	b138      	cbz	r0, 80053be <_svfiprintf_r+0x142>
 80053ae:	2340      	movs	r3, #64	; 0x40
 80053b0:	1b40      	subs	r0, r0, r5
 80053b2:	fa03 f000 	lsl.w	r0, r3, r0
 80053b6:	9b04      	ldr	r3, [sp, #16]
 80053b8:	3701      	adds	r7, #1
 80053ba:	4303      	orrs	r3, r0
 80053bc:	9304      	str	r3, [sp, #16]
 80053be:	7839      	ldrb	r1, [r7, #0]
 80053c0:	2206      	movs	r2, #6
 80053c2:	4827      	ldr	r0, [pc, #156]	; (8005460 <_svfiprintf_r+0x1e4>)
 80053c4:	1c7e      	adds	r6, r7, #1
 80053c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053ca:	f7ff fb53 	bl	8004a74 <memchr>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d038      	beq.n	8005444 <_svfiprintf_r+0x1c8>
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <_svfiprintf_r+0x1e8>)
 80053d4:	bb13      	cbnz	r3, 800541c <_svfiprintf_r+0x1a0>
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	3307      	adds	r3, #7
 80053da:	f023 0307 	bic.w	r3, r3, #7
 80053de:	3308      	adds	r3, #8
 80053e0:	9303      	str	r3, [sp, #12]
 80053e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e4:	444b      	add	r3, r9
 80053e6:	9309      	str	r3, [sp, #36]	; 0x24
 80053e8:	e76d      	b.n	80052c6 <_svfiprintf_r+0x4a>
 80053ea:	fb05 3202 	mla	r2, r5, r2, r3
 80053ee:	2001      	movs	r0, #1
 80053f0:	460f      	mov	r7, r1
 80053f2:	e7a6      	b.n	8005342 <_svfiprintf_r+0xc6>
 80053f4:	2300      	movs	r3, #0
 80053f6:	250a      	movs	r5, #10
 80053f8:	4619      	mov	r1, r3
 80053fa:	3701      	adds	r7, #1
 80053fc:	9305      	str	r3, [sp, #20]
 80053fe:	4638      	mov	r0, r7
 8005400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005404:	3a30      	subs	r2, #48	; 0x30
 8005406:	2a09      	cmp	r2, #9
 8005408:	d903      	bls.n	8005412 <_svfiprintf_r+0x196>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0c8      	beq.n	80053a0 <_svfiprintf_r+0x124>
 800540e:	9105      	str	r1, [sp, #20]
 8005410:	e7c6      	b.n	80053a0 <_svfiprintf_r+0x124>
 8005412:	fb05 2101 	mla	r1, r5, r1, r2
 8005416:	2301      	movs	r3, #1
 8005418:	4607      	mov	r7, r0
 800541a:	e7f0      	b.n	80053fe <_svfiprintf_r+0x182>
 800541c:	ab03      	add	r3, sp, #12
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	4622      	mov	r2, r4
 8005422:	4b11      	ldr	r3, [pc, #68]	; (8005468 <_svfiprintf_r+0x1ec>)
 8005424:	a904      	add	r1, sp, #16
 8005426:	4640      	mov	r0, r8
 8005428:	f7fe f8ee 	bl	8003608 <_printf_float>
 800542c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005430:	4681      	mov	r9, r0
 8005432:	d1d6      	bne.n	80053e2 <_svfiprintf_r+0x166>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	065b      	lsls	r3, r3, #25
 8005438:	f53f af35 	bmi.w	80052a6 <_svfiprintf_r+0x2a>
 800543c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800543e:	b01d      	add	sp, #116	; 0x74
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	ab03      	add	r3, sp, #12
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4622      	mov	r2, r4
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <_svfiprintf_r+0x1ec>)
 800544c:	a904      	add	r1, sp, #16
 800544e:	4640      	mov	r0, r8
 8005450:	f7fe fb86 	bl	8003b60 <_printf_i>
 8005454:	e7ea      	b.n	800542c <_svfiprintf_r+0x1b0>
 8005456:	bf00      	nop
 8005458:	08005704 	.word	0x08005704
 800545c:	0800570a 	.word	0x0800570a
 8005460:	0800570e 	.word	0x0800570e
 8005464:	08003609 	.word	0x08003609
 8005468:	080051c9 	.word	0x080051c9

0800546c <_sbrk_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	2300      	movs	r3, #0
 8005470:	4c05      	ldr	r4, [pc, #20]	; (8005488 <_sbrk_r+0x1c>)
 8005472:	4605      	mov	r5, r0
 8005474:	4608      	mov	r0, r1
 8005476:	6023      	str	r3, [r4, #0]
 8005478:	f7fb fe00 	bl	800107c <_sbrk>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_sbrk_r+0x1a>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	b103      	cbz	r3, 8005486 <_sbrk_r+0x1a>
 8005484:	602b      	str	r3, [r5, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	20000278 	.word	0x20000278

0800548c <__ascii_mbtowc>:
 800548c:	b082      	sub	sp, #8
 800548e:	b901      	cbnz	r1, 8005492 <__ascii_mbtowc+0x6>
 8005490:	a901      	add	r1, sp, #4
 8005492:	b142      	cbz	r2, 80054a6 <__ascii_mbtowc+0x1a>
 8005494:	b14b      	cbz	r3, 80054aa <__ascii_mbtowc+0x1e>
 8005496:	7813      	ldrb	r3, [r2, #0]
 8005498:	600b      	str	r3, [r1, #0]
 800549a:	7812      	ldrb	r2, [r2, #0]
 800549c:	1c10      	adds	r0, r2, #0
 800549e:	bf18      	it	ne
 80054a0:	2001      	movne	r0, #1
 80054a2:	b002      	add	sp, #8
 80054a4:	4770      	bx	lr
 80054a6:	4610      	mov	r0, r2
 80054a8:	e7fb      	b.n	80054a2 <__ascii_mbtowc+0x16>
 80054aa:	f06f 0001 	mvn.w	r0, #1
 80054ae:	e7f8      	b.n	80054a2 <__ascii_mbtowc+0x16>

080054b0 <memmove>:
 80054b0:	4288      	cmp	r0, r1
 80054b2:	b510      	push	{r4, lr}
 80054b4:	eb01 0302 	add.w	r3, r1, r2
 80054b8:	d807      	bhi.n	80054ca <memmove+0x1a>
 80054ba:	1e42      	subs	r2, r0, #1
 80054bc:	4299      	cmp	r1, r3
 80054be:	d00a      	beq.n	80054d6 <memmove+0x26>
 80054c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80054c8:	e7f8      	b.n	80054bc <memmove+0xc>
 80054ca:	4283      	cmp	r3, r0
 80054cc:	d9f5      	bls.n	80054ba <memmove+0xa>
 80054ce:	1881      	adds	r1, r0, r2
 80054d0:	1ad2      	subs	r2, r2, r3
 80054d2:	42d3      	cmn	r3, r2
 80054d4:	d100      	bne.n	80054d8 <memmove+0x28>
 80054d6:	bd10      	pop	{r4, pc}
 80054d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80054e0:	e7f7      	b.n	80054d2 <memmove+0x22>

080054e2 <__malloc_lock>:
 80054e2:	4770      	bx	lr

080054e4 <__malloc_unlock>:
 80054e4:	4770      	bx	lr

080054e6 <_realloc_r>:
 80054e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e8:	4607      	mov	r7, r0
 80054ea:	4614      	mov	r4, r2
 80054ec:	460e      	mov	r6, r1
 80054ee:	b921      	cbnz	r1, 80054fa <_realloc_r+0x14>
 80054f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054f4:	4611      	mov	r1, r2
 80054f6:	f7ff be0d 	b.w	8005114 <_malloc_r>
 80054fa:	b922      	cbnz	r2, 8005506 <_realloc_r+0x20>
 80054fc:	f7ff fdbe 	bl	800507c <_free_r>
 8005500:	4625      	mov	r5, r4
 8005502:	4628      	mov	r0, r5
 8005504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005506:	f000 f821 	bl	800554c <_malloc_usable_size_r>
 800550a:	42a0      	cmp	r0, r4
 800550c:	d20f      	bcs.n	800552e <_realloc_r+0x48>
 800550e:	4621      	mov	r1, r4
 8005510:	4638      	mov	r0, r7
 8005512:	f7ff fdff 	bl	8005114 <_malloc_r>
 8005516:	4605      	mov	r5, r0
 8005518:	2800      	cmp	r0, #0
 800551a:	d0f2      	beq.n	8005502 <_realloc_r+0x1c>
 800551c:	4631      	mov	r1, r6
 800551e:	4622      	mov	r2, r4
 8005520:	f7ff fab6 	bl	8004a90 <memcpy>
 8005524:	4631      	mov	r1, r6
 8005526:	4638      	mov	r0, r7
 8005528:	f7ff fda8 	bl	800507c <_free_r>
 800552c:	e7e9      	b.n	8005502 <_realloc_r+0x1c>
 800552e:	4635      	mov	r5, r6
 8005530:	e7e7      	b.n	8005502 <_realloc_r+0x1c>

08005532 <__ascii_wctomb>:
 8005532:	b149      	cbz	r1, 8005548 <__ascii_wctomb+0x16>
 8005534:	2aff      	cmp	r2, #255	; 0xff
 8005536:	bf8b      	itete	hi
 8005538:	238a      	movhi	r3, #138	; 0x8a
 800553a:	700a      	strbls	r2, [r1, #0]
 800553c:	6003      	strhi	r3, [r0, #0]
 800553e:	2001      	movls	r0, #1
 8005540:	bf88      	it	hi
 8005542:	f04f 30ff 	movhi.w	r0, #4294967295
 8005546:	4770      	bx	lr
 8005548:	4608      	mov	r0, r1
 800554a:	4770      	bx	lr

0800554c <_malloc_usable_size_r>:
 800554c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005550:	1f18      	subs	r0, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfbc      	itt	lt
 8005556:	580b      	ldrlt	r3, [r1, r0]
 8005558:	18c0      	addlt	r0, r0, r3
 800555a:	4770      	bx	lr

0800555c <_init>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr

08005568 <_fini>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr
